@file:Suppress("UNUSED_VARIABLE", "UNUSED_EXPRESSION", "UNUSED_PARAMETER", "REDUNDANT_NULLABLE")

package platform.CoreServices

import kotlinx.cinterop.* 

final class AEArrayData public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val kAEDataArray: kotlinx.cinterop.CArrayPointer<platform.darwin.SInt16Var /* = kotlinx.cinterop.ShortVarOf<platform.darwin.SInt16 /* = kotlin.Short */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<platform.darwin.SInt16 /* = kotlin.Short */>> */
        get() = TODO()

    final val kAEDescArray: kotlinx.cinterop.CArrayPointer<platform.CoreServices.AEDesc> /* = kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc> */
        get() = TODO()

    final val kAEHandleArray: kotlinx.cinterop.CArrayPointer<platform.darwin.HandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Handle /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */> */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVarOf<platform.darwin.Handle /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */> */>> */
        get() = TODO()

    final val kAEKeyDescArray: kotlinx.cinterop.CArrayPointer<platform.CoreServices.AEKeyDesc> /* = kotlinx.cinterop.CPointer<platform.CoreServices.AEKeyDesc> */
        get() = TODO()

    final val kAEPackedArray: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class AEBuildError public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var fError: platform.CoreServices.AEBuildErrorCode /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.AEBuildErrorCode /* = kotlin.UInt */) = TODO()

    final var fErrorPos: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class AEDesc public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var dataHandle: platform.CoreServices.AEDataStorage? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AEDataStorageTypeVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AEDataStorageType /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEDataStorageType> */> */>? */
        get() = TODO()
        set(value: platform.CoreServices.AEDataStorage? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AEDataStorageTypeVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AEDataStorageType /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEDataStorageType> */> */>? */) = TODO()

    final var descriptorType: platform.CoreServices.DescType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.DescType /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class AEKeyDesc public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val descContent: platform.CoreServices.AEDesc
        get() = TODO()

    final var descKey: platform.CoreServices.AEKeyword /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.AEKeyword /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class AERemoteProcessResolverContext public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var copyDescription: platform.CoreFoundation.CFAllocatorCopyDescriptionCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */>>? */
        get() = TODO()
        set(value: platform.CoreFoundation.CFAllocatorCopyDescriptionCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */>>? */) = TODO()

    final var info: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var release: platform.CoreFoundation.CFAllocatorReleaseCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.CoreFoundation.CFAllocatorReleaseCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) = TODO()

    final var retain: platform.CoreFoundation.CFAllocatorRetainCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */
        get() = TODO()
        set(value: platform.CoreFoundation.CFAllocatorRetainCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */) = TODO()

    final var version: platform.CoreFoundation.CFIndex /* = kotlin.Long */
        get() = TODO()
        set(value: platform.CoreFoundation.CFIndex /* = kotlin.Long */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class AFPAlternateAddress public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var fAddressCount: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final val fAddressList: kotlinx.cinterop.CArrayPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */>> */
        get() = TODO()

    final var fVersion: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class AFPTagData public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val fData: kotlinx.cinterop.CArrayPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */>> */
        get() = TODO()

    final var fLength: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var fType: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class AFPVolMountInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val AFPData: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var flags: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var length: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var media: platform.CoreServices.VolumeType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.VolumeType /* = kotlin.UInt */) = TODO()

    final var nbpCount: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    final var nbpInterval: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    final var serverNameOffset: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var uamType: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var userNameOffset: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var userPasswordOffset: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var volNameOffset: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var volPasswordOffset: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var zoneNameOffset: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class AFPXVolMountInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val AFPData: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var alternateAddressOffset: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var extendedFlags: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var flags: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var length: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var media: platform.CoreServices.VolumeType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.VolumeType /* = kotlin.UInt */) = TODO()

    final var nbpCount: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    final var nbpInterval: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    final var serverNameOffset: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var uamNameOffset: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var uamType: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var userNameOffset: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var userPasswordOffset: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var volNameOffset: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var volPasswordOffset: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var zoneNameOffset: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class AIFFLoop public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var beginLoop: platform.CoreServices.MarkerIdType /* = kotlin.Short */
        get() = TODO()
        set(value: platform.CoreServices.MarkerIdType /* = kotlin.Short */) = TODO()

    final var endLoop: platform.CoreServices.MarkerIdType /* = kotlin.Short */
        get() = TODO()
        set(value: platform.CoreServices.MarkerIdType /* = kotlin.Short */) = TODO()

    final var playMode: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class AVLTreeStruct public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val privateStuff: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ULongVar /* = kotlinx.cinterop.ULongVarOf<kotlin.ULong> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ULongVarOf<kotlin.ULong>> */
        get() = TODO()

    final var signature: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class AliasRecord public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val hidden: kotlinx.cinterop.CArrayPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ApplicationSpecificChunk public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var applicationSignature: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var ckID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var ckSize: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final val data: kotlinx.cinterop.CArrayPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class AudioRecordingChunk public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val AESChannelStatus: kotlinx.cinterop.CArrayPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */>> */
        get() = TODO()

    final var ckID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var ckSize: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class BigEndianFixed public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var bigEndianValue: platform.darwin.Fixed /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.Fixed /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class BigEndianLong public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var bigEndianValue: kotlin.Long
        get() = TODO()
        set(value: kotlin.Long) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class BigEndianOSType public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var bigEndianValue: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class BigEndianShort public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var bigEndianValue: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class BigEndianUInt32 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var bigEndianValue: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class BigEndianUnsignedFixed public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var bigEndianValue: platform.darwin.UnsignedFixed /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UnsignedFixed /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class BigEndianUnsignedLong public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var bigEndianValue: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class BigEndianUnsignedShort public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var bigEndianValue: kotlin.UShort
        get() = TODO()
        set(value: kotlin.UShort) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class CSIdentityClientContext public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var copyDescription: platform.CoreFoundation.CFAllocatorCopyDescriptionCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */>>? */
        get() = TODO()
        set(value: platform.CoreFoundation.CFAllocatorCopyDescriptionCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */>>? */) = TODO()

    final var info: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var release: platform.CoreFoundation.CFAllocatorReleaseCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.CoreFoundation.CFAllocatorReleaseCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) = TODO()

    final var retain: platform.CoreFoundation.CFAllocatorRetainCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */
        get() = TODO()
        set(value: platform.CoreFoundation.CFAllocatorRetainCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */) = TODO()

    final var statusUpdated: platform.CoreServices.CSIdentityStatusUpdatedCallback? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */, platform.CoreFoundation.CFIndex /* = kotlin.Long */, platform.CoreFoundation.CFErrorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFError>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.CoreServices.CSIdentityStatusUpdatedCallback? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */, platform.CoreFoundation.CFIndex /* = kotlin.Long */, platform.CoreFoundation.CFErrorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFError>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) = TODO()

    final var version: platform.CoreFoundation.CFIndex /* = kotlin.Long */
        get() = TODO()
        set(value: platform.CoreFoundation.CFIndex /* = kotlin.Long */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class CSIdentityQueryClientContext public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var copyInfoDescription: platform.CoreFoundation.CFAllocatorCopyDescriptionCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */>>? */
        get() = TODO()
        set(value: platform.CoreFoundation.CFAllocatorCopyDescriptionCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */>>? */) = TODO()

    final var info: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var receiveEvent: platform.CoreServices.CSIdentityQueryReceiveEventCallback? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.CSIdentityQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityQuery>? */, platform.CoreServices.CSIdentityQueryEvent /* = kotlin.Long */, platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */, platform.CoreFoundation.CFErrorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFError>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.CoreServices.CSIdentityQueryReceiveEventCallback? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.CSIdentityQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityQuery>? */, platform.CoreServices.CSIdentityQueryEvent /* = kotlin.Long */, platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */, platform.CoreFoundation.CFErrorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFError>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) = TODO()

    final var releaseInfo: platform.CoreFoundation.CFAllocatorReleaseCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.CoreFoundation.CFAllocatorReleaseCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) = TODO()

    final var retainInfo: platform.CoreFoundation.CFAllocatorRetainCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */
        get() = TODO()
        set(value: platform.CoreFoundation.CFAllocatorRetainCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */) = TODO()

    final var version: platform.CoreFoundation.CFIndex /* = kotlin.Long */
        get() = TODO()
        set(value: platform.CoreFoundation.CFIndex /* = kotlin.Long */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class CatPositionRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var initialize: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final val priv: kotlinx.cinterop.CArrayPointer<platform.darwin.SInt16Var /* = kotlinx.cinterop.ShortVarOf<platform.darwin.SInt16 /* = kotlin.Short */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<platform.darwin.SInt16 /* = kotlin.Short */>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ChunkHeader public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var ckID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var ckSize: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class Comment public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var count: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var marker: platform.CoreServices.MarkerIdType /* = kotlin.Short */
        get() = TODO()
        set(value: platform.CoreServices.MarkerIdType /* = kotlin.Short */) = TODO()

    final val text: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var timeStamp: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class CommentsChunk public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var ckID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var ckSize: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final val comments: kotlinx.cinterop.CArrayPointer<platform.CoreServices.Comment> /* = kotlinx.cinterop.CPointer<platform.CoreServices.Comment> */
        get() = TODO()

    final var numComments: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class CommonChunk public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var ckID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var ckSize: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var numChannels: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var numSampleFrames: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final val sampleRate: platform.darwin.extended80 /* = platform.darwin.Float80 */
        get() = TODO()

    final var sampleSize: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ComponentAliasResource public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val aliasCD: platform.CoreServices.ComponentDescription
        get() = TODO()

    final val cr: platform.CoreServices.ComponentResource
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ComponentDescription public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var componentFlags: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var componentFlagsMask: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var componentManufacturer: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var componentSubType: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var componentType: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ComponentInstanceRecord public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val data: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.LongVar /* = kotlinx.cinterop.LongVarOf<kotlin.Long> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVarOf<kotlin.Long>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ComponentMPWorkFunctionHeaderRecord public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var headerSize: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var isRunning: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var processorCount: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var recordSize: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var unused: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var workFlags: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ComponentParameters public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var flags: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var padding: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var paramSize: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final val params: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.LongVar /* = kotlinx.cinterop.LongVarOf<kotlin.Long> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVarOf<kotlin.Long>> */
        get() = TODO()

    final var what: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ComponentPlatformInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val component: platform.CoreServices.ResourceSpec
        get() = TODO()

    final var componentFlags: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var platformType: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ComponentPlatformInfoArray public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var count: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final val platformArray: kotlinx.cinterop.CArrayPointer<platform.CoreServices.ComponentPlatformInfo> /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentPlatformInfo> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ComponentRecord public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val data: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.LongVar /* = kotlinx.cinterop.LongVarOf<kotlin.Long> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVarOf<kotlin.Long>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ComponentResource public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val cd: platform.CoreServices.ComponentDescription
        get() = TODO()

    final val component: platform.CoreServices.ResourceSpec
        get() = TODO()

    final val componentIcon: platform.CoreServices.ResourceSpec
        get() = TODO()

    final val componentInfo: platform.CoreServices.ResourceSpec
        get() = TODO()

    final val componentName: platform.CoreServices.ResourceSpec
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ComponentResourceExtension public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var componentIconFamily: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var componentRegisterFlags: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var componentVersion: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ContainerChunk public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var ckID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var ckSize: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var formType: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class CustomBadgeResource public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var customBadgeCreator: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var customBadgeResourceID: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var customBadgeType: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var overrideCreator: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var overrideType: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var version: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var windowBadgeCreator: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var windowBadgeType: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class DInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var frFlags: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final val frLocation: platform.darwin.Point
        get() = TODO()

    final val frRect: platform.darwin.Rect
        get() = TODO()

    final var frView: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class DXInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var frComment: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var frOpenChain: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var frPutAway: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var frScript: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    final val frScroll: platform.darwin.Point
        get() = TODO()

    final var frXFlags: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class DateCacheRecord public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val hidden: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ShortVar /* = kotlinx.cinterop.ShortVarOf<kotlin.Short> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<kotlin.Short>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class DateTimeRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var day: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var dayOfWeek: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var hour: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var minute: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var month: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var second: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var year: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class DeferredTask public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var dtAddr: platform.CoreServices.DeferredTaskUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Long) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.CoreServices.DeferredTaskUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Long) -> kotlin.Unit>>? */) = TODO()

    final var dtFlags: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var dtParam: kotlin.Long
        get() = TODO()
        set(value: kotlin.Long) = TODO()

    final var dtReserved: kotlin.Long
        get() = TODO()
        set(value: kotlin.Long) = TODO()

    final var qLink: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */
        get() = TODO()
        set(value: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */) = TODO()

    final var qType: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ExceptionInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var memoryInfo: kotlinx.cinterop.CPointer<platform.CoreServices.MemoryExceptionInformation>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.MemoryExceptionInformation>?) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ExceptionInformation public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var FPUImage: kotlinx.cinterop.CPointer<platform.CoreServices.FPUInformation /* = platform.CoreServices.FPUInformationIntel64 */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FPUInformation /* = platform.CoreServices.FPUInformationIntel64 */>?) = TODO()

    final val info: platform.CoreServices.ExceptionInfo
        get() = TODO()

    final var machineState: kotlinx.cinterop.CPointer<platform.CoreServices.MachineInformation /* = platform.CoreServices.MachineInformationIntel64 */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.MachineInformation /* = platform.CoreServices.MachineInformationIntel64 */>?) = TODO()

    final var registerImage: kotlinx.cinterop.CPointer<platform.CoreServices.RegisterInformation /* = platform.CoreServices.RegisterInformationIntel64 */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.RegisterInformation /* = platform.CoreServices.RegisterInformationIntel64 */>?) = TODO()

    final var theKind: platform.CoreServices.ExceptionKind /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.CoreServices.ExceptionKind /* = kotlin.ULong */) = TODO()

    final var vectorImage: kotlinx.cinterop.CPointer<platform.CoreServices.VectorInformation /* = platform.CoreServices.VectorInformationIntel64 */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.VectorInformation /* = platform.CoreServices.VectorInformationIntel64 */>?) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ExceptionInformationPowerPC public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var FPUImage: kotlinx.cinterop.CPointer<platform.CoreServices.FPUInformationPowerPC>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FPUInformationPowerPC>?) = TODO()

    final val info: platform.CoreServices.ExceptionInfo
        get() = TODO()

    final var machineState: kotlinx.cinterop.CPointer<platform.CoreServices.MachineInformationPowerPC>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.MachineInformationPowerPC>?) = TODO()

    final var registerImage: kotlinx.cinterop.CPointer<platform.CoreServices.RegisterInformationPowerPC>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.RegisterInformationPowerPC>?) = TODO()

    final var theKind: platform.CoreServices.ExceptionKind /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.CoreServices.ExceptionKind /* = kotlin.ULong */) = TODO()

    final var vectorImage: kotlinx.cinterop.CPointer<platform.CoreServices.VectorInformationPowerPC>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.VectorInformationPowerPC>?) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ExtCommonChunk public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var ckID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var ckSize: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final val compressionName: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var compressionType: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var numChannels: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var numSampleFrames: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final val sampleRate: platform.darwin.extended80 /* = platform.darwin.Float80 */
        get() = TODO()

    final var sampleSize: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ExtComponentResource public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val cd: platform.CoreServices.ComponentDescription
        get() = TODO()

    final val component: platform.CoreServices.ResourceSpec
        get() = TODO()

    final val componentIcon: platform.CoreServices.ResourceSpec
        get() = TODO()

    final var componentIconFamily: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final val componentInfo: platform.CoreServices.ResourceSpec
        get() = TODO()

    final val componentName: platform.CoreServices.ResourceSpec
        get() = TODO()

    final var componentRegisterFlags: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var componentVersion: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var count: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final val platformArray: kotlinx.cinterop.CArrayPointer<platform.CoreServices.ComponentPlatformInfo> /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentPlatformInfo> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ExtendedFileInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var extendedFinderFlags: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var putAwayFolderID: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final val reserved1: kotlinx.cinterop.CArrayPointer<platform.darwin.SInt16Var /* = kotlinx.cinterop.ShortVarOf<platform.darwin.SInt16 /* = kotlin.Short */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<platform.darwin.SInt16 /* = kotlin.Short */>> */
        get() = TODO()

    final var reserved2: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ExtendedFolderInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var extendedFinderFlags: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var putAwayFolderID: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var reserved1: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var reserved2: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final val scrollPosition: platform.darwin.Point
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var fdCreator: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var fdFlags: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var fdFldr: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final val fdLocation: platform.darwin.Point
        get() = TODO()

    final var fdType: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FPUInformationIntel64 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var Control: kotlin.UShort
        get() = TODO()
        set(value: kotlin.UShort) = TODO()

    final var DP: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var DS: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var IP: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var Opcode: kotlin.UShort
        get() = TODO()
        set(value: kotlin.UShort) = TODO()

    final val Registers: platform.CoreServices.FPRegIntel /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>> */
        get() = TODO()

    final var Status: kotlin.UShort
        get() = TODO()
        set(value: kotlin.UShort) = TODO()

    final var Tag: kotlin.UShort
        get() = TODO()
        set(value: kotlin.UShort) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FPUInformationPowerPC public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var FPSCR: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final val Registers: kotlinx.cinterop.CArrayPointer<platform.darwin.UnsignedWide> /* = kotlinx.cinterop.CPointer<platform.darwin.UnsignedWide> */
        get() = TODO()

    final var Reserved: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FSAliasInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var fileCreator: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var fileType: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var filesystemID: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var isDirectory: kotlin.Boolean
        get() = TODO()
        set(value: kotlin.Boolean) = TODO()

    final var nodeID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var parentDirID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var signature: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final val targetCreateDate: platform.CoreServices.UTCDateTime
        get() = TODO()

    final val volumeCreateDate: platform.CoreServices.UTCDateTime
        get() = TODO()

    final var volumeHasPersistentFileIDs: kotlin.Boolean
        get() = TODO()
        set(value: kotlin.Boolean) = TODO()

    final var volumeIsAutomounted: kotlin.Boolean
        get() = TODO()
        set(value: kotlin.Boolean) = TODO()

    final var volumeIsBootVolume: kotlin.Boolean
        get() = TODO()
        set(value: kotlin.Boolean) = TODO()

    final var volumeIsEjectable: kotlin.Boolean
        get() = TODO()
        set(value: kotlin.Boolean) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FSCatalogBulkParam public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var actualItems: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var catalogInfo: kotlinx.cinterop.CPointer<platform.CoreServices.FSCatalogInfo>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSCatalogInfo>?) = TODO()

    final var container: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?) = TODO()

    final var containerChanged: kotlin.Boolean
        get() = TODO()
        set(value: kotlin.Boolean) = TODO()

    final var ioCmdAddr: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */
        get() = TODO()
        set(value: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */) = TODO()

    final var ioCompletion: platform.CoreServices.IOCompletionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ParmBlkPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.CoreServices.IOCompletionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ParmBlkPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) = TODO()

    final var ioResult: platform.darwin.OSErr /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.OSErr /* = kotlin.Short */) = TODO()

    final var ioTrap: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var iterator: platform.CoreServices.FSIterator? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSIterator>? */
        get() = TODO()
        set(value: platform.CoreServices.FSIterator? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSIterator>? */) = TODO()

    final var iteratorFlags: platform.CoreServices.FSIteratorFlags /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.FSIteratorFlags /* = kotlin.UInt */) = TODO()

    final var maximumItems: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var names: kotlinx.cinterop.CPointer<platform.osx.HFSUniStr255>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.osx.HFSUniStr255>?) = TODO()

    final var qLink: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */
        get() = TODO()
        set(value: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */) = TODO()

    final var qType: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var refs: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?) = TODO()

    final var reserved: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var searchParams: kotlinx.cinterop.CPointer<platform.CoreServices.FSSearchParams>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSSearchParams>?) = TODO()

    final var specs: platform.CoreServices.FSSpecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSSpec>? */
        get() = TODO()
        set(value: platform.CoreServices.FSSpecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSSpec>? */) = TODO()

    final var whichInfo: platform.CoreServices.FSCatalogInfoBitmap /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.FSCatalogInfoBitmap /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FSCatalogInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val accessDate: platform.CoreServices.UTCDateTime
        get() = TODO()

    final val attributeModDate: platform.CoreServices.UTCDateTime
        get() = TODO()

    final val backupDate: platform.CoreServices.UTCDateTime
        get() = TODO()

    final val contentModDate: platform.CoreServices.UTCDateTime
        get() = TODO()

    final val createDate: platform.CoreServices.UTCDateTime
        get() = TODO()

    final var dataLogicalSize: platform.darwin.UInt64 /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.UInt64 /* = kotlin.ULong */) = TODO()

    final var dataPhysicalSize: platform.darwin.UInt64 /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.UInt64 /* = kotlin.ULong */) = TODO()

    final val extFinderInfo: kotlinx.cinterop.CArrayPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */>> */
        get() = TODO()

    final val finderInfo: kotlinx.cinterop.CArrayPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */>> */
        get() = TODO()

    final var nodeFlags: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var nodeID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var parentDirID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final val permissions: platform.CoreServices.FSPermissionInfo
        get() = TODO()

    final var reserved1: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var reserved2: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var rsrcLogicalSize: platform.darwin.UInt64 /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.UInt64 /* = kotlin.ULong */) = TODO()

    final var rsrcPhysicalSize: platform.darwin.UInt64 /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.UInt64 /* = kotlin.ULong */) = TODO()

    final var sharingFlags: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var textEncodingHint: platform.CoreServices.TextEncoding /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.TextEncoding /* = kotlin.UInt */) = TODO()

    final var userPrivileges: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var valence: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var volume: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */
        get() = TODO()
        set(value: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FSEventStreamContext public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var copyDescription: platform.CoreFoundation.CFAllocatorCopyDescriptionCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */>>? */
        get() = TODO()
        set(value: platform.CoreFoundation.CFAllocatorCopyDescriptionCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */>>? */) = TODO()

    final var info: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var release: platform.CoreFoundation.CFAllocatorReleaseCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.CoreFoundation.CFAllocatorReleaseCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) = TODO()

    final var retain: platform.CoreFoundation.CFAllocatorRetainCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */
        get() = TODO()
        set(value: platform.CoreFoundation.CFAllocatorRetainCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */) = TODO()

    final var version: platform.CoreFoundation.CFIndex /* = kotlin.Long */
        get() = TODO()
        set(value: platform.CoreFoundation.CFIndex /* = kotlin.Long */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FSFileOperationClientContext public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var copyDescription: platform.CoreFoundation.CFAllocatorCopyDescriptionCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */>>? */
        get() = TODO()
        set(value: platform.CoreFoundation.CFAllocatorCopyDescriptionCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */>>? */) = TODO()

    final var info: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var release: platform.CoreFoundation.CFAllocatorReleaseCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.CoreFoundation.CFAllocatorReleaseCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) = TODO()

    final var retain: platform.CoreFoundation.CFAllocatorRetainCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */
        get() = TODO()
        set(value: platform.CoreFoundation.CFAllocatorRetainCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */) = TODO()

    final var version: platform.CoreFoundation.CFIndex /* = kotlin.Long */
        get() = TODO()
        set(value: platform.CoreFoundation.CFIndex /* = kotlin.Long */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FSForkCBInfoParam public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var actualRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */
        get() = TODO()
        set(value: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */) = TODO()

    final var desiredRefNum: platform.CoreServices.FSIORefNum /* = kotlin.Int */
        get() = TODO()
        set(value: platform.CoreServices.FSIORefNum /* = kotlin.Int */) = TODO()

    final var forkInfo: kotlinx.cinterop.CPointer<platform.CoreServices.FSForkInfo>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSForkInfo>?) = TODO()

    final var forkName: kotlinx.cinterop.CPointer<platform.osx.HFSUniStr255>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.osx.HFSUniStr255>?) = TODO()

    final var ioCmdAddr: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */
        get() = TODO()
        set(value: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */) = TODO()

    final var ioCompletion: platform.CoreServices.IOCompletionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ParmBlkPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.CoreServices.IOCompletionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ParmBlkPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) = TODO()

    final var ioResult: platform.darwin.OSErr /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.OSErr /* = kotlin.Short */) = TODO()

    final var ioTrap: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var iterator: platform.CoreServices.FSIORefNum /* = kotlin.Int */
        get() = TODO()
        set(value: platform.CoreServices.FSIORefNum /* = kotlin.Int */) = TODO()

    final var qLink: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */
        get() = TODO()
        set(value: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */) = TODO()

    final var qType: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var ref: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?) = TODO()

    final var volumeRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */
        get() = TODO()
        set(value: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FSForkIOParam public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var actualCount: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var allocationAmount: platform.darwin.UInt64 /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.UInt64 /* = kotlin.ULong */) = TODO()

    final var allocationFlags: platform.CoreServices.FSAllocationFlags /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.CoreServices.FSAllocationFlags /* = kotlin.UShort */) = TODO()

    final var buffer: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */
        get() = TODO()
        set(value: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */) = TODO()

    final val forkIterator: platform.CoreServices.CatPositionRec
        get() = TODO()

    final var forkName: kotlinx.cinterop.CPointer<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?) = TODO()

    final var forkNameLength: platform.darwin.UniCharCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.UniCharCount /* = kotlin.ULong */) = TODO()

    final var forkRefNum: platform.CoreServices.FSIORefNum /* = kotlin.Int */
        get() = TODO()
        set(value: platform.CoreServices.FSIORefNum /* = kotlin.Int */) = TODO()

    final var ioCmdAddr: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */
        get() = TODO()
        set(value: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */) = TODO()

    final var ioCompletion: platform.CoreServices.IOCompletionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ParmBlkPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.CoreServices.IOCompletionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ParmBlkPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) = TODO()

    final var ioResult: platform.darwin.OSErr /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.OSErr /* = kotlin.Short */) = TODO()

    final var ioTrap: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var outForkName: kotlinx.cinterop.CPointer<platform.osx.HFSUniStr255>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.osx.HFSUniStr255>?) = TODO()

    final var permissions: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    final var positionMode: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var positionOffset: platform.darwin.SInt64 /* = kotlin.Long */
        get() = TODO()
        set(value: platform.darwin.SInt64 /* = kotlin.Long */) = TODO()

    final var qLink: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */
        get() = TODO()
        set(value: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */) = TODO()

    final var qType: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var ref: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?) = TODO()

    final var requestCount: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var reserved1: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var reserved2: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var reserved3: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FSForkInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var currentPosition: platform.darwin.UInt64 /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.UInt64 /* = kotlin.ULong */) = TODO()

    final var flags: platform.CoreServices.FSForkInfoFlags /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.CoreServices.FSForkInfoFlags /* = kotlin.UByte */) = TODO()

    final var forkID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var logicalEOF: platform.darwin.UInt64 /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.UInt64 /* = kotlin.ULong */) = TODO()

    final var nodeID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var permissions: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    final var physicalEOF: platform.darwin.UInt64 /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.UInt64 /* = kotlin.ULong */) = TODO()

    final var process: platform.darwin.UInt64 /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.UInt64 /* = kotlin.ULong */) = TODO()

    final var reserved2: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var volume: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */
        get() = TODO()
        set(value: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FSPermissionInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var fileSec: platform.CoreServices.FSFileSecurityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileSecurity>? */
        get() = TODO()
        set(value: platform.CoreServices.FSFileSecurityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileSecurity>? */) = TODO()

    final var groupID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var mode: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var reserved1: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var userAccess: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var userID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FSRangeLockParam public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var forkRefNum: platform.CoreServices.FSIORefNum /* = kotlin.Int */
        get() = TODO()
        set(value: platform.CoreServices.FSIORefNum /* = kotlin.Int */) = TODO()

    final var ioCmdAddr: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */
        get() = TODO()
        set(value: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */) = TODO()

    final var ioCompletion: platform.CoreServices.IOCompletionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ParmBlkPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.CoreServices.IOCompletionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ParmBlkPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) = TODO()

    final var ioResult: platform.darwin.OSErr /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.OSErr /* = kotlin.Short */) = TODO()

    final var ioTrap: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var positionMode: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var positionOffset: platform.darwin.SInt64 /* = kotlin.Long */
        get() = TODO()
        set(value: platform.darwin.SInt64 /* = kotlin.Long */) = TODO()

    final var qLink: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */
        get() = TODO()
        set(value: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */) = TODO()

    final var qType: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var rangeStart: platform.darwin.UInt64 /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.UInt64 /* = kotlin.ULong */) = TODO()

    final var requestCount: platform.darwin.UInt64 /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.UInt64 /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FSRef public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val hidden: kotlinx.cinterop.CArrayPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FSRefForkIOParam public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var catInfo: kotlinx.cinterop.CPointer<platform.CoreServices.FSCatalogInfo>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSCatalogInfo>?) = TODO()

    final var forkName: kotlinx.cinterop.CPointer<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?) = TODO()

    final var forkNameLength: platform.darwin.UniCharCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.UniCharCount /* = kotlin.ULong */) = TODO()

    final var forkRefNum: platform.CoreServices.FSIORefNum /* = kotlin.Int */
        get() = TODO()
        set(value: platform.CoreServices.FSIORefNum /* = kotlin.Int */) = TODO()

    final var ioCmdAddr: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */
        get() = TODO()
        set(value: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */) = TODO()

    final var ioCompletion: platform.CoreServices.IOCompletionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ParmBlkPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.CoreServices.IOCompletionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ParmBlkPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) = TODO()

    final var ioResult: platform.darwin.OSErr /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.OSErr /* = kotlin.Short */) = TODO()

    final var ioTrap: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var name: kotlinx.cinterop.CPointer<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?) = TODO()

    final var nameLength: platform.darwin.UniCharCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.UniCharCount /* = kotlin.ULong */) = TODO()

    final var newRef: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?) = TODO()

    final var parentRef: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?) = TODO()

    final var permissions: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    final var qLink: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */
        get() = TODO()
        set(value: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */) = TODO()

    final var qType: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var reserved1: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var whichInfo: platform.CoreServices.FSCatalogInfoBitmap /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.FSCatalogInfoBitmap /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FSRefParam public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var catInfo: kotlinx.cinterop.CPointer<platform.CoreServices.FSCatalogInfo>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSCatalogInfo>?) = TODO()

    final var ioCmdAddr: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */
        get() = TODO()
        set(value: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */) = TODO()

    final var ioCompletion: platform.CoreServices.IOCompletionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ParmBlkPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.CoreServices.IOCompletionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ParmBlkPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) = TODO()

    final var ioDirID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var ioNamePtr: platform.darwin.ConstStringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */
        get() = TODO()
        set(value: platform.darwin.ConstStringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */) = TODO()

    final var ioResult: platform.darwin.OSErr /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.OSErr /* = kotlin.Short */) = TODO()

    final var ioTrap: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var ioVRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */
        get() = TODO()
        set(value: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */) = TODO()

    final var name: kotlinx.cinterop.CPointer<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?) = TODO()

    final var nameLength: platform.darwin.UniCharCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.UniCharCount /* = kotlin.ULong */) = TODO()

    final var newRef: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?) = TODO()

    final var outName: kotlinx.cinterop.CPointer<platform.osx.HFSUniStr255>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.osx.HFSUniStr255>?) = TODO()

    final var parentRef: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?) = TODO()

    final var qLink: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */
        get() = TODO()
        set(value: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */) = TODO()

    final var qType: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var ref: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?) = TODO()

    final var reserved1: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var reserved2: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var reserved3: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var spec: platform.CoreServices.FSSpecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSSpec>? */
        get() = TODO()
        set(value: platform.CoreServices.FSSpecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSSpec>? */) = TODO()

    final var textEncodingHint: platform.CoreServices.TextEncoding /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.TextEncoding /* = kotlin.UInt */) = TODO()

    final var whichInfo: platform.CoreServices.FSCatalogInfoBitmap /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.FSCatalogInfoBitmap /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FSSearchParams public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var searchBits: platform.darwin.OptionBits /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OptionBits /* = kotlin.UInt */) = TODO()

    final var searchInfo1: kotlinx.cinterop.CPointer<platform.CoreServices.FSCatalogInfo>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSCatalogInfo>?) = TODO()

    final var searchInfo2: kotlinx.cinterop.CPointer<platform.CoreServices.FSCatalogInfo>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSCatalogInfo>?) = TODO()

    final var searchName: kotlinx.cinterop.CPointer<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?) = TODO()

    final var searchNameLength: platform.darwin.UniCharCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.UniCharCount /* = kotlin.ULong */) = TODO()

    final var searchTime: platform.darwin.Duration /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.Duration /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FSSpec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val hidden: kotlinx.cinterop.CArrayPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FSVolumeInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val backupDate: platform.CoreServices.UTCDateTime
        get() = TODO()

    final var blockSize: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final val checkedDate: platform.CoreServices.UTCDateTime
        get() = TODO()

    final val createDate: platform.CoreServices.UTCDateTime
        get() = TODO()

    final var dataClumpSize: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var driveNumber: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var driverRefNum: platform.CoreServices.FSIORefNum /* = kotlin.Int */
        get() = TODO()
        set(value: platform.CoreServices.FSIORefNum /* = kotlin.Int */) = TODO()

    final var fileCount: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var filesystemID: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final val finderInfo: kotlinx.cinterop.CArrayPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */>> */
        get() = TODO()

    final var flags: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var folderCount: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var freeBlocks: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var freeBytes: platform.darwin.UInt64 /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.UInt64 /* = kotlin.ULong */) = TODO()

    final val modifyDate: platform.CoreServices.UTCDateTime
        get() = TODO()

    final var nextAllocation: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var nextCatalogID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var rsrcClumpSize: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var signature: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var totalBlocks: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var totalBytes: platform.darwin.UInt64 /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.UInt64 /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FSVolumeInfoParam public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var ioCmdAddr: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */
        get() = TODO()
        set(value: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */) = TODO()

    final var ioCompletion: platform.CoreServices.IOCompletionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ParmBlkPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.CoreServices.IOCompletionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ParmBlkPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) = TODO()

    final var ioNamePtr: platform.darwin.StringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */
        get() = TODO()
        set(value: platform.darwin.StringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */) = TODO()

    final var ioResult: platform.darwin.OSErr /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.OSErr /* = kotlin.Short */) = TODO()

    final var ioTrap: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var ioVRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */
        get() = TODO()
        set(value: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */) = TODO()

    final var qLink: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */
        get() = TODO()
        set(value: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */) = TODO()

    final var qType: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var ref: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?) = TODO()

    final var volumeIndex: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var volumeInfo: kotlinx.cinterop.CPointer<platform.CoreServices.FSVolumeInfo>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSVolumeInfo>?) = TODO()

    final var volumeName: kotlinx.cinterop.CPointer<platform.osx.HFSUniStr255>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.osx.HFSUniStr255>?) = TODO()

    final var whichInfo: platform.CoreServices.FSVolumeInfoBitmap /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.FSVolumeInfoBitmap /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FVector public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var length: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var start: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FXInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var fdComment: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var fdIconID: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var fdPutAway: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final val fdReserved: kotlinx.cinterop.CArrayPointer<platform.darwin.SInt16Var /* = kotlinx.cinterop.ShortVarOf<platform.darwin.SInt16 /* = kotlin.Short */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<platform.darwin.SInt16 /* = kotlin.Short */>> */
        get() = TODO()

    final var fdScript: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    final var fdXFlags: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FileInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var fileCreator: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var fileType: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var finderFlags: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final val location: platform.darwin.Point
        get() = TODO()

    final var reservedField: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FolderDesc public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var badgeSignature: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var badgeType: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var descSize: platform.darwin.Size /* = kotlin.Long */
        get() = TODO()
        set(value: platform.darwin.Size /* = kotlin.Long */) = TODO()

    final var flags: platform.CoreServices.FolderDescFlags /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.FolderDescFlags /* = kotlin.UInt */) = TODO()

    final var foldClass: platform.CoreServices.FolderClass /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.FolderClass /* = kotlin.UInt */) = TODO()

    final var foldLocation: platform.CoreServices.FolderType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.FolderType /* = kotlin.UInt */) = TODO()

    final var foldType: platform.CoreServices.FolderType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.FolderType /* = kotlin.UInt */) = TODO()

    final val name: platform.darwin.StrFileName /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>> */
        get() = TODO()

    final var reserved: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FolderInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var finderFlags: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final val location: platform.darwin.Point
        get() = TODO()

    final var reservedField: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final val windowBounds: platform.darwin.Rect
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FolderRouting public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var descSize: platform.darwin.Size /* = kotlin.Long */
        get() = TODO()
        set(value: platform.darwin.Size /* = kotlin.Long */) = TODO()

    final var fileType: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var flags: platform.CoreServices.RoutingFlags /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.RoutingFlags /* = kotlin.UInt */) = TODO()

    final var routeFromFolder: platform.CoreServices.FolderType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.FolderType /* = kotlin.UInt */) = TODO()

    final var routeToFolder: platform.CoreServices.FolderType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.FolderType /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class FormatVersionChunk public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var ckID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var ckSize: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var timestamp: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class GetVolParmsInfoBuffer public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var vMAttrib: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var vMDeviceID: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var vMExtendedAttributes: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var vMForeignPrivID: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var vMLocalHand: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */
        get() = TODO()
        set(value: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) = TODO()

    final var vMMaxNameLength: platform.darwin.UniCharCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.UniCharCount /* = kotlin.ULong */) = TODO()

    final var vMServerAdr: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var vMVersion: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var vMVolumeGrade: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class IconFamilyElement public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val elementData: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>> */
        get() = TODO()

    final var elementSize: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var elementType: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class IconFamilyResource public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val elements: kotlinx.cinterop.CArrayPointer<platform.CoreServices.IconFamilyElement> /* = kotlinx.cinterop.CPointer<platform.CoreServices.IconFamilyElement> */
        get() = TODO()

    final var resourceSize: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var resourceType: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class InstrumentChunk public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var baseFrequency: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var ckID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var ckSize: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var detune: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var gain: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var highFrequency: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var highVelocity: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var lowFrequency: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var lowVelocity: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final val releaseLoop: platform.CoreServices.AIFFLoop
        get() = TODO()

    final val sustainLoop: platform.CoreServices.AIFFLoop
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class Intl0Rec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var currFmt: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var currSym1: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    final var currSym2: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    final var currSym3: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    final var dateOrder: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var dateSep: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    final var decimalPt: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    final val eveStr: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var intl0Vers: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var listSep: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    final var metricSys: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final val mornStr: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var shrtDateFmt: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var thousSep: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    final var time1Suff: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    final var time2Suff: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    final var time3Suff: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    final var time4Suff: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    final var time5Suff: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    final var time6Suff: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    final var time7Suff: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    final var time8Suff: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    final var timeCycle: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var timeFmt: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var timeSep: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class Intl1Rec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var abbrLen: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var dayLeading0: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final val days: platform.darwin.Str15 /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>> */
        get() = TODO()

    final var intl1Vers: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var lngDateFmt: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final val localRtn: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ShortVar /* = kotlinx.cinterop.ShortVarOf<kotlin.Short> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<kotlin.Short>> */
        get() = TODO()

    final val months: platform.darwin.Str15 /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>> */
        get() = TODO()

    final val st0: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final val st1: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final val st2: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final val st3: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final val st4: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var suppressDay: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class IntlText public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var theLangCode: platform.darwin.LangCode /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.LangCode /* = kotlin.Short */) = TODO()

    final var theScriptCode: platform.darwin.ScriptCode /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.ScriptCode /* = kotlin.Short */) = TODO()

    final val theText: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class Itl1ExtRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var abbrevDaysTableLength: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var abbrevDaysTableOffset: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var abbrevMonthsTableLength: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var abbrevMonthsTableOffset: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final val base: platform.CoreServices.Intl1Rec
        get() = TODO()

    final var calendarCode: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var extraDaysTableLength: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var extraDaysTableOffset: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var extraMonthsTableLength: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var extraMonthsTableOffset: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var extraSepsTableLength: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var extraSepsTableOffset: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var format: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final val tables: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ShortVar /* = kotlinx.cinterop.ShortVarOf<kotlin.Short> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<kotlin.Short>> */
        get() = TODO()

    final var version: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class Itl4Rec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var defPartsOffset: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var fetchOffset: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var flags: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var mapOffset: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var numTables: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var resHeader1: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var resHeader2: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var resOffset6: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var resOffset7: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var resOffset8: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var resourceNum: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var resourceType: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var strOffset: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var unTokenOffset: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var version: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class Itl5Record public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var numberOfTables: kotlin.UShort
        get() = TODO()
        set(value: kotlin.UShort) = TODO()

    final val reserved: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.UShortVar /* = kotlinx.cinterop.UShortVarOf<kotlin.UShort> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UShortVarOf<kotlin.UShort>> */
        get() = TODO()

    final val tableDirectory: kotlinx.cinterop.CArrayPointer<platform.CoreServices.TableDirectoryRecord> /* = kotlinx.cinterop.CPointer<platform.CoreServices.TableDirectoryRecord> */
        get() = TODO()

    final var versionNumber: platform.darwin.Fixed /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.Fixed /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ItlbExtRecord public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val base: platform.CoreServices.ItlbRecord
        get() = TODO()

    final var itlbAliasStyle: platform.darwin.Style /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.Style /* = kotlin.UByte */) = TODO()

    final var itlbAppFond: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlbAppSize: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlbHelpFond: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlbHelpSize: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlbLocalSize: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var itlbMonoFond: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlbMonoSize: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlbPrefFond: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlbPrefSize: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlbSmallFond: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlbSmallSize: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlbSysFond: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlbSysSize: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlbValidStyles: platform.darwin.Style /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.Style /* = kotlin.UByte */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ItlbRecord public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var itlbDate: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlbDateRep: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    final var itlbEncoding: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlbFlags: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlbIcon: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlbKeys: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlbLang: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlbNumRep: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    final var itlbNumber: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlbSort: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlbToken: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ItlcRecord public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var itlcFlags: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    final var itlcFontForce: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    final var itlcIconOffset: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlcIconRsvd: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    final var itlcIconSide: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    final var itlcIntlForce: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    final var itlcOldKybd: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    final var itlcRegionCode: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlcReserved: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final val itlcReserved4: kotlinx.cinterop.CArrayPointer<platform.darwin.SInt8Var /* = kotlinx.cinterop.ByteVarOf<platform.darwin.SInt8 /* = kotlin.Byte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<platform.darwin.SInt8 /* = kotlin.Byte */>> */
        get() = TODO()

    final var itlcSysFlags: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var itlcSystem: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class KCCallbackInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val event: kotlinx.cinterop.CArrayPointer<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */>> */
        get() = TODO()

    final var item: platform.CoreServices.KCItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef>? */
        get() = TODO()
        set(value: platform.CoreServices.KCItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef>? */) = TODO()

    final var keychain: platform.CoreServices.KCRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainRef>? */
        get() = TODO()
        set(value: platform.CoreServices.KCRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainRef>? */) = TODO()

    final val processID: kotlinx.cinterop.CArrayPointer<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */>> */
        get() = TODO()

    final var version: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class LSApplicationParameters public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var application: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?) = TODO()

    final var argv: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */
        get() = TODO()
        set(value: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */) = TODO()

    final var asyncLaunchRefCon: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var environment: platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */
        get() = TODO()
        set(value: platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */) = TODO()

    final var flags: platform.CoreServices.LSLaunchFlags /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.LSLaunchFlags /* = kotlin.UInt */) = TODO()

    final var initialEvent: kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?) = TODO()

    final var version: platform.CoreFoundation.CFIndex /* = kotlin.Long */
        get() = TODO()
        set(value: platform.CoreFoundation.CFIndex /* = kotlin.Long */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class LSItemInfoRecord public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var creator: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var extension: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
        get() = TODO()
        set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

    final var filetype: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var flags: platform.CoreServices.LSItemInfoFlags /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.LSItemInfoFlags /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class LSLaunchFSRefSpec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var appRef: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?) = TODO()

    final var asyncRefCon: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var itemRefs: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?) = TODO()

    final var launchFlags: platform.CoreServices.LSLaunchFlags /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.LSLaunchFlags /* = kotlin.UInt */) = TODO()

    final var numDocs: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var passThruParams: kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class LSLaunchURLSpec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var appURL: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */
        get() = TODO()
        set(value: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */) = TODO()

    final var asyncRefCon: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var itemURLs: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */
        get() = TODO()
        set(value: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */) = TODO()

    final var launchFlags: platform.CoreServices.LSLaunchFlags /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.LSLaunchFlags /* = kotlin.UInt */) = TODO()

    final var passThruParams: kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class LocalDateTime public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var fraction: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var highSeconds: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var lowSeconds: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class LocaleAndVariant public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var locale: platform.CoreServices.LocaleRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLocaleRef>? */
        get() = TODO()
        set(value: platform.CoreServices.LocaleRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLocaleRef>? */) = TODO()

    final var opVariant: platform.CoreServices.LocaleOperationVariant /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.LocaleOperationVariant /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class LongDateCvt public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var c: platform.darwin.SInt64 /* = kotlin.Long */
        get() = TODO()
        set(value: platform.darwin.SInt64 /* = kotlin.Long */) = TODO()

    final val hl: platform.CoreServices.anonymousStruct2
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class LongDateRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val ld: platform.CoreServices.anonymousStruct3
        get() = TODO()

    final val list: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ShortVar /* = kotlinx.cinterop.ShortVarOf<kotlin.Short> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<kotlin.Short>> */
        get() = TODO()

    final val od: platform.CoreServices.anonymousStruct4
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final enum class MDLabelDomain private constructor(/*0*/ value: kotlin.UInt): kotlinx.cinterop.CEnum {
    kMDLabelUserDomain(TODO()),

    kMDLabelLocalDomain(TODO());

    open override /*1*/ val value: kotlin.UInt
        get() = TODO()

    companion object Companion {
        final fun byValue(/*0*/ value: kotlin.UInt): platform.CoreServices.MDLabelDomain { TODO() }
    }

    final class Var public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CEnumVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
        final var value: platform.CoreServices.MDLabelDomain
            get() = TODO()
            set(value: platform.CoreServices.MDLabelDomain) = TODO()

        companion object Companion: kotlinx.cinterop.CPrimitiveVar.Type(TODO() as kotlin.Int) {
        }
    }
}

final class MDQueryBatchingParams public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var first_max_ms: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    final var first_max_num: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    final var progress_max_ms: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    final var progress_max_num: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    final var update_max_ms: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    final var update_max_num: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class MIDIDataChunk public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val MIDIdata: kotlinx.cinterop.CArrayPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */>> */
        get() = TODO()

    final var ckID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var ckSize: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class MPAddressSpaceInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var groupID: platform.CoreServices.MPCoherenceID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPCoherenceID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPCoherenceID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPCoherenceID>? */) = TODO()

    final var nTasks: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var processID: platform.CoreServices.MPProcessID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPProcessID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPProcessID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPProcessID>? */) = TODO()

    final var version: platform.darwin.PBVersion /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.PBVersion /* = kotlin.UInt */) = TODO()

    final val vsid: kotlinx.cinterop.CArrayPointer<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class MPCriticalRegionInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var count: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var nWaiting: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var owningTask: platform.CoreServices.MPTaskID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPTaskID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>? */) = TODO()

    final var processID: platform.CoreServices.MPProcessID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPProcessID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPProcessID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPProcessID>? */) = TODO()

    final var regionName: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var version: platform.darwin.PBVersion /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.PBVersion /* = kotlin.UInt */) = TODO()

    final var waitingTaskID: platform.CoreServices.MPTaskID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPTaskID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>? */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class MPEventInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var eventName: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var events: platform.CoreServices.MPEventFlags /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.MPEventFlags /* = kotlin.UInt */) = TODO()

    final var nWaiting: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var processID: platform.CoreServices.MPProcessID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPProcessID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPProcessID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPProcessID>? */) = TODO()

    final var version: platform.darwin.PBVersion /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.PBVersion /* = kotlin.UInt */) = TODO()

    final var waitingTaskID: platform.CoreServices.MPTaskID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPTaskID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>? */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class MPNotificationInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var eventID: platform.CoreServices.MPEventID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPEventID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPEventID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPEventID>? */) = TODO()

    final var events: platform.CoreServices.MPEventFlags /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.MPEventFlags /* = kotlin.UInt */) = TODO()

    final var notificationName: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var p1: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var p2: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var p3: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var processID: platform.CoreServices.MPProcessID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPProcessID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPProcessID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPProcessID>? */) = TODO()

    final var queueID: platform.CoreServices.MPQueueID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPQueueID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPQueueID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPQueueID>? */) = TODO()

    final var semaphoreID: platform.CoreServices.MPSemaphoreID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPSemaphoreID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPSemaphoreID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPSemaphoreID>? */) = TODO()

    final var version: platform.darwin.PBVersion /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.PBVersion /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class MPQueueInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var nMessages: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var nReserved: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var nWaiting: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var p1: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var p2: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var p3: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var processID: platform.CoreServices.MPProcessID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPProcessID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPProcessID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPProcessID>? */) = TODO()

    final var queueName: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var version: platform.darwin.PBVersion /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.PBVersion /* = kotlin.UInt */) = TODO()

    final var waitingTaskID: platform.CoreServices.MPTaskID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPTaskID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>? */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class MPSemaphoreInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var count: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var maximum: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var nWaiting: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var processID: platform.CoreServices.MPProcessID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPProcessID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPProcessID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPProcessID>? */) = TODO()

    final var semaphoreName: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var version: platform.darwin.PBVersion /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.PBVersion /* = kotlin.UInt */) = TODO()

    final var waitingTaskID: platform.CoreServices.MPTaskID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPTaskID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>? */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class MPTaskInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var blockedObject: platform.CoreServices.MPOpaqueID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPOpaqueID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPOpaqueID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPOpaqueID>? */) = TODO()

    final var codePageFaults: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var cpuID: platform.CoreServices.MPCpuID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPCpuID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPCpuID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPCpuID>? */) = TODO()

    final val cpuTime: platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */
        get() = TODO()

    final val creationTime: platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */
        get() = TODO()

    final var dataPageFaults: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var lastCPU: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var name: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var preemptions: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var processID: platform.CoreServices.MPProcessID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPProcessID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPProcessID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPProcessID>? */) = TODO()

    final var queueName: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var runState: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final val schedTime: platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */
        get() = TODO()

    final var spaceID: platform.CoreServices.MPAddressSpaceID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPAddressSpaceID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPAddressSpaceID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPAddressSpaceID>? */) = TODO()

    final var stackBase: platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var stackCurr: platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var stackLimit: platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var version: platform.darwin.PBVersion /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.PBVersion /* = kotlin.UInt */) = TODO()

    final var weight: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class MPTaskInfoVersion2 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var codePageFaults: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var cpuID: platform.CoreServices.MPCpuID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPCpuID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPCpuID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPCpuID>? */) = TODO()

    final val cpuTime: platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */
        get() = TODO()

    final val creationTime: platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */
        get() = TODO()

    final var dataPageFaults: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var lastCPU: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var name: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var preemptions: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var processID: platform.CoreServices.MPProcessID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPProcessID>? */
        get() = TODO()
        set(value: platform.CoreServices.MPProcessID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPProcessID>? */) = TODO()

    final var queueName: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var runState: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final val schedTime: platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */
        get() = TODO()

    final var version: platform.darwin.PBVersion /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.PBVersion /* = kotlin.UInt */) = TODO()

    final var weight: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class MachineInformationIntel64 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var CS: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var ExceptAddr: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var ExceptErr: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var ExceptTrap: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var FS: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var GS: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var RFLAGS: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var RIP: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class MachineInformationPowerPC public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var CRRegister: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final val CTR: platform.darwin.UnsignedWide
        get() = TODO()

    final val DAR: platform.darwin.UnsignedWide
        get() = TODO()

    final var DSISR: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var ExceptKind: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final val LR: platform.darwin.UnsignedWide
        get() = TODO()

    final var MQ: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var MSR: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final val PC: platform.darwin.UnsignedWide
        get() = TODO()

    final val Reserved: platform.darwin.UnsignedWide
        get() = TODO()

    final var XER: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class MachineLocation public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var latitude: platform.darwin.Fract /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.Fract /* = kotlin.Int */) = TODO()

    final var longitude: platform.darwin.Fract /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.Fract /* = kotlin.Int */) = TODO()

    final val u: platform.CoreServices.anonymousStruct5
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class Marker public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var id: platform.CoreServices.MarkerIdType /* = kotlin.Short */
        get() = TODO()
        set(value: platform.CoreServices.MarkerIdType /* = kotlin.Short */) = TODO()

    final val markerName: platform.darwin.Str255 /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>> */
        get() = TODO()

    final var position: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class MarkerChunk public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Markers: kotlinx.cinterop.CArrayPointer<platform.CoreServices.Marker> /* = kotlinx.cinterop.CPointer<platform.CoreServices.Marker> */
        get() = TODO()

    final var ckID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var ckSize: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var numMarkers: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class MemoryExceptionInformation public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var theAddress: platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var theArea: platform.CoreServices.AreaID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAreaID>? */
        get() = TODO()
        set(value: platform.CoreServices.AreaID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAreaID>? */) = TODO()

    final var theError: platform.darwin.OSStatus /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.OSStatus /* = kotlin.Int */) = TODO()

    final var theReference: platform.CoreServices.MemoryReferenceKind /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.CoreServices.MemoryReferenceKind /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class MixedModeStateRecord public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var state1: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var state2: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var state3: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var state4: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class NItl4Rec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var defPartsLength: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var defPartsOffset: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var fetchOffset: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var flags: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var format: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var mapOffset: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var numTables: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var resHeader: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var resHeader2: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var resLength1: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var resLength2: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var resLength3: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var resLength7: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var resLength8: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var resOffset7: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var resOffset8: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var resourceNum: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var resourceType: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var strOffset: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var unTokenLength: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var unTokenOffset: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var version: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var whtSpListLength: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var whtSpListOffset: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class NumFormatString public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val data: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var fLength: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var fVersion: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class NumberParts public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val altNumTable: platform.CoreServices.WideCharArr
        get() = TODO()

    final val data: kotlinx.cinterop.CArrayPointer<platform.CoreServices.WideChar> /* = kotlinx.cinterop.CPointer<platform.CoreServices.WideChar> */
        get() = TODO()

    final val peMinus: platform.CoreServices.WideCharArr
        get() = TODO()

    final val peMinusPlus: platform.CoreServices.WideCharArr
        get() = TODO()

    final val pePlus: platform.CoreServices.WideCharArr
        get() = TODO()

    final val reserved: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var version: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class OffPair public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var offFirst: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var offSecond: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class OffsetArray public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var fNumOfOffsets: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final val fOffset: kotlinx.cinterop.CArrayPointer<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class PEFContainerHeader public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var architecture: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var currentVersion: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var dateTimeStamp: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var formatVersion: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var instSectionCount: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var oldDefVersion: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var oldImpVersion: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var reservedA: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var sectionCount: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var tag1: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var tag2: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class PEFExportedSymbol public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var classAndName: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var sectionIndex: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var symbolValue: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class PEFExportedSymbolHashSlot public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var countAndStart: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class PEFExportedSymbolKey public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val u: platform.CoreServices.anonymousStruct8
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class PEFImportedLibrary public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var currentVersion: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var firstImportedSymbol: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var importedSymbolCount: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var nameOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var oldImpVersion: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var options: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var reservedA: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var reservedB: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class PEFImportedSymbol public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var classAndName: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class PEFLoaderInfoHeader public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var exportHashOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var exportHashTablePower: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var exportedSymbolCount: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var importedLibraryCount: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var initOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var initSection: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var loaderStringsOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var mainOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var mainSection: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var relocInstrOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var relocSectionCount: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var termOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var termSection: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var totalImportedSymbolCount: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class PEFLoaderRelocationHeader public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var firstRelocOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var relocCount: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var reservedA: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var sectionIndex: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class PEFSectionHeader public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var alignment: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var containerLength: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var containerOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var defaultAddress: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var nameOffset: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var reservedA: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var sectionKind: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var shareKind: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var totalLength: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var unpackedLength: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class PEFSplitHashWord public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var hashValue: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var nameLength: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class QElem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val qData: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ShortVar /* = kotlinx.cinterop.ShortVarOf<kotlin.Short> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<kotlin.Short>> */
        get() = TODO()

    final var qLink: kotlinx.cinterop.CPointer<platform.CoreServices.QElem>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.CoreServices.QElem>?) = TODO()

    final var qType: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class QHdr public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var qFlags: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var qHead: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */
        get() = TODO()
        set(value: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */) = TODO()

    final var qTail: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */
        get() = TODO()
        set(value: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class RegisterInformationIntel64 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var R10: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var R11: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var R12: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var R13: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var R14: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var R15: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var R8: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var R9: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var RAX: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var RBP: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var RBX: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var RCX: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var RDI: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var RDX: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var RSI: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var RSP: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class RegisterInformationPowerPC public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val R0: platform.darwin.UnsignedWide
        get() = TODO()

    final val R1: platform.darwin.UnsignedWide
        get() = TODO()

    final val R10: platform.darwin.UnsignedWide
        get() = TODO()

    final val R11: platform.darwin.UnsignedWide
        get() = TODO()

    final val R12: platform.darwin.UnsignedWide
        get() = TODO()

    final val R13: platform.darwin.UnsignedWide
        get() = TODO()

    final val R14: platform.darwin.UnsignedWide
        get() = TODO()

    final val R15: platform.darwin.UnsignedWide
        get() = TODO()

    final val R16: platform.darwin.UnsignedWide
        get() = TODO()

    final val R17: platform.darwin.UnsignedWide
        get() = TODO()

    final val R18: platform.darwin.UnsignedWide
        get() = TODO()

    final val R19: platform.darwin.UnsignedWide
        get() = TODO()

    final val R2: platform.darwin.UnsignedWide
        get() = TODO()

    final val R20: platform.darwin.UnsignedWide
        get() = TODO()

    final val R21: platform.darwin.UnsignedWide
        get() = TODO()

    final val R22: platform.darwin.UnsignedWide
        get() = TODO()

    final val R23: platform.darwin.UnsignedWide
        get() = TODO()

    final val R24: platform.darwin.UnsignedWide
        get() = TODO()

    final val R25: platform.darwin.UnsignedWide
        get() = TODO()

    final val R26: platform.darwin.UnsignedWide
        get() = TODO()

    final val R27: platform.darwin.UnsignedWide
        get() = TODO()

    final val R28: platform.darwin.UnsignedWide
        get() = TODO()

    final val R29: platform.darwin.UnsignedWide
        get() = TODO()

    final val R3: platform.darwin.UnsignedWide
        get() = TODO()

    final val R30: platform.darwin.UnsignedWide
        get() = TODO()

    final val R31: platform.darwin.UnsignedWide
        get() = TODO()

    final val R4: platform.darwin.UnsignedWide
        get() = TODO()

    final val R5: platform.darwin.UnsignedWide
        get() = TODO()

    final val R6: platform.darwin.UnsignedWide
        get() = TODO()

    final val R7: platform.darwin.UnsignedWide
        get() = TODO()

    final val R8: platform.darwin.UnsignedWide
        get() = TODO()

    final val R9: platform.darwin.UnsignedWide
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class RegisteredComponentInstanceRecord public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val data: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.LongVar /* = kotlinx.cinterop.LongVarOf<kotlin.Long> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVarOf<kotlin.Long>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class RegisteredComponentRecord public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val data: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.LongVar /* = kotlinx.cinterop.LongVarOf<kotlin.Long> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVarOf<kotlin.Long>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ResourceSpec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var resID: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var resType: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class RoutineDescriptor public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var goMixedModeTrap: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var reserved1: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var reserved2: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var routineCount: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var routineDescriptorFlags: platform.CoreServices.RDFlagsType /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.CoreServices.RDFlagsType /* = kotlin.UByte */) = TODO()

    final val routineRecords: kotlinx.cinterop.CArrayPointer<platform.CoreServices.RoutineRecord> /* = kotlinx.cinterop.CPointer<platform.CoreServices.RoutineRecord> */
        get() = TODO()

    final var selectorInfo: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var version: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class RoutineRecord public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var ISA: platform.CoreServices.ISAType /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.CoreServices.ISAType /* = kotlin.Byte */) = TODO()

    final var procDescriptor: platform.darwin.ProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Long>>? */
        get() = TODO()
        set(value: platform.darwin.ProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Long>>? */) = TODO()

    final var procInfo: platform.CoreServices.ProcInfoType /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.CoreServices.ProcInfoType /* = kotlin.ULong */) = TODO()

    final var reserved1: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    final var reserved2: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var routineFlags: platform.CoreServices.RoutineFlagsType /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.CoreServices.RoutineFlagsType /* = kotlin.UShort */) = TODO()

    final var selector: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class RoutingResourceEntry public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var creator: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var destinationFolder: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var fileType: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var reservedField: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var targetFolder: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class RuleBasedTrslRecord public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var formatNumber: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var numberOfRules: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var propertyFlag: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var sourceType: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var targetType: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class SchedulerInfoRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var CurrentThreadID: platform.CoreServices.ThreadID /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.CoreServices.ThreadID /* = kotlin.ULong */) = TODO()

    final var InfoRecSize: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var InterruptedCoopThreadID: platform.CoreServices.ThreadID /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.CoreServices.ThreadID /* = kotlin.ULong */) = TODO()

    final var SuggestedThreadID: platform.CoreServices.ThreadID /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.CoreServices.ThreadID /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ScriptCodeRun public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var offset: platform.darwin.ByteOffset /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ByteOffset /* = kotlin.ULong */) = TODO()

    final var script: platform.darwin.ScriptCode /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.ScriptCode /* = kotlin.Short */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class SleepQRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var sleepQFlags: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var sleepQLink: platform.CoreServices.SleepQRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SleepQRec>? */
        get() = TODO()
        set(value: platform.CoreServices.SleepQRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SleepQRec>? */) = TODO()

    final var sleepQProc: platform.CoreServices.SleepQUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Long, platform.CoreServices.SleepQRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SleepQRec>? */) -> kotlin.Long>>? */
        get() = TODO()
        set(value: platform.CoreServices.SleepQUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Long, platform.CoreServices.SleepQRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SleepQRec>? */) -> kotlin.Long>>? */) = TODO()

    final var sleepQType: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class SoundDataChunk public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var blockSize: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var ckID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var ckSize: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var offset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TECBufferContextRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var encodingInputBuffer: platform.CoreServices.ConstTextEncodingRunPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingRun>? */
        get() = TODO()
        set(value: platform.CoreServices.ConstTextEncodingRunPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingRun>? */) = TODO()

    final var encodingInputBufferEnd: platform.CoreServices.ConstTextEncodingRunPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingRun>? */
        get() = TODO()
        set(value: platform.CoreServices.ConstTextEncodingRunPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingRun>? */) = TODO()

    final var encodingOutputBuffer: platform.CoreServices.TextEncodingRunPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingRun>? */
        get() = TODO()
        set(value: platform.CoreServices.TextEncodingRunPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingRun>? */) = TODO()

    final var encodingOutputBufferEnd: platform.CoreServices.TextEncodingRunPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingRun>? */
        get() = TODO()
        set(value: platform.CoreServices.TextEncodingRunPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingRun>? */) = TODO()

    final var textInputBuffer: platform.CoreServices.ConstTextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */
        get() = TODO()
        set(value: platform.CoreServices.ConstTextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */) = TODO()

    final var textInputBufferEnd: platform.CoreServices.ConstTextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */
        get() = TODO()
        set(value: platform.CoreServices.ConstTextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */) = TODO()

    final var textOutputBuffer: platform.CoreServices.TextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */
        get() = TODO()
        set(value: platform.CoreServices.TextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */) = TODO()

    final var textOutputBufferEnd: platform.CoreServices.TextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */
        get() = TODO()
        set(value: platform.CoreServices.TextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TECConversionInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var destinationEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.TextEncoding /* = kotlin.UInt */) = TODO()

    final var reserved1: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var reserved2: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var sourceEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.TextEncoding /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TECConverterContextRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val bufferContext: platform.CoreServices.TECBufferContextRec
        get() = TODO()

    final var clearContextInfoProc: platform.darwin.ProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Long>>? */
        get() = TODO()
        set(value: platform.darwin.ProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Long>>? */) = TODO()

    final var contextRefCon: platform.darwin.URefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: platform.darwin.URefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var conversionProc: platform.darwin.ProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Long>>? */
        get() = TODO()
        set(value: platform.darwin.ProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Long>>? */) = TODO()

    final var destEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.TextEncoding /* = kotlin.UInt */) = TODO()

    final var flushProc: platform.darwin.ProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Long>>? */
        get() = TODO()
        set(value: platform.darwin.ProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Long>>? */) = TODO()

    final var options1: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var options2: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var pluginRec: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */
        get() = TODO()
        set(value: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */) = TODO()

    final val pluginState: platform.CoreServices.TECPluginStateRec
        get() = TODO()

    final var reserved1: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var reserved2: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var sourceEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.TextEncoding /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TECEncodingPairRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val dest: platform.CoreServices.TextEncodingRec
        get() = TODO()

    final val source: platform.CoreServices.TextEncodingRec
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TECEncodingPairs public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val encodingPair: platform.CoreServices.TECEncodingPairRec
        get() = TODO()

    final var flags: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var speed: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TECEncodingPairsRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var count: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final val encodingPairs: platform.CoreServices.TECEncodingPairs
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TECEncodingsListRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var count: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final val encodings: platform.CoreServices.TextEncodingRec
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TECInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var format: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final val tecExtensionFileName: platform.darwin.Str31 /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>> */
        get() = TODO()

    final var tecHighestTEFileVersion: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var tecLowestTEFileVersion: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var tecTextCommonFeatures: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var tecTextConverterFeatures: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final val tecTextEncodingsFolderName: platform.darwin.Str31 /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>> */
        get() = TODO()

    final var tecUnicodeConverterFeatures: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var tecVersion: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TECInternetNameRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val encodingName: kotlinx.cinterop.CArrayPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */>> */
        get() = TODO()

    final var encodingNameLength: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var offset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final val searchEncoding: platform.CoreServices.TextEncodingRec
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TECInternetNamesRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val InternetNames: platform.CoreServices.TECInternetNameRec
        get() = TODO()

    final var count: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TECLocaleListToEncodingListRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var count: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var locales: platform.darwin.RegionCode /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.RegionCode /* = kotlin.Short */) = TODO()

    final var offset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TECLocaleToEncodingsListRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var count: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final val localeListToEncodingList: platform.CoreServices.TECLocaleListToEncodingListRec
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TECPluginDispatchTable public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var PluginClearContextInfo: platform.CoreServices.TECPluginClearContextInfoPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef>? */, kotlinx.cinterop.CPointer<platform.CoreServices.TECConverterContextRec>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginClearContextInfoPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef>? */, kotlinx.cinterop.CPointer<platform.CoreServices.TECConverterContextRec>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) = TODO()

    final var PluginClearSnifferContextInfo: platform.CoreServices.TECPluginClearSnifferContextInfoPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECSnifferObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECSnifferObjectRef>? */, kotlinx.cinterop.CPointer<platform.CoreServices.TECSnifferContextRec>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginClearSnifferContextInfoPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECSnifferObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECSnifferObjectRef>? */, kotlinx.cinterop.CPointer<platform.CoreServices.TECSnifferContextRec>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) = TODO()

    final var PluginConvertTextEncoding: platform.CoreServices.TECPluginConvertTextEncodingPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef>? */, kotlinx.cinterop.CPointer<platform.CoreServices.TECConverterContextRec>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginConvertTextEncodingPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef>? */, kotlinx.cinterop.CPointer<platform.CoreServices.TECConverterContextRec>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) = TODO()

    final var PluginDisposeEncodingConverter: platform.CoreServices.TECPluginDisposeEncodingConverterPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef>? */, kotlinx.cinterop.CPointer<platform.CoreServices.TECConverterContextRec>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginDisposeEncodingConverterPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef>? */, kotlinx.cinterop.CPointer<platform.CoreServices.TECConverterContextRec>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) = TODO()

    final var PluginDisposeEncodingSniffer: platform.CoreServices.TECPluginDisposeEncodingSnifferPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECSnifferObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECSnifferObjectRef>? */, kotlinx.cinterop.CPointer<platform.CoreServices.TECSnifferContextRec>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginDisposeEncodingSnifferPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECSnifferObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECSnifferObjectRef>? */, kotlinx.cinterop.CPointer<platform.CoreServices.TECSnifferContextRec>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) = TODO()

    final var PluginFlushConversion: platform.CoreServices.TECPluginFlushConversionPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef>? */, kotlinx.cinterop.CPointer<platform.CoreServices.TECConverterContextRec>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginFlushConversionPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef>? */, kotlinx.cinterop.CPointer<platform.CoreServices.TECConverterContextRec>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) = TODO()

    final var PluginGetCountAvailableSniffers: platform.CoreServices.TECPluginGetCountAvailableSniffersPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, platform.darwin.ItemCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginGetCountAvailableSniffersPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, platform.darwin.ItemCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) = TODO()

    final var PluginGetCountAvailableTextEncodingPairs: platform.CoreServices.TECPluginGetCountAvailableTextEncodingPairsPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TECConversionInfo>?, platform.darwin.ItemCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginGetCountAvailableTextEncodingPairsPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TECConversionInfo>?, platform.darwin.ItemCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) = TODO()

    final var PluginGetCountAvailableTextEncodings: platform.CoreServices.TECPluginGetCountAvailableTextEncodingsPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, platform.darwin.ItemCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginGetCountAvailableTextEncodingsPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, platform.darwin.ItemCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) = TODO()

    final var PluginGetCountDestinationTextEncodings: platform.CoreServices.TECPluginGetCountDestinationTextEncodingsPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TextEncoding /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, platform.darwin.ItemCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginGetCountDestinationTextEncodingsPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TextEncoding /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, platform.darwin.ItemCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) = TODO()

    final var PluginGetCountMailTextEncodings: platform.CoreServices.TECPluginGetCountMailEncodingsPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, platform.darwin.ItemCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginGetCountMailEncodingsPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, platform.darwin.ItemCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) = TODO()

    final var PluginGetCountSubTextEncodings: platform.CoreServices.TECPluginGetCountSubTextEncodingsPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TextEncoding /* = kotlin.UInt */, kotlinx.cinterop.CArrayPointer<platform.CoreServices.TextEncodingVar>? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */>>? */, platform.darwin.ItemCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginGetCountSubTextEncodingsPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TextEncoding /* = kotlin.UInt */, kotlinx.cinterop.CArrayPointer<platform.CoreServices.TextEncodingVar>? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */>>? */, platform.darwin.ItemCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) = TODO()

    final var PluginGetCountWebTextEncodings: platform.CoreServices.TECPluginGetCountWebEncodingsPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, platform.darwin.ItemCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginGetCountWebEncodingsPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, platform.darwin.ItemCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) = TODO()

    final var PluginGetTextEncodingFromInternetName: platform.CoreServices.TECPluginGetTextEncodingFromInternetNamePtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginGetTextEncodingFromInternetNamePtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) = TODO()

    final var PluginGetTextEncodingInternetName: platform.CoreServices.TECPluginGetTextEncodingInternetNamePtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TextEncoding /* = kotlin.UInt */, platform.darwin.Str255? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginGetTextEncodingInternetNamePtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TextEncoding /* = kotlin.UInt */, platform.darwin.Str255? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) = TODO()

    final var PluginID: platform.CoreServices.TECPluginSignature /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginSignature /* = kotlin.UInt */) = TODO()

    final var PluginNewEncodingConverter: platform.CoreServices.TECPluginNewEncodingConverterPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TECObjectRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECObjectRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef> */> */>?, kotlinx.cinterop.CPointer<platform.CoreServices.TECConverterContextRec>?, platform.CoreServices.TextEncoding /* = kotlin.UInt */, platform.CoreServices.TextEncoding /* = kotlin.UInt */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginNewEncodingConverterPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TECObjectRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECObjectRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef> */> */>?, kotlinx.cinterop.CPointer<platform.CoreServices.TECConverterContextRec>?, platform.CoreServices.TextEncoding /* = kotlin.UInt */, platform.CoreServices.TextEncoding /* = kotlin.UInt */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) = TODO()

    final var PluginNewEncodingSniffer: platform.CoreServices.TECPluginNewEncodingSnifferPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TECSnifferObjectRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECSnifferObjectRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECSnifferObjectRef> */> */>?, kotlinx.cinterop.CPointer<platform.CoreServices.TECSnifferContextRec>?, platform.CoreServices.TextEncoding /* = kotlin.UInt */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginNewEncodingSnifferPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TECSnifferObjectRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECSnifferObjectRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECSnifferObjectRef> */> */>?, kotlinx.cinterop.CPointer<platform.CoreServices.TECSnifferContextRec>?, platform.CoreServices.TextEncoding /* = kotlin.UInt */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) = TODO()

    final var PluginSniffTextEncoding: platform.CoreServices.TECPluginSniffTextEncodingPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECSnifferObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECSnifferObjectRef>? */, kotlinx.cinterop.CPointer<platform.CoreServices.TECSnifferContextRec>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginSniffTextEncodingPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECSnifferObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECSnifferObjectRef>? */, kotlinx.cinterop.CPointer<platform.CoreServices.TECSnifferContextRec>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) = TODO()

    final var compatibleVersion: platform.CoreServices.TECPluginVersion /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginVersion /* = kotlin.UInt */) = TODO()

    final var version: platform.CoreServices.TECPluginVersion /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.TECPluginVersion /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TECPluginStateRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var longState1: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var longState2: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var longState3: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var longState4: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var state1: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var state2: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var state3: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var state4: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TECSnifferContextRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var clearContextInfoProc: platform.darwin.ProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Long>>? */
        get() = TODO()
        set(value: platform.darwin.ProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Long>>? */) = TODO()

    final var contextRefCon: platform.darwin.URefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: platform.darwin.URefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var encoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.TextEncoding /* = kotlin.UInt */) = TODO()

    final var maxErrors: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var maxFeatures: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var numErrors: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var numFeatures: platform.darwin.ItemCount /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ItemCount /* = kotlin.ULong */) = TODO()

    final var pluginRec: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */
        get() = TODO()
        set(value: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */) = TODO()

    final val pluginState: platform.CoreServices.TECPluginStateRec
        get() = TODO()

    final var sniffProc: platform.darwin.ProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Long>>? */
        get() = TODO()
        set(value: platform.darwin.ProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Long>>? */) = TODO()

    final var textInputBuffer: platform.CoreServices.ConstTextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */
        get() = TODO()
        set(value: platform.CoreServices.ConstTextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */) = TODO()

    final var textInputBufferEnd: platform.CoreServices.ConstTextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */
        get() = TODO()
        set(value: platform.CoreServices.ConstTextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TECSubTextEncodingRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var count: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var offset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final val searchEncoding: platform.CoreServices.TextEncodingRec
        get() = TODO()

    final val subEncodings: platform.CoreServices.TextEncodingRec
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TECSubTextEncodingsRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var count: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final val subTextEncodingRec: platform.CoreServices.TECSubTextEncodingRec
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TMTask public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var qLink: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */
        get() = TODO()
        set(value: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */) = TODO()

    final var qType: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var tmAddr: platform.CoreServices.TimerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TMTaskPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.TMTask>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.CoreServices.TimerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TMTaskPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.TMTask>? */) -> kotlin.Unit>>? */) = TODO()

    final var tmCount: kotlin.Long
        get() = TODO()
        set(value: kotlin.Long) = TODO()

    final var tmReserved: kotlin.Long
        get() = TODO()
        set(value: kotlin.Long) = TODO()

    final var tmWakeUp: kotlin.Long
        get() = TODO()
        set(value: kotlin.Long) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TScriptingSizeResource public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var maxHeapSize: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var maxStackSize: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var minHeapSize: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var minStackSize: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var preferredHeapSize: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var preferredStackSize: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var scriptingSizeFlags: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TableDirectoryRecord public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var reserved: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var tableSignature: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var tableSize: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var tableStartOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TextChunk public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var ckID: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var ckSize: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final val text: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TextEncodingRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var base: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var format: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var variant: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TextEncodingRun public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var offset: platform.darwin.ByteOffset /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.ByteOffset /* = kotlin.ULong */) = TODO()

    final var textEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.TextEncoding /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TextRange public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var fEnd: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var fHiliteStyle: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var fStart: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TextRangeArray public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var fNumOfRanges: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final val fRange: kotlinx.cinterop.CArrayPointer<platform.CoreServices.TextRange> /* = kotlinx.cinterop.CPointer<platform.CoreServices.TextRange> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TogglePB public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var amChars: platform.darwin.ResType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.ResType /* = kotlin.UInt */) = TODO()

    final var pmChars: platform.darwin.ResType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.ResType /* = kotlin.UInt */) = TODO()

    final val reserved: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.LongVar /* = kotlinx.cinterop.LongVarOf<kotlin.Long> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVarOf<kotlin.Long>> */
        get() = TODO()

    final var togFlags: kotlin.Long
        get() = TODO()
        set(value: kotlin.Long) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TokenBlock public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var decimalCode: platform.CoreServices.ScriptTokenType /* = kotlin.Short */
        get() = TODO()
        set(value: platform.CoreServices.ScriptTokenType /* = kotlin.Short */) = TODO()

    final var doAlphanumeric: kotlin.Boolean
        get() = TODO()
        set(value: kotlin.Boolean) = TODO()

    final var doAppend: kotlin.Boolean
        get() = TODO()
        set(value: kotlin.Boolean) = TODO()

    final var doNest: kotlin.Boolean
        get() = TODO()
        set(value: kotlin.Boolean) = TODO()

    final var doString: kotlin.Boolean
        get() = TODO()
        set(value: kotlin.Boolean) = TODO()

    final var escapeCode: platform.CoreServices.ScriptTokenType /* = kotlin.Short */
        get() = TODO()
        set(value: platform.CoreServices.ScriptTokenType /* = kotlin.Short */) = TODO()

    final var itlResource: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */
        get() = TODO()
        set(value: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) = TODO()

    final val leftComment: kotlinx.cinterop.CArrayPointer<platform.CoreServices.ScriptTokenTypeVar /* = kotlinx.cinterop.ShortVarOf<platform.CoreServices.ScriptTokenType /* = kotlin.Short */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<platform.CoreServices.ScriptTokenType /* = kotlin.Short */>> */
        get() = TODO()

    final val leftDelims: kotlinx.cinterop.CArrayPointer<platform.CoreServices.ScriptTokenTypeVar /* = kotlinx.cinterop.ShortVarOf<platform.CoreServices.ScriptTokenType /* = kotlin.Short */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<platform.CoreServices.ScriptTokenType /* = kotlin.Short */>> */
        get() = TODO()

    final val reserved: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.LongVar /* = kotlinx.cinterop.LongVarOf<kotlin.Long> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVarOf<kotlin.Long>> */
        get() = TODO()

    final val rightComment: kotlinx.cinterop.CArrayPointer<platform.CoreServices.ScriptTokenTypeVar /* = kotlinx.cinterop.ShortVarOf<platform.CoreServices.ScriptTokenType /* = kotlin.Short */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<platform.CoreServices.ScriptTokenType /* = kotlin.Short */>> */
        get() = TODO()

    final val rightDelims: kotlinx.cinterop.CArrayPointer<platform.CoreServices.ScriptTokenTypeVar /* = kotlinx.cinterop.ShortVarOf<platform.CoreServices.ScriptTokenType /* = kotlin.Short */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<platform.CoreServices.ScriptTokenType /* = kotlin.Short */>> */
        get() = TODO()

    final var source: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */
        get() = TODO()
        set(value: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */) = TODO()

    final var sourceLength: kotlin.Long
        get() = TODO()
        set(value: kotlin.Long) = TODO()

    final var stringCount: kotlin.Long
        get() = TODO()
        set(value: kotlin.Long) = TODO()

    final var stringLength: kotlin.Long
        get() = TODO()
        set(value: kotlin.Long) = TODO()

    final var stringList: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */
        get() = TODO()
        set(value: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */) = TODO()

    final var tokenCount: kotlin.Long
        get() = TODO()
        set(value: kotlin.Long) = TODO()

    final var tokenLength: kotlin.Long
        get() = TODO()
        set(value: kotlin.Long) = TODO()

    final var tokenList: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */
        get() = TODO()
        set(value: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class TokenRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var length: kotlin.Long
        get() = TODO()
        set(value: kotlin.Long) = TODO()

    final var position: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */
        get() = TODO()
        set(value: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */) = TODO()

    final var stringPosition: platform.darwin.StringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */
        get() = TODO()
        set(value: platform.darwin.StringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */) = TODO()

    final var theToken: platform.CoreServices.ScriptTokenType /* = kotlin.Short */
        get() = TODO()
        set(value: platform.CoreServices.ScriptTokenType /* = kotlin.Short */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class UCKeyLayoutFeatureInfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var keyLayoutFeatureInfoFormat: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var maxOutputStringLength: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var reserved: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class UCKeyModifiersToTableNum public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var defaultTableNum: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var keyModifiersToTableNumFormat: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var modifiersCount: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final val tableNum: kotlinx.cinterop.CArrayPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class UCKeySequenceDataIndex public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var charSequenceCount: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final val charSequenceOffsets: kotlinx.cinterop.CArrayPointer<platform.darwin.UInt16Var /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UInt16 /* = kotlin.UShort */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UShortVarOf<platform.darwin.UInt16 /* = kotlin.UShort */>> */
        get() = TODO()

    final var keySequenceDataIndexFormat: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class UCKeyStateEntryRange public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var charData: platform.CoreServices.UCKeyCharSeq /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.CoreServices.UCKeyCharSeq /* = kotlin.UShort */) = TODO()

    final var curStateRange: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var curStateStart: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var deltaMultiplier: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var nextState: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class UCKeyStateEntryTerminal public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var charData: platform.CoreServices.UCKeyCharSeq /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.CoreServices.UCKeyCharSeq /* = kotlin.UShort */) = TODO()

    final var curState: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class UCKeyStateRecord public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var stateEntryCount: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final val stateEntryData: kotlinx.cinterop.CArrayPointer<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */>> */
        get() = TODO()

    final var stateEntryFormat: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var stateZeroCharData: platform.CoreServices.UCKeyCharSeq /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.CoreServices.UCKeyCharSeq /* = kotlin.UShort */) = TODO()

    final var stateZeroNextState: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class UCKeyStateRecordsIndex public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var keyStateRecordCount: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final val keyStateRecordOffsets: kotlinx.cinterop.CArrayPointer<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */>> */
        get() = TODO()

    final var keyStateRecordsIndexFormat: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class UCKeyStateTerminators public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var keyStateTerminatorCount: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final val keyStateTerminators: kotlinx.cinterop.CArrayPointer<platform.CoreServices.UCKeyCharSeqVar /* = kotlinx.cinterop.UShortVarOf<platform.CoreServices.UCKeyCharSeq /* = kotlin.UShort */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UShortVarOf<platform.CoreServices.UCKeyCharSeq /* = kotlin.UShort */>> */
        get() = TODO()

    final var keyStateTerminatorsFormat: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class UCKeyToCharTableIndex public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var keyToCharTableCount: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var keyToCharTableIndexFormat: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final val keyToCharTableOffsets: kotlinx.cinterop.CArrayPointer<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */>> */
        get() = TODO()

    final var keyToCharTableSize: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class UCKeyboardLayout public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var keyLayoutDataVersion: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var keyLayoutFeatureInfoOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var keyLayoutHeaderFormat: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var keyboardTypeCount: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final val keyboardTypeList: kotlinx.cinterop.CArrayPointer<platform.CoreServices.UCKeyboardTypeHeader> /* = kotlinx.cinterop.CPointer<platform.CoreServices.UCKeyboardTypeHeader> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class UCKeyboardTypeHeader public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var keyModifiersToTableNumOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var keySequenceDataIndexOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var keyStateRecordsIndexOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var keyStateTerminatorsOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var keyToCharTableIndexOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var keyboardTypeFirst: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var keyboardTypeLast: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class UTCDateTime public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var fraction: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var highSeconds: platform.darwin.UInt16 /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.UInt16 /* = kotlin.UShort */) = TODO()

    final var lowSeconds: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class UnicodeMapping public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var mappingVersion: platform.CoreServices.UnicodeMapVersion /* = kotlin.Int */
        get() = TODO()
        set(value: platform.CoreServices.UnicodeMapVersion /* = kotlin.Int */) = TODO()

    final var otherEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.TextEncoding /* = kotlin.UInt */) = TODO()

    final var unicodeEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.TextEncoding /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class UntokenTable public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val index: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ShortVar /* = kotlinx.cinterop.ShortVarOf<kotlin.Short> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<kotlin.Short>> */
        get() = TODO()

    final var lastToken: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var len: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class Vector128 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val c: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>> */
        get() = TODO()

    final val l: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ULongVar /* = kotlinx.cinterop.ULongVarOf<kotlin.ULong> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ULongVarOf<kotlin.ULong>> */
        get() = TODO()

    final val s: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.UShortVar /* = kotlinx.cinterop.UShortVarOf<kotlin.UShort> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UShortVarOf<kotlin.UShort>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class Vector128Intel public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val c: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class VectorInformationIntel64 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Registers: kotlinx.cinterop.CArrayPointer<platform.CoreServices.Vector128Intel> /* = kotlinx.cinterop.CPointer<platform.CoreServices.Vector128Intel> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class VectorInformationPowerPC public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Registers: kotlinx.cinterop.CArrayPointer<platform.CoreServices.Vector128> /* = kotlinx.cinterop.CPointer<platform.CoreServices.Vector128> */
        get() = TODO()

    final var VRsave: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final val VSCR: platform.CoreServices.Vector128
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class VolMountInfoHeader public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var length: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var media: platform.CoreServices.VolumeType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.VolumeType /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class VolumeMountInfoHeader public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var flags: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var length: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final var media: platform.CoreServices.VolumeType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.VolumeType /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class WSClientContext public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var copyDescription: platform.CoreServices.WSClientContextCopyDescriptionCallBackProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */>>? */
        get() = TODO()
        set(value: platform.CoreServices.WSClientContextCopyDescriptionCallBackProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */>>? */) = TODO()

    final var info: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var release: platform.CoreServices.WSClientContextReleaseCallBackProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.CoreServices.WSClientContextReleaseCallBackProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) = TODO()

    final var retain: platform.CoreServices.WSClientContextRetainCallBackProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */
        get() = TODO()
        set(value: platform.CoreServices.WSClientContextRetainCallBackProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */) = TODO()

    final var version: platform.CoreFoundation.CFIndex /* = kotlin.Long */
        get() = TODO()
        set(value: platform.CoreFoundation.CFIndex /* = kotlin.Long */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class WideChar public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val a: platform.CoreServices.anonymousStruct1
        get() = TODO()

    final var b: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class WideCharArr public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val data: kotlinx.cinterop.CArrayPointer<platform.CoreServices.WideChar> /* = kotlinx.cinterop.CPointer<platform.CoreServices.WideChar> */
        get() = TODO()

    final var size: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class WritingCode public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var theLangCode: platform.darwin.LangCode /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.LangCode /* = kotlin.Short */) = TODO()

    final var theScriptCode: platform.darwin.ScriptCode /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.ScriptCode /* = kotlin.Short */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class XLibContainerHeader public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var containerStringsOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var cpuFamily: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var cpuModel: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var currentFormat: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var currentVersion: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var dateTimeStamp: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var dylibPathLength: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var dylibPathOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var exportHashOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var exportHashTablePower: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var exportKeyOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var exportNamesOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var exportSymbolOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var exportedSymbolCount: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var fragNameLength: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var fragNameOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var oldDefVersion: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var oldImpVersion: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var tag1: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    final var tag2: platform.darwin.OSType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.OSType /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class XLibExportedSymbol public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var bpOffset: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var classAndName: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class anonymousStruct1 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var hi: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    final var lo: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class anonymousStruct2 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var lHigh: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var lLow: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class anonymousStruct3 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var day: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var dayOfWeek: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var dayOfYear: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var era: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var hour: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var minute: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var month: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var pm: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var res1: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var res2: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var res3: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var second: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var weekOfYear: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var year: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class anonymousStruct4 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var eraAlt: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final val oldDate: platform.CoreServices.DateTimeRec
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class anonymousStruct5 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val dls: platform.CoreServices.anonymousStruct6
        get() = TODO()

    final var gmtDelta: kotlin.Long
        get() = TODO()
        set(value: kotlin.Long) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class anonymousStruct6 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var Delta: platform.darwin.SInt8 /* = kotlin.Byte */
        get() = TODO()
        set(value: platform.darwin.SInt8 /* = kotlin.Byte */) = TODO()

    final val pad: kotlinx.cinterop.CArrayPointer<platform.darwin.SInt8Var /* = kotlinx.cinterop.ByteVarOf<platform.darwin.SInt8 /* = kotlin.Byte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<platform.darwin.SInt8 /* = kotlin.Byte */>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class anonymousStruct7 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var length: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    final val text: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>> */
        get() = TODO()

    final var unused: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class anonymousStruct8 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var fullHashWord: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final val splitHashWord: platform.CoreServices.PEFSplitHashWord
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ccntTokenRecord public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val token: platform.CoreServices.AEDesc
        get() = TODO()

    final var tokenClass: platform.CoreServices.DescType /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.CoreServices.DescType /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class decform public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var digits: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var style: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    final var unused: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class decimal public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var exp: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final var sgn: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    final val sig: platform.CoreServices.anonymousStruct7
        get() = TODO()

    final var unused: kotlin.Byte
        get() = TODO()
        set(value: kotlin.Byte) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

typealias AEAddressDesc = platform.CoreServices.AEDesc

typealias AEArrayDataPointer = kotlinx.cinterop.CPointer<platform.CoreServices.AEArrayData>

typealias AEArrayDataPointerVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AEArrayDataPointer>

typealias AEArrayType = platform.darwin.SInt8

typealias AEArrayTypeVar = kotlinx.cinterop.ByteVarOf<platform.CoreServices.AEArrayType>

typealias AEBuildErrorCode = platform.darwin.UInt32

typealias AEBuildErrorCodeVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.AEBuildErrorCode>

typealias AECoerceDescProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType, platform.darwin.SRefCon?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr>>

typealias AECoerceDescProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AECoerceDescProcPtr>

typealias AECoerceDescUPP = platform.CoreServices.AECoerceDescProcPtr

typealias AECoerceDescUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AECoerceDescUPP>

typealias AECoercePtrProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType, kotlinx.cinterop.COpaquePointer?, platform.darwin.Size, platform.CoreServices.DescType, platform.darwin.SRefCon?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr>>

typealias AECoercePtrProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AECoercePtrProcPtr>

typealias AECoercePtrUPP = platform.CoreServices.AECoercePtrProcPtr

typealias AECoercePtrUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AECoercePtrUPP>

typealias AECoercionHandlerUPP = platform.CoreServices.AECoerceDescUPP

typealias AECoercionHandlerUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AECoercionHandlerUPP>

typealias AEDataStorage = kotlinx.cinterop.CPointer<platform.CoreServices.AEDataStorageTypeVar>

typealias AEDataStorageType = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEDataStorageType>

typealias AEDataStorageTypeVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AEDataStorageType>

typealias AEDataStorageVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AEDataStorage>

typealias AEDescList = platform.CoreServices.AEDesc

typealias AEDescPtr = kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>

typealias AEDescPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AEDescPtr>

typealias AEDisposeExternalProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer?, platform.darwin.Size, platform.darwin.SRefCon?) -> kotlin.Unit>>

typealias AEDisposeExternalProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AEDisposeExternalProcPtr>

typealias AEDisposeExternalUPP = platform.CoreServices.AEDisposeExternalProcPtr

typealias AEDisposeExternalUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AEDisposeExternalUPP>

typealias AEEventClass = platform.darwin.FourCharCode

typealias AEEventClassVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.AEEventClass>

typealias AEEventHandlerProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent>?, kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent>?, platform.darwin.SRefCon?) -> platform.darwin.OSErr>>

typealias AEEventHandlerProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AEEventHandlerProcPtr>

typealias AEEventHandlerUPP = platform.CoreServices.AEEventHandlerProcPtr

typealias AEEventHandlerUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AEEventHandlerUPP>

typealias AEEventID = platform.darwin.FourCharCode

typealias AEEventIDVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.AEEventID>

typealias AEEventSource = platform.darwin.SInt8

typealias AEEventSourceVar = kotlinx.cinterop.ByteVarOf<platform.CoreServices.AEEventSource>

typealias AEKeyword = platform.darwin.FourCharCode

typealias AEKeywordVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.AEKeyword>

typealias AERecord = platform.CoreServices.AEDescList

typealias AERemoteProcessResolverCallback = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AERemoteProcessResolverRef?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias AERemoteProcessResolverCallbackVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AERemoteProcessResolverCallback>

typealias AERemoteProcessResolverRef = kotlinx.cinterop.CPointer<cnames.structs.AERemoteProcessResolver>

typealias AERemoteProcessResolverRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AERemoteProcessResolverRef>

typealias AEReturnID = platform.darwin.SInt16

typealias AEReturnIDVar = kotlinx.cinterop.ShortVarOf<platform.CoreServices.AEReturnID>

typealias AESendMode = platform.darwin.SInt32

typealias AESendModeVar = kotlinx.cinterop.IntVarOf<platform.CoreServices.AESendMode>

typealias AESendPriority = platform.darwin.SInt16

typealias AESendPriorityVar = kotlinx.cinterop.ShortVarOf<platform.CoreServices.AESendPriority>

typealias AEStreamRef = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEStreamRef>

typealias AEStreamRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AEStreamRef>

typealias AETransactionID = platform.darwin.SInt32

typealias AETransactionIDVar = kotlinx.cinterop.IntVarOf<platform.CoreServices.AETransactionID>

typealias AFPServerSignature = kotlinx.cinterop.CArrayPointer<platform.darwin.UInt8Var>

typealias AFPServerSignatureVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AFPServerSignature>

typealias AFPVolMountInfoPtr = kotlinx.cinterop.CPointer<platform.CoreServices.AFPVolMountInfo>

typealias AFPVolMountInfoPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AFPVolMountInfoPtr>

typealias AFPXVolMountInfoPtr = kotlinx.cinterop.CPointer<platform.CoreServices.AFPXVolMountInfo>

typealias AFPXVolMountInfoPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AFPXVolMountInfoPtr>

typealias AVLCompareItemsProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AVLTreePtr?, kotlinx.cinterop.COpaquePointer?, kotlinx.cinterop.COpaquePointer?, platform.CoreServices.AVLNodeType) -> platform.darwin.SInt32>>

typealias AVLCompareItemsProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AVLCompareItemsProcPtr>

typealias AVLCompareItemsUPP = platform.CoreServices.AVLCompareItemsProcPtr

typealias AVLCompareItemsUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AVLCompareItemsUPP>

typealias AVLDisposeItemProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AVLTreePtr?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias AVLDisposeItemProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AVLDisposeItemProcPtr>

typealias AVLDisposeItemUPP = platform.CoreServices.AVLDisposeItemProcPtr

typealias AVLDisposeItemUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AVLDisposeItemUPP>

typealias AVLItemSizeProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AVLTreePtr?, kotlinx.cinterop.COpaquePointer?) -> platform.darwin.ByteCount>>

typealias AVLItemSizeProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AVLItemSizeProcPtr>

typealias AVLItemSizeUPP = platform.CoreServices.AVLItemSizeProcPtr

typealias AVLItemSizeUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AVLItemSizeUPP>

typealias AVLNodeType = platform.darwin.UInt16

typealias AVLNodeTypeVar = kotlinx.cinterop.UShortVarOf<platform.CoreServices.AVLNodeType>

typealias AVLOrder = platform.darwin.UInt16

typealias AVLOrderVar = kotlinx.cinterop.UShortVarOf<platform.CoreServices.AVLOrder>

typealias AVLTreePtr = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>

typealias AVLTreePtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AVLTreePtr>

typealias AVLVisitStage = platform.darwin.UInt16

typealias AVLVisitStageVar = kotlinx.cinterop.UShortVarOf<platform.CoreServices.AVLVisitStage>

typealias AVLWalkProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AVLTreePtr?, kotlinx.cinterop.COpaquePointer?, platform.CoreServices.AVLVisitStage, platform.CoreServices.AVLNodeType, platform.darwin.UInt32, platform.darwin.SInt32, kotlinx.cinterop.COpaquePointer?) -> platform.darwin.OSErr>>

typealias AVLWalkProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AVLWalkProcPtr>

typealias AVLWalkUPP = platform.CoreServices.AVLWalkProcPtr

typealias AVLWalkUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AVLWalkUPP>

typealias AliasHandle = kotlinx.cinterop.CPointer<platform.CoreServices.AliasPtrVar>

typealias AliasHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasHandle>

typealias AliasInfoType = kotlin.Short

typealias AliasInfoTypeVar = kotlinx.cinterop.ShortVarOf<platform.CoreServices.AliasInfoType>

typealias AliasPtr = kotlinx.cinterop.CPointer<platform.CoreServices.AliasRecord>

typealias AliasPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasPtr>

typealias AppleEvent = platform.CoreServices.AERecord

typealias AppleEventPtr = kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent>

typealias AppleEventPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AppleEventPtr>

typealias ApplicationSpecificChunkPtr = kotlinx.cinterop.CPointer<platform.CoreServices.ApplicationSpecificChunk>

typealias ApplicationSpecificChunkPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ApplicationSpecificChunkPtr>

typealias AreaID = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAreaID>

typealias AreaIDVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AreaID>

typealias AudioRecordingChunkPtr = kotlinx.cinterop.CPointer<platform.CoreServices.AudioRecordingChunk>

typealias AudioRecordingChunkPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AudioRecordingChunkPtr>

typealias CSComponentsThreadMode = platform.darwin.UInt32

typealias CSComponentsThreadModeVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.CSComponentsThreadMode>

typealias CSDiskSpaceRecoveryCallback = ((kotlin.Boolean, platform.darwin.UInt64, platform.CoreFoundation.CFErrorRef?) -> kotlin.Unit)?

typealias CSDiskSpaceRecoveryCallbackVar = kotlinx.cinterop.ObjCBlockVar<platform.CoreServices.CSDiskSpaceRecoveryCallback>

typealias CSDiskSpaceRecoveryOptions = kotlin.Int

typealias CSDiskSpaceRecoveryOptionsVar = kotlinx.cinterop.IntVarOf<platform.CoreServices.CSDiskSpaceRecoveryOptions>

typealias CSIdentityAuthorityRef = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityAuthority>

typealias CSIdentityAuthorityRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.CSIdentityAuthorityRef>

typealias CSIdentityClass = platform.CoreFoundation.CFIndex

typealias CSIdentityClassVar = kotlinx.cinterop.LongVarOf<platform.CoreServices.CSIdentityClass>

typealias CSIdentityFlags = platform.CoreFoundation.CFOptionFlags

typealias CSIdentityFlagsVar = kotlinx.cinterop.ULongVarOf<platform.CoreServices.CSIdentityFlags>

typealias CSIdentityQueryEvent = platform.CoreFoundation.CFIndex

typealias CSIdentityQueryEventVar = kotlinx.cinterop.LongVarOf<platform.CoreServices.CSIdentityQueryEvent>

typealias CSIdentityQueryFlags = platform.CoreFoundation.CFOptionFlags

typealias CSIdentityQueryFlagsVar = kotlinx.cinterop.ULongVarOf<platform.CoreServices.CSIdentityQueryFlags>

typealias CSIdentityQueryReceiveEventCallback = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.CSIdentityQueryRef?, platform.CoreServices.CSIdentityQueryEvent, platform.CoreFoundation.CFArrayRef?, platform.CoreFoundation.CFErrorRef?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias CSIdentityQueryReceiveEventCallbackVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.CSIdentityQueryReceiveEventCallback>

typealias CSIdentityQueryRef = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityQuery>

typealias CSIdentityQueryRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.CSIdentityQueryRef>

typealias CSIdentityQueryStringComparisonMethod = platform.CoreFoundation.CFIndex

typealias CSIdentityQueryStringComparisonMethodVar = kotlinx.cinterop.LongVarOf<platform.CoreServices.CSIdentityQueryStringComparisonMethod>

typealias CSIdentityRef = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>

typealias CSIdentityRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.CSIdentityRef>

typealias CSIdentityStatusUpdatedCallback = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.CSIdentityRef?, platform.CoreFoundation.CFIndex, platform.CoreFoundation.CFErrorRef?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias CSIdentityStatusUpdatedCallbackVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.CSIdentityStatusUpdatedCallback>

typealias CallingConventionType = kotlin.UShort

typealias CallingConventionTypeVar = kotlinx.cinterop.UShortVarOf<platform.CoreServices.CallingConventionType>

typealias CharByteTable = kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar>

typealias CharByteTableVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.CharByteTable>

typealias CollatorRef = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollatorRef>

typealias CollatorRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.CollatorRef>

typealias Collection = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>

typealias CollectionExceptionProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.Collection?, platform.darwin.OSErr) -> platform.darwin.OSErr>>

typealias CollectionExceptionProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.CollectionExceptionProcPtr>

typealias CollectionExceptionUPP = platform.CoreServices.CollectionExceptionProcPtr

typealias CollectionExceptionUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.CollectionExceptionUPP>

typealias CollectionFlattenProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.SInt32, kotlinx.cinterop.COpaquePointer?, kotlinx.cinterop.COpaquePointer?) -> platform.darwin.OSErr>>

typealias CollectionFlattenProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.CollectionFlattenProcPtr>

typealias CollectionFlattenUPP = platform.CoreServices.CollectionFlattenProcPtr

typealias CollectionFlattenUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.CollectionFlattenUPP>

typealias CollectionTag = platform.darwin.FourCharCode

typealias CollectionTagVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.CollectionTag>

typealias CollectionVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.Collection>

typealias CommentType = kotlinx.cinterop.CArrayPointer<platform.CoreServices.ScriptTokenTypeVar>

typealias CommentTypeVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.CommentType>

typealias CommentsChunkPtr = kotlinx.cinterop.CPointer<platform.CoreServices.CommentsChunk>

typealias CommentsChunkPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.CommentsChunkPtr>

typealias CommonChunkPtr = kotlinx.cinterop.CPointer<platform.CoreServices.CommonChunk>

typealias CommonChunkPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.CommonChunkPtr>

typealias Component = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>

typealias ComponentFunctionUPP = platform.darwin.UniversalProcPtr

typealias ComponentFunctionUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ComponentFunctionUPP>

typealias ComponentInstance = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>

typealias ComponentInstanceVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ComponentInstance>

typealias ComponentMPWorkFunctionHeaderRecordPtr = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentMPWorkFunctionHeaderRecord>

typealias ComponentMPWorkFunctionHeaderRecordPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ComponentMPWorkFunctionHeaderRecordPtr>

typealias ComponentMPWorkFunctionProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer?, platform.CoreServices.ComponentMPWorkFunctionHeaderRecordPtr?) -> platform.CoreServices.ComponentResult>>

typealias ComponentMPWorkFunctionProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ComponentMPWorkFunctionProcPtr>

typealias ComponentMPWorkFunctionUPP = platform.CoreServices.ComponentMPWorkFunctionProcPtr

typealias ComponentMPWorkFunctionUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ComponentMPWorkFunctionUPP>

typealias ComponentResourceHandle = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentResourcePtrVar>

typealias ComponentResourceHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ComponentResourceHandle>

typealias ComponentResourcePtr = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentResource>

typealias ComponentResourcePtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ComponentResourcePtr>

typealias ComponentResult = platform.darwin.SInt32

typealias ComponentResultVar = kotlinx.cinterop.IntVarOf<platform.CoreServices.ComponentResult>

typealias ComponentRoutineProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.ComponentParameters>?, platform.darwin.Handle?) -> platform.CoreServices.ComponentResult>>

typealias ComponentRoutineProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ComponentRoutineProcPtr>

typealias ComponentRoutineUPP = platform.CoreServices.ComponentRoutineProcPtr

typealias ComponentRoutineUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ComponentRoutineUPP>

typealias ComponentVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.Component>

typealias ConstFSEventStreamRef = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>

typealias ConstFSEventStreamRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ConstFSEventStreamRef>

typealias ConstFSSpecPtr = kotlinx.cinterop.CPointer<platform.CoreServices.FSSpec>

typealias ConstFSSpecPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ConstFSSpecPtr>

typealias ConstScriptCodeRunPtr = kotlinx.cinterop.CPointer<platform.CoreServices.ScriptCodeRun>

typealias ConstScriptCodeRunPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ConstScriptCodeRunPtr>

typealias ConstTextEncodingRunPtr = kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingRun>

typealias ConstTextEncodingRunPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ConstTextEncodingRunPtr>

typealias ConstTextPtr = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var>

typealias ConstTextPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ConstTextPtr>

typealias ConstTextToUnicodeInfo = platform.CoreServices.TextToUnicodeInfo

typealias ConstTextToUnicodeInfoVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ConstTextToUnicodeInfo>

typealias ConstUniCharArrayPtr = kotlinx.cinterop.CPointer<platform.darwin.UniCharVar>

typealias ConstUniCharArrayPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ConstUniCharArrayPtr>

typealias ConstUnicodeMappingPtr = kotlinx.cinterop.CPointer<platform.CoreServices.UnicodeMapping>

typealias ConstUnicodeMappingPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ConstUnicodeMappingPtr>

typealias ConstUnicodeToTextInfo = platform.CoreServices.UnicodeToTextInfo

typealias ConstUnicodeToTextInfoVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ConstUnicodeToTextInfo>

typealias CoreEndianFlipProc = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSType, platform.darwin.OSType, platform.darwin.SInt16, kotlinx.cinterop.COpaquePointer?, platform.darwin.ByteCount, kotlin.Boolean, kotlinx.cinterop.COpaquePointer?) -> platform.darwin.OSStatus>>

typealias CoreEndianFlipProcVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.CoreEndianFlipProc>

typealias CustomBadgeResourceHandle = kotlinx.cinterop.CPointer<platform.CoreServices.CustomBadgeResourcePtrVar>

typealias CustomBadgeResourceHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.CustomBadgeResourceHandle>

typealias CustomBadgeResourcePtr = kotlinx.cinterop.CPointer<platform.CoreServices.CustomBadgeResource>

typealias CustomBadgeResourcePtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.CustomBadgeResourcePtr>

typealias DCSDictionaryRef = kotlinx.cinterop.CPointer<cnames.structs.__DCSDictionary>

typealias DCSDictionaryRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.DCSDictionaryRef>

typealias DateCachePtr = kotlinx.cinterop.CPointer<platform.CoreServices.DateCacheRecord>

typealias DateCachePtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.DateCachePtr>

typealias DateDelta = platform.darwin.SInt8

typealias DateDeltaVar = kotlinx.cinterop.ByteVarOf<platform.CoreServices.DateDelta>

typealias DateForm = platform.darwin.SInt8

typealias DateFormVar = kotlinx.cinterop.ByteVarOf<platform.CoreServices.DateForm>

typealias DateOrders = platform.darwin.SInt8

typealias DateOrdersVar = kotlinx.cinterop.ByteVarOf<platform.CoreServices.DateOrders>

typealias DebugAssertOutputHandlerProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSType, platform.darwin.UInt32, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, kotlin.Long, kotlinx.cinterop.COpaquePointer?, platform.darwin.ConstStr255Param?) -> kotlin.Unit>>

typealias DebugAssertOutputHandlerProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.DebugAssertOutputHandlerProcPtr>

typealias DebugAssertOutputHandlerUPP = platform.CoreServices.DebugAssertOutputHandlerProcPtr

typealias DebugAssertOutputHandlerUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.DebugAssertOutputHandlerUPP>

typealias DebugComponentCallbackProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.SInt32, platform.darwin.UInt32, kotlinx.cinterop.CPointer<kotlinx.cinterop.BooleanVar>?) -> kotlin.Unit>>

typealias DebugComponentCallbackProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.DebugComponentCallbackProcPtr>

typealias DebugComponentCallbackUPP = platform.CoreServices.DebugComponentCallbackProcPtr

typealias DebugComponentCallbackUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.DebugComponentCallbackUPP>

typealias DebuggerDisposeThreadProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID) -> kotlin.Unit>>

typealias DebuggerDisposeThreadProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.DebuggerDisposeThreadProcPtr>

typealias DebuggerDisposeThreadTPP = platform.CoreServices.DebuggerDisposeThreadUPP

typealias DebuggerDisposeThreadTPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.DebuggerDisposeThreadTPP>

typealias DebuggerDisposeThreadUPP = platform.CoreServices.DebuggerDisposeThreadProcPtr

typealias DebuggerDisposeThreadUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.DebuggerDisposeThreadUPP>

typealias DebuggerNewThreadProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID) -> kotlin.Unit>>

typealias DebuggerNewThreadProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.DebuggerNewThreadProcPtr>

typealias DebuggerNewThreadTPP = platform.CoreServices.DebuggerNewThreadUPP

typealias DebuggerNewThreadTPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.DebuggerNewThreadTPP>

typealias DebuggerNewThreadUPP = platform.CoreServices.DebuggerNewThreadProcPtr

typealias DebuggerNewThreadUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.DebuggerNewThreadUPP>

typealias DebuggerThreadSchedulerProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.SchedulerInfoRecPtr?) -> platform.CoreServices.ThreadID>>

typealias DebuggerThreadSchedulerProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.DebuggerThreadSchedulerProcPtr>

typealias DebuggerThreadSchedulerTPP = platform.CoreServices.DebuggerThreadSchedulerUPP

typealias DebuggerThreadSchedulerTPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.DebuggerThreadSchedulerTPP>

typealias DebuggerThreadSchedulerUPP = platform.CoreServices.DebuggerThreadSchedulerProcPtr

typealias DebuggerThreadSchedulerUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.DebuggerThreadSchedulerUPP>

typealias DeferredTaskProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Long) -> kotlin.Unit>>

typealias DeferredTaskProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.DeferredTaskProcPtr>

typealias DeferredTaskPtr = kotlinx.cinterop.CPointer<platform.CoreServices.DeferredTask>

typealias DeferredTaskPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.DeferredTaskPtr>

typealias DeferredTaskUPP = platform.CoreServices.DeferredTaskProcPtr

typealias DeferredTaskUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.DeferredTaskUPP>

typealias DelimType = kotlinx.cinterop.CArrayPointer<platform.CoreServices.ScriptTokenTypeVar>

typealias DelimTypeVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.DelimType>

typealias DescType = platform.darwin.ResType

typealias DescTypeVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.DescType>

typealias ExceptionHandler = platform.CoreServices.ExceptionHandlerTPP

typealias ExceptionHandlerProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.ExceptionInformation>?) -> platform.darwin.OSStatus>>

typealias ExceptionHandlerProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ExceptionHandlerProcPtr>

typealias ExceptionHandlerTPP = platform.CoreServices.ExceptionHandlerUPP

typealias ExceptionHandlerTPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ExceptionHandlerTPP>

typealias ExceptionHandlerUPP = platform.CoreServices.ExceptionHandlerProcPtr

typealias ExceptionHandlerUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ExceptionHandlerUPP>

typealias ExceptionHandlerVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ExceptionHandler>

typealias ExceptionKind = kotlin.ULong

typealias ExceptionKindVar = kotlinx.cinterop.ULongVarOf<platform.CoreServices.ExceptionKind>

typealias ExtCommonChunkPtr = kotlinx.cinterop.CPointer<platform.CoreServices.ExtCommonChunk>

typealias ExtCommonChunkPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ExtCommonChunkPtr>

typealias ExtComponentResourceHandle = kotlinx.cinterop.CPointer<platform.CoreServices.ExtComponentResourcePtrVar>

typealias ExtComponentResourceHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ExtComponentResourceHandle>

typealias ExtComponentResourcePtr = kotlinx.cinterop.CPointer<platform.CoreServices.ExtComponentResource>

typealias ExtComponentResourcePtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ExtComponentResourcePtr>

typealias FNMessage = platform.darwin.UInt32

typealias FNMessageVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FNMessage>

typealias FNSubscriptionProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FNMessage, platform.darwin.OptionBits, kotlinx.cinterop.COpaquePointer?, platform.CoreServices.FNSubscriptionRef?) -> kotlin.Unit>>

typealias FNSubscriptionProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FNSubscriptionProcPtr>

typealias FNSubscriptionRef = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFNSubscriptionRef>

typealias FNSubscriptionRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FNSubscriptionRef>

typealias FNSubscriptionUPP = platform.CoreServices.FNSubscriptionProcPtr

typealias FNSubscriptionUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FNSubscriptionUPP>

typealias FPRegIntel = kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.UByteVar>

typealias FPRegIntelVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FPRegIntel>

typealias FPUInformation = platform.CoreServices.FPUInformationIntel64

typealias FSAliasFilterProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.BooleanVar>?, platform.darwin.Ptr?) -> kotlin.Boolean>>

typealias FSAliasFilterProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSAliasFilterProcPtr>

typealias FSAliasInfoBitmap = platform.darwin.UInt32

typealias FSAliasInfoBitmapVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FSAliasInfoBitmap>

typealias FSAliasInfoPtr = kotlinx.cinterop.CPointer<platform.CoreServices.FSAliasInfo>

typealias FSAliasInfoPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSAliasInfoPtr>

typealias FSAllocationFlags = platform.darwin.UInt16

typealias FSAllocationFlagsVar = kotlinx.cinterop.UShortVarOf<platform.CoreServices.FSAllocationFlags>

typealias FSCatalogBulkParamPtr = kotlinx.cinterop.CPointer<platform.CoreServices.FSCatalogBulkParam>

typealias FSCatalogBulkParamPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSCatalogBulkParamPtr>

typealias FSCatalogInfoBitmap = platform.darwin.UInt32

typealias FSCatalogInfoBitmapVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FSCatalogInfoBitmap>

typealias FSCatalogInfoPtr = kotlinx.cinterop.CPointer<platform.CoreServices.FSCatalogInfo>

typealias FSCatalogInfoPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSCatalogInfoPtr>

typealias FSEjectStatus = platform.darwin.UInt32

typealias FSEjectStatusVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FSEjectStatus>

typealias FSEventStreamCallback = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ConstFSEventStreamRef?, kotlinx.cinterop.COpaquePointer?, platform.posix.size_t, kotlinx.cinterop.COpaquePointer?, kotlinx.cinterop.CPointer<platform.CoreServices.FSEventStreamEventFlagsVar>?, kotlinx.cinterop.CPointer<platform.CoreServices.FSEventStreamEventIdVar>?) -> kotlin.Unit>>

typealias FSEventStreamCallbackVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSEventStreamCallback>

typealias FSEventStreamCreateFlags = platform.darwin.UInt32

typealias FSEventStreamCreateFlagsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FSEventStreamCreateFlags>

typealias FSEventStreamEventFlags = platform.darwin.UInt32

typealias FSEventStreamEventFlagsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FSEventStreamEventFlags>

typealias FSEventStreamEventId = platform.darwin.UInt64

typealias FSEventStreamEventIdVar = kotlinx.cinterop.ULongVarOf<platform.CoreServices.FSEventStreamEventId>

typealias FSEventStreamRef = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>

typealias FSEventStreamRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSEventStreamRef>

typealias FSFileOperationRef = kotlinx.cinterop.CPointer<cnames.structs.__FSFileOperation>

typealias FSFileOperationRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSFileOperationRef>

typealias FSFileOperationStage = platform.darwin.UInt32

typealias FSFileOperationStageVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FSFileOperationStage>

typealias FSFileOperationStatusProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSFileOperationRef?, kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?, platform.CoreServices.FSFileOperationStage, platform.darwin.OSStatus, platform.CoreFoundation.CFDictionaryRef?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias FSFileOperationStatusProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSFileOperationStatusProcPtr>

typealias FSFileSecurityRef = kotlinx.cinterop.CPointer<cnames.structs.__FSFileSecurity>

typealias FSFileSecurityRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSFileSecurityRef>

typealias FSForkCBInfoParamPtr = kotlinx.cinterop.CPointer<platform.CoreServices.FSForkCBInfoParam>

typealias FSForkCBInfoParamPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSForkCBInfoParamPtr>

typealias FSForkIOParamPtr = kotlinx.cinterop.CPointer<platform.CoreServices.FSForkIOParam>

typealias FSForkIOParamPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSForkIOParamPtr>

typealias FSForkInfoFlags = platform.darwin.UInt8

typealias FSForkInfoFlagsVar = kotlinx.cinterop.UByteVarOf<platform.CoreServices.FSForkInfoFlags>

typealias FSForkInfoPtr = kotlinx.cinterop.CPointer<platform.CoreServices.FSForkInfo>

typealias FSForkInfoPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSForkInfoPtr>

typealias FSIORefNum = kotlin.Int

typealias FSIORefNumVar = kotlinx.cinterop.IntVarOf<platform.CoreServices.FSIORefNum>

typealias FSIterator = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSIterator>

typealias FSIteratorFlags = platform.darwin.OptionBits

typealias FSIteratorFlagsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FSIteratorFlags>

typealias FSIteratorVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSIterator>

typealias FSMountStatus = platform.darwin.UInt32

typealias FSMountStatusVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FSMountStatus>

typealias FSPathFileOperationStatusProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSFileOperationRef?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, platform.CoreServices.FSFileOperationStage, platform.darwin.OSStatus, platform.CoreFoundation.CFDictionaryRef?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias FSPathFileOperationStatusProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSPathFileOperationStatusProcPtr>

typealias FSRangeLockParamPtr = kotlinx.cinterop.CPointer<platform.CoreServices.FSRangeLockParam>

typealias FSRangeLockParamPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSRangeLockParamPtr>

typealias FSRefForkIOParamPtr = kotlinx.cinterop.CPointer<platform.CoreServices.FSRefForkIOParam>

typealias FSRefForkIOParamPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSRefForkIOParamPtr>

typealias FSRefParamPtr = kotlinx.cinterop.CPointer<platform.CoreServices.FSRefParam>

typealias FSRefParamPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSRefParamPtr>

typealias FSRefPtr = kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>

typealias FSRefPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSRefPtr>

typealias FSSearchParamsPtr = kotlinx.cinterop.CPointer<platform.CoreServices.FSSearchParams>

typealias FSSearchParamsPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSSearchParamsPtr>

typealias FSSpecArrayPtr = platform.CoreServices.FSSpecPtr

typealias FSSpecArrayPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSSpecArrayPtr>

typealias FSSpecHandle = kotlinx.cinterop.CPointer<platform.CoreServices.FSSpecPtrVar>

typealias FSSpecHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSSpecHandle>

typealias FSSpecPtr = kotlinx.cinterop.CPointer<platform.CoreServices.FSSpec>

typealias FSSpecPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSSpecPtr>

typealias FSUnmountStatus = platform.darwin.UInt32

typealias FSUnmountStatusVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FSUnmountStatus>

typealias FSVolumeEjectProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSVolumeOperation?, kotlinx.cinterop.COpaquePointer?, platform.darwin.OSStatus, platform.CoreServices.FSVolumeRefNum, platform.posix.pid_t) -> kotlin.Unit>>

typealias FSVolumeEjectProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSVolumeEjectProcPtr>

typealias FSVolumeEjectUPP = platform.CoreServices.FSVolumeEjectProcPtr

typealias FSVolumeEjectUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSVolumeEjectUPP>

typealias FSVolumeInfoBitmap = platform.darwin.UInt32

typealias FSVolumeInfoBitmapVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FSVolumeInfoBitmap>

typealias FSVolumeInfoParamPtr = kotlinx.cinterop.CPointer<platform.CoreServices.FSVolumeInfoParam>

typealias FSVolumeInfoParamPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSVolumeInfoParamPtr>

typealias FSVolumeInfoPtr = kotlinx.cinterop.CPointer<platform.CoreServices.FSVolumeInfo>

typealias FSVolumeInfoPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSVolumeInfoPtr>

typealias FSVolumeMountProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSVolumeOperation?, kotlinx.cinterop.COpaquePointer?, platform.darwin.OSStatus, platform.CoreServices.FSVolumeRefNum) -> kotlin.Unit>>

typealias FSVolumeMountProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSVolumeMountProcPtr>

typealias FSVolumeMountUPP = platform.CoreServices.FSVolumeMountProcPtr

typealias FSVolumeMountUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSVolumeMountUPP>

typealias FSVolumeOperation = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>

typealias FSVolumeOperationVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSVolumeOperation>

typealias FSVolumeRefNum = platform.darwin.SInt16

typealias FSVolumeRefNumVar = kotlinx.cinterop.ShortVarOf<platform.CoreServices.FSVolumeRefNum>

typealias FSVolumeUnmountProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSVolumeOperation?, kotlinx.cinterop.COpaquePointer?, platform.darwin.OSStatus, platform.CoreServices.FSVolumeRefNum, platform.posix.pid_t) -> kotlin.Unit>>

typealias FSVolumeUnmountProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSVolumeUnmountProcPtr>

typealias FSVolumeUnmountUPP = platform.CoreServices.FSVolumeUnmountProcPtr

typealias FSVolumeUnmountUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSVolumeUnmountUPP>

typealias FolderClass = platform.darwin.OSType

typealias FolderClassVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FolderClass>

typealias FolderDescFlags = platform.darwin.UInt32

typealias FolderDescFlagsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FolderDescFlags>

typealias FolderDescPtr = kotlinx.cinterop.CPointer<platform.CoreServices.FolderDesc>

typealias FolderDescPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FolderDescPtr>

typealias FolderLocation = platform.darwin.OSType

typealias FolderLocationVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FolderLocation>

typealias FolderManagerNotificationProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSType, kotlinx.cinterop.COpaquePointer?, kotlinx.cinterop.COpaquePointer?) -> platform.darwin.OSStatus>>

typealias FolderManagerNotificationProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FolderManagerNotificationProcPtr>

typealias FolderManagerNotificationUPP = platform.CoreServices.FolderManagerNotificationProcPtr

typealias FolderManagerNotificationUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FolderManagerNotificationUPP>

typealias FolderRoutingPtr = kotlinx.cinterop.CPointer<platform.CoreServices.FolderRouting>

typealias FolderRoutingPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FolderRoutingPtr>

typealias FolderType = platform.darwin.OSType

typealias FolderTypeVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FolderType>

typealias FormatClass = platform.darwin.SInt8

typealias FormatClassVar = kotlinx.cinterop.ByteVarOf<platform.CoreServices.FormatClass>

typealias FormatResultType = platform.darwin.SInt8

typealias FormatResultTypeVar = kotlinx.cinterop.ByteVarOf<platform.CoreServices.FormatResultType>

typealias FormatStatus = kotlin.Short

typealias FormatStatusVar = kotlinx.cinterop.ShortVarOf<platform.CoreServices.FormatStatus>

typealias FormatVersionChunkPtr = kotlinx.cinterop.CPointer<platform.CoreServices.FormatVersionChunk>

typealias FormatVersionChunkPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FormatVersionChunkPtr>

typealias GetMissingComponentResourceProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.Component?, platform.darwin.OSType, platform.darwin.SInt16, kotlinx.cinterop.COpaquePointer?, kotlinx.cinterop.CPointer<platform.darwin.HandleVar>?) -> platform.darwin.OSErr>>

typealias GetMissingComponentResourceProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.GetMissingComponentResourceProcPtr>

typealias GetMissingComponentResourceUPP = platform.CoreServices.GetMissingComponentResourceProcPtr

typealias GetMissingComponentResourceUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.GetMissingComponentResourceUPP>

typealias HFSCatalogNodeID = platform.darwin.UInt32

typealias HFSCatalogNodeIDVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.HFSCatalogNodeID>

typealias IOCompletionProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ParmBlkPtr?) -> kotlin.Unit>>

typealias IOCompletionProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IOCompletionProcPtr>

typealias IOCompletionUPP = platform.CoreServices.IOCompletionProcPtr

typealias IOCompletionUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IOCompletionUPP>

typealias ISAType = platform.darwin.SInt8

typealias ISATypeVar = kotlinx.cinterop.ByteVarOf<platform.CoreServices.ISAType>

typealias IconFamilyHandle = kotlinx.cinterop.CPointer<platform.CoreServices.IconFamilyPtrVar>

typealias IconFamilyHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IconFamilyHandle>

typealias IconFamilyPtr = kotlinx.cinterop.CPointer<platform.CoreServices.IconFamilyResource>

typealias IconFamilyPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IconFamilyPtr>

typealias IconRef = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef>

typealias IconRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IconRef>

typealias IconServicesUsageFlags = platform.darwin.UInt32

typealias IconServicesUsageFlagsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.IconServicesUsageFlags>

typealias IndexToUCStringProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.UInt32, kotlinx.cinterop.COpaquePointer?, kotlinx.cinterop.COpaquePointer?, kotlinx.cinterop.CPointer<platform.CoreFoundation.CFStringRefVar>?, kotlinx.cinterop.CPointer<platform.CoreServices.UCTypeSelectOptionsVar>?) -> kotlin.Boolean>>

typealias IndexToUCStringProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IndexToUCStringProcPtr>

typealias IndexToUCStringUPP = platform.CoreServices.IndexToUCStringProcPtr

typealias IndexToUCStringUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IndexToUCStringUPP>

typealias InstrumentChunkPtr = kotlinx.cinterop.CPointer<platform.CoreServices.InstrumentChunk>

typealias InstrumentChunkPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.InstrumentChunkPtr>

typealias Intl0Hndl = kotlinx.cinterop.CPointer<platform.CoreServices.Intl0PtrVar>

typealias Intl0HndlVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.Intl0Hndl>

typealias Intl0Ptr = kotlinx.cinterop.CPointer<platform.CoreServices.Intl0Rec>

typealias Intl0PtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.Intl0Ptr>

typealias Intl1Hndl = kotlinx.cinterop.CPointer<platform.CoreServices.Intl1PtrVar>

typealias Intl1HndlVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.Intl1Hndl>

typealias Intl1Ptr = kotlinx.cinterop.CPointer<platform.CoreServices.Intl1Rec>

typealias Intl1PtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.Intl1Ptr>

typealias Itl4Handle = kotlinx.cinterop.CPointer<platform.CoreServices.Itl4PtrVar>

typealias Itl4HandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.Itl4Handle>

typealias Itl4Ptr = kotlinx.cinterop.CPointer<platform.CoreServices.Itl4Rec>

typealias Itl4PtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.Itl4Ptr>

typealias KCAttrType = platform.Security.SecKeychainAttrType

typealias KCAttrTypeVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.KCAttrType>

typealias KCAttribute = platform.Security.SecKeychainAttribute

typealias KCAttributeList = platform.Security.SecKeychainAttributeList

typealias KCAuthType = platform.darwin.FourCharCode

typealias KCAuthTypeVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.KCAuthType>

typealias KCCallbackProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.KCEvent, kotlinx.cinterop.CPointer<platform.CoreServices.KCCallbackInfo>?, kotlinx.cinterop.COpaquePointer?) -> platform.darwin.OSStatus>>

typealias KCCallbackProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCCallbackProcPtr>

typealias KCCallbackUPP = platform.CoreServices.KCCallbackProcPtr

typealias KCCallbackUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCCallbackUPP>

typealias KCCertAddOptions = platform.darwin.UInt32

typealias KCCertAddOptionsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.KCCertAddOptions>

typealias KCCertSearchOptions = platform.darwin.UInt32

typealias KCCertSearchOptionsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.KCCertSearchOptions>

typealias KCEvent = platform.darwin.UInt16

typealias KCEventMask = platform.darwin.UInt16

typealias KCEventMaskVar = kotlinx.cinterop.UShortVarOf<platform.CoreServices.KCEventMask>

typealias KCEventVar = kotlinx.cinterop.UShortVarOf<platform.CoreServices.KCEvent>

typealias KCItemAttr = platform.darwin.FourCharCode

typealias KCItemAttrVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.KCItemAttr>

typealias KCItemClass = platform.darwin.FourCharCode

typealias KCItemClassVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.KCItemClass>

typealias KCItemRef = platform.Security.SecKeychainItemRef

typealias KCItemRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCItemRef>

typealias KCProtocolType = platform.darwin.FourCharCode

typealias KCProtocolTypeVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.KCProtocolType>

typealias KCPublicKeyHash = kotlinx.cinterop.CArrayPointer<platform.darwin.UInt8Var>

typealias KCPublicKeyHashVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCPublicKeyHash>

typealias KCRef = platform.Security.SecKeychainRef

typealias KCRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCRef>

typealias KCSearchRef = platform.Security.SecKeychainSearchRef

typealias KCSearchRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCSearchRef>

typealias KCStatus = platform.Security.SecKeychainStatus

typealias KCStatusVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.KCStatus>

typealias KCVerifyStopOn = platform.darwin.UInt16

typealias KCVerifyStopOnVar = kotlinx.cinterop.UShortVarOf<platform.CoreServices.KCVerifyStopOn>

typealias LSAcceptanceFlags = platform.darwin.OptionBits

typealias LSAcceptanceFlagsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.LSAcceptanceFlags>

typealias LSHandlerOptions = platform.darwin.OptionBits

typealias LSHandlerOptionsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.LSHandlerOptions>

typealias LSItemInfoFlags = platform.darwin.OptionBits

typealias LSItemInfoFlagsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.LSItemInfoFlags>

typealias LSLaunchFlags = platform.darwin.OptionBits

typealias LSLaunchFlagsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.LSLaunchFlags>

typealias LSRequestedInfo = platform.darwin.OptionBits

typealias LSRequestedInfoVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.LSRequestedInfo>

typealias LSRolesMask = platform.darwin.OptionBits

typealias LSRolesMaskVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.LSRolesMask>

typealias LSSharedFileListChangedProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.LSSharedFileListRef?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias LSSharedFileListChangedProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.LSSharedFileListChangedProcPtr>

typealias LSSharedFileListItemRef = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListItemRef>

typealias LSSharedFileListItemRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.LSSharedFileListItemRef>

typealias LSSharedFileListRef = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListRef>

typealias LSSharedFileListRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.LSSharedFileListRef>

typealias LSSharedFileListResolutionFlags = platform.darwin.UInt32

typealias LSSharedFileListResolutionFlagsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.LSSharedFileListResolutionFlags>

typealias LocalDateTimeHandle = kotlinx.cinterop.CPointer<platform.CoreServices.LocalDateTimePtrVar>

typealias LocalDateTimeHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.LocalDateTimeHandle>

typealias LocalDateTimePtr = kotlinx.cinterop.CPointer<platform.CoreServices.LocalDateTime>

typealias LocalDateTimePtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.LocalDateTimePtr>

typealias LocaleNameMask = platform.darwin.UInt32

typealias LocaleNameMaskVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.LocaleNameMask>

typealias LocaleOperationClass = platform.darwin.FourCharCode

typealias LocaleOperationClassVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.LocaleOperationClass>

typealias LocaleOperationVariant = platform.darwin.FourCharCode

typealias LocaleOperationVariantVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.LocaleOperationVariant>

typealias LocalePartMask = platform.darwin.UInt32

typealias LocalePartMaskVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.LocalePartMask>

typealias LocaleRef = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLocaleRef>

typealias LocaleRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.LocaleRef>

typealias LongDateField = platform.darwin.SInt8

typealias LongDateFieldVar = kotlinx.cinterop.ByteVarOf<platform.CoreServices.LongDateField>

typealias LongDateTime = platform.darwin.SInt64

typealias LongDateTimeVar = kotlinx.cinterop.LongVarOf<platform.CoreServices.LongDateTime>

typealias MDItemRef = kotlinx.cinterop.CPointer<cnames.structs.__MDItem>

typealias MDItemRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MDItemRef>

typealias MDLabelRef = kotlinx.cinterop.CPointer<cnames.structs.__MDLabel>

typealias MDLabelRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MDLabelRef>

typealias MDQueryCreateResultFunction = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.MDQueryRef?, platform.CoreServices.MDItemRef?, kotlinx.cinterop.COpaquePointer?) -> kotlinx.cinterop.COpaquePointer?>>

typealias MDQueryCreateResultFunctionVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MDQueryCreateResultFunction>

typealias MDQueryCreateValueFunction = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.MDQueryRef?, platform.CoreFoundation.CFStringRef?, platform.CoreFoundation.CFTypeRef?, kotlinx.cinterop.COpaquePointer?) -> kotlinx.cinterop.COpaquePointer?>>

typealias MDQueryCreateValueFunctionVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MDQueryCreateValueFunction>

typealias MDQueryOptionFlags = kotlin.UInt

typealias MDQueryOptionFlagsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.MDQueryOptionFlags>

typealias MDQueryRef = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>

typealias MDQueryRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MDQueryRef>

typealias MDQuerySortComparatorFunction = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CArrayPointer<platform.CoreFoundation.CFTypeRefVar>?, kotlinx.cinterop.CArrayPointer<platform.CoreFoundation.CFTypeRefVar>?, kotlinx.cinterop.COpaquePointer?) -> platform.CoreFoundation.CFComparisonResult>>

typealias MDQuerySortComparatorFunctionVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MDQuerySortComparatorFunction>

typealias MDQuerySortOptionFlags = kotlin.UInt

typealias MDQuerySortOptionFlagsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.MDQuerySortOptionFlags>

typealias MIDIDataChunkPtr = kotlinx.cinterop.CPointer<platform.CoreServices.MIDIDataChunk>

typealias MIDIDataChunkPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MIDIDataChunkPtr>

typealias MPAddressSpaceID = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPAddressSpaceID>

typealias MPAddressSpaceIDVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPAddressSpaceID>

typealias MPAreaID = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPAreaID>

typealias MPAreaIDVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPAreaID>

typealias MPCoherenceID = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPCoherenceID>

typealias MPCoherenceIDVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPCoherenceID>

typealias MPConsoleID = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPConsoleID>

typealias MPConsoleIDVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPConsoleID>

typealias MPCpuID = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPCpuID>

typealias MPCpuIDVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPCpuID>

typealias MPCriticalRegionID = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPCriticalRegionID>

typealias MPCriticalRegionIDVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPCriticalRegionID>

typealias MPDebuggerLevel = platform.darwin.UInt32

typealias MPDebuggerLevelVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.MPDebuggerLevel>

typealias MPEventFlags = platform.darwin.UInt32

typealias MPEventFlagsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.MPEventFlags>

typealias MPEventID = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPEventID>

typealias MPEventIDVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPEventID>

typealias MPExceptionKind = platform.darwin.UInt32

typealias MPExceptionKindVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.MPExceptionKind>

typealias MPIsFullyInitializedProc = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Boolean>>

typealias MPIsFullyInitializedProcVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPIsFullyInitializedProc>

typealias MPNotificationID = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPNotificationID>

typealias MPNotificationIDVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPNotificationID>

typealias MPOpaqueID = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPOpaqueID>

typealias MPOpaqueIDClass = platform.darwin.UInt32

typealias MPOpaqueIDClassVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.MPOpaqueIDClass>

typealias MPOpaqueIDVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPOpaqueID>

typealias MPPageSizeClass = platform.darwin.UInt32

typealias MPPageSizeClassVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.MPPageSizeClass>

typealias MPProcessID = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPProcessID>

typealias MPProcessIDVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPProcessID>

typealias MPQueueID = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPQueueID>

typealias MPQueueIDVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPQueueID>

typealias MPRemoteContext = platform.darwin.UInt8

typealias MPRemoteContextVar = kotlinx.cinterop.UByteVarOf<platform.CoreServices.MPRemoteContext>

typealias MPRemoteProcedure = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer?) -> kotlinx.cinterop.COpaquePointer?>>

typealias MPRemoteProcedureVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPRemoteProcedure>

typealias MPSemaphoreCount = platform.darwin.ItemCount

typealias MPSemaphoreCountVar = kotlinx.cinterop.ULongVarOf<platform.CoreServices.MPSemaphoreCount>

typealias MPSemaphoreID = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPSemaphoreID>

typealias MPSemaphoreIDVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPSemaphoreID>

typealias MPTaskID = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>

typealias MPTaskIDVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPTaskID>

typealias MPTaskOptions = platform.darwin.OptionBits

typealias MPTaskOptionsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.MPTaskOptions>

typealias MPTaskStateKind = platform.darwin.UInt32

typealias MPTaskStateKindVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.MPTaskStateKind>

typealias MPTaskWeight = platform.darwin.UInt32

typealias MPTaskWeightVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.MPTaskWeight>

typealias MPTimerID = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTimerID>

typealias MPTimerIDVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPTimerID>

typealias MachineInformation = platform.CoreServices.MachineInformationIntel64

typealias MarkerChunkPtr = kotlinx.cinterop.CPointer<platform.CoreServices.MarkerChunk>

typealias MarkerChunkPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MarkerChunkPtr>

typealias MarkerIdType = platform.darwin.SInt16

typealias MarkerIdTypeVar = kotlinx.cinterop.ShortVarOf<platform.CoreServices.MarkerIdType>

typealias MemoryReferenceKind = kotlin.ULong

typealias MemoryReferenceKindVar = kotlinx.cinterop.ULongVarOf<platform.CoreServices.MemoryReferenceKind>

typealias NItl4Handle = kotlinx.cinterop.CPointer<platform.CoreServices.NItl4PtrVar>

typealias NItl4HandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.NItl4Handle>

typealias NItl4Ptr = kotlinx.cinterop.CPointer<platform.CoreServices.NItl4Rec>

typealias NItl4PtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.NItl4Ptr>

typealias Nanoseconds = platform.darwin.UnsignedWide

typealias NumFormatStringRec = platform.CoreServices.NumFormatString

typealias NumberPartsPtr = kotlinx.cinterop.CPointer<platform.CoreServices.NumberParts>

typealias NumberPartsPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.NumberPartsPtr>

typealias OSLAccessorProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType, platform.CoreServices.DescType, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.darwin.SRefCon?) -> platform.darwin.OSErr>>

typealias OSLAccessorProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.OSLAccessorProcPtr>

typealias OSLAccessorUPP = platform.CoreServices.OSLAccessorProcPtr

typealias OSLAccessorUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.OSLAccessorUPP>

typealias OSLAdjustMarksProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Long, kotlin.Long, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr>>

typealias OSLAdjustMarksProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.OSLAdjustMarksProcPtr>

typealias OSLAdjustMarksUPP = platform.CoreServices.OSLAdjustMarksProcPtr

typealias OSLAdjustMarksUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.OSLAdjustMarksUPP>

typealias OSLCompareProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.BooleanVar>?) -> platform.darwin.OSErr>>

typealias OSLCompareProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.OSLCompareProcPtr>

typealias OSLCompareUPP = platform.CoreServices.OSLCompareProcPtr

typealias OSLCompareUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.OSLCompareUPP>

typealias OSLCountProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType, platform.CoreServices.DescType, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVar>?) -> platform.darwin.OSErr>>

typealias OSLCountProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.OSLCountProcPtr>

typealias OSLCountUPP = platform.CoreServices.OSLCountProcPtr

typealias OSLCountUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.OSLCountUPP>

typealias OSLDisposeTokenProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr>>

typealias OSLDisposeTokenProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.OSLDisposeTokenProcPtr>

typealias OSLDisposeTokenUPP = platform.CoreServices.OSLDisposeTokenProcPtr

typealias OSLDisposeTokenUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.OSLDisposeTokenUPP>

typealias OSLGetErrDescProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.CoreServices.AEDesc>>?) -> platform.darwin.OSErr>>

typealias OSLGetErrDescProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.OSLGetErrDescProcPtr>

typealias OSLGetErrDescUPP = platform.CoreServices.OSLGetErrDescProcPtr

typealias OSLGetErrDescUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.OSLGetErrDescUPP>

typealias OSLGetMarkTokenProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr>>

typealias OSLGetMarkTokenProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.OSLGetMarkTokenProcPtr>

typealias OSLGetMarkTokenUPP = platform.CoreServices.OSLGetMarkTokenProcPtr

typealias OSLGetMarkTokenUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.OSLGetMarkTokenUPP>

typealias OSLMarkProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlin.Long) -> platform.darwin.OSErr>>

typealias OSLMarkProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.OSLMarkProcPtr>

typealias OSLMarkUPP = platform.CoreServices.OSLMarkProcPtr

typealias OSLMarkUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.OSLMarkUPP>

typealias OffsetArrayHandle = kotlinx.cinterop.CPointer<platform.CoreServices.OffsetArrayPtrVar>

typealias OffsetArrayHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.OffsetArrayHandle>

typealias OffsetArrayPtr = kotlinx.cinterop.CPointer<platform.CoreServices.OffsetArray>

typealias OffsetArrayPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.OffsetArrayPtr>

typealias OffsetTable = kotlinx.cinterop.CArrayPointer<platform.CoreServices.OffPair>

typealias OffsetTableVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.OffsetTable>

typealias PEFRelocChunk = platform.darwin.UInt16

typealias PEFRelocChunkVar = kotlinx.cinterop.UShortVarOf<platform.CoreServices.PEFRelocChunk>

typealias ParmBlkPtr = kotlinx.cinterop.COpaquePointer

typealias ParmBlkPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ParmBlkPtr>

typealias ProcInfoType = kotlin.ULong

typealias ProcInfoTypeVar = kotlinx.cinterop.ULongVarOf<platform.CoreServices.ProcInfoType>

typealias QElemPtr = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>

typealias QElemPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.QElemPtr>

typealias QHdrPtr = kotlinx.cinterop.CPointer<platform.CoreServices.QHdr>

typealias QHdrPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.QHdrPtr>

typealias QTypes = platform.darwin.SignedByte

typealias QTypesVar = kotlinx.cinterop.ByteVarOf<platform.CoreServices.QTypes>

typealias RDFlagsType = platform.darwin.UInt8

typealias RDFlagsTypeVar = kotlinx.cinterop.UByteVarOf<platform.CoreServices.RDFlagsType>

typealias RTAType = platform.darwin.SInt8

typealias RTATypeVar = kotlinx.cinterop.ByteVarOf<platform.CoreServices.RTAType>

typealias RegisterInformation = platform.CoreServices.RegisterInformationIntel64

typealias RegisteredComponentInstanceRecordPtr = kotlinx.cinterop.CPointer<platform.CoreServices.RegisteredComponentInstanceRecord>

typealias RegisteredComponentInstanceRecordPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.RegisteredComponentInstanceRecordPtr>

typealias RegisteredComponentRecordPtr = kotlinx.cinterop.CPointer<platform.CoreServices.RegisteredComponentRecord>

typealias RegisteredComponentRecordPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.RegisteredComponentRecordPtr>

typealias ResAttributes = platform.darwin.SInt16

typealias ResAttributesVar = kotlinx.cinterop.ShortVarOf<platform.CoreServices.ResAttributes>

typealias ResErrProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSErr) -> kotlin.Unit>>

typealias ResErrProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ResErrProcPtr>

typealias ResErrUPP = platform.CoreServices.ResErrProcPtr

typealias ResErrUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ResErrUPP>

typealias ResFileAttributes = platform.darwin.SInt16

typealias ResFileAttributesVar = kotlinx.cinterop.ShortVarOf<platform.CoreServices.ResFileAttributes>

typealias ResFileRefNum = platform.CoreServices.FSIORefNum

typealias ResFileRefNumVar = kotlinx.cinterop.IntVarOf<platform.CoreServices.ResFileRefNum>

typealias ResID = platform.darwin.SInt16

typealias ResIDVar = kotlinx.cinterop.ShortVarOf<platform.CoreServices.ResID>

typealias ResourceCount = platform.darwin.SInt16

typealias ResourceCountVar = kotlinx.cinterop.ShortVarOf<platform.CoreServices.ResourceCount>

typealias ResourceEndianFilterPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.Handle?, kotlin.Boolean) -> platform.darwin.OSErr>>

typealias ResourceEndianFilterPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ResourceEndianFilterPtr>

typealias ResourceIndex = platform.darwin.SInt16

typealias ResourceIndexVar = kotlinx.cinterop.ShortVarOf<platform.CoreServices.ResourceIndex>

typealias RoutineDescriptorHandle = kotlinx.cinterop.CPointer<platform.CoreServices.RoutineDescriptorPtrVar>

typealias RoutineDescriptorHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.RoutineDescriptorHandle>

typealias RoutineDescriptorPtr = kotlinx.cinterop.CPointer<platform.CoreServices.RoutineDescriptor>

typealias RoutineDescriptorPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.RoutineDescriptorPtr>

typealias RoutineFlagsType = kotlin.UShort

typealias RoutineFlagsTypeVar = kotlinx.cinterop.UShortVarOf<platform.CoreServices.RoutineFlagsType>

typealias RoutineRecordHandle = kotlinx.cinterop.CPointer<platform.CoreServices.RoutineRecordPtrVar>

typealias RoutineRecordHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.RoutineRecordHandle>

typealias RoutineRecordPtr = kotlinx.cinterop.CPointer<platform.CoreServices.RoutineRecord>

typealias RoutineRecordPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.RoutineRecordPtr>

typealias RoutingFlags = platform.darwin.UInt32

typealias RoutingFlagsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.RoutingFlags>

typealias RoutingResourceHandle = kotlinx.cinterop.CPointer<platform.CoreServices.RoutingResourcePtrVar>

typealias RoutingResourceHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.RoutingResourceHandle>

typealias RoutingResourcePtr = kotlinx.cinterop.CPointer<platform.CoreServices.RoutingResourceEntry>

typealias RoutingResourcePtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.RoutingResourcePtr>

typealias RsrcChainLocation = platform.darwin.SInt16

typealias RsrcChainLocationVar = kotlinx.cinterop.ShortVarOf<platform.CoreServices.RsrcChainLocation>

typealias SKDocumentID = platform.CoreFoundation.CFIndex

typealias SKDocumentIDVar = kotlinx.cinterop.LongVarOf<platform.CoreServices.SKDocumentID>

typealias SKDocumentIndexState = kotlin.UInt

typealias SKDocumentIndexStateVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.SKDocumentIndexState>

typealias SKDocumentRef = platform.CoreFoundation.CFTypeRef

typealias SKDocumentRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.SKDocumentRef>

typealias SKIndexDocumentIteratorRef = kotlinx.cinterop.CPointer<cnames.structs.__SKIndexDocumentIterator>

typealias SKIndexDocumentIteratorRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.SKIndexDocumentIteratorRef>

typealias SKIndexRef = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>

typealias SKIndexRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.SKIndexRef>

typealias SKIndexType = kotlin.UInt

typealias SKIndexTypeVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.SKIndexType>

typealias SKSearchGroupRef = kotlinx.cinterop.CPointer<cnames.structs.__SKSearchGroup>

typealias SKSearchGroupRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.SKSearchGroupRef>

typealias SKSearchOptions = platform.darwin.UInt32

typealias SKSearchOptionsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.SKSearchOptions>

typealias SKSearchRef = kotlinx.cinterop.CPointer<cnames.structs.__SKSearch>

typealias SKSearchRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.SKSearchRef>

typealias SKSearchResultsFilterCallBack = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.SKIndexRef?, platform.CoreServices.SKDocumentRef?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Boolean>>

typealias SKSearchResultsFilterCallBackVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.SKSearchResultsFilterCallBack>

typealias SKSearchResultsRef = kotlinx.cinterop.CPointer<cnames.structs.__SKSearchResults>

typealias SKSearchResultsRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.SKSearchResultsRef>

typealias SKSearchType = kotlin.UInt

typealias SKSearchTypeVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.SKSearchType>

typealias SKSummaryRef = kotlinx.cinterop.CPointer<cnames.structs.__SKSummary>

typealias SKSummaryRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.SKSummaryRef>

typealias SchedulerInfoRecPtr = kotlinx.cinterop.CPointer<platform.CoreServices.SchedulerInfoRec>

typealias SchedulerInfoRecPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.SchedulerInfoRecPtr>

typealias ScriptCodeRunPtr = kotlinx.cinterop.CPointer<platform.CoreServices.ScriptCodeRun>

typealias ScriptCodeRunPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ScriptCodeRunPtr>

typealias ScriptTokenType = kotlin.Short

typealias ScriptTokenTypeVar = kotlinx.cinterop.ShortVarOf<platform.CoreServices.ScriptTokenType>

typealias SelectorFunctionProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSType, kotlinx.cinterop.CPointer<platform.darwin.SInt32Var>?) -> platform.darwin.OSErr>>

typealias SelectorFunctionProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.SelectorFunctionProcPtr>

typealias SelectorFunctionUPP = platform.CoreServices.SelectorFunctionProcPtr

typealias SelectorFunctionUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.SelectorFunctionUPP>

typealias SleepQProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Long, platform.CoreServices.SleepQRecPtr?) -> kotlin.Long>>

typealias SleepQProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.SleepQProcPtr>

typealias SleepQRecPtr = kotlinx.cinterop.CPointer<platform.CoreServices.SleepQRec>

typealias SleepQRecPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.SleepQRecPtr>

typealias SleepQUPP = platform.CoreServices.SleepQProcPtr

typealias SleepQUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.SleepQUPP>

typealias SoundDataChunkPtr = kotlinx.cinterop.CPointer<platform.CoreServices.SoundDataChunk>

typealias SoundDataChunkPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.SoundDataChunkPtr>

typealias String2DateStatus = platform.CoreServices.StringToDateStatus

typealias String2DateStatusVar = kotlinx.cinterop.ShortVarOf<platform.CoreServices.String2DateStatus>

typealias StringToDateStatus = kotlin.Short

typealias StringToDateStatusVar = kotlinx.cinterop.ShortVarOf<platform.CoreServices.StringToDateStatus>

typealias SysPPtr = kotlinx.cinterop.COpaquePointer

typealias SysPPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.SysPPtr>

typealias TECEncodingPairsHandle = kotlinx.cinterop.CPointer<platform.CoreServices.TECEncodingPairsPtrVar>

typealias TECEncodingPairsHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECEncodingPairsHandle>

typealias TECEncodingPairsPtr = kotlinx.cinterop.CPointer<platform.CoreServices.TECEncodingPairsRec>

typealias TECEncodingPairsPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECEncodingPairsPtr>

typealias TECEncodingsListHandle = kotlinx.cinterop.CPointer<platform.CoreServices.TECEncodingsListPtrVar>

typealias TECEncodingsListHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECEncodingsListHandle>

typealias TECEncodingsListPtr = kotlinx.cinterop.CPointer<platform.CoreServices.TECEncodingsListRec>

typealias TECEncodingsListPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECEncodingsListPtr>

typealias TECInfoHandle = kotlinx.cinterop.CPointer<platform.CoreServices.TECInfoPtrVar>

typealias TECInfoHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECInfoHandle>

typealias TECInfoPtr = kotlinx.cinterop.CPointer<platform.CoreServices.TECInfo>

typealias TECInfoPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECInfoPtr>

typealias TECInternetNameUsageMask = platform.darwin.UInt32

typealias TECInternetNameUsageMaskVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TECInternetNameUsageMask>

typealias TECInternetNamesHandle = kotlinx.cinterop.CPointer<platform.CoreServices.TECInternetNamesPtrVar>

typealias TECInternetNamesHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECInternetNamesHandle>

typealias TECInternetNamesPtr = kotlinx.cinterop.CPointer<platform.CoreServices.TECInternetNamesRec>

typealias TECInternetNamesPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECInternetNamesPtr>

typealias TECLocaleListToEncodingListPtr = kotlinx.cinterop.CPointer<platform.CoreServices.TECLocaleListToEncodingListRec>

typealias TECLocaleListToEncodingListPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECLocaleListToEncodingListPtr>

typealias TECLocaleToEncodingsListHandle = kotlinx.cinterop.CPointer<platform.CoreServices.TECLocaleToEncodingsListPtrVar>

typealias TECLocaleToEncodingsListHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECLocaleToEncodingsListHandle>

typealias TECLocaleToEncodingsListPtr = kotlinx.cinterop.CPointer<platform.CoreServices.TECLocaleToEncodingsListRec>

typealias TECLocaleToEncodingsListPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECLocaleToEncodingsListPtr>

typealias TECObjectRef = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef>

typealias TECObjectRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECObjectRef>

typealias TECPluginClearContextInfoPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECObjectRef?, kotlinx.cinterop.CPointer<platform.CoreServices.TECConverterContextRec>?) -> platform.darwin.OSStatus>>

typealias TECPluginClearContextInfoPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECPluginClearContextInfoPtr>

typealias TECPluginClearSnifferContextInfoPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECSnifferObjectRef?, kotlinx.cinterop.CPointer<platform.CoreServices.TECSnifferContextRec>?) -> platform.darwin.OSStatus>>

typealias TECPluginClearSnifferContextInfoPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECPluginClearSnifferContextInfoPtr>

typealias TECPluginConvertTextEncodingPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECObjectRef?, kotlinx.cinterop.CPointer<platform.CoreServices.TECConverterContextRec>?) -> platform.darwin.OSStatus>>

typealias TECPluginConvertTextEncodingPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECPluginConvertTextEncodingPtr>

typealias TECPluginDisposeEncodingConverterPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECObjectRef?, kotlinx.cinterop.CPointer<platform.CoreServices.TECConverterContextRec>?) -> platform.darwin.OSStatus>>

typealias TECPluginDisposeEncodingConverterPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECPluginDisposeEncodingConverterPtr>

typealias TECPluginDisposeEncodingSnifferPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECSnifferObjectRef?, kotlinx.cinterop.CPointer<platform.CoreServices.TECSnifferContextRec>?) -> platform.darwin.OSStatus>>

typealias TECPluginDisposeEncodingSnifferPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECPluginDisposeEncodingSnifferPtr>

typealias TECPluginFlushConversionPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECObjectRef?, kotlinx.cinterop.CPointer<platform.CoreServices.TECConverterContextRec>?) -> platform.darwin.OSStatus>>

typealias TECPluginFlushConversionPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECPluginFlushConversionPtr>

typealias TECPluginGetCountAvailableSniffersPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingVar>?, platform.darwin.ItemCount, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar>?) -> platform.darwin.OSStatus>>

typealias TECPluginGetCountAvailableSniffersPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECPluginGetCountAvailableSniffersPtr>

typealias TECPluginGetCountAvailableTextEncodingPairsPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TECConversionInfo>?, platform.darwin.ItemCount, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar>?) -> platform.darwin.OSStatus>>

typealias TECPluginGetCountAvailableTextEncodingPairsPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECPluginGetCountAvailableTextEncodingPairsPtr>

typealias TECPluginGetCountAvailableTextEncodingsPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingVar>?, platform.darwin.ItemCount, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar>?) -> platform.darwin.OSStatus>>

typealias TECPluginGetCountAvailableTextEncodingsPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECPluginGetCountAvailableTextEncodingsPtr>

typealias TECPluginGetCountDestinationTextEncodingsPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TextEncoding, kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingVar>?, platform.darwin.ItemCount, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar>?) -> platform.darwin.OSStatus>>

typealias TECPluginGetCountDestinationTextEncodingsPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECPluginGetCountDestinationTextEncodingsPtr>

typealias TECPluginGetCountMailEncodingsPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingVar>?, platform.darwin.ItemCount, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar>?) -> platform.darwin.OSStatus>>

typealias TECPluginGetCountMailEncodingsPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECPluginGetCountMailEncodingsPtr>

typealias TECPluginGetCountSubTextEncodingsPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TextEncoding, kotlinx.cinterop.CArrayPointer<platform.CoreServices.TextEncodingVar>?, platform.darwin.ItemCount, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar>?) -> platform.darwin.OSStatus>>

typealias TECPluginGetCountSubTextEncodingsPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECPluginGetCountSubTextEncodingsPtr>

typealias TECPluginGetCountWebEncodingsPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingVar>?, platform.darwin.ItemCount, kotlinx.cinterop.CPointer<platform.darwin.ItemCountVar>?) -> platform.darwin.OSStatus>>

typealias TECPluginGetCountWebEncodingsPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECPluginGetCountWebEncodingsPtr>

typealias TECPluginGetPluginDispatchTablePtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlinx.cinterop.CPointer<platform.CoreServices.TECPluginDispatchTable>?>>

typealias TECPluginGetPluginDispatchTablePtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECPluginGetPluginDispatchTablePtr>

typealias TECPluginGetTextEncodingFromInternetNamePtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingVar>?, platform.darwin.ConstStr255Param?) -> platform.darwin.OSStatus>>

typealias TECPluginGetTextEncodingFromInternetNamePtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECPluginGetTextEncodingFromInternetNamePtr>

typealias TECPluginGetTextEncodingInternetNamePtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TextEncoding, platform.darwin.Str255?) -> platform.darwin.OSStatus>>

typealias TECPluginGetTextEncodingInternetNamePtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECPluginGetTextEncodingInternetNamePtr>

typealias TECPluginNewEncodingConverterPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TECObjectRefVar>?, kotlinx.cinterop.CPointer<platform.CoreServices.TECConverterContextRec>?, platform.CoreServices.TextEncoding, platform.CoreServices.TextEncoding) -> platform.darwin.OSStatus>>

typealias TECPluginNewEncodingConverterPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECPluginNewEncodingConverterPtr>

typealias TECPluginNewEncodingSnifferPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.TECSnifferObjectRefVar>?, kotlinx.cinterop.CPointer<platform.CoreServices.TECSnifferContextRec>?, platform.CoreServices.TextEncoding) -> platform.darwin.OSStatus>>

typealias TECPluginNewEncodingSnifferPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECPluginNewEncodingSnifferPtr>

typealias TECPluginSig = platform.darwin.OSType

typealias TECPluginSigVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TECPluginSig>

typealias TECPluginSignature = platform.darwin.OSType

typealias TECPluginSignatureVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TECPluginSignature>

typealias TECPluginSniffTextEncodingPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TECSnifferObjectRef?, kotlinx.cinterop.CPointer<platform.CoreServices.TECSnifferContextRec>?) -> platform.darwin.OSStatus>>

typealias TECPluginSniffTextEncodingPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECPluginSniffTextEncodingPtr>

typealias TECPluginVersion = platform.darwin.UInt32

typealias TECPluginVersionVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TECPluginVersion>

typealias TECSnifferObjectRef = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECSnifferObjectRef>

typealias TECSnifferObjectRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECSnifferObjectRef>

typealias TECSubTextEncodingsHandle = kotlinx.cinterop.CPointer<platform.CoreServices.TECSubTextEncodingsPtrVar>

typealias TECSubTextEncodingsHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECSubTextEncodingsHandle>

typealias TECSubTextEncodingsPtr = kotlinx.cinterop.CPointer<platform.CoreServices.TECSubTextEncodingsRec>

typealias TECSubTextEncodingsPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECSubTextEncodingsPtr>

typealias TMTaskPtr = kotlinx.cinterop.CPointer<platform.CoreServices.TMTask>

typealias TMTaskPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TMTaskPtr>

typealias TaskProc = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer?) -> platform.darwin.OSStatus>>

typealias TaskProcVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TaskProc>

typealias TaskStorageIndex = platform.darwin.ItemCount

typealias TaskStorageIndexVar = kotlinx.cinterop.ULongVarOf<platform.CoreServices.TaskStorageIndex>

typealias TaskStorageValue = platform.darwin.LogicalAddress

typealias TaskStorageValueVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TaskStorageValue>

typealias TextBreakLocatorRef = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTextBreakLocatorRef>

typealias TextBreakLocatorRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TextBreakLocatorRef>

typealias TextChunkPtr = kotlinx.cinterop.CPointer<platform.CoreServices.TextChunk>

typealias TextChunkPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TextChunkPtr>

typealias TextEncoding = platform.darwin.UInt32

typealias TextEncodingBase = platform.darwin.UInt32

typealias TextEncodingBaseVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncodingBase>

typealias TextEncodingFormat = platform.darwin.UInt32

typealias TextEncodingFormatVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncodingFormat>

typealias TextEncodingNameSelector = platform.darwin.UInt32

typealias TextEncodingNameSelectorVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncodingNameSelector>

typealias TextEncodingRunPtr = kotlinx.cinterop.CPointer<platform.CoreServices.TextEncodingRun>

typealias TextEncodingRunPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TextEncodingRunPtr>

typealias TextEncodingVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding>

typealias TextEncodingVariant = platform.darwin.UInt32

typealias TextEncodingVariantVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncodingVariant>

typealias TextPtr = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var>

typealias TextPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TextPtr>

typealias TextRangeArrayHandle = kotlinx.cinterop.CPointer<platform.CoreServices.TextRangeArrayPtrVar>

typealias TextRangeArrayHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TextRangeArrayHandle>

typealias TextRangeArrayPtr = kotlinx.cinterop.CPointer<platform.CoreServices.TextRangeArray>

typealias TextRangeArrayPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TextRangeArrayPtr>

typealias TextRangeHandle = kotlinx.cinterop.CPointer<platform.CoreServices.TextRangePtrVar>

typealias TextRangeHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TextRangeHandle>

typealias TextRangePtr = kotlinx.cinterop.CPointer<platform.CoreServices.TextRange>

typealias TextRangePtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TextRangePtr>

typealias TextToUnicodeInfo = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTextToUnicodeInfo>

typealias TextToUnicodeInfoVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TextToUnicodeInfo>

typealias ThreadEntryProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer?) -> platform.CoreServices.voidPtr?>>

typealias ThreadEntryProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ThreadEntryProcPtr>

typealias ThreadEntryTPP = platform.CoreServices.ThreadEntryUPP

typealias ThreadEntryTPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ThreadEntryTPP>

typealias ThreadEntryUPP = platform.CoreServices.ThreadEntryProcPtr

typealias ThreadEntryUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ThreadEntryUPP>

typealias ThreadID = kotlin.ULong

typealias ThreadIDVar = kotlinx.cinterop.ULongVarOf<platform.CoreServices.ThreadID>

typealias ThreadOptions = platform.darwin.UInt32

typealias ThreadOptionsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.ThreadOptions>

typealias ThreadSchedulerProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.SchedulerInfoRecPtr?) -> platform.CoreServices.ThreadID>>

typealias ThreadSchedulerProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ThreadSchedulerProcPtr>

typealias ThreadSchedulerTPP = platform.CoreServices.ThreadSchedulerUPP

typealias ThreadSchedulerTPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ThreadSchedulerTPP>

typealias ThreadSchedulerUPP = platform.CoreServices.ThreadSchedulerProcPtr

typealias ThreadSchedulerUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ThreadSchedulerUPP>

typealias ThreadState = platform.darwin.UInt16

typealias ThreadStateVar = kotlinx.cinterop.UShortVarOf<platform.CoreServices.ThreadState>

typealias ThreadStyle = platform.darwin.UInt32

typealias ThreadStyleVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.ThreadStyle>

typealias ThreadSwitchProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias ThreadSwitchProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ThreadSwitchProcPtr>

typealias ThreadSwitchTPP = platform.CoreServices.ThreadSwitchUPP

typealias ThreadSwitchTPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ThreadSwitchTPP>

typealias ThreadSwitchUPP = platform.CoreServices.ThreadSwitchProcPtr

typealias ThreadSwitchUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ThreadSwitchUPP>

typealias ThreadTaskRef = kotlinx.cinterop.COpaquePointer

typealias ThreadTaskRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ThreadTaskRef>

typealias ThreadTerminationProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias ThreadTerminationProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ThreadTerminationProcPtr>

typealias ThreadTerminationTPP = platform.CoreServices.ThreadTerminationUPP

typealias ThreadTerminationTPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ThreadTerminationTPP>

typealias ThreadTerminationUPP = platform.CoreServices.ThreadTerminationProcPtr

typealias ThreadTerminationUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ThreadTerminationUPP>

typealias TimerProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TMTaskPtr?) -> kotlin.Unit>>

typealias TimerProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TimerProcPtr>

typealias TimerUPP = platform.CoreServices.TimerProcPtr

typealias TimerUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TimerUPP>

typealias ToggleResults = platform.darwin.SInt16

typealias ToggleResultsVar = kotlinx.cinterop.ShortVarOf<platform.CoreServices.ToggleResults>

typealias TokenBlockPtr = kotlinx.cinterop.CPointer<platform.CoreServices.TokenBlock>

typealias TokenBlockPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TokenBlockPtr>

typealias TokenRecPtr = kotlinx.cinterop.CPointer<platform.CoreServices.TokenRec>

typealias TokenRecPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TokenRecPtr>

typealias TokenResults = platform.darwin.SInt8

typealias TokenResultsVar = kotlinx.cinterop.ByteVarOf<platform.CoreServices.TokenResults>

typealias TripleInt = kotlinx.cinterop.CArrayPointer<platform.CoreServices.FVector>

typealias TripleIntVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TripleInt>

typealias UCCharPropertyType = platform.darwin.SInt32

typealias UCCharPropertyTypeVar = kotlinx.cinterop.IntVarOf<platform.CoreServices.UCCharPropertyType>

typealias UCCharPropertyValue = platform.darwin.UInt32

typealias UCCharPropertyValueVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.UCCharPropertyValue>

typealias UCCollateOptions = platform.darwin.UInt32

typealias UCCollateOptionsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.UCCollateOptions>

typealias UCCollationValue = platform.darwin.UInt32

typealias UCCollationValueVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.UCCollationValue>

typealias UCKeyCharSeq = platform.darwin.UInt16

typealias UCKeyCharSeqVar = kotlinx.cinterop.UShortVarOf<platform.CoreServices.UCKeyCharSeq>

typealias UCKeyOutput = platform.darwin.UInt16

typealias UCKeyOutputVar = kotlinx.cinterop.UShortVarOf<platform.CoreServices.UCKeyOutput>

typealias UCTSWalkDirection = platform.darwin.UInt16

typealias UCTSWalkDirectionVar = kotlinx.cinterop.UShortVarOf<platform.CoreServices.UCTSWalkDirection>

typealias UCTextBreakOptions = platform.darwin.UInt32

typealias UCTextBreakOptionsVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.UCTextBreakOptions>

typealias UCTextBreakType = platform.darwin.UInt32

typealias UCTextBreakTypeVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.UCTextBreakType>

typealias UCTypeSelectCompareResult = platform.darwin.SInt32

typealias UCTypeSelectCompareResultVar = kotlinx.cinterop.IntVarOf<platform.CoreServices.UCTypeSelectCompareResult>

typealias UCTypeSelectOptions = platform.darwin.UInt16

typealias UCTypeSelectOptionsVar = kotlinx.cinterop.UShortVarOf<platform.CoreServices.UCTypeSelectOptions>

typealias UCTypeSelectRef = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUCTypeSelectRef>

typealias UCTypeSelectRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UCTypeSelectRef>

typealias UTCDateTimeHandle = kotlinx.cinterop.CPointer<platform.CoreServices.UTCDateTimePtrVar>

typealias UTCDateTimeHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UTCDateTimeHandle>

typealias UTCDateTimePtr = kotlinx.cinterop.CPointer<platform.CoreServices.UTCDateTime>

typealias UTCDateTimePtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UTCDateTimePtr>

typealias UniCharArrayHandle = kotlinx.cinterop.CPointer<platform.CoreServices.UniCharArrayPtrVar>

typealias UniCharArrayHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UniCharArrayHandle>

typealias UniCharArrayOffset = kotlin.ULong

typealias UniCharArrayOffsetVar = kotlinx.cinterop.ULongVarOf<platform.CoreServices.UniCharArrayOffset>

typealias UniCharArrayPtr = kotlinx.cinterop.CPointer<platform.darwin.UniCharVar>

typealias UniCharArrayPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UniCharArrayPtr>

typealias UnicodeMapVersion = platform.darwin.SInt32

typealias UnicodeMapVersionVar = kotlinx.cinterop.IntVarOf<platform.CoreServices.UnicodeMapVersion>

typealias UnicodeMappingPtr = kotlinx.cinterop.CPointer<platform.CoreServices.UnicodeMapping>

typealias UnicodeMappingPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UnicodeMappingPtr>

typealias UnicodeToTextFallbackProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.UniCharVar>?, platform.darwin.ByteCount, kotlinx.cinterop.CPointer<platform.darwin.ByteCountVar>?, platform.CoreServices.TextPtr?, platform.darwin.ByteCount, kotlinx.cinterop.CPointer<platform.darwin.ByteCountVar>?, platform.darwin.LogicalAddress?, platform.CoreServices.ConstUnicodeMappingPtr?) -> platform.darwin.OSStatus>>

typealias UnicodeToTextFallbackProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UnicodeToTextFallbackProcPtr>

typealias UnicodeToTextFallbackUPP = platform.CoreServices.UnicodeToTextFallbackProcPtr

typealias UnicodeToTextFallbackUPPVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UnicodeToTextFallbackUPP>

typealias UnicodeToTextInfo = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUnicodeToTextInfo>

typealias UnicodeToTextInfoVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UnicodeToTextInfo>

typealias UnicodeToTextRunInfo = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUnicodeToTextRunInfo>

typealias UnicodeToTextRunInfoVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UnicodeToTextRunInfo>

typealias UntokenTableHandle = kotlinx.cinterop.CPointer<platform.CoreServices.UntokenTablePtrVar>

typealias UntokenTableHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UntokenTableHandle>

typealias UntokenTablePtr = kotlinx.cinterop.CPointer<platform.CoreServices.UntokenTable>

typealias UntokenTablePtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UntokenTablePtr>

typealias VectorInformation = platform.CoreServices.VectorInformationIntel64

typealias VolMountInfoPtr = kotlinx.cinterop.CPointer<platform.CoreServices.VolMountInfoHeader>

typealias VolMountInfoPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.VolMountInfoPtr>

typealias VolumeMountInfoHeaderPtr = kotlinx.cinterop.CPointer<platform.CoreServices.VolumeMountInfoHeader>

typealias VolumeMountInfoHeaderPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.VolumeMountInfoHeaderPtr>

typealias VolumeType = platform.darwin.OSType

typealias VolumeTypeVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.VolumeType>

typealias WSClientContextCopyDescriptionCallBackProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer?) -> platform.CoreFoundation.CFStringRef?>>

typealias WSClientContextCopyDescriptionCallBackProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.WSClientContextCopyDescriptionCallBackProcPtr>

typealias WSClientContextReleaseCallBackProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias WSClientContextReleaseCallBackProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.WSClientContextReleaseCallBackProcPtr>

typealias WSClientContextRetainCallBackProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer?) -> kotlinx.cinterop.COpaquePointer?>>

typealias WSClientContextRetainCallBackProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.WSClientContextRetainCallBackProcPtr>

typealias WSMethodInvocationCallBackProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.WSMethodInvocationRef?, kotlinx.cinterop.COpaquePointer?, platform.CoreFoundation.CFDictionaryRef?) -> kotlin.Unit>>

typealias WSMethodInvocationCallBackProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.WSMethodInvocationCallBackProcPtr>

typealias WSMethodInvocationDeserializationProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.WSMethodInvocationRef?, platform.CoreFoundation.CFXMLTreeRef?, platform.CoreFoundation.CFXMLTreeRef?, kotlinx.cinterop.COpaquePointer?) -> platform.CoreFoundation.CFTypeRef?>>

typealias WSMethodInvocationDeserializationProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.WSMethodInvocationDeserializationProcPtr>

typealias WSMethodInvocationRef = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSMethodInvocationRef>

typealias WSMethodInvocationRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.WSMethodInvocationRef>

typealias WSMethodInvocationSerializationProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.WSMethodInvocationRef?, platform.CoreFoundation.CFTypeRef?, kotlinx.cinterop.COpaquePointer?) -> platform.CoreFoundation.CFStringRef?>>

typealias WSMethodInvocationSerializationProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.WSMethodInvocationSerializationProcPtr>

typealias WSProtocolHandlerDeserializationProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.WSProtocolHandlerRef?, platform.CoreFoundation.CFXMLTreeRef?, platform.CoreFoundation.CFXMLTreeRef?, kotlinx.cinterop.COpaquePointer?) -> platform.CoreFoundation.CFTypeRef?>>

typealias WSProtocolHandlerDeserializationProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.WSProtocolHandlerDeserializationProcPtr>

typealias WSProtocolHandlerRef = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSProtocolHandlerRef>

typealias WSProtocolHandlerRefVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.WSProtocolHandlerRef>

typealias WSProtocolHandlerSerializationProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.WSProtocolHandlerRef?, platform.CoreFoundation.CFTypeRef?, kotlinx.cinterop.COpaquePointer?) -> platform.CoreFoundation.CFStringRef?>>

typealias WSProtocolHandlerSerializationProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.WSProtocolHandlerSerializationProcPtr>

typealias WSTypeID = kotlin.UInt

typealias WSTypeIDVar = kotlinx.cinterop.UIntVarOf<platform.CoreServices.WSTypeID>

typealias XLibExportedSymbolHashSlot = platform.CoreServices.PEFExportedSymbolHashSlot

typealias XLibExportedSymbolKey = platform.CoreServices.PEFExportedSymbolKey

typealias ccntTokenRecHandle = kotlinx.cinterop.CPointer<platform.CoreServices.ccntTokenRecPtrVar>

typealias ccntTokenRecHandleVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ccntTokenRecHandle>

typealias ccntTokenRecPtr = kotlinx.cinterop.CPointer<platform.CoreServices.ccntTokenRecord>

typealias ccntTokenRecPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ccntTokenRecPtr>

typealias registerSelectorType = kotlin.UShort

typealias registerSelectorTypeVar = kotlinx.cinterop.UShortVarOf<platform.CoreServices.registerSelectorType>

typealias relop = kotlin.Short

typealias relopVar = kotlinx.cinterop.ShortVarOf<platform.CoreServices.relop>

typealias voidPtr = kotlinx.cinterop.COpaquePointer

typealias voidPtrVar = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.voidPtr>

val AAPNotCreatedErr: kotlin.Int
    get() = TODO()

val AAPNotFoundErr: kotlin.Int
    get() = TODO()

val ACE2Type: kotlin.UInt
    get() = TODO()

val ACE8Type: kotlin.UInt
    get() = TODO()

val AIFCID: kotlin.UInt
    get() = TODO()

val AIFCVersion1: kotlin.UInt
    get() = TODO()

val AIFFID: kotlin.UInt
    get() = TODO()

val ASDBadForkErr: kotlin.Int
    get() = TODO()

val ASDBadHeaderErr: kotlin.Int
    get() = TODO()

val ASDEntryNotFoundErr: kotlin.Int
    get() = TODO()

val AnnotationID: kotlin.UInt
    get() = TODO()

val AppleShareMediaType: kotlin.UInt
    get() = TODO()

val ApplicationSpecificID: kotlin.UInt
    get() = TODO()

val AudioRecordingID: kotlin.UInt
    get() = TODO()

val AuthorID: kotlin.UInt
    get() = TODO()

val CDEFNFnd: kotlin.Int
    get() = TODO()

const val COMPONENT_SIGNATURE: kotlin.Int = 0

val CantDecompress: kotlin.Int
    get() = TODO()

val CommentID: kotlin.UInt
    get() = TODO()

val CommonID: kotlin.UInt
    get() = TODO()

val CopyrightID: kotlin.UInt
    get() = TODO()

const val DEBUGFULL: kotlin.Int = 0

const val DEBUGLEVEL: kotlin.Int = 0

val DEBUG_ASSERT_COMPONENT_NAME_STRING: kotlin.String
    get() = TODO()

const val DEBUG_ASSERT_PRODUCTION_CODE: kotlin.Int = 0

const val DEBUG_LEVEL_BREAK_ONLY: kotlin.Int = 0

const val DEBUG_LEVEL_EXTERNAL: kotlin.Int = 0

const val DEBUG_LEVEL_INTERNAL: kotlin.Int = 0

const val DEBUG_LEVEL_PRODUCTION: kotlin.Int = 0

const val DEBUG_NO_OPTIONS: kotlin.Int = 0

const val DECSTROUTLEN: kotlin.Int = 0

val EQUALTO: kotlin.UInt
    get() = TODO()

val FORMID: kotlin.UInt
    get() = TODO()

val FormatVersionID: kotlin.UInt
    get() = TODO()

val ForwardBackwardLooping: kotlin.UInt
    get() = TODO()

val ForwardLooping: kotlin.UInt
    get() = TODO()

val GREATERTHAN: kotlin.UInt
    get() = TODO()

val HDActivity: kotlin.UInt
    get() = TODO()

val IdleActivity: kotlin.UInt
    get() = TODO()

val InstrumentID: kotlin.UInt
    get() = TODO()

val KAEISHandleCGI: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val LESSTHAN: kotlin.UInt
    get() = TODO()

val MACE3Type: kotlin.UInt
    get() = TODO()

val MACE6Type: kotlin.UInt
    get() = TODO()

val MIDIDataID: kotlin.UInt
    get() = TODO()

val MPCopyrightNotice: kotlin.String
    get() = TODO()

val MPLibraryCName: kotlin.String
    get() = TODO()

val MPLibraryName: kotlin.String
    get() = TODO()

val MPLibraryPName: kotlin.String
    get() = TODO()

val MPLibrary_DevelopmentRevision: kotlin.UInt
    get() = TODO()

val MPLibrary_MajorVersion: kotlin.UInt
    get() = TODO()

val MPLibrary_MinorVersion: kotlin.UInt
    get() = TODO()

val MPLibrary_Release: kotlin.UInt
    get() = TODO()

val MP_API_Version: kotlin.String
    get() = TODO()

val MarkerID: kotlin.UInt
    get() = TODO()

val NameID: kotlin.UInt
    get() = TODO()

val NetActivity: kotlin.UInt
    get() = TODO()

val NoLooping: kotlin.UInt
    get() = TODO()

val NoneType: kotlin.UInt
    get() = TODO()

val OSAControlFlowError: kotlin.Int
    get() = TODO()

val OSADuplicateHandler: kotlin.Int
    get() = TODO()

val OSADuplicateParameter: kotlin.Int
    get() = TODO()

val OSADuplicateProperty: kotlin.Int
    get() = TODO()

val OSAIllegalAccess: kotlin.Int
    get() = TODO()

val OSAIllegalAssign: kotlin.Int
    get() = TODO()

val OSAIllegalIndex: kotlin.Int
    get() = TODO()

val OSAIllegalRange: kotlin.Int
    get() = TODO()

val OSAInconsistentDeclarations: kotlin.Int
    get() = TODO()

val OSAMessageNotUnderstood: kotlin.Int
    get() = TODO()

val OSAMissingParameter: kotlin.Int
    get() = TODO()

val OSAParameterMismatch: kotlin.Int
    get() = TODO()

val OSASyntaxError: kotlin.Int
    get() = TODO()

val OSASyntaxTypeError: kotlin.Int
    get() = TODO()

val OSATokenTooLong: kotlin.Int
    get() = TODO()

val OSAUndefinedHandler: kotlin.Int
    get() = TODO()

val OSAUndefinedVariable: kotlin.Int
    get() = TODO()

val OverallAct: kotlin.UInt
    get() = TODO()

const val SIGDIGLEN: kotlin.Int = 0

val SlpTypeErr: kotlin.Int
    get() = TODO()

val SoundDataID: kotlin.UInt
    get() = TODO()

val UNORDERED: kotlin.UInt
    get() = TODO()

val UsrActivity: kotlin.UInt
    get() = TODO()

val WDEFNFnd: kotlin.Int
    get() = TODO()

val _MixedModeMagic: kotlin.UInt
    get() = TODO()

const val __AL_USE_OPAQUE_RECORD__: kotlin.Int = 0

const val __MAC_OS_X_MEMORY_MANAGER_CLEAN__: kotlin.Int = 0

const val __WIDE_CHAR_USE_STRUCT__: kotlin.Int = 0

val abbrevDate: kotlin.UInt
    get() = TODO()

val abortErr: kotlin.Int
    get() = TODO()

val acuteUprA: kotlin.UInt
    get() = TODO()

val acuteUprI: kotlin.UInt
    get() = TODO()

val acuteUprO: kotlin.UInt
    get() = TODO()

val acuteUprU: kotlin.UInt
    get() = TODO()

val addRefFailed: kotlin.Int
    get() = TODO()

val addResFailed: kotlin.Int
    get() = TODO()

val aeBuildSyntaxBadData: kotlin.UInt
    get() = TODO()

val aeBuildSyntaxBadDesc: kotlin.UInt
    get() = TODO()

val aeBuildSyntaxBadEOF: kotlin.UInt
    get() = TODO()

val aeBuildSyntaxBadHex: kotlin.UInt
    get() = TODO()

val aeBuildSyntaxBadNegative: kotlin.UInt
    get() = TODO()

val aeBuildSyntaxBadToken: kotlin.UInt
    get() = TODO()

val aeBuildSyntaxCoercedList: kotlin.UInt
    get() = TODO()

val aeBuildSyntaxMissingQuote: kotlin.UInt
    get() = TODO()

val aeBuildSyntaxNoCloseBrace: kotlin.UInt
    get() = TODO()

val aeBuildSyntaxNoCloseBracket: kotlin.UInt
    get() = TODO()

val aeBuildSyntaxNoCloseHex: kotlin.UInt
    get() = TODO()

val aeBuildSyntaxNoCloseParen: kotlin.UInt
    get() = TODO()

val aeBuildSyntaxNoCloseString: kotlin.UInt
    get() = TODO()

val aeBuildSyntaxNoColon: kotlin.UInt
    get() = TODO()

val aeBuildSyntaxNoEOF: kotlin.UInt
    get() = TODO()

val aeBuildSyntaxNoErr: kotlin.UInt
    get() = TODO()

val aeBuildSyntaxNoKey: kotlin.UInt
    get() = TODO()

val aeBuildSyntaxOddHex: kotlin.UInt
    get() = TODO()

val aeBuildSyntaxUncoercedDoubleAt: kotlin.UInt
    get() = TODO()

val aeBuildSyntaxUncoercedHex: kotlin.UInt
    get() = TODO()

val afpAccessDenied: kotlin.Int
    get() = TODO()

val afpAlreadyLoggedInErr: kotlin.Int
    get() = TODO()

val afpAlreadyMounted: kotlin.Int
    get() = TODO()

val afpAuthContinue: kotlin.Int
    get() = TODO()

val afpBadDirIDType: kotlin.Int
    get() = TODO()

val afpBadIDErr: kotlin.Int
    get() = TODO()

val afpBadUAM: kotlin.Int
    get() = TODO()

val afpBadVersNum: kotlin.Int
    get() = TODO()

val afpBitmapErr: kotlin.Int
    get() = TODO()

val afpCallNotAllowed: kotlin.Int
    get() = TODO()

val afpCallNotSupported: kotlin.Int
    get() = TODO()

val afpCantMountMoreSrvre: kotlin.Int
    get() = TODO()

val afpCantMove: kotlin.Int
    get() = TODO()

val afpCantRename: kotlin.Int
    get() = TODO()

val afpCatalogChanged: kotlin.Int
    get() = TODO()

val afpContainsSharedErr: kotlin.Int
    get() = TODO()

val afpDenyConflict: kotlin.Int
    get() = TODO()

val afpDiffVolErr: kotlin.Int
    get() = TODO()

val afpDirNotEmpty: kotlin.Int
    get() = TODO()

val afpDirNotFound: kotlin.Int
    get() = TODO()

val afpDiskFull: kotlin.Int
    get() = TODO()

val afpEofError: kotlin.Int
    get() = TODO()

val afpFileBusy: kotlin.Int
    get() = TODO()

val afpFlatVol: kotlin.Int
    get() = TODO()

val afpIDExists: kotlin.Int
    get() = TODO()

val afpIDNotFound: kotlin.Int
    get() = TODO()

val afpIconTypeError: kotlin.Int
    get() = TODO()

val afpInsideSharedErr: kotlin.Int
    get() = TODO()

val afpInsideTrashErr: kotlin.Int
    get() = TODO()

val afpItemNotFound: kotlin.Int
    get() = TODO()

val afpLockErr: kotlin.Int
    get() = TODO()

val afpMiscErr: kotlin.Int
    get() = TODO()

val afpNoMoreLocks: kotlin.Int
    get() = TODO()

val afpNoServer: kotlin.Int
    get() = TODO()

val afpObjectExists: kotlin.Int
    get() = TODO()

val afpObjectLocked: kotlin.Int
    get() = TODO()

val afpObjectNotFound: kotlin.Int
    get() = TODO()

val afpObjectTypeErr: kotlin.Int
    get() = TODO()

val afpParmErr: kotlin.Int
    get() = TODO()

val afpPwdExpiredErr: kotlin.Int
    get() = TODO()

val afpPwdNeedsChangeErr: kotlin.Int
    get() = TODO()

val afpPwdPolicyErr: kotlin.Int
    get() = TODO()

val afpPwdSameErr: kotlin.Int
    get() = TODO()

val afpPwdTooShortErr: kotlin.Int
    get() = TODO()

val afpRangeNotLocked: kotlin.Int
    get() = TODO()

val afpRangeOverlap: kotlin.Int
    get() = TODO()

val afpSameNodeErr: kotlin.Int
    get() = TODO()

val afpSameObjectErr: kotlin.Int
    get() = TODO()

val afpServerGoingDown: kotlin.Int
    get() = TODO()

val afpSessClosed: kotlin.Int
    get() = TODO()

val afpTooManyFilesOpen: kotlin.Int
    get() = TODO()

val afpUserNotAuth: kotlin.Int
    get() = TODO()

val afpVolLocked: kotlin.Int
    get() = TODO()

val appIsDaemon: kotlin.Int
    get() = TODO()

val appMemFullErr: kotlin.Int
    get() = TODO()

val appModeErr: kotlin.Int
    get() = TODO()

val appVersionTooOld: kotlin.Int
    get() = TODO()

val appleLogo: kotlin.UInt
    get() = TODO()

val appleMenuFolderIconResource: kotlin.Int
    get() = TODO()

val asiAliasName: kotlin.Int
    get() = TODO()

val asiParentName: kotlin.Int
    get() = TODO()

val asiServerName: kotlin.Int
    get() = TODO()

val asiVolumeName: kotlin.Int
    get() = TODO()

val asiZoneName: kotlin.Int
    get() = TODO()

val aspBadVersNum: kotlin.Int
    get() = TODO()

val aspBufTooSmall: kotlin.Int
    get() = TODO()

val aspNoAck: kotlin.Int
    get() = TODO()

val aspNoMoreSess: kotlin.Int
    get() = TODO()

val aspNoServers: kotlin.Int
    get() = TODO()

val aspParamErr: kotlin.Int
    get() = TODO()

val aspServerBusy: kotlin.Int
    get() = TODO()

val aspSessClosed: kotlin.Int
    get() = TODO()

val aspSizeErr: kotlin.Int
    get() = TODO()

val aspTooMany: kotlin.Int
    get() = TODO()

val atomIndexInvalidErr: kotlin.Int
    get() = TODO()

val atomsNotOfSameTypeErr: kotlin.Int
    get() = TODO()

val atpBadRsp: kotlin.Int
    get() = TODO()

val atpLenErr: kotlin.Int
    get() = TODO()

val authFailErr: kotlin.Int
    get() = TODO()

val auxiliaryExportDataUnavailable: kotlin.Int
    get() = TODO()

val bAccessCntl: kotlin.UInt
    get() = TODO()

val bAllowCDiDataHandler: kotlin.UInt
    get() = TODO()

val bAncestorModDateChanges: kotlin.UInt
    get() = TODO()

val bDoNotDisplay: kotlin.UInt
    get() = TODO()

val bHasBTreeMgr: kotlin.UInt
    get() = TODO()

val bHasBlankAccessPrivileges: kotlin.UInt
    get() = TODO()

val bHasCatSearch: kotlin.UInt
    get() = TODO()

val bHasCopyFile: kotlin.UInt
    get() = TODO()

val bHasDesktopMgr: kotlin.UInt
    get() = TODO()

val bHasDirectIO: kotlin.UInt
    get() = TODO()

val bHasExtFSVol: kotlin.UInt
    get() = TODO()

val bHasFileIDs: kotlin.UInt
    get() = TODO()

val bHasFolderLock: kotlin.UInt
    get() = TODO()

val bHasMoveRename: kotlin.UInt
    get() = TODO()

val bHasOpenDeny: kotlin.UInt
    get() = TODO()

val bHasPersonalAccessPrivileges: kotlin.UInt
    get() = TODO()

val bHasShortName: kotlin.UInt
    get() = TODO()

val bHasUserGroupList: kotlin.UInt
    get() = TODO()

val bIsAutoMounted: kotlin.UInt
    get() = TODO()

val bIsCasePreserving: kotlin.UInt
    get() = TODO()

val bIsCaseSensitive: kotlin.UInt
    get() = TODO()

val bIsEjectable: kotlin.UInt
    get() = TODO()

val bIsOnExternalBus: kotlin.UInt
    get() = TODO()

val bIsOnInternalBus: kotlin.UInt
    get() = TODO()

val bIsRemovable: kotlin.UInt
    get() = TODO()

val bL2PCanMapFileBlocks: kotlin.UInt
    get() = TODO()

val bLimitFCBs: kotlin.UInt
    get() = TODO()

val bLocalWList: kotlin.UInt
    get() = TODO()

val bNoBootBlks: kotlin.UInt
    get() = TODO()

val bNoDeskItems: kotlin.UInt
    get() = TODO()

val bNoLclSync: kotlin.UInt
    get() = TODO()

val bNoMiniFndr: kotlin.UInt
    get() = TODO()

val bNoRootTimes: kotlin.UInt
    get() = TODO()

val bNoSwitchTo: kotlin.UInt
    get() = TODO()

val bNoSysDir: kotlin.UInt
    get() = TODO()

val bNoVNEdit: kotlin.UInt
    get() = TODO()

val bNoVolumeSizes: kotlin.UInt
    get() = TODO()

val bParentModDateChanges: kotlin.UInt
    get() = TODO()

val bSupports2TBFiles: kotlin.UInt
    get() = TODO()

val bSupportsAsyncRequests: kotlin.UInt
    get() = TODO()

val bSupportsExclusiveLocks: kotlin.UInt
    get() = TODO()

val bSupportsExtendedFileSecurity: kotlin.UInt
    get() = TODO()

val bSupportsFSCatalogSearch: kotlin.UInt
    get() = TODO()

val bSupportsFSExchangeObjects: kotlin.UInt
    get() = TODO()

val bSupportsHFSPlusAPIs: kotlin.UInt
    get() = TODO()

val bSupportsJournaling: kotlin.UInt
    get() = TODO()

val bSupportsLongNames: kotlin.UInt
    get() = TODO()

val bSupportsMultiScriptNames: kotlin.UInt
    get() = TODO()

val bSupportsNamedForks: kotlin.UInt
    get() = TODO()

val bSupportsSubtreeIterators: kotlin.UInt
    get() = TODO()

val bSupportsSymbolicLinks: kotlin.UInt
    get() = TODO()

val bSupportsTrashVolumeCache: kotlin.UInt
    get() = TODO()

val bTrshOffLine: kotlin.UInt
    get() = TODO()

val badATPSkt: kotlin.Int
    get() = TODO()

val badBtSlpErr: kotlin.Int
    get() = TODO()

val badBuffNum: kotlin.Int
    get() = TODO()

val badCallOrderErr: kotlin.Int
    get() = TODO()

val badChannel: kotlin.Int
    get() = TODO()

val badCksmErr: kotlin.Int
    get() = TODO()

val badCodecCharacterizationErr: kotlin.Int
    get() = TODO()

val badComponentInstance: kotlin.Int
    get() = TODO()

val badComponentSelector: kotlin.Int
    get() = TODO()

val badComponentType: kotlin.Int
    get() = TODO()

val badControllerHeight: kotlin.Int
    get() = TODO()

val badDBtSlp: kotlin.Int
    get() = TODO()

val badDCksum: kotlin.Int
    get() = TODO()

val badDataRefIndex: kotlin.Int
    get() = TODO()

val badDelim: kotlin.UInt
    get() = TODO()

val badDepthErr: kotlin.Int
    get() = TODO()

val badDictFormat: kotlin.Int
    get() = TODO()

val badDragFlavorErr: kotlin.Int
    get() = TODO()

val badDragItemErr: kotlin.Int
    get() = TODO()

val badDragRefErr: kotlin.Int
    get() = TODO()

val badEditIndex: kotlin.Int
    get() = TODO()

val badEditList: kotlin.Int
    get() = TODO()

val badEditionFileErr: kotlin.Int
    get() = TODO()

val badEnding: kotlin.UInt
    get() = TODO()

val badExtResource: kotlin.Int
    get() = TODO()

val badFCBErr: kotlin.Int
    get() = TODO()

val badFidErr: kotlin.Int
    get() = TODO()

val badFileFormat: kotlin.Int
    get() = TODO()

val badFolderDescErr: kotlin.Int
    get() = TODO()

val badFormat: kotlin.Int
    get() = TODO()

val badImageDescription: kotlin.Int
    get() = TODO()

val badImageErr: kotlin.Int
    get() = TODO()

val badImageRgnErr: kotlin.Int
    get() = TODO()

val badInputText: kotlin.Int
    get() = TODO()

val badLocNameErr: kotlin.Int
    get() = TODO()

val badMDBErr: kotlin.Int
    get() = TODO()

val badMovErr: kotlin.Int
    get() = TODO()

val badPortNameErr: kotlin.Int
    get() = TODO()

val badProfileError: kotlin.Int
    get() = TODO()

val badPublicMovieAtom: kotlin.Int
    get() = TODO()

val badReqErr: kotlin.Int
    get() = TODO()

val badRoutingSizeErr: kotlin.Int
    get() = TODO()

val badSGChannel: kotlin.Int
    get() = TODO()

val badScrapRefErr: kotlin.Int
    get() = TODO()

val badSectionErr: kotlin.Int
    get() = TODO()

val badServiceMethodErr: kotlin.Int
    get() = TODO()

val badSubPartErr: kotlin.Int
    get() = TODO()

val badTrackIndex: kotlin.Int
    get() = TODO()

val badTranslationSpecErr: kotlin.Int
    get() = TODO()

val badUnitErr: kotlin.Int
    get() = TODO()

val baseDblQuote: kotlin.UInt
    get() = TODO()

val baseSingQuote: kotlin.UInt
    get() = TODO()

val bdNamErr: kotlin.Int
    get() = TODO()

val breakRecd: kotlin.Int
    get() = TODO()

val breveMark: kotlin.UInt
    get() = TODO()

val btDupRecErr: kotlin.Int
    get() = TODO()

val btKeyAttrErr: kotlin.Int
    get() = TODO()

val btKeyLenErr: kotlin.Int
    get() = TODO()

val btNoSpace: kotlin.Int
    get() = TODO()

val btRecNotFnd: kotlin.Int
    get() = TODO()

val buf2SmallErr: kotlin.Int
    get() = TODO()

val bufTooSmall: kotlin.Int
    get() = TODO()

val bufferIsSmall: kotlin.Int
    get() = TODO()

val buffersTooSmall: kotlin.Int
    get() = TODO()

val cADBAddress: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cAEList: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cAddressSpec: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cAppleTalkAddress: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cApplication: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cArc: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cBoolean: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cBusAddress: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cCell: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cChar: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cColorTable: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cColumn: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cDepthErr: kotlin.Int
    get() = TODO()

val cDevErr: kotlin.Int
    get() = TODO()

val cDevSpec: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cDocument: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cDrawingArea: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cEnumeration: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cEthernetAddress: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cFTPItem: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cFile: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cFireWireAddress: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cFixed: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cFixedPoint: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cFixedRectangle: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cGraphicLine: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cGraphicObject: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cGraphicShape: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cGraphicText: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cGroupedGraphic: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cHTML: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cIPAddress: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cInsertionLoc: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cInsertionPoint: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cInternetAddress: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cIntlText: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cIntlWritingCode: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cItem: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cKeystroke: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cLine: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cLocalTalkAddress: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cLongDateTime: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cLongFixed: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cLongFixedPoint: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cLongFixedRectangle: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cLongInteger: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cLongPoint: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cLongRectangle: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cMachineLoc: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cMatchErr: kotlin.Int
    get() = TODO()

val cMenu: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cMenuItem: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cNoMemErr: kotlin.Int
    get() = TODO()

val cObject: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cObjectSpecifier: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cOpenableObject: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cOval: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cPICT: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cParagraph: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cPixel: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cPixelMap: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cPolygon: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cProperty: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cProtectErr: kotlin.Int
    get() = TODO()

val cQDPoint: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cQDRectangle: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cRGBColor: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cRangeErr: kotlin.Int
    get() = TODO()

val cRectangle: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cResErr: kotlin.Int
    get() = TODO()

val cRotation: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cRoundedRectangle: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cRow: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cSCSIAddress: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cSelection: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cShortInteger: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cTable: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cTempMemErr: kotlin.Int
    get() = TODO()

val cText: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cTextFlow: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cTextStyles: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cTokenRingAddress: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cType: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cURL: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cUSBAddress: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cVersion: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cWindow: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val cWord: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val calArabicCivil: kotlin.UInt
    get() = TODO()

val calArabicLunar: kotlin.UInt
    get() = TODO()

val calCoptic: kotlin.UInt
    get() = TODO()

val calGregorian: kotlin.UInt
    get() = TODO()

val calJapanese: kotlin.UInt
    get() = TODO()

val calJewish: kotlin.UInt
    get() = TODO()

val calPersian: kotlin.UInt
    get() = TODO()

val callNotSupportedByNodeErr: kotlin.Int
    get() = TODO()

val cannotBeLeafAtomErr: kotlin.Int
    get() = TODO()

val cannotDeferErr: kotlin.Int
    get() = TODO()

val cannotFindAtomErr: kotlin.Int
    get() = TODO()

val cannotMakeContiguousErr: kotlin.Int
    get() = TODO()

val cannotMoveAttachedController: kotlin.Int
    get() = TODO()

val cannotSetWidthOfAttachedController: kotlin.Int
    get() = TODO()

val cantCreatePickerWindow: kotlin.Int
    get() = TODO()

val cantCreateSingleForkFile: kotlin.Int
    get() = TODO()

val cantDoThatInCurrentMode: kotlin.Int
    get() = TODO()

val cantEnableTrack: kotlin.Int
    get() = TODO()

val cantFindHandler: kotlin.Int
    get() = TODO()

val cantGetFlavorErr: kotlin.Int
    get() = TODO()

val cantLoadPackage: kotlin.Int
    get() = TODO()

val cantLoadPickMethodErr: kotlin.Int
    get() = TODO()

val cantLoadPicker: kotlin.Int
    get() = TODO()

val cantOpenHandler: kotlin.Int
    get() = TODO()

val cantPutPublicMovieAtom: kotlin.Int
    get() = TODO()

val cantReadUtilities: kotlin.UInt
    get() = TODO()

val cantReceiveFromSynthesizerOSErr: kotlin.Int
    get() = TODO()

val cantSendToSynthesizerOSErr: kotlin.Int
    get() = TODO()

val cantStepErr: kotlin.Int
    get() = TODO()

val catChangedErr: kotlin.Int
    get() = TODO()

val cbNotFound: kotlin.Int
    get() = TODO()

val cedilla: kotlin.UInt
    get() = TODO()

val centeredDot: kotlin.UInt
    get() = TODO()

val century: kotlin.UInt
    get() = TODO()

val cfragAbortClosureErr: kotlin.Int
    get() = TODO()

val cfragArchitectureErr: kotlin.Int
    get() = TODO()

val cfragCFMInternalErr: kotlin.Int
    get() = TODO()

val cfragCFMStartupErr: kotlin.Int
    get() = TODO()

val cfragCFragRsrcErr: kotlin.Int
    get() = TODO()

val cfragClosureIDErr: kotlin.Int
    get() = TODO()

val cfragConnectionIDErr: kotlin.Int
    get() = TODO()

val cfragContainerIDErr: kotlin.Int
    get() = TODO()

val cfragContextIDErr: kotlin.Int
    get() = TODO()

val cfragDupRegistrationErr: kotlin.Int
    get() = TODO()

val cfragExecFileRefErr: kotlin.Int
    get() = TODO()

val cfragFileSizeErr: kotlin.Int
    get() = TODO()

val cfragFirstErrCode: kotlin.Int
    get() = TODO()

val cfragFirstReservedCode: kotlin.Int
    get() = TODO()

val cfragFragmentCorruptErr: kotlin.Int
    get() = TODO()

val cfragFragmentFormatErr: kotlin.Int
    get() = TODO()

val cfragFragmentUsageErr: kotlin.Int
    get() = TODO()

val cfragImportTooNewErr: kotlin.Int
    get() = TODO()

val cfragImportTooOldErr: kotlin.Int
    get() = TODO()

val cfragInitAtBootErr: kotlin.Int
    get() = TODO()

val cfragInitFunctionErr: kotlin.Int
    get() = TODO()

val cfragInitLoopErr: kotlin.Int
    get() = TODO()

val cfragInitOrderErr: kotlin.Int
    get() = TODO()

val cfragLastErrCode: kotlin.Int
    get() = TODO()

val cfragLibConnErr: kotlin.Int
    get() = TODO()

val cfragMapFileErr: kotlin.Int
    get() = TODO()

val cfragNoApplicationErr: kotlin.Int
    get() = TODO()

val cfragNoClientMemErr: kotlin.Int
    get() = TODO()

val cfragNoIDsErr: kotlin.Int
    get() = TODO()

val cfragNoLibraryErr: kotlin.Int
    get() = TODO()

val cfragNoPositionErr: kotlin.Int
    get() = TODO()

val cfragNoPrivateMemErr: kotlin.Int
    get() = TODO()

val cfragNoRegistrationErr: kotlin.Int
    get() = TODO()

val cfragNoSectionErr: kotlin.Int
    get() = TODO()

val cfragNoSymbolErr: kotlin.Int
    get() = TODO()

val cfragNotClosureErr: kotlin.Int
    get() = TODO()

val cfragOutputLengthErr: kotlin.Int
    get() = TODO()

val cfragReservedCode_1: kotlin.Int
    get() = TODO()

val cfragReservedCode_2: kotlin.Int
    get() = TODO()

val cfragReservedCode_3: kotlin.Int
    get() = TODO()

val cfragRsrcForkErr: kotlin.Int
    get() = TODO()

val cfragStdFolderErr: kotlin.Int
    get() = TODO()

val cfragUnresolvedErr: kotlin.Int
    get() = TODO()

val channelBusy: kotlin.Int
    get() = TODO()

val channelNotBusy: kotlin.Int
    get() = TODO()

val circumflex: kotlin.UInt
    get() = TODO()

val circumflexUprA: kotlin.UInt
    get() = TODO()

val circumflexUprE: kotlin.UInt
    get() = TODO()

val circumflexUprI: kotlin.UInt
    get() = TODO()

val circumflexUprO: kotlin.UInt
    get() = TODO()

val circumflexUprU: kotlin.UInt
    get() = TODO()

val ckSumErr: kotlin.Int
    get() = TODO()

val clkRdErr: kotlin.Int
    get() = TODO()

val clkWrErr: kotlin.Int
    get() = TODO()

val closErr: kotlin.Int
    get() = TODO()

val cmCantConcatenateError: kotlin.Int
    get() = TODO()

val cmCantCopyModifiedV1Profile: kotlin.Int
    get() = TODO()

val cmCantDeleteElement: kotlin.Int
    get() = TODO()

val cmCantDeleteProfile: kotlin.Int
    get() = TODO()

val cmCantGamutCheckError: kotlin.Int
    get() = TODO()

val cmCantXYZ: kotlin.Int
    get() = TODO()

val cmElementTagNotFound: kotlin.Int
    get() = TODO()

val cmErrIncompatibleProfile: kotlin.Int
    get() = TODO()

val cmFatalProfileErr: kotlin.Int
    get() = TODO()

val cmIndexRangeErr: kotlin.Int
    get() = TODO()

val cmInvalidColorSpace: kotlin.Int
    get() = TODO()

val cmInvalidDstMap: kotlin.Int
    get() = TODO()

val cmInvalidProfile: kotlin.Int
    get() = TODO()

val cmInvalidProfileComment: kotlin.Int
    get() = TODO()

val cmInvalidProfileLocation: kotlin.Int
    get() = TODO()

val cmInvalidSearch: kotlin.Int
    get() = TODO()

val cmInvalidSrcMap: kotlin.Int
    get() = TODO()

val cmMethodError: kotlin.Int
    get() = TODO()

val cmMethodNotFound: kotlin.Int
    get() = TODO()

val cmNamedColorNotFound: kotlin.Int
    get() = TODO()

val cmNoCurrentProfile: kotlin.Int
    get() = TODO()

val cmNoGDevicesError: kotlin.Int
    get() = TODO()

val cmProfileError: kotlin.Int
    get() = TODO()

val cmProfileNotFound: kotlin.Int
    get() = TODO()

val cmProfilesIdentical: kotlin.Int
    get() = TODO()

val cmRangeOverFlow: kotlin.Int
    get() = TODO()

val cmSearchError: kotlin.Int
    get() = TODO()

val cmUnsupportedDataType: kotlin.Int
    get() = TODO()

val cmpAliasNoFlags: kotlin.UInt
    get() = TODO()

val cmpAliasOnlyThisFile: kotlin.UInt
    get() = TODO()

val cmpIsMissing: kotlin.UInt
    get() = TODO()

val cmpThreadSafe: kotlin.UInt
    get() = TODO()

val cmpWantsRegisterMessage: kotlin.UInt
    get() = TODO()

val codecAbortErr: kotlin.Int
    get() = TODO()

val codecBadDataErr: kotlin.Int
    get() = TODO()

val codecCantQueueErr: kotlin.Int
    get() = TODO()

val codecCantWhenErr: kotlin.Int
    get() = TODO()

val codecConditionErr: kotlin.Int
    get() = TODO()

val codecDataVersErr: kotlin.Int
    get() = TODO()

val codecDisabledErr: kotlin.Int
    get() = TODO()

val codecDroppedFrameErr: kotlin.Int
    get() = TODO()

val codecErr: kotlin.Int
    get() = TODO()

val codecExtensionNotFoundErr: kotlin.Int
    get() = TODO()

val codecImageBufErr: kotlin.Int
    get() = TODO()

val codecNeedAccessKeyErr: kotlin.Int
    get() = TODO()

val codecNeedToFlushChainErr: kotlin.Int
    get() = TODO()

val codecNoMemoryPleaseWaitErr: kotlin.Int
    get() = TODO()

val codecNothingToBlitErr: kotlin.Int
    get() = TODO()

val codecOffscreenFailedErr: kotlin.Int
    get() = TODO()

val codecOffscreenFailedPleaseRetryErr: kotlin.Int
    get() = TODO()

val codecOpenErr: kotlin.Int
    get() = TODO()

val codecParameterDialogConfirm: kotlin.Int
    get() = TODO()

val codecScreenBufErr: kotlin.Int
    get() = TODO()

val codecSizeErr: kotlin.Int
    get() = TODO()

val codecSpoolErr: kotlin.Int
    get() = TODO()

val codecUnimpErr: kotlin.Int
    get() = TODO()

val codecWouldOffscreenErr: kotlin.Int
    get() = TODO()

val collectionIndexRangeErr: kotlin.Int
    get() = TODO()

val collectionItemLockedErr: kotlin.Int
    get() = TODO()

val collectionItemNotFoundErr: kotlin.Int
    get() = TODO()

val collectionVersionErr: kotlin.Int
    get() = TODO()

val colorSyncNotInstalled: kotlin.Int
    get() = TODO()

val colorsRequestedErr: kotlin.Int
    get() = TODO()

val componentAutoVersionIncludeFlags: kotlin.UInt
    get() = TODO()

val componentDllEntryNotFoundErr: kotlin.Int
    get() = TODO()

val componentDllLoadErr: kotlin.Int
    get() = TODO()

val componentDoAutoVersion: kotlin.UInt
    get() = TODO()

val componentDontRegister: kotlin.Int
    get() = TODO()

val componentHasMultiplePlatforms: kotlin.UInt
    get() = TODO()

val componentLoadResident: kotlin.UInt
    get() = TODO()

val componentNotCaptured: kotlin.Int
    get() = TODO()

val componentNotThreadSafeErr: kotlin.Int
    get() = TODO()

val componentWantsUnregister: kotlin.UInt
    get() = TODO()

val connectionInvalid: kotlin.Int
    get() = TODO()

val constraintReachedErr: kotlin.Int
    get() = TODO()

val containerAlreadyOpenWrn: kotlin.Int
    get() = TODO()

val containerNotFoundWrn: kotlin.Int
    get() = TODO()

val controlErr: kotlin.Int
    get() = TODO()

val controlHandleInvalidErr: kotlin.Int
    get() = TODO()

val controlInvalidDataVersionErr: kotlin.Int
    get() = TODO()

val controlPanelFolderIconResource: kotlin.Int
    get() = TODO()

val controlPropertyInvalid: kotlin.Int
    get() = TODO()

val controlPropertyNotFoundErr: kotlin.Int
    get() = TODO()

val controllerBoundsNotExact: kotlin.Int
    get() = TODO()

val controllerHasFixedHeight: kotlin.Int
    get() = TODO()

val corErr: kotlin.Int
    get() = TODO()

val coreFoundationUnknownErr: kotlin.Int
    get() = TODO()

val couldNotParseSourceFileErr: kotlin.Int
    get() = TODO()

val couldNotResolveDataRef: kotlin.Int
    get() = TODO()

val couldNotUseAnExistingSample: kotlin.Int
    get() = TODO()

val couldntGetRequiredComponent: kotlin.Int
    get() = TODO()

val crash: kotlin.UInt
    get() = TODO()

val curNumberPartsVersion: kotlin.UInt
    get() = TODO()

val currLeadingZ: kotlin.UInt
    get() = TODO()

val currNegSym: kotlin.UInt
    get() = TODO()

val currSymLead: kotlin.UInt
    get() = TODO()

val currTrailingZ: kotlin.UInt
    get() = TODO()

val currentCurLang: kotlin.Int
    get() = TODO()

val currentDefLang: kotlin.Int
    get() = TODO()

val dInstErr: kotlin.Int
    get() = TODO()

val dRemovErr: kotlin.Int
    get() = TODO()

val dataAlreadyClosed: kotlin.Int
    get() = TODO()

val dataAlreadyOpenForWrite: kotlin.Int
    get() = TODO()

val dataNoDataRef: kotlin.Int
    get() = TODO()

val dataNotOpenForRead: kotlin.Int
    get() = TODO()

val dataNotOpenForWrite: kotlin.Int
    get() = TODO()

val dataVerErr: kotlin.Int
    get() = TODO()

val dateStdMask: kotlin.UInt
    get() = TODO()

val dateTimeInvalid: kotlin.UInt
    get() = TODO()

val dateTimeNotFound: kotlin.UInt
    get() = TODO()

val dayField: kotlin.UInt
    get() = TODO()

val dayLdingZ: kotlin.UInt
    get() = TODO()

val dayMask: kotlin.UInt
    get() = TODO()

val dayOfWeekField: kotlin.UInt
    get() = TODO()

val dayOfWeekMask: kotlin.UInt
    get() = TODO()

val dayOfYearField: kotlin.UInt
    get() = TODO()

val dayOfYearMask: kotlin.UInt
    get() = TODO()

val dblDagger: kotlin.UInt
    get() = TODO()

val dceExtErr: kotlin.Int
    get() = TODO()

val dcmBadDataSizeErr: kotlin.Int
    get() = TODO()

val dcmBadDictionaryErr: kotlin.Int
    get() = TODO()

val dcmBadFeatureErr: kotlin.Int
    get() = TODO()

val dcmBadFieldInfoErr: kotlin.Int
    get() = TODO()

val dcmBadFieldTypeErr: kotlin.Int
    get() = TODO()

val dcmBadFindMethodErr: kotlin.Int
    get() = TODO()

val dcmBadKeyErr: kotlin.Int
    get() = TODO()

val dcmBadPropertyErr: kotlin.Int
    get() = TODO()

val dcmBlockFullErr: kotlin.Int
    get() = TODO()

val dcmBufferOverflowErr: kotlin.Int
    get() = TODO()

val dcmDictionaryBusyErr: kotlin.Int
    get() = TODO()

val dcmDictionaryNotOpenErr: kotlin.Int
    get() = TODO()

val dcmDupRecordErr: kotlin.Int
    get() = TODO()

val dcmIterationCompleteErr: kotlin.Int
    get() = TODO()

val dcmNecessaryFieldErr: kotlin.Int
    get() = TODO()

val dcmNoAccessMethodErr: kotlin.Int
    get() = TODO()

val dcmNoFieldErr: kotlin.Int
    get() = TODO()

val dcmNoRecordErr: kotlin.Int
    get() = TODO()

val dcmNotDictionaryErr: kotlin.Int
    get() = TODO()

val dcmParamErr: kotlin.Int
    get() = TODO()

val dcmPermissionErr: kotlin.Int
    get() = TODO()

val dcmProtectedErr: kotlin.Int
    get() = TODO()

val dcmTooManyKeyErr: kotlin.Int
    get() = TODO()

val ddpLenErr: kotlin.Int
    get() = TODO()

val ddpSktErr: kotlin.Int
    get() = TODO()

val debuggingDuplicateOptionErr: kotlin.Int
    get() = TODO()

val debuggingDuplicateSignatureErr: kotlin.Int
    get() = TODO()

val debuggingExecutionContextErr: kotlin.Int
    get() = TODO()

val debuggingInvalidNameErr: kotlin.Int
    get() = TODO()

val debuggingInvalidOptionErr: kotlin.Int
    get() = TODO()

val debuggingInvalidSignatureErr: kotlin.Int
    get() = TODO()

val debuggingNoCallbackErr: kotlin.Int
    get() = TODO()

val debuggingNoMatchErr: kotlin.Int
    get() = TODO()

val defaultComponentAnyFlags: kotlin.UInt
    get() = TODO()

val defaultComponentAnyFlagsAnyManufacturer: kotlin.UInt
    get() = TODO()

val defaultComponentAnyFlagsAnyManufacturerAnySubType: kotlin.UInt
    get() = TODO()

val defaultComponentAnyManufacturer: kotlin.UInt
    get() = TODO()

val defaultComponentAnySubType: kotlin.UInt
    get() = TODO()

val defaultComponentIdentical: kotlin.UInt
    get() = TODO()

val defaultPhysicalEntryCount: kotlin.UInt
    get() = TODO()

val delimPad: kotlin.Int
    get() = TODO()

val desktopDamagedErr: kotlin.Int
    get() = TODO()

val desktopIconResource: kotlin.Int
    get() = TODO()

val destPortErr: kotlin.Int
    get() = TODO()

val deviceCantMeetRequest: kotlin.Int
    get() = TODO()

val diaeresisUprE: kotlin.UInt
    get() = TODO()

val diaeresisUprI: kotlin.UInt
    get() = TODO()

val diaeresisUprY: kotlin.UInt
    get() = TODO()

val dialogNoTimeoutErr: kotlin.Int
    get() = TODO()

val diffVolErr: kotlin.Int
    get() = TODO()

val digiUnimpErr: kotlin.Int
    get() = TODO()

val dirFulErr: kotlin.Int
    get() = TODO()

val dirNFErr: kotlin.Int
    get() = TODO()

val directXObjectAlreadyExists: kotlin.Int
    get() = TODO()

val dmy: kotlin.UInt
    get() = TODO()

val dotlessLwrI: kotlin.UInt
    get() = TODO()

val doubleAcute: kotlin.UInt
    get() = TODO()

val dragNotAcceptedErr: kotlin.Int
    get() = TODO()

val driverHardwareGoneErr: kotlin.Int
    get() = TODO()

val dropFolderIconResource: kotlin.Int
    get() = TODO()

val drvQType: kotlin.UInt
    get() = TODO()

val ds32BitMode: kotlin.UInt
    get() = TODO()

val dsAddressErr: kotlin.UInt
    get() = TODO()

val dsBadLaunch: kotlin.UInt
    get() = TODO()

val dsBadLibrary: kotlin.UInt
    get() = TODO()

val dsBadPatch: kotlin.UInt
    get() = TODO()

val dsBadPatchHeader: kotlin.UInt
    get() = TODO()

val dsBadSANEOpcode: kotlin.UInt
    get() = TODO()

val dsBadSlotInt: kotlin.UInt
    get() = TODO()

val dsBadStartupDisk: kotlin.Int
    get() = TODO()

val dsBufPtrTooLow: kotlin.UInt
    get() = TODO()

val dsBusError: kotlin.UInt
    get() = TODO()

val dsCDEFNotFound: kotlin.UInt
    get() = TODO()

val dsCantHoldSystemHeap: kotlin.UInt
    get() = TODO()

val dsChkErr: kotlin.UInt
    get() = TODO()

val dsCoreErr: kotlin.UInt
    get() = TODO()

val dsDirtyDisk: kotlin.UInt
    get() = TODO()

val dsDisassemblerInstalled: kotlin.Int
    get() = TODO()

val dsExtensionsDisabled: kotlin.Int
    get() = TODO()

val dsFPErr: kotlin.UInt
    get() = TODO()

val dsFSErr: kotlin.UInt
    get() = TODO()

val dsFinderErr: kotlin.UInt
    get() = TODO()

val dsForcedQuit: kotlin.UInt
    get() = TODO()

val dsGibblyMovedToDisabledFolder: kotlin.UInt
    get() = TODO()

val dsGreeting: kotlin.Int
    get() = TODO()

val dsHD20Installed: kotlin.Int
    get() = TODO()

val dsHMenuFindErr: kotlin.UInt
    get() = TODO()

val dsIOCoreErr: kotlin.UInt
    get() = TODO()

val dsIllInstErr: kotlin.UInt
    get() = TODO()

val dsIrqErr: kotlin.UInt
    get() = TODO()

val dsLineAErr: kotlin.UInt
    get() = TODO()

val dsLineFErr: kotlin.UInt
    get() = TODO()

val dsLoadErr: kotlin.UInt
    get() = TODO()

val dsLostConnectionToNetworkDisk: kotlin.UInt
    get() = TODO()

val dsMBATAPISysError: kotlin.UInt
    get() = TODO()

val dsMBATASysError: kotlin.UInt
    get() = TODO()

val dsMBExternFlpySysError: kotlin.UInt
    get() = TODO()

val dsMBFlpySysError: kotlin.UInt
    get() = TODO()

val dsMBSysError: kotlin.UInt
    get() = TODO()

val dsMBarNFnd: kotlin.UInt
    get() = TODO()

val dsMDEFNotFound: kotlin.UInt
    get() = TODO()

val dsMacOSROMVersionTooOld: kotlin.UInt
    get() = TODO()

val dsMacsBugInstalled: kotlin.Int
    get() = TODO()

val dsMemFullErr: kotlin.UInt
    get() = TODO()

val dsMiscErr: kotlin.UInt
    get() = TODO()

val dsMixedModeFailure: kotlin.UInt
    get() = TODO()

val dsMustUseFCBAccessors: kotlin.UInt
    get() = TODO()

val dsNeedToWriteBootBlocks: kotlin.UInt
    get() = TODO()

val dsNoExtsDisassembler: kotlin.Int
    get() = TODO()

val dsNoExtsMacsBug: kotlin.Int
    get() = TODO()

val dsNoFPU: kotlin.UInt
    get() = TODO()

val dsNoPackErr: kotlin.UInt
    get() = TODO()

val dsNoPatch: kotlin.UInt
    get() = TODO()

val dsNoPk1: kotlin.UInt
    get() = TODO()

val dsNoPk2: kotlin.UInt
    get() = TODO()

val dsNoPk3: kotlin.UInt
    get() = TODO()

val dsNoPk4: kotlin.UInt
    get() = TODO()

val dsNoPk5: kotlin.UInt
    get() = TODO()

val dsNoPk6: kotlin.UInt
    get() = TODO()

val dsNoPk7: kotlin.UInt
    get() = TODO()

val dsNotEnoughRAMToBoot: kotlin.UInt
    get() = TODO()

val dsNotThe1: kotlin.Int
    get() = TODO()

val dsOldSystem: kotlin.UInt
    get() = TODO()

val dsOvflowErr: kotlin.UInt
    get() = TODO()

val dsPCCardATASysError: kotlin.UInt
    get() = TODO()

val dsParityErr: kotlin.UInt
    get() = TODO()

val dsPrivErr: kotlin.UInt
    get() = TODO()

val dsRAMDiskTooBig: kotlin.UInt
    get() = TODO()

val dsReinsert: kotlin.UInt
    get() = TODO()

val dsRemoveDisk: kotlin.UInt
    get() = TODO()

val dsSCSIWarn: kotlin.UInt
    get() = TODO()

val dsShutDownOrRestart: kotlin.UInt
    get() = TODO()

val dsShutDownOrResume: kotlin.UInt
    get() = TODO()

val dsStknHeap: kotlin.UInt
    get() = TODO()

val dsSwitchOffOrRestart: kotlin.UInt
    get() = TODO()

val dsSysErr: kotlin.Int
    get() = TODO()

val dsSystemFileErr: kotlin.Int
    get() = TODO()

val dsSystemRequiresPowerPC: kotlin.UInt
    get() = TODO()

val dsTraceErr: kotlin.UInt
    get() = TODO()

val dsUnBootableSystem: kotlin.UInt
    get() = TODO()

val dsVMBadBackingStore: kotlin.UInt
    get() = TODO()

val dsVMDeferredFuncTableFull: kotlin.UInt
    get() = TODO()

val dsWDEFNotFound: kotlin.UInt
    get() = TODO()

val dsWriteToSupervisorStackGuardPage: kotlin.UInt
    get() = TODO()

val dsZeroDivErr: kotlin.UInt
    get() = TODO()

val dskFulErr: kotlin.Int
    get() = TODO()

val dtQType: kotlin.UInt
    get() = TODO()

val dummyType: kotlin.UInt
    get() = TODO()

val dupFNErr: kotlin.Int
    get() = TODO()

val duplicateAtomTypeAndIDErr: kotlin.Int
    get() = TODO()

val duplicateFlavorErr: kotlin.Int
    get() = TODO()

val duplicateFolderDescErr: kotlin.Int
    get() = TODO()

val duplicateHandlerErr: kotlin.Int
    get() = TODO()

val duplicateRoutingErr: kotlin.Int
    get() = TODO()

val duplicateScrapFlavorErr: kotlin.Int
    get() = TODO()

val durationDay: kotlin.Int
    get() = TODO()

val durationForever: kotlin.Int
    get() = TODO()

val durationHour: kotlin.Int
    get() = TODO()

val durationMicrosecond: kotlin.Int
    get() = TODO()

val durationMillisecond: kotlin.Int
    get() = TODO()

val durationMinute: kotlin.Int
    get() = TODO()

val durationNoWait: kotlin.Int
    get() = TODO()

val durationSecond: kotlin.Int
    get() = TODO()

val dym: kotlin.UInt
    get() = TODO()

val eADB: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eAddressSpec: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eAnalogAudio: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eAppleTalk: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eAudioLineIn: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eAudioLineOut: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eAudioOut: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eBus: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eCDROM: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eCapsLockDown: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eClearKey: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eCommSlot: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eCommandDown: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eConduit: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eControlDown: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eDVD: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eDeleteKey: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eDeviceType: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eDigitalAudio: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eDisplay: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eDownArrowKey: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eEndKey: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eEnterKey: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eEscapeKey: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eEthernet: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eF10Key: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eF11Key: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eF12Key: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eF13Key: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eF14Key: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eF15Key: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eF1Key: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eF2Key: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eF3Key: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eF4Key: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eF5Key: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eF6Key: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eF7Key: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eF8Key: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eF9Key: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eFireWire: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eFloppy: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eForwardDelKey: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eHD: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eHelpKey: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eHomeKey: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eIP: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eIRTalk: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eInfrared: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eIrDA: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eKeyKind: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eKeyboard: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eLCD: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eLeftArrowKey: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eLenErr: kotlin.Int
    get() = TODO()

val eLocalTalk: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eMacIP: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eMacVideo: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eMicrophone: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eModem: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eModemPort: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eModemPrinterPort: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eModifiers: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eMonitorOut: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eMouse: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eMultiErr: kotlin.Int
    get() = TODO()

val eNuBus: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eNuBusCard: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eOptionDown: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val ePCIbus: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val ePCIcard: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val ePCcard: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val ePDScard: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val ePDSslot: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val ePPP: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val ePageDownKey: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val ePageUpKey: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val ePointingDevice: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val ePostScript: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val ePrinter: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val ePrinterPort: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eProtocol: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eReturnKey: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eRightArrowKey: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eSCSI: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eSVGA: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eScheme: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eSerial: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eShiftDown: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eSpeakers: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eStorageDevice: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eSvideo: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eTabKey: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eTokenRing: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eTrackball: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eTrackpad: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eUSB: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eUpArrowKey: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eVideoIn: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eVideoMonitor: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eVideoOut: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eWSArrayType: platform.CoreServices.WSTypeID /* = kotlin.UInt */
    get() = TODO()

val eWSBooleanType: platform.CoreServices.WSTypeID /* = kotlin.UInt */
    get() = TODO()

val eWSDataType: platform.CoreServices.WSTypeID /* = kotlin.UInt */
    get() = TODO()

val eWSDateType: platform.CoreServices.WSTypeID /* = kotlin.UInt */
    get() = TODO()

val eWSDictionaryType: platform.CoreServices.WSTypeID /* = kotlin.UInt */
    get() = TODO()

val eWSDoubleType: platform.CoreServices.WSTypeID /* = kotlin.UInt */
    get() = TODO()

val eWSIntegerType: platform.CoreServices.WSTypeID /* = kotlin.UInt */
    get() = TODO()

val eWSNullType: platform.CoreServices.WSTypeID /* = kotlin.UInt */
    get() = TODO()

val eWSStringType: platform.CoreServices.WSTypeID /* = kotlin.UInt */
    get() = TODO()

val eWSUnknownType: platform.CoreServices.WSTypeID /* = kotlin.UInt */
    get() = TODO()

val editingNotAllowed: kotlin.Int
    get() = TODO()

val editionMgrInitErr: kotlin.Int
    get() = TODO()

val emptyPathErr: kotlin.Int
    get() = TODO()

val endOfDataReached: kotlin.Int
    get() = TODO()

val enumArrows: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val enumJustification: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val enumKeyForm: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val enumPosition: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val enumProtection: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val enumQuality: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val enumSaveOptions: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val enumStyle: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val enumTransferMode: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val envBadVers: kotlin.Int
    get() = TODO()

val envNotPresent: kotlin.Int
    get() = TODO()

val envVersTooBig: kotlin.Int
    get() = TODO()

val eofErr: kotlin.Int
    get() = TODO()

val eraField: kotlin.UInt
    get() = TODO()

val eraMask: kotlin.UInt
    get() = TODO()

val errAEAccessorNotFound: kotlin.Int
    get() = TODO()

val errAEBadKeyForm: kotlin.Int
    get() = TODO()

val errAEBadListItem: kotlin.Int
    get() = TODO()

val errAEBadTestKey: kotlin.Int
    get() = TODO()

val errAEBufferTooSmall: kotlin.Int
    get() = TODO()

val errAEBuildSyntaxError: kotlin.Int
    get() = TODO()

val errAECantHandleClass: kotlin.Int
    get() = TODO()

val errAECantPutThatThere: kotlin.Int
    get() = TODO()

val errAECantSupplyType: kotlin.Int
    get() = TODO()

val errAECantUndo: kotlin.Int
    get() = TODO()

val errAECoercionFail: kotlin.Int
    get() = TODO()

val errAECorruptData: kotlin.Int
    get() = TODO()

val errAEDescIsNull: kotlin.Int
    get() = TODO()

val errAEDescNotFound: kotlin.Int
    get() = TODO()

val errAEDuplicateHandler: kotlin.Int
    get() = TODO()

val errAEEmptyListContainer: kotlin.Int
    get() = TODO()

val errAEEventFailed: kotlin.Int
    get() = TODO()

val errAEEventFiltered: kotlin.Int
    get() = TODO()

val errAEEventNotHandled: kotlin.Int
    get() = TODO()

val errAEEventNotPermitted: kotlin.Int
    get() = TODO()

val errAEHandlerNotFound: kotlin.Int
    get() = TODO()

val errAEIllegalIndex: kotlin.Int
    get() = TODO()

val errAEImpossibleRange: kotlin.Int
    get() = TODO()

val errAEInTransaction: kotlin.Int
    get() = TODO()

val errAEIndexTooLarge: kotlin.Int
    get() = TODO()

val errAELocalOnly: kotlin.Int
    get() = TODO()

val errAENegativeCount: kotlin.Int
    get() = TODO()

val errAENewerVersion: kotlin.Int
    get() = TODO()

val errAENoSuchLogical: kotlin.Int
    get() = TODO()

val errAENoSuchObject: kotlin.Int
    get() = TODO()

val errAENoSuchTransaction: kotlin.Int
    get() = TODO()

val errAENoUserInteraction: kotlin.Int
    get() = TODO()

val errAENoUserSelection: kotlin.Int
    get() = TODO()

val errAENotAEDesc: kotlin.Int
    get() = TODO()

val errAENotASingleObject: kotlin.Int
    get() = TODO()

val errAENotASpecialFunction: kotlin.Int
    get() = TODO()

val errAENotAnElement: kotlin.Int
    get() = TODO()

val errAENotAnEnumMember: kotlin.Int
    get() = TODO()

val errAENotAnObjSpec: kotlin.Int
    get() = TODO()

val errAENotAppleEvent: kotlin.Int
    get() = TODO()

val errAENotModifiable: kotlin.Int
    get() = TODO()

val errAEParamMissed: kotlin.Int
    get() = TODO()

val errAEPrivilegeError: kotlin.Int
    get() = TODO()

val errAEPropertiesClash: kotlin.Int
    get() = TODO()

val errAEReadDenied: kotlin.Int
    get() = TODO()

val errAEReceiveEscapeCurrent: kotlin.Int
    get() = TODO()

val errAEReceiveTerminate: kotlin.Int
    get() = TODO()

val errAERecordingIsAlreadyOn: kotlin.Int
    get() = TODO()

val errAEReplyNotArrived: kotlin.Int
    get() = TODO()

val errAEReplyNotValid: kotlin.Int
    get() = TODO()

val errAEStreamAlreadyConverted: kotlin.Int
    get() = TODO()

val errAEStreamBadNesting: kotlin.Int
    get() = TODO()

val errAETargetAddressNotPermitted: kotlin.Int
    get() = TODO()

val errAETimeout: kotlin.Int
    get() = TODO()

val errAETypeError: kotlin.Int
    get() = TODO()

val errAEUnknownAddressType: kotlin.Int
    get() = TODO()

val errAEUnknownObjectType: kotlin.Int
    get() = TODO()

val errAEUnknownSendMode: kotlin.Int
    get() = TODO()

val errAEWaitCanceled: kotlin.Int
    get() = TODO()

val errAEWriteDenied: kotlin.Int
    get() = TODO()

val errAEWrongDataType: kotlin.Int
    get() = TODO()

val errAEWrongNumberArgs: kotlin.Int
    get() = TODO()

val errASCantCompareMoreThan32k: kotlin.Int
    get() = TODO()

val errASCantConsiderAndIgnore: kotlin.Int
    get() = TODO()

val errASIllegalFormalParameter: kotlin.Int
    get() = TODO()

val errASInconsistentNames: kotlin.Int
    get() = TODO()

val errASNoResultReturned: kotlin.Int
    get() = TODO()

val errASParameterNotForEvent: kotlin.Int
    get() = TODO()

val errASTerminologyNestingTooDeep: kotlin.Int
    get() = TODO()

val errAborted: kotlin.Int
    get() = TODO()

val errAlreadyInImagingMode: kotlin.Int
    get() = TODO()

val errAttention: kotlin.Int
    get() = TODO()

val errCanNotInsertWhileWalkProcInProgress: kotlin.Int
    get() = TODO()

val errCannotUndo: kotlin.Int
    get() = TODO()

val errCantEmbedIntoSelf: kotlin.Int
    get() = TODO()

val errCantEmbedRoot: kotlin.Int
    get() = TODO()

val errControlDoesntSupportFocus: kotlin.Int
    get() = TODO()

val errControlHiddenOrDisabled: kotlin.Int
    get() = TODO()

val errControlIsNotEmbedder: kotlin.Int
    get() = TODO()

val errControlsAlreadyExist: kotlin.Int
    get() = TODO()

val errCoreEndianDataDoesNotMatchFormat: kotlin.Int
    get() = TODO()

val errCoreEndianDataTooLongForFormat: kotlin.Int
    get() = TODO()

val errCoreEndianDataTooShortForFormat: kotlin.Int
    get() = TODO()

val errCorruptWindowDescription: kotlin.Int
    get() = TODO()

val errCouldntSetFocus: kotlin.Int
    get() = TODO()

val errCppGeneral: kotlin.Int
    get() = TODO()

val errCppLastSystemDefinedError: kotlin.Int
    get() = TODO()

val errCppLastUserDefinedError: kotlin.Int
    get() = TODO()

val errCppbad_alloc: kotlin.Int
    get() = TODO()

val errCppbad_cast: kotlin.Int
    get() = TODO()

val errCppbad_exception: kotlin.Int
    get() = TODO()

val errCppbad_typeid: kotlin.Int
    get() = TODO()

val errCppdomain_error: kotlin.Int
    get() = TODO()

val errCppinvalid_argument: kotlin.Int
    get() = TODO()

val errCppios_base_failure: kotlin.Int
    get() = TODO()

val errCpplength_error: kotlin.Int
    get() = TODO()

val errCpplogic_error: kotlin.Int
    get() = TODO()

val errCppout_of_range: kotlin.Int
    get() = TODO()

val errCppoverflow_error: kotlin.Int
    get() = TODO()

val errCpprange_error: kotlin.Int
    get() = TODO()

val errCppruntime_error: kotlin.Int
    get() = TODO()

val errCppunderflow_error: kotlin.Int
    get() = TODO()

val errDSPQueueSize: kotlin.Int
    get() = TODO()

val errDataNotSupported: kotlin.Int
    get() = TODO()

val errDataSizeMismatch: kotlin.Int
    get() = TODO()

val errEmptyScrap: kotlin.Int
    get() = TODO()

val errEndOfBody: kotlin.Int
    get() = TODO()

val errEndOfDocument: kotlin.Int
    get() = TODO()

val errEngineNotFound: kotlin.Int
    get() = TODO()

val errFSAttributeNotFound: kotlin.Int
    get() = TODO()

val errFSBadAllocFlags: kotlin.Int
    get() = TODO()

val errFSBadBuffer: kotlin.Int
    get() = TODO()

val errFSBadFSRef: kotlin.Int
    get() = TODO()

val errFSBadForkName: kotlin.Int
    get() = TODO()

val errFSBadForkRef: kotlin.Int
    get() = TODO()

val errFSBadInfoBitmap: kotlin.Int
    get() = TODO()

val errFSBadItemCount: kotlin.Int
    get() = TODO()

val errFSBadIteratorFlags: kotlin.Int
    get() = TODO()

val errFSBadPosMode: kotlin.Int
    get() = TODO()

val errFSBadSearchParams: kotlin.Int
    get() = TODO()

val errFSForkExists: kotlin.Int
    get() = TODO()

val errFSForkNotFound: kotlin.Int
    get() = TODO()

val errFSIteratorNotFound: kotlin.Int
    get() = TODO()

val errFSIteratorNotSupported: kotlin.Int
    get() = TODO()

val errFSMissingCatInfo: kotlin.Int
    get() = TODO()

val errFSMissingName: kotlin.Int
    get() = TODO()

val errFSNameTooLong: kotlin.Int
    get() = TODO()

val errFSNoMoreItems: kotlin.Int
    get() = TODO()

val errFSNotAFolder: kotlin.Int
    get() = TODO()

val errFSNotEnoughSpaceForOperation: kotlin.Int
    get() = TODO()

val errFSOperationNotSupported: kotlin.Int
    get() = TODO()

val errFSPropertyNotValid: kotlin.Int
    get() = TODO()

val errFSQuotaExceeded: kotlin.Int
    get() = TODO()

val errFSRefsDifferent: kotlin.Int
    get() = TODO()

val errFSUnknownCall: kotlin.Int
    get() = TODO()

val errFloatingWindowsNotInitialized: kotlin.Int
    get() = TODO()

val errFwdReset: kotlin.Int
    get() = TODO()

val errIAAllocationErr: kotlin.Int
    get() = TODO()

val errIABufferTooSmall: kotlin.Int
    get() = TODO()

val errIACanceled: kotlin.Int
    get() = TODO()

val errIAEndOfTextRun: kotlin.Int
    get() = TODO()

val errIAInvalidDocument: kotlin.Int
    get() = TODO()

val errIANoErr: kotlin.Int
    get() = TODO()

val errIANoMoreItems: kotlin.Int
    get() = TODO()

val errIAParamErr: kotlin.Int
    get() = TODO()

val errIATextExtractionErr: kotlin.Int
    get() = TODO()

val errIAUnknownErr: kotlin.Int
    get() = TODO()

val errInvalidPartCode: kotlin.Int
    get() = TODO()

val errInvalidRange: kotlin.Int
    get() = TODO()

val errInvalidWindowProperty: kotlin.Int
    get() = TODO()

val errInvalidWindowPtr: kotlin.Int
    get() = TODO()

val errInvalidWindowRef: kotlin.Int
    get() = TODO()

val errItemAlreadyInTree: kotlin.Int
    get() = TODO()

val errItemNotControl: kotlin.Int
    get() = TODO()

val errItemNotFoundInTree: kotlin.Int
    get() = TODO()

val errIteratorReachedEnd: kotlin.Int
    get() = TODO()

val errKCAuthFailed: kotlin.Int
    get() = TODO()

val errKCBufferTooSmall: kotlin.Int
    get() = TODO()

val errKCCreateChainFailed: kotlin.Int
    get() = TODO()

val errKCDataNotAvailable: kotlin.Int
    get() = TODO()

val errKCDataNotModifiable: kotlin.Int
    get() = TODO()

val errKCDataTooLarge: kotlin.Int
    get() = TODO()

val errKCDuplicateCallback: kotlin.Int
    get() = TODO()

val errKCDuplicateItem: kotlin.Int
    get() = TODO()

val errKCDuplicateKeychain: kotlin.Int
    get() = TODO()

val errKCInteractionNotAllowed: kotlin.Int
    get() = TODO()

val errKCInteractionRequired: kotlin.Int
    get() = TODO()

val errKCInvalidCallback: kotlin.Int
    get() = TODO()

val errKCInvalidItemRef: kotlin.Int
    get() = TODO()

val errKCInvalidKeychain: kotlin.Int
    get() = TODO()

val errKCInvalidSearchRef: kotlin.Int
    get() = TODO()

val errKCItemNotFound: kotlin.Int
    get() = TODO()

val errKCKeySizeNotAllowed: kotlin.Int
    get() = TODO()

val errKCNoCertificateModule: kotlin.Int
    get() = TODO()

val errKCNoDefaultKeychain: kotlin.Int
    get() = TODO()

val errKCNoPolicyModule: kotlin.Int
    get() = TODO()

val errKCNoStorageModule: kotlin.Int
    get() = TODO()

val errKCNoSuchAttr: kotlin.Int
    get() = TODO()

val errKCNoSuchClass: kotlin.Int
    get() = TODO()

val errKCNoSuchKeychain: kotlin.Int
    get() = TODO()

val errKCNotAvailable: kotlin.Int
    get() = TODO()

val errKCReadOnly: kotlin.Int
    get() = TODO()

val errKCReadOnlyAttr: kotlin.Int
    get() = TODO()

val errKCWrongKCVersion: kotlin.Int
    get() = TODO()

val errMarginWilllNotFit: kotlin.Int
    get() = TODO()

val errMessageNotSupported: kotlin.Int
    get() = TODO()

val errNoHiliteText: kotlin.Int
    get() = TODO()

val errNoRootControl: kotlin.Int
    get() = TODO()

val errNonContiuousAttribute: kotlin.Int
    get() = TODO()

val errNotInImagingMode: kotlin.Int
    get() = TODO()

val errNotValidTree: kotlin.Int
    get() = TODO()

val errOSAAppNotHighLevelEventAware: kotlin.Int
    get() = TODO()

val errOSABadSelector: kotlin.Int
    get() = TODO()

val errOSABadStorageType: kotlin.Int
    get() = TODO()

val errOSACantAccess: kotlin.Int
    get() = TODO()

val errOSACantAssign: kotlin.Int
    get() = TODO()

val errOSACantCoerce: kotlin.Int
    get() = TODO()

val errOSACantCreate: kotlin.Int
    get() = TODO()

val errOSACantGetTerminology: kotlin.Int
    get() = TODO()

val errOSACantLaunch: kotlin.Int
    get() = TODO()

val errOSACantOpenComponent: kotlin.Int
    get() = TODO()

val errOSACantStorePointers: kotlin.Int
    get() = TODO()

val errOSAComponentMismatch: kotlin.Int
    get() = TODO()

val errOSACorruptData: kotlin.Int
    get() = TODO()

val errOSACorruptTerminology: kotlin.Int
    get() = TODO()

val errOSADataBlockTooLarge: kotlin.Int
    get() = TODO()

val errOSADataFormatObsolete: kotlin.Int
    get() = TODO()

val errOSADataFormatTooNew: kotlin.Int
    get() = TODO()

val errOSADivideByZero: kotlin.Int
    get() = TODO()

val errOSAGeneralError: kotlin.Int
    get() = TODO()

val errOSAInternalTableOverflow: kotlin.Int
    get() = TODO()

val errOSAInvalidID: kotlin.Int
    get() = TODO()

val errOSANoSuchDialect: kotlin.Int
    get() = TODO()

val errOSANumericOverflow: kotlin.Int
    get() = TODO()

val errOSARecordingIsAlreadyOn: kotlin.Int
    get() = TODO()

val errOSAScriptError: kotlin.Int
    get() = TODO()

val errOSASourceNotAvailable: kotlin.Int
    get() = TODO()

val errOSAStackOverflow: kotlin.Int
    get() = TODO()

val errOSASystemError: kotlin.Int
    get() = TODO()

val errOSATypeError: kotlin.Int
    get() = TODO()

val errOffsetInvalid: kotlin.Int
    get() = TODO()

val errOffsetIsOutsideOfView: kotlin.Int
    get() = TODO()

val errOffsetNotOnElementBounday: kotlin.Int
    get() = TODO()

val errOpenDenied: kotlin.Int
    get() = TODO()

val errOpening: kotlin.Int
    get() = TODO()

val errReadOnlyText: kotlin.Int
    get() = TODO()

val errRefNum: kotlin.Int
    get() = TODO()

val errRootAlreadyExists: kotlin.Int
    get() = TODO()

val errState: kotlin.Int
    get() = TODO()

val errTaskNotFound: kotlin.Int
    get() = TODO()

val errTopOfBody: kotlin.Int
    get() = TODO()

val errTopOfDocument: kotlin.Int
    get() = TODO()

val errTreeIsLocked: kotlin.Int
    get() = TODO()

val errUnknownAttributeTag: kotlin.Int
    get() = TODO()

val errUnknownControl: kotlin.Int
    get() = TODO()

val errUnknownElement: kotlin.Int
    get() = TODO()

val errUnrecognizedWindowClass: kotlin.Int
    get() = TODO()

val errUnsupportedWindowAttributesForClass: kotlin.Int
    get() = TODO()

val errUserWantsToDragWindow: kotlin.Int
    get() = TODO()

val errWSInternalError: kotlin.Int
    get() = TODO()

val errWSParseError: kotlin.Int
    get() = TODO()

val errWSTimeoutError: kotlin.Int
    get() = TODO()

val errWSTransportError: kotlin.Int
    get() = TODO()

val errWindowDoesNotFitOnscreen: kotlin.Int
    get() = TODO()

val errWindowDoesNotHaveProxy: kotlin.Int
    get() = TODO()

val errWindowDoesntSupportFocus: kotlin.Int
    get() = TODO()

val errWindowNotFound: kotlin.Int
    get() = TODO()

val errWindowPropertyNotFound: kotlin.Int
    get() = TODO()

val errWindowRegionCodeInvalid: kotlin.Int
    get() = TODO()

val errWindowsAlreadyInitialized: kotlin.Int
    get() = TODO()

val eurlAFP: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlAT: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlEPPC: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlFTP: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlFile: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlGopher: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlHTTP: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlHTTPS: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlIMAP: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlLDAP: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlLaunch: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlMail: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlMailbox: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlMessage: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlMulti: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlNFS: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlNNTP: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlNews: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlPOP: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlRTSP: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlSNews: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlTelnet: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val eurlUnknown: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val evType: kotlin.UInt
    get() = TODO()

val evtNotEnb: kotlin.UInt
    get() = TODO()

val exUserBreak: kotlin.Int
    get() = TODO()

val excessCollsns: kotlin.Int
    get() = TODO()

val extFSErr: kotlin.Int
    get() = TODO()

val extensionsFolderIconResource: kotlin.Int
    get() = TODO()

val extractErr: kotlin.Int
    get() = TODO()

val extraneousStrings: kotlin.UInt
    get() = TODO()

val fBadPartsTable: kotlin.UInt
    get() = TODO()

val fBestGuess: kotlin.UInt
    get() = TODO()

val fBsyErr: kotlin.Int
    get() = TODO()

val fDesktop: kotlin.Int
    get() = TODO()

val fDisk: kotlin.Int
    get() = TODO()

val fEmptyFormatString: kotlin.UInt
    get() = TODO()

val fExtraDecimal: kotlin.UInt
    get() = TODO()

val fExtraExp: kotlin.UInt
    get() = TODO()

val fExtraPercent: kotlin.UInt
    get() = TODO()

val fExtraSeparator: kotlin.UInt
    get() = TODO()

val fFormStrIsNAN: kotlin.UInt
    get() = TODO()

val fFormatOK: kotlin.UInt
    get() = TODO()

val fFormatOverflow: kotlin.UInt
    get() = TODO()

val fHasBundle: kotlin.UInt
    get() = TODO()

val fInvisible: kotlin.UInt
    get() = TODO()

val fLckdErr: kotlin.Int
    get() = TODO()

val fMissingDelimiter: kotlin.UInt
    get() = TODO()

val fMissingLiteral: kotlin.UInt
    get() = TODO()

val fNegative: kotlin.UInt
    get() = TODO()

val fOnDesk: kotlin.UInt
    get() = TODO()

val fOutOfSynch: kotlin.UInt
    get() = TODO()

val fPositive: kotlin.UInt
    get() = TODO()

val fSpuriousChars: kotlin.UInt
    get() = TODO()

val fTrash: kotlin.Int
    get() = TODO()

val fVNumber: kotlin.UInt
    get() = TODO()

val fZero: kotlin.UInt
    get() = TODO()

val false32b: kotlin.UInt
    get() = TODO()

val fatalDateTime: kotlin.UInt
    get() = TODO()

val featureUnsupported: kotlin.Int
    get() = TODO()

val fetchReference: kotlin.UInt
    get() = TODO()

val fiLigature: kotlin.UInt
    get() = TODO()

val fidExists: kotlin.Int
    get() = TODO()

val fidNotFound: kotlin.Int
    get() = TODO()

val fieldOrderNotIntl: kotlin.UInt
    get() = TODO()

val fileBoundsErr: kotlin.Int
    get() = TODO()

val fileOffsetTooBigErr: kotlin.Int
    get() = TODO()

val firstDskErr: kotlin.Int
    get() = TODO()

val firstPickerError: kotlin.Int
    get() = TODO()

const val fixed1: platform.darwin.Fixed /* = kotlin.Int */ = 0

val flLigature: kotlin.UInt
    get() = TODO()

val floppyIconResource: kotlin.Int
    get() = TODO()

val fmt1Err: kotlin.Int
    get() = TODO()

val fmt2Err: kotlin.Int
    get() = TODO()

val fnOpnErr: kotlin.Int
    get() = TODO()

val fnfErr: kotlin.Int
    get() = TODO()

val fontDecError: kotlin.Int
    get() = TODO()

val fontNotDeclared: kotlin.Int
    get() = TODO()

val fontNotOutlineErr: kotlin.Int
    get() = TODO()

val fontSubErr: kotlin.Int
    get() = TODO()

val fontsFolderIconResource: kotlin.Int
    get() = TODO()

val forceReadBit: kotlin.UInt
    get() = TODO()

val forceReadMask: kotlin.UInt
    get() = TODO()

val formAbsolutePosition: kotlin.UInt
    get() = TODO()

val formName: kotlin.UInt
    get() = TODO()

val formPropertyID: kotlin.UInt
    get() = TODO()

val formRange: kotlin.UInt
    get() = TODO()

val formRelativePosition: kotlin.UInt
    get() = TODO()

val formTest: kotlin.UInt
    get() = TODO()

val formUniqueID: kotlin.UInt
    get() = TODO()

val formWhose: kotlin.UInt
    get() = TODO()

const val fract1: platform.darwin.Fract /* = kotlin.Int */ = 0

val fraction: kotlin.UInt
    get() = TODO()

val fsAtMark: kotlin.UInt
    get() = TODO()

val fsCurPerm: kotlin.UInt
    get() = TODO()

val fsDSIntErr: kotlin.Int
    get() = TODO()

val fsDataTooBigErr: kotlin.Int
    get() = TODO()

val fsFromLEOF: kotlin.UInt
    get() = TODO()

val fsFromMark: kotlin.UInt
    get() = TODO()

val fsFromStart: kotlin.UInt
    get() = TODO()

val fsQType: kotlin.UInt
    get() = TODO()

val fsRdAccessPerm: kotlin.UInt
    get() = TODO()

val fsRdDenyPerm: kotlin.UInt
    get() = TODO()

val fsRdPerm: kotlin.UInt
    get() = TODO()

val fsRdWrPerm: kotlin.UInt
    get() = TODO()

val fsRdWrShPerm: kotlin.UInt
    get() = TODO()

val fsRnErr: kotlin.Int
    get() = TODO()

val fsRtDirID: kotlin.UInt
    get() = TODO()

val fsRtParID: kotlin.UInt
    get() = TODO()

val fsSBAccessDate: kotlin.UInt
    get() = TODO()

val fsSBAccessDateBit: kotlin.UInt
    get() = TODO()

val fsSBAttributeModDate: kotlin.UInt
    get() = TODO()

val fsSBAttributeModDateBit: kotlin.UInt
    get() = TODO()

val fsSBDrBkDat: kotlin.UInt
    get() = TODO()

val fsSBDrBkDatBit: kotlin.UInt
    get() = TODO()

val fsSBDrCrDat: kotlin.UInt
    get() = TODO()

val fsSBDrCrDatBit: kotlin.UInt
    get() = TODO()

val fsSBDrFndrInfo: kotlin.UInt
    get() = TODO()

val fsSBDrFndrInfoBit: kotlin.UInt
    get() = TODO()

val fsSBDrMdDat: kotlin.UInt
    get() = TODO()

val fsSBDrMdDatBit: kotlin.UInt
    get() = TODO()

val fsSBDrNmFls: kotlin.UInt
    get() = TODO()

val fsSBDrNmFlsBit: kotlin.UInt
    get() = TODO()

val fsSBDrParID: kotlin.UInt
    get() = TODO()

val fsSBDrParIDBit: kotlin.UInt
    get() = TODO()

val fsSBDrUsrWds: kotlin.UInt
    get() = TODO()

val fsSBDrUsrWdsBit: kotlin.UInt
    get() = TODO()

val fsSBFlAttrib: kotlin.UInt
    get() = TODO()

val fsSBFlAttribBit: kotlin.UInt
    get() = TODO()

val fsSBFlBkDat: kotlin.UInt
    get() = TODO()

val fsSBFlBkDatBit: kotlin.UInt
    get() = TODO()

val fsSBFlCrDat: kotlin.UInt
    get() = TODO()

val fsSBFlCrDatBit: kotlin.UInt
    get() = TODO()

val fsSBFlFndrInfo: kotlin.UInt
    get() = TODO()

val fsSBFlFndrInfoBit: kotlin.UInt
    get() = TODO()

val fsSBFlLgLen: kotlin.UInt
    get() = TODO()

val fsSBFlLgLenBit: kotlin.UInt
    get() = TODO()

val fsSBFlMdDat: kotlin.UInt
    get() = TODO()

val fsSBFlMdDatBit: kotlin.UInt
    get() = TODO()

val fsSBFlParID: kotlin.UInt
    get() = TODO()

val fsSBFlParIDBit: kotlin.UInt
    get() = TODO()

val fsSBFlPyLen: kotlin.UInt
    get() = TODO()

val fsSBFlPyLenBit: kotlin.UInt
    get() = TODO()

val fsSBFlRLgLen: kotlin.UInt
    get() = TODO()

val fsSBFlRLgLenBit: kotlin.UInt
    get() = TODO()

val fsSBFlRPyLen: kotlin.UInt
    get() = TODO()

val fsSBFlRPyLenBit: kotlin.UInt
    get() = TODO()

val fsSBFlXFndrInfo: kotlin.UInt
    get() = TODO()

val fsSBFlXFndrInfoBit: kotlin.UInt
    get() = TODO()

val fsSBFullName: kotlin.UInt
    get() = TODO()

val fsSBFullNameBit: kotlin.UInt
    get() = TODO()

val fsSBGroupID: kotlin.UInt
    get() = TODO()

val fsSBGroupIDBit: kotlin.UInt
    get() = TODO()

val fsSBNegate: kotlin.UInt
    get() = TODO()

val fsSBNegateBit: kotlin.UInt
    get() = TODO()

val fsSBNodeID: kotlin.UInt
    get() = TODO()

val fsSBNodeIDBit: kotlin.UInt
    get() = TODO()

val fsSBPartialName: kotlin.UInt
    get() = TODO()

val fsSBPartialNameBit: kotlin.UInt
    get() = TODO()

val fsSBPermissions: kotlin.UInt
    get() = TODO()

val fsSBPermissionsBit: kotlin.UInt
    get() = TODO()

val fsSBSkipHiddenItems: kotlin.UInt
    get() = TODO()

val fsSBSkipHiddenItemsBit: kotlin.UInt
    get() = TODO()

val fsSBSkipPackageContents: kotlin.UInt
    get() = TODO()

val fsSBSkipPackageContentsBit: kotlin.UInt
    get() = TODO()

val fsSBUserID: kotlin.UInt
    get() = TODO()

val fsSBUserIDBit: kotlin.UInt
    get() = TODO()

val fsUnixPriv: kotlin.UInt
    get() = TODO()

val fsWrAccessPerm: kotlin.UInt
    get() = TODO()

val fsWrDenyPerm: kotlin.UInt
    get() = TODO()

val fsWrPerm: kotlin.UInt
    get() = TODO()

val fsmBadFFSNameErr: kotlin.Int
    get() = TODO()

val fsmBadFSDLenErr: kotlin.Int
    get() = TODO()

val fsmBadFSDVersionErr: kotlin.Int
    get() = TODO()

val fsmBusyFFSErr: kotlin.Int
    get() = TODO()

val fsmDuplicateFSIDErr: kotlin.Int
    get() = TODO()

val fsmFFSNotFoundErr: kotlin.Int
    get() = TODO()

val fsmNoAlternateStackErr: kotlin.Int
    get() = TODO()

val fsmUnknownFSMMessageErr: kotlin.Int
    get() = TODO()

val fullTrashIconResource: kotlin.Int
    get() = TODO()

val gWorldsNotSameDepthAndSizeErr: kotlin.Int
    get() = TODO()

val gcrOnMFMErr: kotlin.Int
    get() = TODO()

val genCdevRangeBit: kotlin.Int
    get() = TODO()

val genericApplicationIconResource: kotlin.Int
    get() = TODO()

val genericCDROMIconResource: kotlin.Int
    get() = TODO()

val genericDeskAccessoryIconResource: kotlin.Int
    get() = TODO()

val genericDocumentIconResource: kotlin.Int
    get() = TODO()

val genericEditionFileIconResource: kotlin.Int
    get() = TODO()

val genericExtensionIconResource: kotlin.Int
    get() = TODO()

val genericFileServerIconResource: kotlin.Int
    get() = TODO()

val genericFolderIconResource: kotlin.Int
    get() = TODO()

val genericHardDiskIconResource: kotlin.Int
    get() = TODO()

val genericMoverObjectIconResource: kotlin.Int
    get() = TODO()

val genericPreferencesIconResource: kotlin.Int
    get() = TODO()

val genericQueryDocumentIconResource: kotlin.Int
    get() = TODO()

val genericRAMDiskIconResource: kotlin.Int
    get() = TODO()

val genericStationeryIconResource: kotlin.Int
    get() = TODO()

val genericSuitcaseIconResource: kotlin.Int
    get() = TODO()

val gestalt16BitAudioSupport: kotlin.UInt
    get() = TODO()

val gestalt16BitSoundIO: kotlin.UInt
    get() = TODO()

val gestalt20thAnniversary: kotlin.UInt
    get() = TODO()

val gestalt32BitAddressing: kotlin.UInt
    get() = TODO()

val gestalt32BitCapable: kotlin.UInt
    get() = TODO()

val gestalt32BitQD: kotlin.UInt
    get() = TODO()

val gestalt32BitQD11: kotlin.UInt
    get() = TODO()

val gestalt32BitQD12: kotlin.UInt
    get() = TODO()

val gestalt32BitQD13: kotlin.UInt
    get() = TODO()

val gestalt32BitSysZone: kotlin.UInt
    get() = TODO()

val gestalt68000: kotlin.UInt
    get() = TODO()

val gestalt68010: kotlin.UInt
    get() = TODO()

val gestalt68020: kotlin.UInt
    get() = TODO()

val gestalt68030: kotlin.UInt
    get() = TODO()

val gestalt68030MMU: kotlin.UInt
    get() = TODO()

val gestalt68040: kotlin.UInt
    get() = TODO()

val gestalt68040FPU: kotlin.UInt
    get() = TODO()

val gestalt68040MMU: kotlin.UInt
    get() = TODO()

val gestalt68851: kotlin.UInt
    get() = TODO()

val gestalt68881: kotlin.UInt
    get() = TODO()

val gestalt68882: kotlin.UInt
    get() = TODO()

val gestalt68k: kotlin.UInt
    get() = TODO()

val gestalt8BitQD: kotlin.UInt
    get() = TODO()

val gestaltADBISOKbdII: kotlin.UInt
    get() = TODO()

val gestaltADBKbdII: kotlin.UInt
    get() = TODO()

val gestaltAFPClient: kotlin.Int
    get() = TODO()

val gestaltAFPClient3_5: kotlin.Int
    get() = TODO()

val gestaltAFPClient3_6: kotlin.Int
    get() = TODO()

val gestaltAFPClient3_6_1: kotlin.Int
    get() = TODO()

val gestaltAFPClient3_6_2: kotlin.Int
    get() = TODO()

val gestaltAFPClient3_6_3: kotlin.Int
    get() = TODO()

val gestaltAFPClient3_7: kotlin.Int
    get() = TODO()

val gestaltAFPClient3_7_2: kotlin.Int
    get() = TODO()

val gestaltAFPClient3_8: kotlin.Int
    get() = TODO()

val gestaltAFPClient3_8_1: kotlin.Int
    get() = TODO()

val gestaltAFPClient3_8_3: kotlin.Int
    get() = TODO()

val gestaltAFPClient3_8_4: kotlin.Int
    get() = TODO()

val gestaltAFPClientAttributeMask: kotlin.Int
    get() = TODO()

val gestaltAFPClientCfgRsrc: kotlin.Int
    get() = TODO()

val gestaltAFPClientMultiReq: kotlin.Int
    get() = TODO()

val gestaltAFPClientSupportsIP: kotlin.Int
    get() = TODO()

val gestaltAFPClientVMUI: kotlin.Int
    get() = TODO()

val gestaltAFPClientVersionMask: kotlin.Int
    get() = TODO()

val gestaltALMAttr: kotlin.UInt
    get() = TODO()

val gestaltALMHasCFMSupport: kotlin.UInt
    get() = TODO()

val gestaltALMHasRescanNotifiers: kotlin.UInt
    get() = TODO()

val gestaltALMHasSFGroup: kotlin.UInt
    get() = TODO()

val gestaltALMHasSFLocation: kotlin.UInt
    get() = TODO()

val gestaltALMPresent: kotlin.UInt
    get() = TODO()

val gestaltALMVers: kotlin.UInt
    get() = TODO()

val gestaltAMU: kotlin.UInt
    get() = TODO()

val gestaltATAAttr: kotlin.UInt
    get() = TODO()

val gestaltATAPresent: kotlin.UInt
    get() = TODO()

val gestaltATSUAscentDescentControlsFeature: kotlin.UInt
    get() = TODO()

val gestaltATSUBatchBreakLinesFeature: kotlin.UInt
    get() = TODO()

val gestaltATSUBiDiCursorPositionFeature: kotlin.UInt
    get() = TODO()

val gestaltATSUByCharacterClusterFeature: kotlin.UInt
    get() = TODO()

val gestaltATSUDecimalTabFeature: kotlin.UInt
    get() = TODO()

val gestaltATSUDirectAccess: kotlin.UInt
    get() = TODO()

val gestaltATSUDropShadowStyleFeature: kotlin.UInt
    get() = TODO()

val gestaltATSUFallbacksFeature: kotlin.UInt
    get() = TODO()

val gestaltATSUFallbacksObjFeatures: kotlin.UInt
    get() = TODO()

val gestaltATSUFeatures: kotlin.UInt
    get() = TODO()

val gestaltATSUGlyphBoundsFeature: kotlin.UInt
    get() = TODO()

val gestaltATSUHighlightColorControlFeature: kotlin.UInt
    get() = TODO()

val gestaltATSUHighlightInactiveTextFeature: kotlin.UInt
    get() = TODO()

val gestaltATSUIgnoreLeadingFeature: kotlin.UInt
    get() = TODO()

val gestaltATSULayoutCacheClearFeature: kotlin.UInt
    get() = TODO()

val gestaltATSULayoutCreateAndCopyFeature: kotlin.UInt
    get() = TODO()

val gestaltATSULineControlFeature: kotlin.UInt
    get() = TODO()

val gestaltATSULowLevelOrigFeatures: kotlin.UInt
    get() = TODO()

val gestaltATSUMemoryFeature: kotlin.UInt
    get() = TODO()

val gestaltATSUNearestCharLineBreakFeature: kotlin.UInt
    get() = TODO()

val gestaltATSUPositionToCursorFeature: kotlin.UInt
    get() = TODO()

val gestaltATSUStrikeThroughStyleFeature: kotlin.UInt
    get() = TODO()

val gestaltATSUTabSupportFeature: kotlin.UInt
    get() = TODO()

val gestaltATSUTextLocatorUsageFeature: kotlin.UInt
    get() = TODO()

val gestaltATSUTrackingFeature: kotlin.UInt
    get() = TODO()

val gestaltATSUUnderlineOptionsStyleFeature: kotlin.UInt
    get() = TODO()

val gestaltATSUUpdate1: kotlin.UInt
    get() = TODO()

val gestaltATSUUpdate2: kotlin.UInt
    get() = TODO()

val gestaltATSUUpdate3: kotlin.UInt
    get() = TODO()

val gestaltATSUUpdate4: kotlin.UInt
    get() = TODO()

val gestaltATSUUpdate5: kotlin.UInt
    get() = TODO()

val gestaltATSUUpdate6: kotlin.UInt
    get() = TODO()

val gestaltATSUUpdate7: kotlin.UInt
    get() = TODO()

val gestaltATSUVersion: kotlin.UInt
    get() = TODO()

val gestaltATalkVersion: kotlin.UInt
    get() = TODO()

val gestaltAUXVersion: kotlin.UInt
    get() = TODO()

val gestaltAVLTreeAttr: kotlin.UInt
    get() = TODO()

val gestaltAVLTreePresentBit: kotlin.UInt
    get() = TODO()

val gestaltAVLTreeSupportsHandleBasedTreeBit: kotlin.UInt
    get() = TODO()

val gestaltAVLTreeSupportsTreeLockingBit: kotlin.UInt
    get() = TODO()

val gestaltAWS6150_60: kotlin.UInt
    get() = TODO()

val gestaltAWS6150_66: kotlin.UInt
    get() = TODO()

val gestaltAWS8150_110: kotlin.UInt
    get() = TODO()

val gestaltAWS8150_80: kotlin.UInt
    get() = TODO()

val gestaltAWS8550: kotlin.UInt
    get() = TODO()

val gestaltAWS9150_120: kotlin.UInt
    get() = TODO()

val gestaltAWS9150_80: kotlin.UInt
    get() = TODO()

val gestaltAddressingModeAttr: kotlin.UInt
    get() = TODO()

val gestaltAdminFeaturesFlagsAttr: kotlin.UInt
    get() = TODO()

val gestaltAliasMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltAliasMgrFollowsAliasesWhenResolving: kotlin.UInt
    get() = TODO()

val gestaltAliasMgrPrefersPath: kotlin.UInt
    get() = TODO()

val gestaltAliasMgrPresent: kotlin.UInt
    get() = TODO()

val gestaltAliasMgrRequiresAccessors: kotlin.UInt
    get() = TODO()

val gestaltAliasMgrResolveAliasFileWithMountOptions: kotlin.UInt
    get() = TODO()

val gestaltAliasMgrSupportsAOCEKeychain: kotlin.UInt
    get() = TODO()

val gestaltAliasMgrSupportsExtendedCalls: kotlin.UInt
    get() = TODO()

val gestaltAliasMgrSupportsFSCalls: kotlin.UInt
    get() = TODO()

val gestaltAliasMgrSupportsRemoteAppletalk: kotlin.UInt
    get() = TODO()

val gestaltAllegroQD: kotlin.UInt
    get() = TODO()

val gestaltAllegroQDText: kotlin.UInt
    get() = TODO()

val gestaltAltivecRegistersSwappedCorrectlyBit: kotlin.UInt
    get() = TODO()

val gestaltAntiAliasedTextAvailable: kotlin.UInt
    get() = TODO()

val gestaltAppearanceAttr: kotlin.UInt
    get() = TODO()

val gestaltAppearanceCompatMode: kotlin.UInt
    get() = TODO()

val gestaltAppearanceExists: kotlin.UInt
    get() = TODO()

val gestaltAppearanceVersion: kotlin.UInt
    get() = TODO()

val gestaltAppleAdjustADBKbd: kotlin.UInt
    get() = TODO()

val gestaltAppleAdjustISOKbd: kotlin.UInt
    get() = TODO()

val gestaltAppleAdjustKeypad: kotlin.UInt
    get() = TODO()

val gestaltAppleEventsAttr: kotlin.UInt
    get() = TODO()

val gestaltAppleEventsPresent: kotlin.UInt
    get() = TODO()

val gestaltAppleGuideIsDebug: kotlin.UInt
    get() = TODO()

val gestaltAppleGuidePresent: kotlin.UInt
    get() = TODO()

val gestaltAppleScriptAttr: kotlin.UInt
    get() = TODO()

val gestaltAppleScriptPowerPCSupport: kotlin.UInt
    get() = TODO()

val gestaltAppleScriptPresent: kotlin.UInt
    get() = TODO()

val gestaltAppleScriptVersion: kotlin.UInt
    get() = TODO()

val gestaltAppleTalkVersion: kotlin.UInt
    get() = TODO()

val gestaltArbitorAttr: kotlin.UInt
    get() = TODO()

val gestaltAsyncSCSI: kotlin.UInt
    get() = TODO()

val gestaltAsyncSCSIINROM: kotlin.UInt
    get() = TODO()

val gestaltBuiltInSoundInput: kotlin.UInt
    get() = TODO()

val gestaltBusClkSpeed: kotlin.UInt
    get() = TODO()

val gestaltBusClkSpeedMHz: kotlin.UInt
    get() = TODO()

val gestaltCFM99Present: kotlin.UInt
    get() = TODO()

val gestaltCFM99PresentMask: kotlin.UInt
    get() = TODO()

val gestaltCFMAttr: kotlin.UInt
    get() = TODO()

val gestaltCFMPresent: kotlin.UInt
    get() = TODO()

val gestaltCFMPresentMask: kotlin.UInt
    get() = TODO()

val gestaltCPU486: kotlin.UInt
    get() = TODO()

val gestaltCPU601: kotlin.UInt
    get() = TODO()

val gestaltCPU603: kotlin.UInt
    get() = TODO()

val gestaltCPU603e: kotlin.UInt
    get() = TODO()

val gestaltCPU603ev: kotlin.UInt
    get() = TODO()

val gestaltCPU604: kotlin.UInt
    get() = TODO()

val gestaltCPU604e: kotlin.UInt
    get() = TODO()

val gestaltCPU604ev: kotlin.UInt
    get() = TODO()

val gestaltCPU68000: kotlin.UInt
    get() = TODO()

val gestaltCPU68010: kotlin.UInt
    get() = TODO()

val gestaltCPU68020: kotlin.UInt
    get() = TODO()

val gestaltCPU68030: kotlin.UInt
    get() = TODO()

val gestaltCPU68040: kotlin.UInt
    get() = TODO()

val gestaltCPU750: kotlin.UInt
    get() = TODO()

val gestaltCPU750FX: kotlin.UInt
    get() = TODO()

val gestaltCPU970: kotlin.UInt
    get() = TODO()

val gestaltCPU970FX: kotlin.UInt
    get() = TODO()

val gestaltCPU970MP: kotlin.UInt
    get() = TODO()

val gestaltCPUApollo: kotlin.UInt
    get() = TODO()

val gestaltCPUG4: kotlin.UInt
    get() = TODO()

val gestaltCPUG47447: kotlin.UInt
    get() = TODO()

val gestaltCPUG47450: kotlin.UInt
    get() = TODO()

val gestaltCPUPentium: kotlin.UInt
    get() = TODO()

val gestaltCPUPentium4: kotlin.UInt
    get() = TODO()

val gestaltCPUPentiumII: kotlin.UInt
    get() = TODO()

val gestaltCPUPentiumPro: kotlin.UInt
    get() = TODO()

val gestaltCPUX86: kotlin.UInt
    get() = TODO()

val gestaltCRMAttr: kotlin.UInt
    get() = TODO()

val gestaltCRMPersistentFix: kotlin.UInt
    get() = TODO()

val gestaltCRMPresent: kotlin.UInt
    get() = TODO()

val gestaltCRMToolRsrcCalls: kotlin.UInt
    get() = TODO()

val gestaltCTBVersion: kotlin.UInt
    get() = TODO()

val gestaltCanStartDragInFloatWindow: kotlin.UInt
    get() = TODO()

val gestaltCanUseCGTextRendering: kotlin.UInt
    get() = TODO()

val gestaltCarbonVersion: kotlin.UInt
    get() = TODO()

val gestaltCardServicesPresent: kotlin.UInt
    get() = TODO()

val gestaltClassic: kotlin.UInt
    get() = TODO()

val gestaltClassicII: kotlin.UInt
    get() = TODO()

val gestaltCloseViewAttr: kotlin.UInt
    get() = TODO()

val gestaltCloseViewDisplayMgrFriendly: kotlin.UInt
    get() = TODO()

val gestaltCloseViewEnabled: kotlin.UInt
    get() = TODO()

val gestaltCollectionMgrVersion: kotlin.UInt
    get() = TODO()

val gestaltColorMatchingAttr: kotlin.UInt
    get() = TODO()

val gestaltColorMatchingLibLoaded: kotlin.UInt
    get() = TODO()

val gestaltColorMatchingVersion: kotlin.UInt
    get() = TODO()

val gestaltColorPicker: kotlin.UInt
    get() = TODO()

val gestaltColorPickerVersion: kotlin.UInt
    get() = TODO()

val gestaltColorSync10: kotlin.UInt
    get() = TODO()

val gestaltColorSync104: kotlin.UInt
    get() = TODO()

val gestaltColorSync105: kotlin.UInt
    get() = TODO()

val gestaltColorSync11: kotlin.UInt
    get() = TODO()

val gestaltColorSync20: kotlin.UInt
    get() = TODO()

val gestaltColorSync21: kotlin.UInt
    get() = TODO()

val gestaltColorSync211: kotlin.UInt
    get() = TODO()

val gestaltColorSync212: kotlin.UInt
    get() = TODO()

val gestaltColorSync213: kotlin.UInt
    get() = TODO()

val gestaltColorSync25: kotlin.UInt
    get() = TODO()

val gestaltColorSync26: kotlin.UInt
    get() = TODO()

val gestaltColorSync261: kotlin.UInt
    get() = TODO()

val gestaltColorSync30: kotlin.UInt
    get() = TODO()

val gestaltComponentMgr: kotlin.UInt
    get() = TODO()

val gestaltComponentPlatform: kotlin.UInt
    get() = TODO()

val gestaltCompressionMgr: kotlin.UInt
    get() = TODO()

val gestaltConnMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltConnMgrCMSearchFix: kotlin.UInt
    get() = TODO()

val gestaltConnMgrErrorString: kotlin.UInt
    get() = TODO()

val gestaltConnMgrMultiAsyncIO: kotlin.UInt
    get() = TODO()

val gestaltConnMgrPresent: kotlin.UInt
    get() = TODO()

val gestaltControlMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltControlMgrPresent: kotlin.UInt
    get() = TODO()

val gestaltControlMgrPresentBit: kotlin.UInt
    get() = TODO()

val gestaltControlMgrVersion: kotlin.UInt
    get() = TODO()

val gestaltControlMsgPresentMask: kotlin.UInt
    get() = TODO()

val gestaltControlStripAttr: kotlin.UInt
    get() = TODO()

val gestaltControlStripExists: kotlin.UInt
    get() = TODO()

val gestaltControlStripUserFont: kotlin.UInt
    get() = TODO()

val gestaltControlStripUserHotKey: kotlin.UInt
    get() = TODO()

val gestaltControlStripVersion: kotlin.UInt
    get() = TODO()

val gestaltControlStripVersionFixed: kotlin.UInt
    get() = TODO()

val gestaltCountOfCPUs: kotlin.UInt
    get() = TODO()

val gestaltCreatesAliasFontRsrc: kotlin.UInt
    get() = TODO()

val gestaltCurrentGraphicsVersion: kotlin.UInt
    get() = TODO()

val gestaltDBAccessMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltDBAccessMgrPresent: kotlin.UInt
    get() = TODO()

val gestaltDITLExtAttr: kotlin.UInt
    get() = TODO()

val gestaltDITLExtPresent: kotlin.UInt
    get() = TODO()

val gestaltDITLExtSupportsIctb: kotlin.UInt
    get() = TODO()

val gestaltDTMgrSupportsFSM: kotlin.UInt
    get() = TODO()

val gestaltDTPFeatures: kotlin.UInt
    get() = TODO()

val gestaltDTPInfo: kotlin.UInt
    get() = TODO()

val gestaltDesktopPicturesAttr: kotlin.UInt
    get() = TODO()

val gestaltDesktopPicturesDisplayed: kotlin.UInt
    get() = TODO()

val gestaltDesktopPicturesInstalled: kotlin.UInt
    get() = TODO()

val gestaltDesktopSpeechRecognition: kotlin.UInt
    get() = TODO()

val gestaltDialogMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltDialogMgrHasAquaAlertBit: kotlin.UInt
    get() = TODO()

val gestaltDialogMgrHasAquaAlertMask: kotlin.UInt
    get() = TODO()

val gestaltDialogMgrPresent: kotlin.UInt
    get() = TODO()

val gestaltDialogMgrPresentBit: kotlin.UInt
    get() = TODO()

val gestaltDialogMgrPresentMask: kotlin.UInt
    get() = TODO()

val gestaltDialogMsgPresentMask: kotlin.UInt
    get() = TODO()

val gestaltDictionaryMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltDictionaryMgrPresent: kotlin.UInt
    get() = TODO()

val gestaltDigitalSignatureVersion: kotlin.UInt
    get() = TODO()

val gestaltDiskCacheSize: kotlin.UInt
    get() = TODO()

val gestaltDisplayMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltDisplayMgrCanConfirm: kotlin.UInt
    get() = TODO()

val gestaltDisplayMgrCanSwitchMirrored: kotlin.UInt
    get() = TODO()

val gestaltDisplayMgrColorSyncAware: kotlin.UInt
    get() = TODO()

val gestaltDisplayMgrGeneratesProfiles: kotlin.UInt
    get() = TODO()

val gestaltDisplayMgrPresent: kotlin.UInt
    get() = TODO()

val gestaltDisplayMgrSetDepthNotifies: kotlin.UInt
    get() = TODO()

val gestaltDisplayMgrSleepNotifies: kotlin.UInt
    get() = TODO()

val gestaltDisplayMgrVers: kotlin.UInt
    get() = TODO()

val gestaltDragMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltDragMgrFloatingWind: kotlin.UInt
    get() = TODO()

val gestaltDragMgrHasImageSupport: kotlin.UInt
    get() = TODO()

val gestaltDragMgrPresent: kotlin.UInt
    get() = TODO()

val gestaltDrawSprocketVersion: kotlin.UInt
    get() = TODO()

val gestaltDupSelectorErr: kotlin.Int
    get() = TODO()

val gestaltEMMU1: kotlin.UInt
    get() = TODO()

val gestaltEasyAccessAttr: kotlin.UInt
    get() = TODO()

val gestaltEasyAccessLocked: kotlin.UInt
    get() = TODO()

val gestaltEasyAccessOff: kotlin.UInt
    get() = TODO()

val gestaltEasyAccessOn: kotlin.UInt
    get() = TODO()

val gestaltEasyAccessSticky: kotlin.UInt
    get() = TODO()

val gestaltEditionMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltEditionMgrPresent: kotlin.UInt
    get() = TODO()

val gestaltEditionMgrTranslationAware: kotlin.UInt
    get() = TODO()

val gestaltExtADBKbd: kotlin.UInt
    get() = TODO()

val gestaltExtISOADBKbd: kotlin.UInt
    get() = TODO()

val gestaltExtToolboxTable: kotlin.UInt
    get() = TODO()

val gestaltExtendedTimeMgr: kotlin.UInt
    get() = TODO()

val gestaltExtendedWindowAttributes: kotlin.UInt
    get() = TODO()

val gestaltExtendedWindowAttributesBit: kotlin.UInt
    get() = TODO()

val gestaltExtendedWindowAttributesMask: kotlin.UInt
    get() = TODO()

val gestaltExtensionTableVersion: kotlin.UInt
    get() = TODO()

val gestaltFBCCurrentVersion: kotlin.UInt
    get() = TODO()

val gestaltFBCIndexingState: kotlin.UInt
    get() = TODO()

val gestaltFBCVersion: kotlin.UInt
    get() = TODO()

val gestaltFBCindexingCritical: kotlin.UInt
    get() = TODO()

val gestaltFBCindexingSafe: kotlin.UInt
    get() = TODO()

val gestaltFPUType: kotlin.UInt
    get() = TODO()

val gestaltFSAllowsConcurrentAsyncIO: kotlin.UInt
    get() = TODO()

val gestaltFSAttr: kotlin.UInt
    get() = TODO()

val gestaltFSIncompatibleDFA82: kotlin.UInt
    get() = TODO()

val gestaltFSMDoesDynamicLoad: kotlin.UInt
    get() = TODO()

val gestaltFSMVersion: kotlin.UInt
    get() = TODO()

val gestaltFSNoMFSVols: kotlin.UInt
    get() = TODO()

val gestaltFSSupports2TBVols: kotlin.UInt
    get() = TODO()

val gestaltFSSupports4GBVols: kotlin.UInt
    get() = TODO()

val gestaltFSSupportsDirectIO: kotlin.UInt
    get() = TODO()

val gestaltFSSupportsExclusiveLocks: kotlin.UInt
    get() = TODO()

val gestaltFSSupportsHFSPlusVols: kotlin.UInt
    get() = TODO()

val gestaltFSSupportsHardLinkDetection: kotlin.UInt
    get() = TODO()

val gestaltFSUsesPOSIXPathsForConversion: kotlin.UInt
    get() = TODO()

val gestaltFXfrMgrAsync: kotlin.UInt
    get() = TODO()

val gestaltFXfrMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltFXfrMgrErrorString: kotlin.UInt
    get() = TODO()

val gestaltFXfrMgrMultiFile: kotlin.UInt
    get() = TODO()

val gestaltFXfrMgrPresent: kotlin.UInt
    get() = TODO()

val gestaltFileAllocationZeroedBlocksBit: kotlin.UInt
    get() = TODO()

val gestaltFileMappingAttr: kotlin.UInt
    get() = TODO()

val gestaltFileMappingMultipleFilesFix: kotlin.UInt
    get() = TODO()

val gestaltFileMappingPresent: kotlin.UInt
    get() = TODO()

val gestaltFindFolderAttr: kotlin.UInt
    get() = TODO()

val gestaltFindFolderPresent: kotlin.UInt
    get() = TODO()

val gestaltFindFolderRedirectionAttr: kotlin.UInt
    get() = TODO()

val gestaltFinderAttr: kotlin.UInt
    get() = TODO()

val gestaltFinderCallsAEProcess: kotlin.UInt
    get() = TODO()

val gestaltFinderDropEvent: kotlin.UInt
    get() = TODO()

val gestaltFinderFloppyRootComments: kotlin.UInt
    get() = TODO()

val gestaltFinderFullDragManagerSupport: kotlin.UInt
    get() = TODO()

val gestaltFinderHasClippings: kotlin.UInt
    get() = TODO()

val gestaltFinderLargeAndNotSavedFlavorsOK: kotlin.UInt
    get() = TODO()

val gestaltFinderMagicPlacement: kotlin.UInt
    get() = TODO()

val gestaltFinderSupports4GBVolumes: kotlin.UInt
    get() = TODO()

val gestaltFinderUnderstandsRedirectedDesktopFolder: kotlin.UInt
    get() = TODO()

val gestaltFinderUsesExtensibleFolderManager: kotlin.UInt
    get() = TODO()

val gestaltFinderUsesSpecialOpenFoldersFile: kotlin.UInt
    get() = TODO()

val gestaltFirstSlotNumber: kotlin.UInt
    get() = TODO()

val gestaltFloppyAttr: kotlin.UInt
    get() = TODO()

val gestaltFloppyIsMFMOnly: kotlin.UInt
    get() = TODO()

val gestaltFloppyIsManualEject: kotlin.UInt
    get() = TODO()

val gestaltFloppyUsesDiskInPlace: kotlin.UInt
    get() = TODO()

val gestaltFolderDescSupport: kotlin.UInt
    get() = TODO()

val gestaltFolderMgrFollowsAliasesWhenResolving: kotlin.UInt
    get() = TODO()

val gestaltFolderMgrSupportsDomains: kotlin.UInt
    get() = TODO()

val gestaltFolderMgrSupportsExtendedCalls: kotlin.UInt
    get() = TODO()

val gestaltFolderMgrSupportsFSCalls: kotlin.UInt
    get() = TODO()

val gestaltFontMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltFrontWindowMayBeHiddenBit: kotlin.UInt
    get() = TODO()

val gestaltFrontWindowMayBeHiddenMask: kotlin.UInt
    get() = TODO()

val gestaltFullExtFSDispatching: kotlin.UInt
    get() = TODO()

val gestaltGXPrintingMgrVersion: kotlin.UInt
    get() = TODO()

val gestaltGXVersion: kotlin.UInt
    get() = TODO()

val gestaltGraphicsAttr: kotlin.UInt
    get() = TODO()

val gestaltGraphicsIsDebugging: kotlin.UInt
    get() = TODO()

val gestaltGraphicsIsLoaded: kotlin.UInt
    get() = TODO()

val gestaltGraphicsIsPowerPC: kotlin.UInt
    get() = TODO()

val gestaltGraphicsVersion: kotlin.UInt
    get() = TODO()

val gestaltHardwareAttr: kotlin.UInt
    get() = TODO()

val gestaltHardwareVendorApple: kotlin.UInt
    get() = TODO()

val gestaltHardwareVendorCode: kotlin.UInt
    get() = TODO()

val gestaltHasASC: kotlin.UInt
    get() = TODO()

val gestaltHasColor: kotlin.UInt
    get() = TODO()

val gestaltHasDeepGWorlds: kotlin.UInt
    get() = TODO()

val gestaltHasDirectPixMaps: kotlin.UInt
    get() = TODO()

val gestaltHasEnhancedLtalk: kotlin.UInt
    get() = TODO()

val gestaltHasExtendedDiskInit: kotlin.UInt
    get() = TODO()

val gestaltHasFMTuner: kotlin.UInt
    get() = TODO()

val gestaltHasFSSpecCalls: kotlin.UInt
    get() = TODO()

val gestaltHasFileSystemManager: kotlin.UInt
    get() = TODO()

val gestaltHasFloatingWindows: kotlin.UInt
    get() = TODO()

val gestaltHasFloatingWindowsBit: kotlin.UInt
    get() = TODO()

val gestaltHasFloatingWindowsMask: kotlin.UInt
    get() = TODO()

val gestaltHasGPIaToDCDa: kotlin.UInt
    get() = TODO()

val gestaltHasGPIaToRTxCa: kotlin.UInt
    get() = TODO()

val gestaltHasGPIbToDCDb: kotlin.UInt
    get() = TODO()

val gestaltHasGrayishTextOr: kotlin.UInt
    get() = TODO()

val gestaltHasHFSPlusAPIs: kotlin.UInt
    get() = TODO()

val gestaltHasHWClosedCaptioning: kotlin.UInt
    get() = TODO()

val gestaltHasIRRemote: kotlin.UInt
    get() = TODO()

val gestaltHasParityCapability: kotlin.UInt
    get() = TODO()

val gestaltHasResourceOverrides: kotlin.UInt
    get() = TODO()

val gestaltHasSCC: kotlin.UInt
    get() = TODO()

val gestaltHasSCSI: kotlin.UInt
    get() = TODO()

val gestaltHasSCSI961: kotlin.UInt
    get() = TODO()

val gestaltHasSCSI962: kotlin.UInt
    get() = TODO()

val gestaltHasSerialFader: kotlin.UInt
    get() = TODO()

val gestaltHasSingleWindowModeBit: kotlin.UInt
    get() = TODO()

val gestaltHasSingleWindowModeMask: kotlin.UInt
    get() = TODO()

val gestaltHasSoftPowerOff: kotlin.UInt
    get() = TODO()

val gestaltHasSoundFader: kotlin.UInt
    get() = TODO()

val gestaltHasSoundInputDevice: kotlin.UInt
    get() = TODO()

val gestaltHasStereoDecoder: kotlin.UInt
    get() = TODO()

val gestaltHasSystemIRFunction: kotlin.UInt
    get() = TODO()

val gestaltHasTVTuner: kotlin.UInt
    get() = TODO()

val gestaltHasUniversalROM: kotlin.UInt
    get() = TODO()

val gestaltHasVIA1: kotlin.UInt
    get() = TODO()

val gestaltHasVIA2: kotlin.UInt
    get() = TODO()

val gestaltHasVidDecoderScaler: kotlin.UInt
    get() = TODO()

val gestaltHasWindowBuffering: kotlin.UInt
    get() = TODO()

val gestaltHasWindowBufferingBit: kotlin.UInt
    get() = TODO()

val gestaltHasWindowBufferingMask: kotlin.UInt
    get() = TODO()

val gestaltHasWindowShadowsBit: kotlin.UInt
    get() = TODO()

val gestaltHasWindowShadowsMask: kotlin.UInt
    get() = TODO()

val gestaltHasZoomedVideo: kotlin.UInt
    get() = TODO()

val gestaltHelpMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltHelpMgrExtensions: kotlin.UInt
    get() = TODO()

val gestaltHelpMgrPresent: kotlin.UInt
    get() = TODO()

val gestaltHidePortA: kotlin.UInt
    get() = TODO()

val gestaltHidePortB: kotlin.UInt
    get() = TODO()

val gestaltHighLevelMatching: kotlin.UInt
    get() = TODO()

val gestaltINeedIRPowerOffConfirm: kotlin.UInt
    get() = TODO()

val gestaltIPCSupport: kotlin.UInt
    get() = TODO()

val gestaltIRDisabled: kotlin.UInt
    get() = TODO()

val gestaltIconUtilitiesAttr: kotlin.UInt
    get() = TODO()

val gestaltIconUtilitiesHas32BitIcons: kotlin.UInt
    get() = TODO()

val gestaltIconUtilitiesHas48PixelIcons: kotlin.UInt
    get() = TODO()

val gestaltIconUtilitiesHas8BitDeepMasks: kotlin.UInt
    get() = TODO()

val gestaltIconUtilitiesHasIconServices: kotlin.UInt
    get() = TODO()

val gestaltIconUtilitiesPresent: kotlin.UInt
    get() = TODO()

val gestaltInitHeapZerosOutHeapsBit: kotlin.UInt
    get() = TODO()

val gestaltIntel: kotlin.UInt
    get() = TODO()

val gestaltInternalDisplay: kotlin.UInt
    get() = TODO()

val gestaltJapanAdjustADBKbd: kotlin.UInt
    get() = TODO()

val gestaltKeyboardType: kotlin.UInt
    get() = TODO()

val gestaltLaunchCanReturn: kotlin.UInt
    get() = TODO()

val gestaltLaunchControl: kotlin.UInt
    get() = TODO()

val gestaltLaunchFullFileSpec: kotlin.UInt
    get() = TODO()

val gestaltLineLevelInput: kotlin.UInt
    get() = TODO()

val gestaltLocationErr: kotlin.Int
    get() = TODO()

val gestaltLogicalPageSize: kotlin.UInt
    get() = TODO()

val gestaltLogicalRAMSize: kotlin.UInt
    get() = TODO()

val gestaltLowMemorySize: kotlin.UInt
    get() = TODO()

val gestaltMBLegacy: kotlin.UInt
    get() = TODO()

val gestaltMBMultipleBays: kotlin.UInt
    get() = TODO()

val gestaltMBSingleBay: kotlin.UInt
    get() = TODO()

val gestaltMMUType: kotlin.UInt
    get() = TODO()

val gestaltMPCallableAPIsAttr: kotlin.UInt
    get() = TODO()

val gestaltMPDeviceManager: kotlin.UInt
    get() = TODO()

val gestaltMPFileManager: kotlin.UInt
    get() = TODO()

val gestaltMPTrapCalls: kotlin.UInt
    get() = TODO()

val gestaltMac512KE: kotlin.UInt
    get() = TODO()

val gestaltMacAndPad: kotlin.UInt
    get() = TODO()

val gestaltMacCentris610: kotlin.UInt
    get() = TODO()

val gestaltMacCentris650: kotlin.UInt
    get() = TODO()

val gestaltMacCentris660AV: kotlin.UInt
    get() = TODO()

val gestaltMacClassic: kotlin.UInt
    get() = TODO()

val gestaltMacColorClassic: kotlin.UInt
    get() = TODO()

val gestaltMacII: kotlin.UInt
    get() = TODO()

val gestaltMacIIci: kotlin.UInt
    get() = TODO()

val gestaltMacIIcx: kotlin.UInt
    get() = TODO()

val gestaltMacIIfx: kotlin.UInt
    get() = TODO()

val gestaltMacIIsi: kotlin.UInt
    get() = TODO()

val gestaltMacIIvi: kotlin.UInt
    get() = TODO()

val gestaltMacIIvm: kotlin.UInt
    get() = TODO()

val gestaltMacIIvx: kotlin.UInt
    get() = TODO()

val gestaltMacIIx: kotlin.UInt
    get() = TODO()

val gestaltMacKbd: kotlin.UInt
    get() = TODO()

val gestaltMacLC: kotlin.UInt
    get() = TODO()

val gestaltMacLC475: kotlin.UInt
    get() = TODO()

val gestaltMacLC520: kotlin.UInt
    get() = TODO()

val gestaltMacLC575: kotlin.UInt
    get() = TODO()

val gestaltMacLC580: kotlin.UInt
    get() = TODO()

val gestaltMacLCII: kotlin.UInt
    get() = TODO()

val gestaltMacLCIII: kotlin.UInt
    get() = TODO()

val gestaltMacOSCompatibility: kotlin.UInt
    get() = TODO()

val gestaltMacOSCompatibilityBoxAttr: kotlin.UInt
    get() = TODO()

val gestaltMacOSCompatibilityBoxHasSerial: kotlin.UInt
    get() = TODO()

val gestaltMacOSCompatibilityBoxPresent: kotlin.UInt
    get() = TODO()

val gestaltMacOSCompatibilityBoxless: kotlin.UInt
    get() = TODO()

val gestaltMacOSXQD: kotlin.UInt
    get() = TODO()

val gestaltMacOSXQDText: kotlin.UInt
    get() = TODO()

val gestaltMacPlus: kotlin.UInt
    get() = TODO()

val gestaltMacPlusKbd: kotlin.UInt
    get() = TODO()

val gestaltMacQuadra605: kotlin.UInt
    get() = TODO()

val gestaltMacQuadra610: kotlin.UInt
    get() = TODO()

val gestaltMacQuadra630: kotlin.UInt
    get() = TODO()

val gestaltMacQuadra650: kotlin.UInt
    get() = TODO()

val gestaltMacQuadra660AV: kotlin.UInt
    get() = TODO()

val gestaltMacQuadra700: kotlin.UInt
    get() = TODO()

val gestaltMacQuadra800: kotlin.UInt
    get() = TODO()

val gestaltMacQuadra840AV: kotlin.UInt
    get() = TODO()

val gestaltMacQuadra900: kotlin.UInt
    get() = TODO()

val gestaltMacQuadra950: kotlin.UInt
    get() = TODO()

val gestaltMacSE: kotlin.UInt
    get() = TODO()

val gestaltMacSE030: kotlin.UInt
    get() = TODO()

val gestaltMacTV: kotlin.UInt
    get() = TODO()

val gestaltMacXL: kotlin.UInt
    get() = TODO()

val gestaltMachineIcon: kotlin.UInt
    get() = TODO()

val gestaltMachineType: kotlin.UInt
    get() = TODO()

val gestaltMediaBay: kotlin.UInt
    get() = TODO()

val gestaltMemoryMapAttr: kotlin.UInt
    get() = TODO()

val gestaltMemoryMapSparse: kotlin.UInt
    get() = TODO()

val gestaltMenuMgrAquaLayoutBit: kotlin.UInt
    get() = TODO()

val gestaltMenuMgrAquaLayoutMask: kotlin.UInt
    get() = TODO()

val gestaltMenuMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltMenuMgrCGImageMenuTitleBit: kotlin.UInt
    get() = TODO()

val gestaltMenuMgrCGImageMenuTitleMask: kotlin.UInt
    get() = TODO()

val gestaltMenuMgrMoreThanFiveMenusDeepBit: kotlin.UInt
    get() = TODO()

val gestaltMenuMgrMoreThanFiveMenusDeepMask: kotlin.UInt
    get() = TODO()

val gestaltMenuMgrMultipleItemsWithCommandIDBit: kotlin.UInt
    get() = TODO()

val gestaltMenuMgrMultipleItemsWithCommandIDMask: kotlin.UInt
    get() = TODO()

val gestaltMenuMgrPresent: kotlin.UInt
    get() = TODO()

val gestaltMenuMgrPresentBit: kotlin.UInt
    get() = TODO()

val gestaltMenuMgrPresentMask: kotlin.UInt
    get() = TODO()

val gestaltMenuMgrRetainsIconRefBit: kotlin.UInt
    get() = TODO()

val gestaltMenuMgrRetainsIconRefMask: kotlin.UInt
    get() = TODO()

val gestaltMenuMgrSendsMenuBoundsToDefProcBit: kotlin.UInt
    get() = TODO()

val gestaltMenuMgrSendsMenuBoundsToDefProcMask: kotlin.UInt
    get() = TODO()

val gestaltMessageMgrVersion: kotlin.UInt
    get() = TODO()

val gestaltMiscAttr: kotlin.UInt
    get() = TODO()

val gestaltMixedModeAttr: kotlin.UInt
    get() = TODO()

val gestaltMixedModeCFM68K: kotlin.UInt
    get() = TODO()

val gestaltMixedModeCFM68KHasState: kotlin.UInt
    get() = TODO()

val gestaltMixedModeCFM68KHasTrap: kotlin.UInt
    get() = TODO()

val gestaltMixedModePowerPC: kotlin.UInt
    get() = TODO()

val gestaltMixedModeVersion: kotlin.UInt
    get() = TODO()

val gestaltMultiChannels: kotlin.UInt
    get() = TODO()

val gestaltMultipleUsersState: kotlin.UInt
    get() = TODO()

val gestaltMustUseFCBAccessors: kotlin.UInt
    get() = TODO()

val gestaltNameRegistryVersion: kotlin.UInt
    get() = TODO()

val gestaltNativeCPUfamily: kotlin.UInt
    get() = TODO()

val gestaltNativeCPUtype: kotlin.UInt
    get() = TODO()

val gestaltNativeProcessMgrBit: kotlin.UInt
    get() = TODO()

val gestaltNativeTimeMgr: kotlin.UInt
    get() = TODO()

val gestaltNativeType1FontSupport: kotlin.UInt
    get() = TODO()

val gestaltNewHandleReturnsZeroedMemoryBit: kotlin.UInt
    get() = TODO()

val gestaltNewPtrReturnsZeroedMemoryBit: kotlin.UInt
    get() = TODO()

val gestaltNoFPU: kotlin.UInt
    get() = TODO()

val gestaltNoMMU: kotlin.UInt
    get() = TODO()

val gestaltNotificationMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltNotificationPresent: kotlin.UInt
    get() = TODO()

val gestaltNuBusConnectors: kotlin.UInt
    get() = TODO()

val gestaltNuBusPresent: kotlin.UInt
    get() = TODO()

val gestaltNuBusSlotCount: kotlin.UInt
    get() = TODO()

val gestaltOCESFServerAvailable: kotlin.UInt
    get() = TODO()

val gestaltOCETB: kotlin.UInt
    get() = TODO()

val gestaltOCETBAvailable: kotlin.UInt
    get() = TODO()

val gestaltOCETBNativeGlueAvailable: kotlin.UInt
    get() = TODO()

val gestaltOCETBPresent: kotlin.UInt
    get() = TODO()

val gestaltOCEToolboxAttr: kotlin.UInt
    get() = TODO()

val gestaltOCEToolboxVersion: kotlin.UInt
    get() = TODO()

val gestaltOFA2available: kotlin.UInt
    get() = TODO()

val gestaltOSAttr: kotlin.UInt
    get() = TODO()

val gestaltOSLCompliantFinder: kotlin.UInt
    get() = TODO()

val gestaltOSLInSystem: kotlin.UInt
    get() = TODO()

val gestaltOSTable: kotlin.UInt
    get() = TODO()

val gestaltOSXFBCCurrentVersion: kotlin.UInt
    get() = TODO()

val gestaltOpenFirmwareInfo: kotlin.UInt
    get() = TODO()

val gestaltOpenTpt: kotlin.UInt
    get() = TODO()

val gestaltOpenTptARAPPresent: kotlin.UInt
    get() = TODO()

val gestaltOpenTptAppleTalkLoadedBit: kotlin.UInt
    get() = TODO()

val gestaltOpenTptAppleTalkLoadedMask: kotlin.UInt
    get() = TODO()

val gestaltOpenTptAppleTalkPresentBit: kotlin.UInt
    get() = TODO()

val gestaltOpenTptAppleTalkPresentMask: kotlin.UInt
    get() = TODO()

val gestaltOpenTptIPXSPXLoadedBit: kotlin.UInt
    get() = TODO()

val gestaltOpenTptIPXSPXLoadedMask: kotlin.UInt
    get() = TODO()

val gestaltOpenTptIPXSPXPresentBit: kotlin.UInt
    get() = TODO()

val gestaltOpenTptIPXSPXPresentMask: kotlin.UInt
    get() = TODO()

val gestaltOpenTptLoadedBit: kotlin.UInt
    get() = TODO()

val gestaltOpenTptLoadedMask: kotlin.UInt
    get() = TODO()

val gestaltOpenTptNetworkSetup: kotlin.UInt
    get() = TODO()

val gestaltOpenTptNetworkSetupLegacyExport: kotlin.UInt
    get() = TODO()

val gestaltOpenTptNetworkSetupLegacyImport: kotlin.UInt
    get() = TODO()

val gestaltOpenTptNetworkSetupSupportsMultihoming: kotlin.UInt
    get() = TODO()

val gestaltOpenTptNetworkSetupVersion: kotlin.UInt
    get() = TODO()

val gestaltOpenTptPPPPresent: kotlin.UInt
    get() = TODO()

val gestaltOpenTptPresentBit: kotlin.UInt
    get() = TODO()

val gestaltOpenTptPresentMask: kotlin.UInt
    get() = TODO()

val gestaltOpenTptRemoteAccess: kotlin.UInt
    get() = TODO()

val gestaltOpenTptRemoteAccessClientOnly: kotlin.UInt
    get() = TODO()

val gestaltOpenTptRemoteAccessLoaded: kotlin.UInt
    get() = TODO()

val gestaltOpenTptRemoteAccessMPServer: kotlin.UInt
    get() = TODO()

val gestaltOpenTptRemoteAccessPServer: kotlin.UInt
    get() = TODO()

val gestaltOpenTptRemoteAccessPresent: kotlin.UInt
    get() = TODO()

val gestaltOpenTptRemoteAccessVersion: kotlin.UInt
    get() = TODO()

val gestaltOpenTptTCPLoadedBit: kotlin.UInt
    get() = TODO()

val gestaltOpenTptTCPLoadedMask: kotlin.UInt
    get() = TODO()

val gestaltOpenTptTCPPresentBit: kotlin.UInt
    get() = TODO()

val gestaltOpenTptTCPPresentMask: kotlin.UInt
    get() = TODO()

val gestaltOpenTptVersions: kotlin.UInt
    get() = TODO()

val gestaltOriginalATSUVersion: kotlin.UInt
    get() = TODO()

val gestaltOriginalQD: kotlin.UInt
    get() = TODO()

val gestaltOriginalQDText: kotlin.UInt
    get() = TODO()

val gestaltOutlineFonts: kotlin.UInt
    get() = TODO()

val gestaltPCCard: kotlin.UInt
    get() = TODO()

val gestaltPCCardFamilyPresent: kotlin.UInt
    get() = TODO()

val gestaltPCCardHasPowerControl: kotlin.UInt
    get() = TODO()

val gestaltPCCardSupportsCardBus: kotlin.UInt
    get() = TODO()

val gestaltPCXAttr: kotlin.UInt
    get() = TODO()

val gestaltPCXHas8and16BitFAT: kotlin.UInt
    get() = TODO()

val gestaltPCXHasProDOS: kotlin.UInt
    get() = TODO()

val gestaltPCXNewUI: kotlin.UInt
    get() = TODO()

val gestaltPCXUseICMapping: kotlin.UInt
    get() = TODO()

val gestaltPMgrCPUIdle: kotlin.UInt
    get() = TODO()

val gestaltPMgrDispatchExists: kotlin.UInt
    get() = TODO()

val gestaltPMgrExists: kotlin.UInt
    get() = TODO()

val gestaltPMgrSCC: kotlin.UInt
    get() = TODO()

val gestaltPMgrSound: kotlin.UInt
    get() = TODO()

val gestaltPMgrSupportsAVPowerStateAtSleepWake: kotlin.UInt
    get() = TODO()

val gestaltPPCDragLibPresent: kotlin.UInt
    get() = TODO()

val gestaltPPCQuickTimeLibPresent: kotlin.UInt
    get() = TODO()

val gestaltPPCSupportsIncoming: kotlin.UInt
    get() = TODO()

val gestaltPPCSupportsIncomingAppleTalk: kotlin.UInt
    get() = TODO()

val gestaltPPCSupportsIncomingTCP_IP: kotlin.UInt
    get() = TODO()

val gestaltPPCSupportsOutGoing: kotlin.UInt
    get() = TODO()

val gestaltPPCSupportsOutgoingAppleTalk: kotlin.UInt
    get() = TODO()

val gestaltPPCSupportsOutgoingTCP_IP: kotlin.UInt
    get() = TODO()

val gestaltPPCSupportsRealTime: kotlin.UInt
    get() = TODO()

val gestaltPPCSupportsTCP_IP: kotlin.UInt
    get() = TODO()

val gestaltPPCToolboxAttr: kotlin.UInt
    get() = TODO()

val gestaltPPCToolboxPresent: kotlin.UInt
    get() = TODO()

val gestaltPS2Keyboard: kotlin.UInt
    get() = TODO()

val gestaltParityAttr: kotlin.UInt
    get() = TODO()

val gestaltParityEnabled: kotlin.UInt
    get() = TODO()

val gestaltPartialRsrcs: kotlin.UInt
    get() = TODO()

val gestaltPerforma250: kotlin.UInt
    get() = TODO()

val gestaltPerforma450: kotlin.UInt
    get() = TODO()

val gestaltPerforma46x: kotlin.UInt
    get() = TODO()

val gestaltPerforma47x: kotlin.UInt
    get() = TODO()

val gestaltPerforma5300: kotlin.UInt
    get() = TODO()

val gestaltPerforma550: kotlin.UInt
    get() = TODO()

val gestaltPerforma580: kotlin.UInt
    get() = TODO()

val gestaltPerforma600: kotlin.UInt
    get() = TODO()

val gestaltPerforma6300: kotlin.UInt
    get() = TODO()

val gestaltPerforma6360: kotlin.UInt
    get() = TODO()

val gestaltPerforma6400: kotlin.UInt
    get() = TODO()

val gestaltPhysicalRAMSize: kotlin.UInt
    get() = TODO()

val gestaltPhysicalRAMSizeInMegabytes: kotlin.UInt
    get() = TODO()

val gestaltPlayAndRecord: kotlin.UInt
    get() = TODO()

val gestaltPopupAttr: kotlin.UInt
    get() = TODO()

val gestaltPopupPresent: kotlin.UInt
    get() = TODO()

val gestaltPortADisabled: kotlin.UInt
    get() = TODO()

val gestaltPortBDisabled: kotlin.UInt
    get() = TODO()

val gestaltPortable: kotlin.UInt
    get() = TODO()

val gestaltPortable2001ANSIKbd: kotlin.UInt
    get() = TODO()

val gestaltPortable2001ISOKbd: kotlin.UInt
    get() = TODO()

val gestaltPortable2001JISKbd: kotlin.UInt
    get() = TODO()

val gestaltPortableSlotPresent: kotlin.UInt
    get() = TODO()

val gestaltPortableUSBANSIKbd: kotlin.UInt
    get() = TODO()

val gestaltPortableUSBISOKbd: kotlin.UInt
    get() = TODO()

val gestaltPortableUSBJISKbd: kotlin.UInt
    get() = TODO()

val gestaltPowerBook100: kotlin.UInt
    get() = TODO()

val gestaltPowerBook140: kotlin.UInt
    get() = TODO()

val gestaltPowerBook1400: kotlin.UInt
    get() = TODO()

val gestaltPowerBook145: kotlin.UInt
    get() = TODO()

val gestaltPowerBook150: kotlin.UInt
    get() = TODO()

val gestaltPowerBook160: kotlin.UInt
    get() = TODO()

val gestaltPowerBook165: kotlin.UInt
    get() = TODO()

val gestaltPowerBook165c: kotlin.UInt
    get() = TODO()

val gestaltPowerBook170: kotlin.UInt
    get() = TODO()

val gestaltPowerBook180: kotlin.UInt
    get() = TODO()

val gestaltPowerBook180c: kotlin.UInt
    get() = TODO()

val gestaltPowerBook190: kotlin.UInt
    get() = TODO()

val gestaltPowerBook2400: kotlin.UInt
    get() = TODO()

val gestaltPowerBook3400: kotlin.UInt
    get() = TODO()

val gestaltPowerBook500PPCUpgrade: kotlin.UInt
    get() = TODO()

val gestaltPowerBook520: kotlin.UInt
    get() = TODO()

val gestaltPowerBook520c: kotlin.UInt
    get() = TODO()

val gestaltPowerBook5300: kotlin.UInt
    get() = TODO()

val gestaltPowerBook540: kotlin.UInt
    get() = TODO()

val gestaltPowerBook540c: kotlin.UInt
    get() = TODO()

val gestaltPowerBookDuo210: kotlin.UInt
    get() = TODO()

val gestaltPowerBookDuo230: kotlin.UInt
    get() = TODO()

val gestaltPowerBookDuo2300: kotlin.UInt
    get() = TODO()

val gestaltPowerBookDuo250: kotlin.UInt
    get() = TODO()

val gestaltPowerBookDuo270c: kotlin.UInt
    get() = TODO()

val gestaltPowerBookDuo280: kotlin.UInt
    get() = TODO()

val gestaltPowerBookDuo280c: kotlin.UInt
    get() = TODO()

val gestaltPowerBookG3: kotlin.UInt
    get() = TODO()

val gestaltPowerBookG3Series: kotlin.UInt
    get() = TODO()

val gestaltPowerBookG3Series2: kotlin.UInt
    get() = TODO()

val gestaltPowerMac4400: kotlin.UInt
    get() = TODO()

val gestaltPowerMac4400_160: kotlin.UInt
    get() = TODO()

val gestaltPowerMac5200: kotlin.UInt
    get() = TODO()

val gestaltPowerMac5260: kotlin.UInt
    get() = TODO()

val gestaltPowerMac5400: kotlin.UInt
    get() = TODO()

val gestaltPowerMac5500: kotlin.UInt
    get() = TODO()

val gestaltPowerMac6100_60: kotlin.UInt
    get() = TODO()

val gestaltPowerMac6100_66: kotlin.UInt
    get() = TODO()

val gestaltPowerMac6200: kotlin.UInt
    get() = TODO()

val gestaltPowerMac6400: kotlin.UInt
    get() = TODO()

val gestaltPowerMac6500: kotlin.UInt
    get() = TODO()

val gestaltPowerMac7100_66: kotlin.UInt
    get() = TODO()

val gestaltPowerMac7100_80: kotlin.UInt
    get() = TODO()

val gestaltPowerMac7200: kotlin.UInt
    get() = TODO()

val gestaltPowerMac7300: kotlin.UInt
    get() = TODO()

val gestaltPowerMac7500: kotlin.UInt
    get() = TODO()

val gestaltPowerMac7600: kotlin.UInt
    get() = TODO()

val gestaltPowerMac8100_100: kotlin.UInt
    get() = TODO()

val gestaltPowerMac8100_110: kotlin.UInt
    get() = TODO()

val gestaltPowerMac8100_120: kotlin.UInt
    get() = TODO()

val gestaltPowerMac8100_80: kotlin.UInt
    get() = TODO()

val gestaltPowerMac8500: kotlin.UInt
    get() = TODO()

val gestaltPowerMac8600: kotlin.UInt
    get() = TODO()

val gestaltPowerMac9500: kotlin.UInt
    get() = TODO()

val gestaltPowerMac9600: kotlin.UInt
    get() = TODO()

val gestaltPowerMacCentris610: kotlin.UInt
    get() = TODO()

val gestaltPowerMacCentris650: kotlin.UInt
    get() = TODO()

val gestaltPowerMacG3: kotlin.UInt
    get() = TODO()

val gestaltPowerMacLC475: kotlin.UInt
    get() = TODO()

val gestaltPowerMacLC575: kotlin.UInt
    get() = TODO()

val gestaltPowerMacLC630: kotlin.UInt
    get() = TODO()

val gestaltPowerMacNewWorld: kotlin.UInt
    get() = TODO()

val gestaltPowerMacPerforma47x: kotlin.UInt
    get() = TODO()

val gestaltPowerMacPerforma57x: kotlin.UInt
    get() = TODO()

val gestaltPowerMacPerforma63x: kotlin.UInt
    get() = TODO()

val gestaltPowerMacQuadra610: kotlin.UInt
    get() = TODO()

val gestaltPowerMacQuadra630: kotlin.UInt
    get() = TODO()

val gestaltPowerMacQuadra650: kotlin.UInt
    get() = TODO()

val gestaltPowerMacQuadra700: kotlin.UInt
    get() = TODO()

val gestaltPowerMacQuadra800: kotlin.UInt
    get() = TODO()

val gestaltPowerMacQuadra900: kotlin.UInt
    get() = TODO()

val gestaltPowerMacQuadra950: kotlin.UInt
    get() = TODO()

val gestaltPowerMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltPowerMgrVers: kotlin.UInt
    get() = TODO()

val gestaltPowerPC: kotlin.UInt
    get() = TODO()

val gestaltPowerPCASArchitecture: kotlin.UInt
    get() = TODO()

val gestaltPowerPCAware: kotlin.UInt
    get() = TODO()

val gestaltPowerPCHas64BitSupport: kotlin.UInt
    get() = TODO()

val gestaltPowerPCHasDCBAInstruction: kotlin.UInt
    get() = TODO()

val gestaltPowerPCHasDCBTStreams: kotlin.UInt
    get() = TODO()

val gestaltPowerPCHasDataStreams: kotlin.UInt
    get() = TODO()

val gestaltPowerPCHasGraphicsInstructions: kotlin.UInt
    get() = TODO()

val gestaltPowerPCHasSTFIWXInstruction: kotlin.UInt
    get() = TODO()

val gestaltPowerPCHasSquareRootInstructions: kotlin.UInt
    get() = TODO()

val gestaltPowerPCHasVectorInstructions: kotlin.UInt
    get() = TODO()

val gestaltPowerPCIgnoresDCBST: kotlin.UInt
    get() = TODO()

val gestaltPowerPCProcessorFeatures: kotlin.UInt
    get() = TODO()

val gestaltProF16ANSIKbd: kotlin.UInt
    get() = TODO()

val gestaltProF16ISOKbd: kotlin.UInt
    get() = TODO()

val gestaltProF16JISKbd: kotlin.UInt
    get() = TODO()

val gestaltProcClkSpeed: kotlin.UInt
    get() = TODO()

val gestaltProcClkSpeedMHz: kotlin.UInt
    get() = TODO()

val gestaltProcessorCacheLineSize: kotlin.UInt
    get() = TODO()

val gestaltProcessorType: kotlin.UInt
    get() = TODO()

val gestaltPrtblADBKbd: kotlin.UInt
    get() = TODO()

val gestaltPrtblISOKbd: kotlin.UInt
    get() = TODO()

val gestaltPwrBk99JISKbd: kotlin.UInt
    get() = TODO()

val gestaltPwrBkEKDomKbd: kotlin.UInt
    get() = TODO()

val gestaltPwrBkEKISOKbd: kotlin.UInt
    get() = TODO()

val gestaltPwrBkEKJISKbd: kotlin.UInt
    get() = TODO()

val gestaltPwrBkExtADBKbd: kotlin.UInt
    get() = TODO()

val gestaltPwrBkExtISOKbd: kotlin.UInt
    get() = TODO()

val gestaltPwrBkExtJISKbd: kotlin.UInt
    get() = TODO()

val gestaltPwrBkSubDomKbd: kotlin.UInt
    get() = TODO()

val gestaltPwrBkSubISOKbd: kotlin.UInt
    get() = TODO()

val gestaltPwrBkSubJISKbd: kotlin.UInt
    get() = TODO()

val gestaltPwrBookADBKbd: kotlin.UInt
    get() = TODO()

val gestaltPwrBookISOADBKbd: kotlin.UInt
    get() = TODO()

val gestaltQD3D: kotlin.UInt
    get() = TODO()

val gestaltQD3DPresent: kotlin.UInt
    get() = TODO()

val gestaltQD3DVersion: kotlin.UInt
    get() = TODO()

val gestaltQD3DViewer: kotlin.UInt
    get() = TODO()

val gestaltQD3DViewerPresent: kotlin.UInt
    get() = TODO()

val gestaltQDHasLongRowBytes: kotlin.UInt
    get() = TODO()

val gestaltQDTextFeatures: kotlin.UInt
    get() = TODO()

val gestaltQDTextVersion: kotlin.UInt
    get() = TODO()

val gestaltQTVRCubicPanosPresent: kotlin.UInt
    get() = TODO()

val gestaltQTVRCylinderPanosPresent: kotlin.UInt
    get() = TODO()

val gestaltQTVRMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltQTVRMgrPresent: kotlin.UInt
    get() = TODO()

val gestaltQTVRMgrVers: kotlin.UInt
    get() = TODO()

val gestaltQTVRObjMoviesPresent: kotlin.UInt
    get() = TODO()

val gestaltQuadra605: kotlin.UInt
    get() = TODO()

val gestaltQuadra610: kotlin.UInt
    get() = TODO()

val gestaltQuadra630: kotlin.UInt
    get() = TODO()

val gestaltQuadra650: kotlin.UInt
    get() = TODO()

val gestaltQuadra660AV: kotlin.UInt
    get() = TODO()

val gestaltQuadra700: kotlin.UInt
    get() = TODO()

val gestaltQuadra800: kotlin.UInt
    get() = TODO()

val gestaltQuadra840AV: kotlin.UInt
    get() = TODO()

val gestaltQuadra900: kotlin.UInt
    get() = TODO()

val gestaltQuadra950: kotlin.UInt
    get() = TODO()

val gestaltQuickTime: kotlin.UInt
    get() = TODO()

val gestaltQuickTimeConferencing: kotlin.UInt
    get() = TODO()

val gestaltQuickTimeConferencingInfo: kotlin.UInt
    get() = TODO()

val gestaltQuickTimeFeatures: kotlin.UInt
    get() = TODO()

val gestaltQuickTimeStreamingFeatures: kotlin.UInt
    get() = TODO()

val gestaltQuickTimeStreamingVersion: kotlin.UInt
    get() = TODO()

val gestaltQuickTimeThreadSafeFeaturesAttr: kotlin.UInt
    get() = TODO()

val gestaltQuickTimeThreadSafeGraphicsExport: kotlin.UInt
    get() = TODO()

val gestaltQuickTimeThreadSafeGraphicsImport: kotlin.UInt
    get() = TODO()

val gestaltQuickTimeThreadSafeICM: kotlin.UInt
    get() = TODO()

val gestaltQuickTimeThreadSafeMovieExport: kotlin.UInt
    get() = TODO()

val gestaltQuickTimeThreadSafeMovieImport: kotlin.UInt
    get() = TODO()

val gestaltQuickTimeThreadSafeMoviePlayback: kotlin.UInt
    get() = TODO()

val gestaltQuickTimeThreadSafeMovieToolbox: kotlin.UInt
    get() = TODO()

val gestaltQuickTimeVersion: kotlin.UInt
    get() = TODO()

val gestaltQuickdrawFeatures: kotlin.UInt
    get() = TODO()

val gestaltQuickdrawVersion: kotlin.UInt
    get() = TODO()

val gestaltRBVAddr: kotlin.UInt
    get() = TODO()

val gestaltRMFakeAppleMenuItemsRolledIn: kotlin.UInt
    get() = TODO()

val gestaltRMForceSysHeapRolledIn: kotlin.UInt
    get() = TODO()

val gestaltRMSupportsFSCalls: kotlin.UInt
    get() = TODO()

val gestaltRMTypeIndexOrderingReverse: kotlin.UInt
    get() = TODO()

val gestaltROMSize: kotlin.UInt
    get() = TODO()

val gestaltROMVersion: kotlin.UInt
    get() = TODO()

val gestaltRealTempMemory: kotlin.UInt
    get() = TODO()

val gestaltRealtimeMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltRealtimeMgrPresent: kotlin.UInt
    get() = TODO()

val gestaltResourceMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltResourceMgrBugFixesAttrs: kotlin.UInt
    get() = TODO()

val gestaltRevisedTimeMgr: kotlin.UInt
    get() = TODO()

val gestaltSCCReadAddr: kotlin.UInt
    get() = TODO()

val gestaltSCCWriteAddr: kotlin.UInt
    get() = TODO()

val gestaltSCSI: kotlin.UInt
    get() = TODO()

val gestaltSCSIPollSIH: kotlin.UInt
    get() = TODO()

val gestaltSCSISlotBoot: kotlin.UInt
    get() = TODO()

val gestaltSDPFindVersion: kotlin.UInt
    get() = TODO()

val gestaltSDPPromptVersion: kotlin.UInt
    get() = TODO()

val gestaltSDPStandardDirectoryVersion: kotlin.UInt
    get() = TODO()

val gestaltSE30SlotPresent: kotlin.UInt
    get() = TODO()

val gestaltSESlotPresent: kotlin.UInt
    get() = TODO()

val gestaltSFServer: kotlin.UInt
    get() = TODO()

val gestaltSMPMailerVersion: kotlin.UInt
    get() = TODO()

val gestaltSMPSPSendLetterVersion: kotlin.UInt
    get() = TODO()

val gestaltSafeOFAttr: kotlin.UInt
    get() = TODO()

val gestaltSanityCheckResourceFiles: kotlin.UInt
    get() = TODO()

val gestaltSbitFontSupport: kotlin.UInt
    get() = TODO()

val gestaltScrapMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltScrapMgrTranslationAware: kotlin.UInt
    get() = TODO()

val gestaltScreenCaptureDir: kotlin.UInt
    get() = TODO()

val gestaltScreenCaptureMain: kotlin.UInt
    get() = TODO()

val gestaltScriptCount: kotlin.UInt
    get() = TODO()

val gestaltScriptMgrVersion: kotlin.UInt
    get() = TODO()

val gestaltScriptingSupport: kotlin.UInt
    get() = TODO()

val gestaltScrollingThrottle: kotlin.UInt
    get() = TODO()

val gestaltSerialArbitrationExists: kotlin.UInt
    get() = TODO()

val gestaltSerialAttr: kotlin.UInt
    get() = TODO()

val gestaltSetDragImageUpdates: kotlin.UInt
    get() = TODO()

val gestaltSheetsAreWindowModalBit: kotlin.UInt
    get() = TODO()

val gestaltSheetsAreWindowModalMask: kotlin.UInt
    get() = TODO()

val gestaltShutdownAttributes: kotlin.UInt
    get() = TODO()

val gestaltShutdownHassdOnBootVolUnmount: kotlin.UInt
    get() = TODO()

val gestaltSlotAttr: kotlin.UInt
    get() = TODO()

val gestaltSlotMgrExists: kotlin.UInt
    get() = TODO()

val gestaltSndPlayDoubleBuffer: kotlin.UInt
    get() = TODO()

val gestaltSoftwareVendorApple: kotlin.UInt
    get() = TODO()

val gestaltSoftwareVendorCode: kotlin.UInt
    get() = TODO()

val gestaltSoftwareVendorLicensee: kotlin.UInt
    get() = TODO()

val gestaltSoundAttr: kotlin.UInt
    get() = TODO()

val gestaltSoundIOMgrPresent: kotlin.UInt
    get() = TODO()

val gestaltSpecificMatchSupport: kotlin.UInt
    get() = TODO()

val gestaltSpeechAttr: kotlin.UInt
    get() = TODO()

val gestaltSpeechHasPPCGlue: kotlin.UInt
    get() = TODO()

val gestaltSpeechMgrPresent: kotlin.UInt
    get() = TODO()

val gestaltSpeechRecognitionAttr: kotlin.UInt
    get() = TODO()

val gestaltSpeechRecognitionVersion: kotlin.UInt
    get() = TODO()

val gestaltSplitOSAttr: kotlin.UInt
    get() = TODO()

val gestaltSplitOSAware: kotlin.UInt
    get() = TODO()

val gestaltSplitOSBootDriveIsNetworkVolume: kotlin.UInt
    get() = TODO()

val gestaltSplitOSEnablerVolumeIsDifferentFromBootVolume: kotlin.UInt
    get() = TODO()

val gestaltSplitOSMachineNameSetToNetworkNameTemp: kotlin.UInt
    get() = TODO()

val gestaltSplitOSMachineNameStartupDiskIsNonPersistent: kotlin.UInt
    get() = TODO()

val gestaltSquareMenuBar: kotlin.UInt
    get() = TODO()

val gestaltStandardFile58: kotlin.UInt
    get() = TODO()

val gestaltStandardFileAttr: kotlin.UInt
    get() = TODO()

val gestaltStandardFileHasColorIcons: kotlin.UInt
    get() = TODO()

val gestaltStandardFileHasDynamicVolumeAllocation: kotlin.UInt
    get() = TODO()

val gestaltStandardFileTranslationAware: kotlin.UInt
    get() = TODO()

val gestaltStandardFileUseGenericIcons: kotlin.UInt
    get() = TODO()

val gestaltStandardTimeMgr: kotlin.UInt
    get() = TODO()

val gestaltStdADBKbd: kotlin.UInt
    get() = TODO()

val gestaltStdISOADBKbd: kotlin.UInt
    get() = TODO()

val gestaltStdNBPAttr: kotlin.UInt
    get() = TODO()

val gestaltStdNBPPresent: kotlin.UInt
    get() = TODO()

val gestaltStdNBPSupportsAutoPosition: kotlin.UInt
    get() = TODO()

val gestaltStereoCapability: kotlin.UInt
    get() = TODO()

val gestaltStereoInput: kotlin.UInt
    get() = TODO()

val gestaltStereoMixing: kotlin.UInt
    get() = TODO()

val gestaltSupportsApplicationURL: kotlin.UInt
    get() = TODO()

val gestaltSupportsFSpResourceFileAlreadyOpenBit: kotlin.UInt
    get() = TODO()

val gestaltSupportsMirroring: kotlin.UInt
    get() = TODO()

val gestaltSysArchitecture: kotlin.UInt
    get() = TODO()

val gestaltSysDebuggerSupport: kotlin.UInt
    get() = TODO()

val gestaltSysZoneGrowable: kotlin.UInt
    get() = TODO()

val gestaltSystemUpdateVersion: kotlin.UInt
    get() = TODO()

val gestaltSystemVersion: kotlin.UInt
    get() = TODO()

val gestaltSystemVersionBugFix: kotlin.UInt
    get() = TODO()

val gestaltSystemVersionMajor: kotlin.UInt
    get() = TODO()

val gestaltSystemVersionMinor: kotlin.UInt
    get() = TODO()

val gestaltTE1: kotlin.UInt
    get() = TODO()

val gestaltTE2: kotlin.UInt
    get() = TODO()

val gestaltTE3: kotlin.UInt
    get() = TODO()

val gestaltTE4: kotlin.UInt
    get() = TODO()

val gestaltTE5: kotlin.UInt
    get() = TODO()

val gestaltTE6: kotlin.UInt
    get() = TODO()

val gestaltTEAttr: kotlin.UInt
    get() = TODO()

val gestaltTEHasGetHiliteRgn: kotlin.UInt
    get() = TODO()

val gestaltTEHasWhiteBackground: kotlin.UInt
    get() = TODO()

val gestaltTESupportsInlineInput: kotlin.UInt
    get() = TODO()

val gestaltTESupportsTextObjects: kotlin.UInt
    get() = TODO()

val gestaltTSMDisplayMgrAwareBit: kotlin.UInt
    get() = TODO()

val gestaltTSMTE: kotlin.UInt
    get() = TODO()

val gestaltTSMTE1: kotlin.UInt
    get() = TODO()

val gestaltTSMTE15: kotlin.UInt
    get() = TODO()

val gestaltTSMTE152: kotlin.UInt
    get() = TODO()

val gestaltTSMTEAttr: kotlin.UInt
    get() = TODO()

val gestaltTSMTEPresent: kotlin.UInt
    get() = TODO()

val gestaltTSMTEVersion: kotlin.UInt
    get() = TODO()

val gestaltTSMdoesTSMTEBit: kotlin.UInt
    get() = TODO()

val gestaltTSMgr15: kotlin.UInt
    get() = TODO()

val gestaltTSMgr20: kotlin.UInt
    get() = TODO()

val gestaltTSMgr22: kotlin.UInt
    get() = TODO()

val gestaltTSMgr23: kotlin.UInt
    get() = TODO()

val gestaltTSMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltTSMgrVersion: kotlin.UInt
    get() = TODO()

val gestaltTVAttr: kotlin.UInt
    get() = TODO()

val gestaltTeleMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltTeleMgrAutoAnswer: kotlin.UInt
    get() = TODO()

val gestaltTeleMgrIndHandset: kotlin.UInt
    get() = TODO()

val gestaltTeleMgrNewTELNewSupport: kotlin.UInt
    get() = TODO()

val gestaltTeleMgrPowerPCSupport: kotlin.UInt
    get() = TODO()

val gestaltTeleMgrPresent: kotlin.UInt
    get() = TODO()

val gestaltTeleMgrSilenceDetect: kotlin.UInt
    get() = TODO()

val gestaltTeleMgrSoundStreams: kotlin.UInt
    get() = TODO()

val gestaltTelephoneSpeechRecognition: kotlin.UInt
    get() = TODO()

val gestaltTempMemSupport: kotlin.UInt
    get() = TODO()

val gestaltTempMemTracked: kotlin.UInt
    get() = TODO()

val gestaltTermMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltTermMgrErrorString: kotlin.UInt
    get() = TODO()

val gestaltTermMgrPresent: kotlin.UInt
    get() = TODO()

val gestaltTextEditVersion: kotlin.UInt
    get() = TODO()

val gestaltThirdPartyANSIKbd: kotlin.UInt
    get() = TODO()

val gestaltThirdPartyISOKbd: kotlin.UInt
    get() = TODO()

val gestaltThirdPartyJISKbd: kotlin.UInt
    get() = TODO()

val gestaltThreadMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltThreadMgrPresent: kotlin.UInt
    get() = TODO()

val gestaltThreadsLibraryPresent: kotlin.UInt
    get() = TODO()

val gestaltTimeMgrVersion: kotlin.UInt
    get() = TODO()

val gestaltToolboxTable: kotlin.UInt
    get() = TODO()

val gestaltTranslationAttr: kotlin.UInt
    get() = TODO()

val gestaltTranslationGetPathAPIAvail: kotlin.UInt
    get() = TODO()

val gestaltTranslationMgrExists: kotlin.UInt
    get() = TODO()

val gestaltTranslationMgrHintOrder: kotlin.UInt
    get() = TODO()

val gestaltTranslationPPCAvail: kotlin.UInt
    get() = TODO()

val gestaltUDFSupport: kotlin.UInt
    get() = TODO()

val gestaltUSBAndyANSIKbd: kotlin.UInt
    get() = TODO()

val gestaltUSBAndyISOKbd: kotlin.UInt
    get() = TODO()

val gestaltUSBAndyJISKbd: kotlin.UInt
    get() = TODO()

val gestaltUSBAttr: kotlin.UInt
    get() = TODO()

val gestaltUSBCosmoANSIKbd: kotlin.UInt
    get() = TODO()

val gestaltUSBCosmoISOKbd: kotlin.UInt
    get() = TODO()

val gestaltUSBCosmoJISKbd: kotlin.UInt
    get() = TODO()

val gestaltUSBHasIsoch: kotlin.UInt
    get() = TODO()

val gestaltUSBPresent: kotlin.UInt
    get() = TODO()

val gestaltUSBPrinterSharingAttr: kotlin.Int
    get() = TODO()

val gestaltUSBPrinterSharingAttrBooted: kotlin.Int
    get() = TODO()

val gestaltUSBPrinterSharingAttrMask: kotlin.Int
    get() = TODO()

val gestaltUSBPrinterSharingAttrRunning: kotlin.Int
    get() = TODO()

val gestaltUSBPrinterSharingVersion: kotlin.Int
    get() = TODO()

val gestaltUSBPrinterSharingVersionMask: kotlin.Int
    get() = TODO()

val gestaltUSBProF16ANSIKbd: kotlin.UInt
    get() = TODO()

val gestaltUSBProF16ISOKbd: kotlin.UInt
    get() = TODO()

val gestaltUSBProF16JISKbd: kotlin.UInt
    get() = TODO()

val gestaltUSBVersion: kotlin.UInt
    get() = TODO()

val gestaltUndefSelectorErr: kotlin.Int
    get() = TODO()

val gestaltUnknownErr: kotlin.Int
    get() = TODO()

val gestaltUnknownThirdPartyKbd: kotlin.UInt
    get() = TODO()

val gestaltUserVisibleMachineName: kotlin.UInt
    get() = TODO()

val gestaltVIA1Addr: kotlin.UInt
    get() = TODO()

val gestaltVIA2Addr: kotlin.UInt
    get() = TODO()

val gestaltVMAttr: kotlin.UInt
    get() = TODO()

val gestaltVMBackingStoreFileRefNum: kotlin.UInt
    get() = TODO()

val gestaltVMFilemappingOn: kotlin.UInt
    get() = TODO()

val gestaltVMHasLockMemoryForOutput: kotlin.UInt
    get() = TODO()

val gestaltVMHasPagingControl: kotlin.UInt
    get() = TODO()

val gestaltVMInfoNoneType: kotlin.UInt
    get() = TODO()

val gestaltVMInfoSimpleType: kotlin.UInt
    get() = TODO()

val gestaltVMInfoSizeStorageType: kotlin.UInt
    get() = TODO()

val gestaltVMInfoSizeType: kotlin.UInt
    get() = TODO()

val gestaltVMInfoType: kotlin.UInt
    get() = TODO()

val gestaltVMPresent: kotlin.UInt
    get() = TODO()

val gestaltVMZerosPagesBit: kotlin.UInt
    get() = TODO()

val gestaltValueImplementedVers: kotlin.UInt
    get() = TODO()

val gestaltVersion: kotlin.UInt
    get() = TODO()

val gestaltWSIICanPrintWithoutPrGeneralBit: kotlin.UInt
    get() = TODO()

val gestaltWSIISupport: kotlin.UInt
    get() = TODO()

val gestaltWindowLiveResizeBit: kotlin.UInt
    get() = TODO()

val gestaltWindowLiveResizeMask: kotlin.UInt
    get() = TODO()

val gestaltWindowMgrAttr: kotlin.UInt
    get() = TODO()

val gestaltWindowMgrPresent: kotlin.UInt
    get() = TODO()

val gestaltWindowMgrPresentBit: kotlin.UInt
    get() = TODO()

val gestaltWindowMgrPresentMask: kotlin.UInt
    get() = TODO()

val gestaltWindowMinimizeToDockBit: kotlin.UInt
    get() = TODO()

val gestaltWindowMinimizeToDockMask: kotlin.UInt
    get() = TODO()

val gestaltWorldScriptIIAttr: kotlin.UInt
    get() = TODO()

val gestaltWorldScriptIIVersion: kotlin.UInt
    get() = TODO()

val gestaltX86AdditionalFeatures: kotlin.UInt
    get() = TODO()

val gestaltX86Features: kotlin.UInt
    get() = TODO()

val gestaltX86HasAPIC: kotlin.UInt
    get() = TODO()

val gestaltX86HasCID: kotlin.UInt
    get() = TODO()

val gestaltX86HasCLFSH: kotlin.UInt
    get() = TODO()

val gestaltX86HasCMOV: kotlin.UInt
    get() = TODO()

val gestaltX86HasCX16: kotlin.UInt
    get() = TODO()

val gestaltX86HasCX8: kotlin.UInt
    get() = TODO()

val gestaltX86HasDE: kotlin.UInt
    get() = TODO()

val gestaltX86HasDS: kotlin.UInt
    get() = TODO()

val gestaltX86HasDSCPL: kotlin.UInt
    get() = TODO()

val gestaltX86HasEST: kotlin.UInt
    get() = TODO()

val gestaltX86HasFPU: kotlin.UInt
    get() = TODO()

val gestaltX86HasFXSR: kotlin.UInt
    get() = TODO()

val gestaltX86HasHTT: kotlin.UInt
    get() = TODO()

val gestaltX86HasMCA: kotlin.UInt
    get() = TODO()

val gestaltX86HasMCE: kotlin.UInt
    get() = TODO()

val gestaltX86HasMMX: kotlin.UInt
    get() = TODO()

val gestaltX86HasMONITOR: kotlin.UInt
    get() = TODO()

val gestaltX86HasMSR: kotlin.UInt
    get() = TODO()

val gestaltX86HasMTRR: kotlin.UInt
    get() = TODO()

val gestaltX86HasPAE: kotlin.UInt
    get() = TODO()

val gestaltX86HasPAT: kotlin.UInt
    get() = TODO()

val gestaltX86HasPGE: kotlin.UInt
    get() = TODO()

val gestaltX86HasPSE: kotlin.UInt
    get() = TODO()

val gestaltX86HasPSE36: kotlin.UInt
    get() = TODO()

val gestaltX86HasPSN: kotlin.UInt
    get() = TODO()

val gestaltX86HasSEP: kotlin.UInt
    get() = TODO()

val gestaltX86HasSMX: kotlin.UInt
    get() = TODO()

val gestaltX86HasSS: kotlin.UInt
    get() = TODO()

val gestaltX86HasSSE: kotlin.UInt
    get() = TODO()

val gestaltX86HasSSE2: kotlin.UInt
    get() = TODO()

val gestaltX86HasSSE3: kotlin.UInt
    get() = TODO()

val gestaltX86HasSupplementalSSE3: kotlin.UInt
    get() = TODO()

val gestaltX86HasTM: kotlin.UInt
    get() = TODO()

val gestaltX86HasTM2: kotlin.UInt
    get() = TODO()

val gestaltX86HasTSC: kotlin.UInt
    get() = TODO()

val gestaltX86HasVME: kotlin.UInt
    get() = TODO()

val gestaltX86HasVMX: kotlin.UInt
    get() = TODO()

val gestaltX86HasxTPR: kotlin.UInt
    get() = TODO()

val gestaltX86ResACPI: kotlin.UInt
    get() = TODO()

val gestaltX86Serviced20: kotlin.UInt
    get() = TODO()

val gfpErr: kotlin.Int
    get() = TODO()

val grabTimeComplete: kotlin.Int
    get() = TODO()

val graveUprE: kotlin.UInt
    get() = TODO()

val graveUprI: kotlin.UInt
    get() = TODO()

val graveUprO: kotlin.UInt
    get() = TODO()

val graveUprU: kotlin.UInt
    get() = TODO()

val guestNotAllowedErr: kotlin.Int
    get() = TODO()

val hMenuFindErr: kotlin.Int
    get() = TODO()

val hachek: kotlin.UInt
    get() = TODO()

val handlerNotFoundErr: kotlin.Int
    get() = TODO()

val hardwareConfigErr: kotlin.Int
    get() = TODO()

val hmBalloonAborted: kotlin.Int
    get() = TODO()

val hmCloseViewActive: kotlin.Int
    get() = TODO()

val hmHelpDisabled: kotlin.Int
    get() = TODO()

val hmHelpManagerNotInited: kotlin.Int
    get() = TODO()

val hmNoBalloonUp: kotlin.Int
    get() = TODO()

val hmOperationUnsupported: kotlin.Int
    get() = TODO()

val hmSameAsLastBalloon: kotlin.Int
    get() = TODO()

val hmSkippedBalloon: kotlin.Int
    get() = TODO()

val hmUnknownHelpType: kotlin.Int
    get() = TODO()

val hmWrongVersion: kotlin.Int
    get() = TODO()

val hourField: kotlin.UInt
    get() = TODO()

val hourMask: kotlin.UInt
    get() = TODO()

val hrHTMLRenderingLibNotInstalledErr: kotlin.Int
    get() = TODO()

val hrLeadingZ: kotlin.UInt
    get() = TODO()

val hrMiscellaneousExceptionErr: kotlin.Int
    get() = TODO()

val hrURLNotHandledErr: kotlin.Int
    get() = TODO()

val hrUnableToResizeHandleErr: kotlin.Int
    get() = TODO()

val hwParamErr: kotlin.Int
    get() = TODO()

val iIOAbort: kotlin.Int
    get() = TODO()

val iIOAbortErr: kotlin.Int
    get() = TODO()

val iMemFullErr: kotlin.Int
    get() = TODO()

val illegalChannelOSErr: kotlin.Int
    get() = TODO()

val illegalControllerOSErr: kotlin.Int
    get() = TODO()

val illegalInstrumentOSErr: kotlin.Int
    get() = TODO()

val illegalKnobOSErr: kotlin.Int
    get() = TODO()

val illegalKnobValueOSErr: kotlin.Int
    get() = TODO()

val illegalNoteChannelOSErr: kotlin.Int
    get() = TODO()

val illegalPartOSErr: kotlin.Int
    get() = TODO()

val illegalScrapFlavorFlagsErr: kotlin.Int
    get() = TODO()

val illegalScrapFlavorSizeErr: kotlin.Int
    get() = TODO()

val illegalScrapFlavorTypeErr: kotlin.Int
    get() = TODO()

val illegalVoiceAllocationOSErr: kotlin.Int
    get() = TODO()

val incompatibleVoice: kotlin.Int
    get() = TODO()

val initIWMErr: kotlin.Int
    get() = TODO()

val inputOutOfBounds: kotlin.Int
    get() = TODO()

val insufficientStackErr: kotlin.Int
    get() = TODO()

val intArabic: kotlin.UInt
    get() = TODO()

val intEuropean: kotlin.UInt
    get() = TODO()

val intJapanese: kotlin.UInt
    get() = TODO()

val intOutputMask: kotlin.UInt
    get() = TODO()

val intRoman: kotlin.UInt
    get() = TODO()

val intWestern: kotlin.UInt
    get() = TODO()

val internalComponentErr: kotlin.Int
    get() = TODO()

val internalQuickTimeError: kotlin.Int
    get() = TODO()

val internalScrapErr: kotlin.Int
    get() = TODO()

val interruptsMaskedErr: kotlin.Int
    get() = TODO()

val intlCurrency: kotlin.UInt
    get() = TODO()

val invalidAtomContainerErr: kotlin.Int
    get() = TODO()

val invalidAtomErr: kotlin.Int
    get() = TODO()

val invalidAtomTypeErr: kotlin.Int
    get() = TODO()

val invalidChunkCache: kotlin.Int
    get() = TODO()

val invalidChunkNum: kotlin.Int
    get() = TODO()

val invalidComponentID: kotlin.Int
    get() = TODO()

val invalidDataRef: kotlin.Int
    get() = TODO()

val invalidDataRefContainer: kotlin.Int
    get() = TODO()

val invalidDuration: kotlin.Int
    get() = TODO()

val invalidEditState: kotlin.Int
    get() = TODO()

val invalidFolderTypeErr: kotlin.Int
    get() = TODO()

val invalidHandler: kotlin.Int
    get() = TODO()

val invalidHotSpotIDErr: kotlin.Int
    get() = TODO()

val invalidIconRefErr: kotlin.Int
    get() = TODO()

val invalidImageIndexErr: kotlin.Int
    get() = TODO()

val invalidIndexErr: kotlin.Int
    get() = TODO()

val invalidMedia: kotlin.Int
    get() = TODO()

val invalidMovie: kotlin.Int
    get() = TODO()

val invalidNodeFormatErr: kotlin.Int
    get() = TODO()

val invalidNodeIDErr: kotlin.Int
    get() = TODO()

val invalidPickerType: kotlin.Int
    get() = TODO()

val invalidRect: kotlin.Int
    get() = TODO()

val invalidSampleDescIndex: kotlin.Int
    get() = TODO()

val invalidSampleDescription: kotlin.Int
    get() = TODO()

val invalidSampleNum: kotlin.Int
    get() = TODO()

val invalidSampleTable: kotlin.Int
    get() = TODO()

val invalidSpriteIDErr: kotlin.Int
    get() = TODO()

val invalidSpriteIndexErr: kotlin.Int
    get() = TODO()

val invalidSpritePropertyErr: kotlin.Int
    get() = TODO()

val invalidSpriteWorldPropertyErr: kotlin.Int
    get() = TODO()

val invalidTime: kotlin.Int
    get() = TODO()

val invalidTrack: kotlin.Int
    get() = TODO()

val invalidTranslationPathErr: kotlin.Int
    get() = TODO()

val invalidViewStateErr: kotlin.Int
    get() = TODO()

val ioDirFlg: kotlin.UInt
    get() = TODO()

val ioDirMask: kotlin.UInt
    get() = TODO()

val ioErr: kotlin.Int
    get() = TODO()

val ioQType: kotlin.UInt
    get() = TODO()

val itlcDisableKeyScriptSync: kotlin.UInt
    get() = TODO()

val itlcDisableKeyScriptSyncMask: kotlin.UInt
    get() = TODO()

val itlcDualCaret: kotlin.UInt
    get() = TODO()

val itlcShowIcon: kotlin.UInt
    get() = TODO()

val itlcSysDirection: kotlin.UInt
    get() = TODO()

val iuCurrentCurLang: kotlin.Int
    get() = TODO()

val iuCurrentDefLang: kotlin.Int
    get() = TODO()

val iuCurrentScript: kotlin.Int
    get() = TODO()

val iuNumberPartsTable: kotlin.UInt
    get() = TODO()

val iuScriptCurLang: kotlin.Int
    get() = TODO()

val iuScriptDefLang: kotlin.Int
    get() = TODO()

val iuSystemCurLang: kotlin.Int
    get() = TODO()

val iuSystemDefLang: kotlin.Int
    get() = TODO()

val iuSystemScript: kotlin.Int
    get() = TODO()

val iuUnTokenTable: kotlin.UInt
    get() = TODO()

val iuWhiteSpaceList: kotlin.UInt
    get() = TODO()

val iuWordSelectTable: kotlin.UInt
    get() = TODO()

val iuWordWrapTable: kotlin.UInt
    get() = TODO()

val k16BitCardErr: kotlin.Int
    get() = TODO()

val k32BitHeap: kotlin.UInt
    get() = TODO()

val k68kInterruptLevelMask: kotlin.UInt
    get() = TODO()

val kAEAND: kotlin.UInt
    get() = TODO()

val kAEAbout: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEActivate: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEAfter: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEAliasSelection: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEAll: kotlin.UInt
    get() = TODO()

val kAEAllCaps: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEAlwaysInteract: kotlin.UInt
    get() = TODO()

val kAEAnswer: platform.CoreServices.AEEventID /* = kotlin.UInt */
    get() = TODO()

val kAEAny: kotlin.UInt
    get() = TODO()

val kAEApplicationClass: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEApplicationDied: platform.CoreServices.AEEventID /* = kotlin.UInt */
    get() = TODO()

val kAEArrowAtEnd: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEArrowAtStart: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEArrowBothEnds: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEAsk: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEAutoDown: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEBefore: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEBeginTransaction: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEBeginning: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEBeginsWith: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEBold: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAECanInteract: kotlin.UInt
    get() = TODO()

val kAECanSwitchLayer: kotlin.UInt
    get() = TODO()

val kAECaseSensEquals: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAECentered: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEChangeView: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEClone: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEClose: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAECommandClass: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAECondensed: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEContains: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAECopy: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAECoreSuite: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAECountElements: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAECreateElement: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAECreatePublisher: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAECut: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEDataArray: kotlin.UInt
    get() = TODO()

val kAEDeactivate: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEDebugPOSTHeader: kotlin.Int
    get() = TODO()

val kAEDebugReplyHeader: kotlin.Int
    get() = TODO()

val kAEDebugXMLDebugAll: kotlin.Int
    get() = TODO()

val kAEDebugXMLRequest: kotlin.Int
    get() = TODO()

val kAEDebugXMLResponse: kotlin.Int
    get() = TODO()

val kAEDefaultTimeout: kotlin.Int
    get() = TODO()

val kAEDelete: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEDescArray: kotlin.UInt
    get() = TODO()

val kAEDescListFactorNone: kotlin.UInt
    get() = TODO()

val kAEDescListFactorType: kotlin.UInt
    get() = TODO()

val kAEDescListFactorTypeAndSize: kotlin.UInt
    get() = TODO()

val kAEDirectCall: kotlin.UInt
    get() = TODO()

val kAEDiskEvent: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEDoNotAutomaticallyAddAnnotationsToEvent: kotlin.UInt
    get() = TODO()

val kAEDoObjectsExist: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEDoScript: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEDontExecute: kotlin.UInt
    get() = TODO()

val kAEDontReconnect: kotlin.UInt
    get() = TODO()

val kAEDontRecord: kotlin.UInt
    get() = TODO()

val kAEDown: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEDrag: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEDuplicateSelection: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEEditGraphic: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEEmptyTrash: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEEnd: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEEndTransaction: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEEndsWith: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEEquals: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEExpanded: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEFast: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEFinderEvents: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEFirst: kotlin.UInt
    get() = TODO()

val kAEFormulaProtect: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEFullyJustified: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEGetClassInfo: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEGetData: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEGetDataSize: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEGetEventInfo: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEGetInfoSelection: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEGetPrivilegeSelection: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEGetSuiteInfo: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEGreaterThan: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEGreaterThanEquals: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEGrow: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEHTTPProxyHostAttr: kotlin.UInt
    get() = TODO()

val kAEHTTPProxyPortAttr: kotlin.UInt
    get() = TODO()

val kAEHandleArray: kotlin.UInt
    get() = TODO()

val kAEHandleSimpleRanges: kotlin.UInt
    get() = TODO()

val kAEHiQuality: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEHidden: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEHighLevel: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEHighPriority: kotlin.UInt
    get() = TODO()

val kAEIDoMarking: kotlin.UInt
    get() = TODO()

val kAEIDoMinimum: kotlin.UInt
    get() = TODO()

val kAEIDoWhose: kotlin.UInt
    get() = TODO()

val kAEISAction: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEISActionPath: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEISClientAddress: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEISClientIP: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEISContentType: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEISFromUser: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEISFullRequest: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEISGetURL: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEISHTTPSearchArgs: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEISMethod: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEISPassword: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEISPostArgs: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEISReferrer: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEISScriptName: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEISServerName: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEISServerPort: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEISUserAgent: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEISUserName: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEISWebStarSuite: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEImageGraphic: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEInfo: kotlin.UInt
    get() = TODO()

val kAEInternetSuite: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEIsUniform: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEItalic: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEKeyClass: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEKeyDescArray: kotlin.UInt
    get() = TODO()

val kAEKeyDown: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAELast: kotlin.UInt
    get() = TODO()

val kAELeftJustified: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAELessThan: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAELessThanEquals: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAELocalProcess: kotlin.UInt
    get() = TODO()

val kAELogOut: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAELowercase: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEMain: kotlin.UInt
    get() = TODO()

val kAEMakeObjectsVisible: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEMenuClass: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEMenuSelect: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEMiddle: kotlin.UInt
    get() = TODO()

val kAEMiscStandards: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEModifiable: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEMouseClass: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEMouseDown: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEMouseDownInBack: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEMove: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEMoved: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAENOT: kotlin.UInt
    get() = TODO()

val kAENavigationKey: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAENeverInteract: kotlin.UInt
    get() = TODO()

val kAENext: kotlin.UInt
    get() = TODO()

val kAENo: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAENoArrow: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAENoReply: kotlin.UInt
    get() = TODO()

val kAENonmodifiable: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAENormalPriority: kotlin.UInt
    get() = TODO()

val kAENotifyRecording: platform.CoreServices.AEEventID /* = kotlin.UInt */
    get() = TODO()

val kAENotifyStartRecording: platform.CoreServices.AEEventID /* = kotlin.UInt */
    get() = TODO()

val kAENotifyStopRecording: platform.CoreServices.AEEventID /* = kotlin.UInt */
    get() = TODO()

val kAENullEvent: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEOR: kotlin.UInt
    get() = TODO()

val kAEOSAXSizeResource: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEOpen: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEOpenApplication: platform.CoreServices.AEEventID /* = kotlin.UInt */
    get() = TODO()

val kAEOpenContents: platform.CoreServices.AEEventID /* = kotlin.UInt */
    get() = TODO()

val kAEOpenDocuments: platform.CoreServices.AEEventID /* = kotlin.UInt */
    get() = TODO()

val kAEOpenSelection: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEOutline: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEPackedArray: kotlin.UInt
    get() = TODO()

val kAEPageSetup: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEPassSubDescs: kotlin.UInt
    get() = TODO()

val kAEPaste: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEPlain: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEPrevious: kotlin.UInt
    get() = TODO()

val kAEPrint: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEPrintDocuments: platform.CoreServices.AEEventID /* = kotlin.UInt */
    get() = TODO()

val kAEPrintSelection: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEPrintWindow: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEProcessNonReplyEvents: kotlin.UInt
    get() = TODO()

val kAEPromise: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEPutAwaySelection: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEQDAdMax: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEQDAdMin: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEQDAddOver: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEQDAddPin: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEQDBic: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEQDBlend: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEQDCopy: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEQDNotBic: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEQDNotCopy: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEQDNotOr: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEQDNotXor: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEQDOr: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEQDSubOver: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEQDSubPin: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEQDSupplementalSuite: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEQDXor: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEQueueReply: kotlin.UInt
    get() = TODO()

val kAEQuickdrawSuite: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEQuitAll: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEQuitApplication: platform.CoreServices.AEEventID /* = kotlin.UInt */
    get() = TODO()

val kAEQuitPreserveState: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEQuitReason: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAERPCClass: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val kAERawKey: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEReallyLogOut: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAERedo: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAERegular: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAERemoteProcess: kotlin.UInt
    get() = TODO()

val kAERemoteProcessNameKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kAERemoteProcessProcessIDKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kAERemoteProcessURLKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kAERemoteProcessUserIDKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kAEReopenApplication: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEReplace: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAERequiredSuite: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEResized: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEResolveNestedLists: kotlin.UInt
    get() = TODO()

val kAERestart: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEResume: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAERevealSelection: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAERevert: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAERightJustified: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAESOAPScheme: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val kAESameProcess: kotlin.UInt
    get() = TODO()

val kAESave: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEScrapEvent: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEScriptingSizeResource: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAESelect: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAESetData: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAESetPosition: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEShadow: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAESharedScriptHandler: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val kAESharing: kotlin.UInt
    get() = TODO()

val kAEShowClipboard: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEShowPreferences: platform.CoreServices.AEEventID /* = kotlin.UInt */
    get() = TODO()

val kAEShowRestartDialog: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEShowShutdownDialog: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEShutDown: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAESleep: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAESmallCaps: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAESocks4Protocol: kotlin.UInt
    get() = TODO()

val kAESocks5Protocol: kotlin.UInt
    get() = TODO()

val kAESocksHostAttr: kotlin.UInt
    get() = TODO()

val kAESocksPasswordAttr: kotlin.UInt
    get() = TODO()

val kAESocksPortAttr: kotlin.UInt
    get() = TODO()

val kAESocksProxyAttr: kotlin.UInt
    get() = TODO()

val kAESocksUserAttr: kotlin.UInt
    get() = TODO()

val kAESpecialClassProperties: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEStartRecording: platform.CoreServices.AEEventID /* = kotlin.UInt */
    get() = TODO()

val kAEStopRecording: platform.CoreServices.AEEventID /* = kotlin.UInt */
    get() = TODO()

val kAEStoppedMoving: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEStrikethrough: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAESubscript: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAESuperscript: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAESuspend: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAETableSuite: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAETerminologyExtension: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAETextSuite: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAETransactionTerminated: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEUTApostrophe: kotlin.UInt
    get() = TODO()

val kAEUTChangesState: kotlin.UInt
    get() = TODO()

val kAEUTDirectParamIsReference: kotlin.UInt
    get() = TODO()

val kAEUTEnumListIsExclusive: kotlin.UInt
    get() = TODO()

val kAEUTEnumerated: kotlin.UInt
    get() = TODO()

val kAEUTEnumsAreTypes: kotlin.UInt
    get() = TODO()

val kAEUTFeminine: kotlin.UInt
    get() = TODO()

val kAEUTHasReturningParam: kotlin.UInt
    get() = TODO()

val kAEUTMasculine: kotlin.UInt
    get() = TODO()

val kAEUTNotDirectParamIsTarget: kotlin.UInt
    get() = TODO()

val kAEUTOptional: kotlin.UInt
    get() = TODO()

val kAEUTParamIsReference: kotlin.UInt
    get() = TODO()

val kAEUTParamIsTarget: kotlin.UInt
    get() = TODO()

val kAEUTPlural: kotlin.UInt
    get() = TODO()

val kAEUTPropertyIsReference: kotlin.UInt
    get() = TODO()

val kAEUTReadWrite: kotlin.UInt
    get() = TODO()

val kAEUTReplyIsReference: kotlin.UInt
    get() = TODO()

val kAEUTTightBindingFunction: kotlin.UInt
    get() = TODO()

val kAEUTlistOfItems: kotlin.UInt
    get() = TODO()

val kAEUnderline: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEUndo: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEUnknownSource: kotlin.UInt
    get() = TODO()

val kAEUp: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEUpdate: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEUseHTTPProxyAttr: kotlin.UInt
    get() = TODO()

val kAEUseRelativeIterators: kotlin.UInt
    get() = TODO()

val kAEUseSocksAttr: kotlin.UInt
    get() = TODO()

val kAEUserTerminology: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEVirtualKey: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEWaitReply: kotlin.UInt
    get() = TODO()

val kAEWakeUpEvent: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEWantReceipt: kotlin.UInt
    get() = TODO()

val kAEWholeWordEquals: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEWindowClass: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEXMLRPCScheme: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val kAEYes: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEZoom: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kAEZoomIn: kotlin.UInt
    get() = TODO()

val kAEZoomOut: kotlin.UInt
    get() = TODO()

val kAFPExtendedFlagsAlternateAddressMask: kotlin.UInt
    get() = TODO()

val kAFPServerIcon: kotlin.UInt
    get() = TODO()

val kAFPTagLengthDDP: kotlin.UInt
    get() = TODO()

val kAFPTagLengthIP: kotlin.UInt
    get() = TODO()

val kAFPTagLengthIPPort: kotlin.UInt
    get() = TODO()

val kAFPTagTypeDDP: kotlin.UInt
    get() = TODO()

val kAFPTagTypeDNS: kotlin.UInt
    get() = TODO()

val kAFPTagTypeIP: kotlin.UInt
    get() = TODO()

val kAFPTagTypeIPPort: kotlin.UInt
    get() = TODO()

val kALMDeferSwitchErr: kotlin.Int
    get() = TODO()

val kALMDuplicateModuleErr: kotlin.Int
    get() = TODO()

val kALMGroupNotFoundErr: kotlin.Int
    get() = TODO()

val kALMInstallationErr: kotlin.Int
    get() = TODO()

val kALMInternalErr: kotlin.Int
    get() = TODO()

val kALMLocationNotFoundErr: kotlin.Int
    get() = TODO()

val kALMLocationsFolderType: kotlin.UInt
    get() = TODO()

val kALMModuleCommunicationErr: kotlin.Int
    get() = TODO()

val kALMModulesFolderType: kotlin.UInt
    get() = TODO()

val kALMNoSuchModuleErr: kotlin.Int
    get() = TODO()

val kALMPreferencesFolderType: kotlin.UInt
    get() = TODO()

val kALMRebootFlagsLevelErr: kotlin.Int
    get() = TODO()

val kARMMountVol: kotlin.UInt
    get() = TODO()

val kARMMultVols: kotlin.UInt
    get() = TODO()

val kARMNoUI: kotlin.UInt
    get() = TODO()

val kARMSearch: kotlin.UInt
    get() = TODO()

val kARMSearchMore: kotlin.UInt
    get() = TODO()

val kARMSearchRelFirst: kotlin.UInt
    get() = TODO()

val kARMTryFileIDFirst: kotlin.UInt
    get() = TODO()

val kATSUBadStreamErr: kotlin.Int
    get() = TODO()

val kATSUBusyObjectErr: kotlin.Int
    get() = TODO()

val kATSUCoordinateOverflowErr: kotlin.Int
    get() = TODO()

val kATSUFontsMatched: kotlin.Int
    get() = TODO()

val kATSUFontsNotMatched: kotlin.Int
    get() = TODO()

val kATSUInvalidAttributeSizeErr: kotlin.Int
    get() = TODO()

val kATSUInvalidAttributeTagErr: kotlin.Int
    get() = TODO()

val kATSUInvalidAttributeValueErr: kotlin.Int
    get() = TODO()

val kATSUInvalidCacheErr: kotlin.Int
    get() = TODO()

val kATSUInvalidCallInsideCallbackErr: kotlin.Int
    get() = TODO()

val kATSUInvalidFontErr: kotlin.Int
    get() = TODO()

val kATSUInvalidFontFallbacksErr: kotlin.Int
    get() = TODO()

val kATSUInvalidStyleErr: kotlin.Int
    get() = TODO()

val kATSUInvalidTextLayoutErr: kotlin.Int
    get() = TODO()

val kATSUInvalidTextRangeErr: kotlin.Int
    get() = TODO()

val kATSULastErr: kotlin.Int
    get() = TODO()

val kATSULineBreakInWord: kotlin.Int
    get() = TODO()

val kATSULowLevelErr: kotlin.Int
    get() = TODO()

val kATSUNoCorrespondingFontErr: kotlin.Int
    get() = TODO()

val kATSUNoFontCmapAvailableErr: kotlin.Int
    get() = TODO()

val kATSUNoFontNameErr: kotlin.Int
    get() = TODO()

val kATSUNoFontScalerAvailableErr: kotlin.Int
    get() = TODO()

val kATSUNoStyleRunsAssignedErr: kotlin.Int
    get() = TODO()

val kATSUNotSetErr: kotlin.Int
    get() = TODO()

val kATSUOutputBufferTooSmallErr: kotlin.Int
    get() = TODO()

val kATSUQuickDrawTextErr: kotlin.Int
    get() = TODO()

val kATSUUnsupportedStreamFormatErr: kotlin.Int
    get() = TODO()

val kAVLInOrder: kotlin.UInt
    get() = TODO()

val kAVLIsLeaf: kotlin.UInt
    get() = TODO()

val kAVLIsLeftBranch: kotlin.UInt
    get() = TODO()

val kAVLIsRightBranch: kotlin.UInt
    get() = TODO()

val kAVLIsTree: kotlin.UInt
    get() = TODO()

val kAVLNullNode: kotlin.UInt
    get() = TODO()

val kAVLPostOrder: kotlin.UInt
    get() = TODO()

val kAVLPreOrder: kotlin.UInt
    get() = TODO()

val kAccessException: kotlin.UInt
    get() = TODO()

val kAccountKCItemAttr: kotlin.UInt
    get() = TODO()

val kAddKCEvent: kotlin.UInt
    get() = TODO()

val kAddKCEventMask: kotlin.UInt
    get() = TODO()

val kAddressKCItemAttr: kotlin.UInt
    get() = TODO()

val kAlertCautionBadgeIcon: kotlin.UInt
    get() = TODO()

val kAlertCautionIcon: kotlin.UInt
    get() = TODO()

val kAlertNoteIcon: kotlin.UInt
    get() = TODO()

val kAlertStopIcon: kotlin.UInt
    get() = TODO()

val kAliasBadgeIcon: kotlin.UInt
    get() = TODO()

val kAlreadySavedStateErr: kotlin.Int
    get() = TODO()

val kAlwaysSendSubject: kotlin.UInt
    get() = TODO()

val kAnyAuthType: kotlin.UInt
    get() = TODO()

val kAnyComponentFlagsMask: kotlin.UInt
    get() = TODO()

val kAnyComponentManufacturer: kotlin.UInt
    get() = TODO()

val kAnyComponentSubType: kotlin.UInt
    get() = TODO()

val kAnyComponentType: kotlin.UInt
    get() = TODO()

val kAnyPort: kotlin.UInt
    get() = TODO()

val kAnyProtocol: kotlin.UInt
    get() = TODO()

val kAnyTransactionID: kotlin.Int
    get() = TODO()

val kAppPackageAliasType: kotlin.UInt
    get() = TODO()

val kAppearanceFolderIcon: kotlin.Int
    get() = TODO()

val kAppearanceFolderType: kotlin.UInt
    get() = TODO()

val kAppleExtrasFolderIcon: kotlin.Int
    get() = TODO()

val kAppleExtrasFolderType: kotlin.UInt
    get() = TODO()

val kAppleLogoIcon: kotlin.UInt
    get() = TODO()

val kAppleManufacturer: kotlin.UInt
    get() = TODO()

val kAppleMenuFolderAliasType: kotlin.UInt
    get() = TODO()

val kAppleMenuFolderIcon: kotlin.Int
    get() = TODO()

val kAppleMenuFolderIconResource: kotlin.Int
    get() = TODO()

val kAppleMenuFolderType: kotlin.UInt
    get() = TODO()

val kAppleMenuIcon: kotlin.UInt
    get() = TODO()

val kAppleScriptBadgeIcon: kotlin.UInt
    get() = TODO()

val kAppleShareAuthenticationFolderType: kotlin.UInt
    get() = TODO()

val kAppleSharePasswordKCItemClass: kotlin.UInt
    get() = TODO()

val kAppleShareSupportFolderType: kotlin.UInt
    get() = TODO()

val kAppleTalkIcon: kotlin.UInt
    get() = TODO()

val kAppleTalkZoneIcon: kotlin.UInt
    get() = TODO()

val kAppleshareAutomountServerAliasesFolderType: kotlin.UInt
    get() = TODO()

val kApplicationAliasType: kotlin.UInt
    get() = TODO()

val kApplicationCPAliasType: kotlin.UInt
    get() = TODO()

val kApplicationDAAliasType: kotlin.UInt
    get() = TODO()

val kApplicationSupportFolderIcon: kotlin.Int
    get() = TODO()

val kApplicationSupportFolderType: kotlin.UInt
    get() = TODO()

val kApplicationThreadID: kotlin.UInt
    get() = TODO()

val kApplicationsFolderIcon: kotlin.Int
    get() = TODO()

val kApplicationsFolderType: kotlin.UInt
    get() = TODO()

val kAssistantsFolderIcon: kotlin.Int
    get() = TODO()

val kAssistantsFolderType: kotlin.UInt
    get() = TODO()

val kAsyncEjectComplete: kotlin.UInt
    get() = TODO()

val kAsyncEjectInProgress: kotlin.UInt
    get() = TODO()

val kAsyncMountComplete: kotlin.UInt
    get() = TODO()

val kAsyncMountInProgress: kotlin.UInt
    get() = TODO()

val kAsyncUnmountComplete: kotlin.UInt
    get() = TODO()

val kAsyncUnmountInProgress: kotlin.UInt
    get() = TODO()

val kAttemptDupCardEntryErr: kotlin.Int
    get() = TODO()

val kAudioAlertSoundsFolderType: kotlin.UInt
    get() = TODO()

val kAudioComponentsFolderType: kotlin.UInt
    get() = TODO()

val kAudioDigidesignFolderType: kotlin.UInt
    get() = TODO()

val kAudioPlugInsFolderType: kotlin.UInt
    get() = TODO()

val kAudioPresetsFolderType: kotlin.UInt
    get() = TODO()

val kAudioSoundBanksFolderType: kotlin.UInt
    get() = TODO()

val kAudioSoundsFolderType: kotlin.UInt
    get() = TODO()

val kAudioSupportFolderType: kotlin.UInt
    get() = TODO()

val kAudioVSTFolderType: kotlin.UInt
    get() = TODO()

val kAuthTypeKCItemAttr: kotlin.UInt
    get() = TODO()

val kAutoGenerateReturnID: kotlin.Int
    get() = TODO()

val kAutomatorWorkflowsFolderType: kotlin.UInt
    get() = TODO()

val kAutosaveInformationFolderType: kotlin.UInt
    get() = TODO()

val kBLibTag2: kotlin.Int
    get() = TODO()

val kBackwardArrowIcon: kotlin.UInt
    get() = TODO()

val kBadAdapterErr: kotlin.Int
    get() = TODO()

val kBadArgLengthErr: kotlin.Int
    get() = TODO()

val kBadArgsErr: kotlin.Int
    get() = TODO()

val kBadAttributeErr: kotlin.Int
    get() = TODO()

val kBadBaseErr: kotlin.Int
    get() = TODO()

val kBadCISErr: kotlin.Int
    get() = TODO()

val kBadCustomIFIDErr: kotlin.Int
    get() = TODO()

val kBadDeviceErr: kotlin.Int
    get() = TODO()

val kBadEDCErr: kotlin.Int
    get() = TODO()

val kBadHandleErr: kotlin.Int
    get() = TODO()

val kBadIRQErr: kotlin.Int
    get() = TODO()

val kBadLinkErr: kotlin.Int
    get() = TODO()

val kBadOffsetErr: kotlin.Int
    get() = TODO()

val kBadPageErr: kotlin.Int
    get() = TODO()

val kBadSizeErr: kotlin.Int
    get() = TODO()

val kBadSocketErr: kotlin.Int
    get() = TODO()

val kBadSpeedErr: kotlin.Int
    get() = TODO()

val kBadTupleDataErr: kotlin.Int
    get() = TODO()

val kBadTypeErr: kotlin.Int
    get() = TODO()

val kBadVccErr: kotlin.Int
    get() = TODO()

val kBadVppErr: kotlin.Int
    get() = TODO()

val kBadWindowErr: kotlin.Int
    get() = TODO()

val kBig5_BasicVariant: kotlin.UInt
    get() = TODO()

val kBig5_DOSVariant: kotlin.UInt
    get() = TODO()

val kBig5_ETenVariant: kotlin.UInt
    get() = TODO()

val kBig5_StandardVariant: kotlin.UInt
    get() = TODO()

val kBlessedBusErrorBait: kotlin.UInt
    get() = TODO()

val kBlessedFolder: kotlin.UInt
    get() = TODO()

val kBootTimeStartupItemsFolderType: kotlin.UInt
    get() = TODO()

val kBridgeSoftwareRunningCantSleep: kotlin.Int
    get() = TODO()

val kBurningIcon: kotlin.UInt
    get() = TODO()

val kBusyErr: kotlin.Int
    get() = TODO()

val kByCommentView: kotlin.UInt
    get() = TODO()

val kByDateView: kotlin.UInt
    get() = TODO()

val kByIconView: kotlin.UInt
    get() = TODO()

val kByKindView: kotlin.UInt
    get() = TODO()

val kByLabelView: kotlin.UInt
    get() = TODO()

val kByNameView: kotlin.UInt
    get() = TODO()

val kBySizeView: kotlin.UInt
    get() = TODO()

val kBySmallIcon: kotlin.UInt
    get() = TODO()

val kByVersionView: kotlin.UInt
    get() = TODO()

val kCCRegisterCBit: kotlin.UInt
    get() = TODO()

val kCCRegisterNBit: kotlin.UInt
    get() = TODO()

val kCCRegisterVBit: kotlin.UInt
    get() = TODO()

val kCCRegisterXBit: kotlin.UInt
    get() = TODO()

val kCCRegisterZBit: kotlin.UInt
    get() = TODO()

val kCFM68kRTA: kotlin.UInt
    get() = TODO()

val kCSAcceptAllComponentsMode: kotlin.UInt
    get() = TODO()

val kCSAcceptThreadSafeComponentsOnlyMode: kotlin.UInt
    get() = TODO()

val kCSDiskSpaceRecoveryOptionNoUI: kotlin.UInt
    get() = TODO()

val kCSIdentityAuthorityNotAccessibleErr: kotlin.Int
    get() = TODO()

val kCSIdentityClassGroup: kotlin.UInt
    get() = TODO()

val kCSIdentityClassUser: kotlin.UInt
    get() = TODO()

val kCSIdentityCommitCompleted: kotlin.UInt
    get() = TODO()

val kCSIdentityDeletedErr: kotlin.Int
    get() = TODO()

val kCSIdentityDuplicateFullNameErr: kotlin.Int
    get() = TODO()

val kCSIdentityDuplicatePosixNameErr: kotlin.Int
    get() = TODO()

val kCSIdentityErrorDomain: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kCSIdentityFlagHidden: kotlin.UInt
    get() = TODO()

val kCSIdentityFlagNone: kotlin.UInt
    get() = TODO()

val kCSIdentityGeneratePosixName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kCSIdentityInvalidFullNameErr: kotlin.Int
    get() = TODO()

val kCSIdentityInvalidPosixNameErr: kotlin.Int
    get() = TODO()

val kCSIdentityPermissionErr: kotlin.Int
    get() = TODO()

val kCSIdentityQueryEventErrorOccurred: kotlin.UInt
    get() = TODO()

val kCSIdentityQueryEventResultsAdded: kotlin.UInt
    get() = TODO()

val kCSIdentityQueryEventResultsChanged: kotlin.UInt
    get() = TODO()

val kCSIdentityQueryEventResultsRemoved: kotlin.UInt
    get() = TODO()

val kCSIdentityQueryEventSearchPhaseFinished: kotlin.UInt
    get() = TODO()

val kCSIdentityQueryGenerateUpdateEvents: kotlin.UInt
    get() = TODO()

val kCSIdentityQueryIncludeHiddenIdentities: kotlin.UInt
    get() = TODO()

val kCSIdentityQueryStringBeginsWith: kotlin.UInt
    get() = TODO()

val kCSIdentityQueryStringEquals: kotlin.UInt
    get() = TODO()

val kCSIdentityUnknownAuthorityErr: kotlin.Int
    get() = TODO()

val kCStackBased: kotlin.UInt
    get() = TODO()

val kCachedDataFolderType: kotlin.UInt
    get() = TODO()

val kCallingConventionMask: kotlin.Int
    get() = TODO()

val kCallingConventionPhase: kotlin.Int
    get() = TODO()

val kCallingConventionWidth: kotlin.Int
    get() = TODO()

val kCantConfigureCardErr: kotlin.Int
    get() = TODO()

val kCantReportProcessorTemperatureErr: kotlin.Int
    get() = TODO()

val kCarbonLibraryFolderType: kotlin.UInt
    get() = TODO()

val kCardBusCardErr: kotlin.Int
    get() = TODO()

val kCardPowerOffErr: kotlin.Int
    get() = TODO()

val kCertSearchAny: kotlin.UInt
    get() = TODO()

val kCertSearchDecryptAllowed: kotlin.UInt
    get() = TODO()

val kCertSearchDecryptDisallowed: kotlin.UInt
    get() = TODO()

val kCertSearchDecryptIgnored: kotlin.UInt
    get() = TODO()

val kCertSearchDecryptMask: kotlin.UInt
    get() = TODO()

val kCertSearchEncryptAllowed: kotlin.UInt
    get() = TODO()

val kCertSearchEncryptDisallowed: kotlin.UInt
    get() = TODO()

val kCertSearchEncryptIgnored: kotlin.UInt
    get() = TODO()

val kCertSearchEncryptMask: kotlin.UInt
    get() = TODO()

val kCertSearchPrivKeyRequired: kotlin.UInt
    get() = TODO()

val kCertSearchShift: kotlin.UInt
    get() = TODO()

val kCertSearchSigningAllowed: kotlin.UInt
    get() = TODO()

val kCertSearchSigningDisallowed: kotlin.UInt
    get() = TODO()

val kCertSearchSigningIgnored: kotlin.UInt
    get() = TODO()

val kCertSearchSigningMask: kotlin.UInt
    get() = TODO()

val kCertSearchUnwrapAllowed: kotlin.UInt
    get() = TODO()

val kCertSearchUnwrapDisallowed: kotlin.UInt
    get() = TODO()

val kCertSearchUnwrapIgnored: kotlin.UInt
    get() = TODO()

val kCertSearchUnwrapMask: kotlin.UInt
    get() = TODO()

val kCertSearchVerifyAllowed: kotlin.UInt
    get() = TODO()

val kCertSearchVerifyDisallowed: kotlin.UInt
    get() = TODO()

val kCertSearchVerifyIgnored: kotlin.UInt
    get() = TODO()

val kCertSearchVerifyMask: kotlin.UInt
    get() = TODO()

val kCertSearchWrapAllowed: kotlin.UInt
    get() = TODO()

val kCertSearchWrapDisallowed: kotlin.UInt
    get() = TODO()

val kCertSearchWrapIgnored: kotlin.UInt
    get() = TODO()

val kCertSearchWrapMask: kotlin.UInt
    get() = TODO()

val kCertUsageAllAdd: kotlin.UInt
    get() = TODO()

val kCertUsageDecryptAdd: kotlin.UInt
    get() = TODO()

val kCertUsageDecryptAskAndAdd: kotlin.UInt
    get() = TODO()

val kCertUsageEncryptAdd: kotlin.UInt
    get() = TODO()

val kCertUsageEncryptAskAndAdd: kotlin.UInt
    get() = TODO()

val kCertUsageKeyExchAdd: kotlin.UInt
    get() = TODO()

val kCertUsageKeyExchAskAndAdd: kotlin.UInt
    get() = TODO()

val kCertUsageRootAdd: kotlin.UInt
    get() = TODO()

val kCertUsageRootAskAndAdd: kotlin.UInt
    get() = TODO()

val kCertUsageSSLAdd: kotlin.UInt
    get() = TODO()

val kCertUsageSSLAskAndAdd: kotlin.UInt
    get() = TODO()

val kCertUsageShift: kotlin.UInt
    get() = TODO()

val kCertUsageSigningAdd: kotlin.UInt
    get() = TODO()

val kCertUsageSigningAskAndAdd: kotlin.UInt
    get() = TODO()

val kCertUsageVerifyAdd: kotlin.UInt
    get() = TODO()

val kCertUsageVerifyAskAndAdd: kotlin.UInt
    get() = TODO()

val kCertificateKCItemClass: kotlin.UInt
    get() = TODO()

val kChewableItemsFolderType: kotlin.UInt
    get() = TODO()

val kClassKCItemAttr: kotlin.UInt
    get() = TODO()

val kClassicDesktopFolderType: kotlin.UInt
    get() = TODO()

val kClassicDomain: kotlin.Int
    get() = TODO()

val kClassicPreferencesFolderType: kotlin.UInt
    get() = TODO()

val kClientRequestDenied: kotlin.Int
    get() = TODO()

val kClipboardIcon: kotlin.UInt
    get() = TODO()

val kClippingCreator: kotlin.UInt
    get() = TODO()

val kClippingPictureType: kotlin.UInt
    get() = TODO()

val kClippingPictureTypeIcon: kotlin.UInt
    get() = TODO()

val kClippingSoundType: kotlin.UInt
    get() = TODO()

val kClippingSoundTypeIcon: kotlin.UInt
    get() = TODO()

val kClippingTextType: kotlin.UInt
    get() = TODO()

val kClippingTextTypeIcon: kotlin.UInt
    get() = TODO()

val kClippingUnknownType: kotlin.UInt
    get() = TODO()

val kClippingUnknownTypeIcon: kotlin.UInt
    get() = TODO()

val kCollateAttributesNotFoundErr: kotlin.Int
    get() = TODO()

val kCollateBufferTooSmall: kotlin.Int
    get() = TODO()

val kCollateInvalidChar: kotlin.Int
    get() = TODO()

val kCollateInvalidCollationRef: kotlin.Int
    get() = TODO()

val kCollateInvalidOptions: kotlin.Int
    get() = TODO()

val kCollateMissingUnicodeTableErr: kotlin.Int
    get() = TODO()

val kCollatePatternNotFoundErr: kotlin.Int
    get() = TODO()

val kCollateUnicodeConvertFailedErr: kotlin.Int
    get() = TODO()

val kCollectionAllAttributes: kotlin.Int
    get() = TODO()

val kCollectionDefaultAttributes: kotlin.Int
    get() = TODO()

val kCollectionDontWantAttributes: kotlin.UInt
    get() = TODO()

val kCollectionDontWantData: kotlin.UInt
    get() = TODO()

val kCollectionDontWantId: kotlin.UInt
    get() = TODO()

val kCollectionDontWantIndex: kotlin.UInt
    get() = TODO()

val kCollectionDontWantSize: kotlin.UInt
    get() = TODO()

val kCollectionDontWantTag: kotlin.UInt
    get() = TODO()

val kCollectionLockBit: kotlin.UInt
    get() = TODO()

val kCollectionLockMask: kotlin.UInt
    get() = TODO()

val kCollectionNoAttributes: kotlin.Int
    get() = TODO()

val kCollectionPersistenceBit: kotlin.UInt
    get() = TODO()

val kCollectionPersistenceMask: kotlin.UInt
    get() = TODO()

val kCollectionReserved0Bit: kotlin.UInt
    get() = TODO()

val kCollectionReserved0Mask: kotlin.UInt
    get() = TODO()

val kCollectionReserved10Bit: kotlin.UInt
    get() = TODO()

val kCollectionReserved10Mask: kotlin.UInt
    get() = TODO()

val kCollectionReserved11Bit: kotlin.UInt
    get() = TODO()

val kCollectionReserved11Mask: kotlin.UInt
    get() = TODO()

val kCollectionReserved12Bit: kotlin.UInt
    get() = TODO()

val kCollectionReserved12Mask: kotlin.UInt
    get() = TODO()

val kCollectionReserved13Bit: kotlin.UInt
    get() = TODO()

val kCollectionReserved13Mask: kotlin.UInt
    get() = TODO()

val kCollectionReserved1Bit: kotlin.UInt
    get() = TODO()

val kCollectionReserved1Mask: kotlin.UInt
    get() = TODO()

val kCollectionReserved2Bit: kotlin.UInt
    get() = TODO()

val kCollectionReserved2Mask: kotlin.UInt
    get() = TODO()

val kCollectionReserved3Bit: kotlin.UInt
    get() = TODO()

val kCollectionReserved3Mask: kotlin.UInt
    get() = TODO()

val kCollectionReserved4Bit: kotlin.UInt
    get() = TODO()

val kCollectionReserved4Mask: kotlin.UInt
    get() = TODO()

val kCollectionReserved5Bit: kotlin.UInt
    get() = TODO()

val kCollectionReserved5Mask: kotlin.UInt
    get() = TODO()

val kCollectionReserved6Bit: kotlin.UInt
    get() = TODO()

val kCollectionReserved6Mask: kotlin.UInt
    get() = TODO()

val kCollectionReserved7Bit: kotlin.UInt
    get() = TODO()

val kCollectionReserved7Mask: kotlin.UInt
    get() = TODO()

val kCollectionReserved8Bit: kotlin.UInt
    get() = TODO()

val kCollectionReserved8Mask: kotlin.UInt
    get() = TODO()

val kCollectionReserved9Bit: kotlin.UInt
    get() = TODO()

val kCollectionReserved9Mask: kotlin.UInt
    get() = TODO()

val kCollectionUser0Bit: kotlin.UInt
    get() = TODO()

val kCollectionUser0Mask: kotlin.UInt
    get() = TODO()

val kCollectionUser10Bit: kotlin.UInt
    get() = TODO()

val kCollectionUser10Mask: kotlin.UInt
    get() = TODO()

val kCollectionUser11Bit: kotlin.UInt
    get() = TODO()

val kCollectionUser11Mask: kotlin.UInt
    get() = TODO()

val kCollectionUser12Bit: kotlin.UInt
    get() = TODO()

val kCollectionUser12Mask: kotlin.UInt
    get() = TODO()

val kCollectionUser13Bit: kotlin.UInt
    get() = TODO()

val kCollectionUser13Mask: kotlin.UInt
    get() = TODO()

val kCollectionUser14Bit: kotlin.UInt
    get() = TODO()

val kCollectionUser14Mask: kotlin.UInt
    get() = TODO()

val kCollectionUser15Bit: kotlin.UInt
    get() = TODO()

val kCollectionUser15Mask: kotlin.UInt
    get() = TODO()

val kCollectionUser1Bit: kotlin.UInt
    get() = TODO()

val kCollectionUser1Mask: kotlin.UInt
    get() = TODO()

val kCollectionUser2Bit: kotlin.UInt
    get() = TODO()

val kCollectionUser2Mask: kotlin.UInt
    get() = TODO()

val kCollectionUser3Bit: kotlin.UInt
    get() = TODO()

val kCollectionUser3Mask: kotlin.UInt
    get() = TODO()

val kCollectionUser4Bit: kotlin.UInt
    get() = TODO()

val kCollectionUser4Mask: kotlin.UInt
    get() = TODO()

val kCollectionUser5Bit: kotlin.UInt
    get() = TODO()

val kCollectionUser5Mask: kotlin.UInt
    get() = TODO()

val kCollectionUser6Bit: kotlin.UInt
    get() = TODO()

val kCollectionUser6Mask: kotlin.UInt
    get() = TODO()

val kCollectionUser7Bit: kotlin.UInt
    get() = TODO()

val kCollectionUser7Mask: kotlin.UInt
    get() = TODO()

val kCollectionUser8Bit: kotlin.UInt
    get() = TODO()

val kCollectionUser8Mask: kotlin.UInt
    get() = TODO()

val kCollectionUser9Bit: kotlin.UInt
    get() = TODO()

val kCollectionUser9Mask: kotlin.UInt
    get() = TODO()

val kCollectionUserAttributes: kotlin.Int
    get() = TODO()

val kColor: kotlin.UInt
    get() = TODO()

val kColorPickersFolderType: kotlin.UInt
    get() = TODO()

val kColorSyncCMMFolderType: kotlin.UInt
    get() = TODO()

val kColorSyncFolderIcon: kotlin.Int
    get() = TODO()

val kColorSyncFolderType: kotlin.UInt
    get() = TODO()

val kColorSyncProfilesFolderType: kotlin.UInt
    get() = TODO()

val kColorSyncScriptingFolderType: kotlin.UInt
    get() = TODO()

val kCommentKCItemAttr: kotlin.UInt
    get() = TODO()

val kCommonNameKCItemAttr: kotlin.UInt
    get() = TODO()

val kComponentAliasResourceType: kotlin.UInt
    get() = TODO()

val kComponentCanDoSelect: kotlin.Int
    get() = TODO()

val kComponentCloseSelect: kotlin.Int
    get() = TODO()

val kComponentDebugOption: kotlin.UInt
    get() = TODO()

val kComponentExecuteWiredActionSelect: kotlin.Int
    get() = TODO()

val kComponentGetMPWorkFunctionSelect: kotlin.Int
    get() = TODO()

val kComponentGetPublicResourceSelect: kotlin.Int
    get() = TODO()

val kComponentOpenSelect: kotlin.Int
    get() = TODO()

val kComponentRegisterSelect: kotlin.Int
    get() = TODO()

val kComponentResourceType: kotlin.UInt
    get() = TODO()

val kComponentSignatureString: kotlin.String
    get() = TODO()

val kComponentTargetSelect: kotlin.Int
    get() = TODO()

val kComponentUnregisterSelect: kotlin.Int
    get() = TODO()

val kComponentVersionSelect: kotlin.Int
    get() = TODO()

val kComponentsFolderType: kotlin.UInt
    get() = TODO()

val kCompositionsFolderType: kotlin.UInt
    get() = TODO()

val kComputerIcon: kotlin.UInt
    get() = TODO()

val kConfigurationLockedErr: kotlin.Int
    get() = TODO()

val kConnSuite: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kConnectToIcon: kotlin.UInt
    get() = TODO()

val kContainerAliasType: kotlin.UInt
    get() = TODO()

val kContainerCDROMAliasType: kotlin.UInt
    get() = TODO()

val kContainerFloppyAliasType: kotlin.UInt
    get() = TODO()

val kContainerFolderAliasType: kotlin.UInt
    get() = TODO()

val kContainerHardDiskAliasType: kotlin.UInt
    get() = TODO()

val kContainerServerAliasType: kotlin.UInt
    get() = TODO()

val kContainerTrashAliasType: kotlin.UInt
    get() = TODO()

val kContextualMenuItemsFolderIcon: kotlin.Int
    get() = TODO()

val kContextualMenuItemsFolderType: kotlin.UInt
    get() = TODO()

val kControlPanelDisabledFolderIcon: kotlin.Int
    get() = TODO()

val kControlPanelDisabledFolderType: kotlin.UInt
    get() = TODO()

val kControlPanelFolderAliasType: kotlin.UInt
    get() = TODO()

val kControlPanelFolderIcon: kotlin.Int
    get() = TODO()

val kControlPanelFolderIconResource: kotlin.Int
    get() = TODO()

val kControlPanelFolderType: kotlin.UInt
    get() = TODO()

val kControlStripModulesFolderIcon: kotlin.Int
    get() = TODO()

val kControlStripModulesFolderType: kotlin.UInt
    get() = TODO()

val kCooperativeThread: kotlin.UInt
    get() = TODO()

val kCoreEndianAppleEventManagerDomain: kotlin.UInt
    get() = TODO()

val kCoreEndianResourceManagerDomain: kotlin.UInt
    get() = TODO()

val kCoreEventClass: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val kCoreServicesFolderType: kotlin.UInt
    get() = TODO()

val kCreateFolder: kotlin.UInt
    get() = TODO()

val kCreateFolderAtBoot: kotlin.UInt
    get() = TODO()

val kCreateFolderAtBootBit: kotlin.UInt
    get() = TODO()

val kCreateIfNeeded: kotlin.UInt
    get() = TODO()

val kCreationDateKCItemAttr: kotlin.UInt
    get() = TODO()

val kCreatorKCItemAttr: kotlin.UInt
    get() = TODO()

val kCurrentMixedModeStateRecord: kotlin.UInt
    get() = TODO()

val kCurrentThreadID: kotlin.UInt
    get() = TODO()

val kCurrentUserFolderLocation: kotlin.UInt
    get() = TODO()

val kCurrentUserFolderType: kotlin.UInt
    get() = TODO()

val kCurrentUserRemoteFolderLocation: kotlin.UInt
    get() = TODO()

val kCurrentUserRemoteFolderType: kotlin.UInt
    get() = TODO()

val kCustomBadgeResourceID: kotlin.Int
    get() = TODO()

val kCustomBadgeResourceType: kotlin.Int
    get() = TODO()

val kCustomBadgeResourceVersion: kotlin.Int
    get() = TODO()

val kCustomIconKCItemAttr: kotlin.UInt
    get() = TODO()

val kCustomIconResource: kotlin.Int
    get() = TODO()

val kD0DispatchedCStackBased: kotlin.UInt
    get() = TODO()

val kD0DispatchedPascalStackBased: kotlin.UInt
    get() = TODO()

val kD1DispatchedPascalStackBased: kotlin.UInt
    get() = TODO()

val kDMCantBlock: kotlin.Int
    get() = TODO()

val kDMDisplayAlreadyInstalledErr: kotlin.Int
    get() = TODO()

val kDMDisplayNotFoundErr: kotlin.Int
    get() = TODO()

val kDMDriverNotDisplayMgrAwareErr: kotlin.Int
    get() = TODO()

val kDMFoundErr: kotlin.Int
    get() = TODO()

val kDMGenErr: kotlin.Int
    get() = TODO()

val kDMMainDisplayCannotMoveErr: kotlin.Int
    get() = TODO()

val kDMMirroringBlocked: kotlin.Int
    get() = TODO()

val kDMMirroringNotOn: kotlin.Int
    get() = TODO()

val kDMMirroringOnAlready: kotlin.Int
    get() = TODO()

val kDMNoDeviceTableclothErr: kotlin.Int
    get() = TODO()

val kDMNotFoundErr: kotlin.Int
    get() = TODO()

val kDMSWNotInitializedErr: kotlin.Int
    get() = TODO()

val kDMWrongNumberOfDisplays: kotlin.Int
    get() = TODO()

val kDOSJapanesePalmVariant: kotlin.UInt
    get() = TODO()

val kDOSJapaneseStandardVariant: kotlin.UInt
    get() = TODO()

val kDSpConfirmSwitchWarning: kotlin.Int
    get() = TODO()

val kDSpContextAlreadyReservedErr: kotlin.Int
    get() = TODO()

val kDSpContextNotFoundErr: kotlin.Int
    get() = TODO()

val kDSpContextNotReservedErr: kotlin.Int
    get() = TODO()

val kDSpFrameRateNotReadyErr: kotlin.Int
    get() = TODO()

val kDSpInternalErr: kotlin.Int
    get() = TODO()

val kDSpInvalidAttributesErr: kotlin.Int
    get() = TODO()

val kDSpInvalidContextErr: kotlin.Int
    get() = TODO()

val kDSpNotInitializedErr: kotlin.Int
    get() = TODO()

val kDSpStereoContextErr: kotlin.Int
    get() = TODO()

val kDSpSystemSWTooOldErr: kotlin.Int
    get() = TODO()

val kDTPAbortJobErr: kotlin.Int
    get() = TODO()

val kDTPHoldJobErr: kotlin.Int
    get() = TODO()

val kDTPStopQueueErr: kotlin.Int
    get() = TODO()

val kDTPThirdPartySupported: kotlin.UInt
    get() = TODO()

val kDTPTryAgainErr: kotlin.Int
    get() = TODO()

val kDataAccessKCEvent: kotlin.UInt
    get() = TODO()

val kDataAccessKCEventMask: kotlin.UInt
    get() = TODO()

val kDataAlignmentException: kotlin.UInt
    get() = TODO()

val kDataBreakpointException: kotlin.UInt
    get() = TODO()

val kDecryptKCItemAttr: kotlin.UInt
    get() = TODO()

val kDefaultChangedKCEvent: kotlin.UInt
    get() = TODO()

val kDefaultChangedKCEventMask: kotlin.UInt
    get() = TODO()

val kDeleteAliasIcon: kotlin.UInt
    get() = TODO()

val kDeleteKCEvent: kotlin.UInt
    get() = TODO()

val kDeleteKCEventMask: kotlin.UInt
    get() = TODO()

val kDescriptionKCItemAttr: kotlin.UInt
    get() = TODO()

val kDesktopFolderType: kotlin.UInt
    get() = TODO()

val kDesktopIcon: kotlin.UInt
    get() = TODO()

val kDesktopIconResource: kotlin.Int
    get() = TODO()

val kDesktopPicturesFolderType: kotlin.UInt
    get() = TODO()

val kDesktopPrinterAliasType: kotlin.UInt
    get() = TODO()

val kDeveloperApplicationsFolderType: kotlin.UInt
    get() = TODO()

val kDeveloperDocsFolderType: kotlin.UInt
    get() = TODO()

val kDeveloperFolderType: kotlin.UInt
    get() = TODO()

val kDeveloperHelpFolderType: kotlin.UInt
    get() = TODO()

val kDeviceInitiatedWake: kotlin.UInt
    get() = TODO()

val kDictionariesFolderType: kotlin.UInt
    get() = TODO()

val kDirectoryServicesFolderType: kotlin.UInt
    get() = TODO()

val kDirectoryServicesPlugInsFolderType: kotlin.UInt
    get() = TODO()

val kDispatchedParameterPhase: kotlin.Int
    get() = TODO()

val kDispatchedSelectorSizePhase: kotlin.Int
    get() = TODO()

val kDispatchedSelectorSizeWidth: kotlin.Int
    get() = TODO()

val kDisplayExtensionsFolderType: kotlin.UInt
    get() = TODO()

val kDoFolderActionEvent: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kDocumentationFolderType: kotlin.UInt
    get() = TODO()

val kDocumentsFolderIcon: kotlin.Int
    get() = TODO()

val kDocumentsFolderType: kotlin.UInt
    get() = TODO()

val kDomainLibraryFolderType: kotlin.UInt
    get() = TODO()

val kDomainTopLevelFolderType: kotlin.UInt
    get() = TODO()

val kDontCreateFolder: kotlin.UInt
    get() = TODO()

val kDontFindAppBySignature: kotlin.UInt
    get() = TODO()

val kDontPassSelector: kotlin.UInt
    get() = TODO()

val kDownloadsFolderType: kotlin.UInt
    get() = TODO()

val kDozeDemand: kotlin.UInt
    get() = TODO()

val kDozeRequest: kotlin.UInt
    get() = TODO()

val kDozeToFullWakeUp: kotlin.UInt
    get() = TODO()

val kDozeWakeUp: kotlin.UInt
    get() = TODO()

val kDropBoxFolderType: kotlin.UInt
    get() = TODO()

val kDropFolderAliasType: kotlin.UInt
    get() = TODO()

val kDropFolderIcon: kotlin.UInt
    get() = TODO()

val kDropFolderIconResource: kotlin.Int
    get() = TODO()

val kDropIconVariant: kotlin.UInt
    get() = TODO()

val kDurationForever: kotlin.Int
    get() = TODO()

val kDurationImmediate: kotlin.Int
    get() = TODO()

val kDurationMicrosecond: kotlin.Int
    get() = TODO()

val kDurationMillisecond: kotlin.Int
    get() = TODO()

val kEACCESErr: kotlin.Int
    get() = TODO()

val kEADDRINUSEErr: kotlin.Int
    get() = TODO()

val kEADDRNOTAVAILErr: kotlin.Int
    get() = TODO()

val kEAGAINErr: kotlin.Int
    get() = TODO()

val kEALREADYErr: kotlin.Int
    get() = TODO()

val kEBADFErr: kotlin.Int
    get() = TODO()

val kEBADMSGErr: kotlin.Int
    get() = TODO()

val kEBUSYErr: kotlin.Int
    get() = TODO()

val kECANCELErr: kotlin.Int
    get() = TODO()

val kECONNABORTEDErr: kotlin.Int
    get() = TODO()

val kECONNREFUSEDErr: kotlin.Int
    get() = TODO()

val kECONNRESETErr: kotlin.Int
    get() = TODO()

val kEDEADLKErr: kotlin.Int
    get() = TODO()

val kEDESTADDRREQErr: kotlin.Int
    get() = TODO()

val kEEXISTErr: kotlin.Int
    get() = TODO()

val kEFAULTErr: kotlin.Int
    get() = TODO()

val kEHOSTDOWNErr: kotlin.Int
    get() = TODO()

val kEHOSTUNREACHErr: kotlin.Int
    get() = TODO()

val kEINPROGRESSErr: kotlin.Int
    get() = TODO()

val kEINTRErr: kotlin.Int
    get() = TODO()

val kEINVALErr: kotlin.Int
    get() = TODO()

val kEIOErr: kotlin.Int
    get() = TODO()

val kEISCONNErr: kotlin.Int
    get() = TODO()

val kEMSGSIZEErr: kotlin.Int
    get() = TODO()

val kEMailKCItemAttr: kotlin.UInt
    get() = TODO()

val kENETDOWNErr: kotlin.Int
    get() = TODO()

val kENETRESETErr: kotlin.Int
    get() = TODO()

val kENETUNREACHErr: kotlin.Int
    get() = TODO()

val kENOBUFSErr: kotlin.Int
    get() = TODO()

val kENODATAErr: kotlin.Int
    get() = TODO()

val kENODEVErr: kotlin.Int
    get() = TODO()

val kENOENTErr: kotlin.Int
    get() = TODO()

val kENOMEMErr: kotlin.Int
    get() = TODO()

val kENOMSGErr: kotlin.Int
    get() = TODO()

val kENOPROTOOPTErr: kotlin.Int
    get() = TODO()

val kENORSRCErr: kotlin.Int
    get() = TODO()

val kENOSRErr: kotlin.Int
    get() = TODO()

val kENOSTRErr: kotlin.Int
    get() = TODO()

val kENOTCONNErr: kotlin.Int
    get() = TODO()

val kENOTSOCKErr: kotlin.Int
    get() = TODO()

val kENOTTYErr: kotlin.Int
    get() = TODO()

val kENXIOErr: kotlin.Int
    get() = TODO()

val kEOPNOTSUPPErr: kotlin.Int
    get() = TODO()

val kEPERMErr: kotlin.Int
    get() = TODO()

val kEPIPEErr: kotlin.Int
    get() = TODO()

val kEPROTOErr: kotlin.Int
    get() = TODO()

val kEPROTONOSUPPORTErr: kotlin.Int
    get() = TODO()

val kEPROTOTYPEErr: kotlin.Int
    get() = TODO()

val kERANGEErr: kotlin.Int
    get() = TODO()

val kESHUTDOWNErr: kotlin.Int
    get() = TODO()

val kESOCKTNOSUPPORTErr: kotlin.Int
    get() = TODO()

val kESRCHErr: kotlin.Int
    get() = TODO()

val kETIMEDOUTErr: kotlin.Int
    get() = TODO()

val kETIMEErr: kotlin.Int
    get() = TODO()

val kETOOMANYREFSErr: kotlin.Int
    get() = TODO()

val kEUC_CN_BasicVariant: kotlin.UInt
    get() = TODO()

val kEUC_CN_DOSVariant: kotlin.UInt
    get() = TODO()

val kEUC_KR_BasicVariant: kotlin.UInt
    get() = TODO()

val kEUC_KR_DOSVariant: kotlin.UInt
    get() = TODO()

val kEWOULDBLOCKErr: kotlin.Int
    get() = TODO()

val kEditorsFolderType: kotlin.UInt
    get() = TODO()

val kEjectMediaIcon: kotlin.UInt
    get() = TODO()

val kEncryptKCItemAttr: kotlin.UInt
    get() = TODO()

val kEncryptPassword: kotlin.UInt
    get() = TODO()

val kEndDateKCItemAttr: kotlin.UInt
    get() = TODO()

val kEnterIdle: kotlin.UInt
    get() = TODO()

val kEnterRun: kotlin.UInt
    get() = TODO()

val kEnterStandby: kotlin.UInt
    get() = TODO()

val kEveryKCEventMask: kotlin.UInt
    get() = TODO()

val kExactMatchThread: kotlin.UInt
    get() = TODO()

val kExcludedMemoryException: kotlin.UInt
    get() = TODO()

val kExitIdle: kotlin.UInt
    get() = TODO()

val kExportedFolderAliasType: kotlin.UInt
    get() = TODO()

val kExtendedFlagHasCustomBadge: kotlin.UInt
    get() = TODO()

val kExtendedFlagHasRoutingInfo: kotlin.UInt
    get() = TODO()

val kExtendedFlagObjectIsBusy: kotlin.UInt
    get() = TODO()

val kExtendedFlagsAreInvalid: kotlin.UInt
    get() = TODO()

val kExtensionDisabledFolderType: kotlin.UInt
    get() = TODO()

val kExtensionFolderAliasType: kotlin.UInt
    get() = TODO()

val kExtensionFolderType: kotlin.UInt
    get() = TODO()

val kExtensionsDisabledFolderIcon: kotlin.Int
    get() = TODO()

val kExtensionsFolderIcon: kotlin.Int
    get() = TODO()

val kExtensionsFolderIconResource: kotlin.Int
    get() = TODO()

val kFAAttachCommand: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kFAEditCommand: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kFAFileParam: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kFAIndexParam: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kFARemoveCommand: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kFAServerApp: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kFASuiteCode: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kFBCaccessCanceled: kotlin.Int
    get() = TODO()

val kFBCaccessorStoreFailed: kotlin.Int
    get() = TODO()

val kFBCaddDocFailed: kotlin.Int
    get() = TODO()

val kFBCallocFailed: kotlin.Int
    get() = TODO()

val kFBCanalysisNotAvailable: kotlin.Int
    get() = TODO()

val kFBCbadIndexFile: kotlin.Int
    get() = TODO()

val kFBCbadIndexFileVersion: kotlin.Int
    get() = TODO()

val kFBCbadParam: kotlin.Int
    get() = TODO()

val kFBCbadSearchSession: kotlin.Int
    get() = TODO()

val kFBCcommitFailed: kotlin.Int
    get() = TODO()

val kFBCcompactionFailed: kotlin.Int
    get() = TODO()

val kFBCdeletionFailed: kotlin.Int
    get() = TODO()

val kFBCfileNotIndexed: kotlin.Int
    get() = TODO()

val kFBCflushFailed: kotlin.Int
    get() = TODO()

val kFBCillegalSessionChange: kotlin.Int
    get() = TODO()

val kFBCindexCreationFailed: kotlin.Int
    get() = TODO()

val kFBCindexDiskIOFailed: kotlin.Int
    get() = TODO()

val kFBCindexFileDestroyed: kotlin.Int
    get() = TODO()

val kFBCindexNotAvailable: kotlin.Int
    get() = TODO()

val kFBCindexNotFound: kotlin.Int
    get() = TODO()

val kFBCindexingCanceled: kotlin.Int
    get() = TODO()

val kFBCindexingFailed: kotlin.Int
    get() = TODO()

val kFBCmergingFailed: kotlin.Int
    get() = TODO()

val kFBCmoveFailed: kotlin.Int
    get() = TODO()

val kFBCnoIndexesFound: kotlin.Int
    get() = TODO()

val kFBCnoSearchSession: kotlin.Int
    get() = TODO()

val kFBCnoSuchHit: kotlin.Int
    get() = TODO()

val kFBCsearchFailed: kotlin.Int
    get() = TODO()

val kFBCsomeFilesNotIndexed: kotlin.Int
    get() = TODO()

val kFBCsummarizationCanceled: kotlin.Int
    get() = TODO()

val kFBCtokenizationFailed: kotlin.Int
    get() = TODO()

val kFBCvTwinExceptionErr: kotlin.Int
    get() = TODO()

val kFBCvalidationFailed: kotlin.Int
    get() = TODO()

val kFMFontContainerAccessErr: kotlin.Int
    get() = TODO()

val kFMFontTableAccessErr: kotlin.Int
    get() = TODO()

val kFMInvalidFontErr: kotlin.Int
    get() = TODO()

val kFMInvalidFontFamilyErr: kotlin.Int
    get() = TODO()

val kFMIterationCompleted: kotlin.Int
    get() = TODO()

val kFMIterationScopeModifiedErr: kotlin.Int
    get() = TODO()

val kFNDirectoryModifiedMessage: kotlin.UInt
    get() = TODO()

val kFNNoImplicitAllSubscription: kotlin.UInt
    get() = TODO()

val kFNNotifyInBackground: kotlin.UInt
    get() = TODO()

val kFNSBadFlattenedSizeErr: kotlin.Int
    get() = TODO()

val kFNSBadProfileVersionErr: kotlin.Int
    get() = TODO()

val kFNSBadReferenceVersionErr: kotlin.Int
    get() = TODO()

val kFNSDuplicateReferenceErr: kotlin.Int
    get() = TODO()

val kFNSInsufficientDataErr: kotlin.Int
    get() = TODO()

val kFNSInvalidProfileErr: kotlin.Int
    get() = TODO()

val kFNSInvalidReferenceErr: kotlin.Int
    get() = TODO()

val kFNSMismatchErr: kotlin.Int
    get() = TODO()

val kFNSNameNotFoundErr: kotlin.Int
    get() = TODO()

val kFPUNotNeeded: kotlin.UInt
    get() = TODO()

val kFSAliasInfoFSInfo: kotlin.UInt
    get() = TODO()

val kFSAliasInfoFinderInfo: kotlin.UInt
    get() = TODO()

val kFSAliasInfoIDs: kotlin.UInt
    get() = TODO()

val kFSAliasInfoIsDirectory: kotlin.UInt
    get() = TODO()

val kFSAliasInfoNone: kotlin.UInt
    get() = TODO()

val kFSAliasInfoTargetCreateDate: kotlin.UInt
    get() = TODO()

val kFSAliasInfoVolumeCreateDate: kotlin.UInt
    get() = TODO()

val kFSAliasInfoVolumeFlags: kotlin.UInt
    get() = TODO()

val kFSAllocAllOrNothingMask: kotlin.UInt
    get() = TODO()

val kFSAllocContiguousMask: kotlin.UInt
    get() = TODO()

val kFSAllocDefaultFlags: kotlin.UInt
    get() = TODO()

val kFSAllocNoRoundUpMask: kotlin.UInt
    get() = TODO()

val kFSAllocReservedMask: kotlin.UInt
    get() = TODO()

val kFSAllowConcurrentAsyncIOBit: kotlin.UInt
    get() = TODO()

val kFSAllowConcurrentAsyncIOMask: kotlin.UInt
    get() = TODO()

val kFSCatInfoAccessDate: kotlin.Int
    get() = TODO()

val kFSCatInfoAllDates: kotlin.Int
    get() = TODO()

val kFSCatInfoAttrMod: kotlin.Int
    get() = TODO()

val kFSCatInfoBackupDate: kotlin.Int
    get() = TODO()

val kFSCatInfoContentMod: kotlin.Int
    get() = TODO()

val kFSCatInfoCreateDate: kotlin.Int
    get() = TODO()

val kFSCatInfoDataSizes: kotlin.Int
    get() = TODO()

val kFSCatInfoFSFileSecurityRef: kotlin.Int
    get() = TODO()

val kFSCatInfoFinderInfo: kotlin.Int
    get() = TODO()

val kFSCatInfoFinderXInfo: kotlin.Int
    get() = TODO()

val kFSCatInfoGettableInfo: kotlin.Int
    get() = TODO()

val kFSCatInfoNodeFlags: kotlin.Int
    get() = TODO()

val kFSCatInfoNodeID: kotlin.Int
    get() = TODO()

val kFSCatInfoNone: kotlin.Int
    get() = TODO()

val kFSCatInfoParentDirID: kotlin.Int
    get() = TODO()

val kFSCatInfoPermissions: kotlin.Int
    get() = TODO()

val kFSCatInfoReserved: kotlin.Int
    get() = TODO()

val kFSCatInfoRsrcSizes: kotlin.Int
    get() = TODO()

val kFSCatInfoSetOwnership: kotlin.Int
    get() = TODO()

val kFSCatInfoSettableInfo: kotlin.Int
    get() = TODO()

val kFSCatInfoSharingFlags: kotlin.Int
    get() = TODO()

val kFSCatInfoTextEncoding: kotlin.Int
    get() = TODO()

val kFSCatInfoUserAccess: kotlin.Int
    get() = TODO()

val kFSCatInfoUserPrivs: kotlin.Int
    get() = TODO()

val kFSCatInfoValence: kotlin.Int
    get() = TODO()

val kFSCatInfoVolume: kotlin.Int
    get() = TODO()

val kFSEjectVolumeForceEject: kotlin.UInt
    get() = TODO()

val kFSEventStreamCreateFlagFileEvents: kotlin.UInt
    get() = TODO()

val kFSEventStreamCreateFlagIgnoreSelf: kotlin.UInt
    get() = TODO()

val kFSEventStreamCreateFlagMarkSelf: kotlin.UInt
    get() = TODO()

val kFSEventStreamCreateFlagNoDefer: kotlin.UInt
    get() = TODO()

val kFSEventStreamCreateFlagNone: kotlin.UInt
    get() = TODO()

val kFSEventStreamCreateFlagUseCFTypes: kotlin.UInt
    get() = TODO()

val kFSEventStreamCreateFlagUseExtendedData: kotlin.UInt
    get() = TODO()

val kFSEventStreamCreateFlagWatchRoot: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagEventIdsWrapped: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagHistoryDone: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagItemChangeOwner: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagItemCloned: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagItemCreated: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagItemFinderInfoMod: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagItemInodeMetaMod: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagItemIsDir: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagItemIsFile: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagItemIsHardlink: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagItemIsLastHardlink: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagItemIsSymlink: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagItemModified: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagItemRemoved: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagItemRenamed: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagItemXattrMod: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagKernelDropped: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagMount: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagMustScanSubDirs: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagNone: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagOwnEvent: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagRootChanged: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagUnmount: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventFlagUserDropped: kotlin.UInt
    get() = TODO()

val kFSEventStreamEventIdSinceNow: kotlin.ULong
    get() = TODO()

val kFSFileOperationDefaultOptions: kotlin.UInt
    get() = TODO()

val kFSFileOperationDoNotMoveAcrossVolumes: kotlin.UInt
    get() = TODO()

val kFSFileOperationOverwrite: kotlin.UInt
    get() = TODO()

val kFSFileOperationSkipPreflight: kotlin.UInt
    get() = TODO()

val kFSFileOperationSkipSourcePermissionErrors: kotlin.UInt
    get() = TODO()

val kFSForceReadBit: kotlin.UInt
    get() = TODO()

val kFSForceReadMask: kotlin.UInt
    get() = TODO()

val kFSInvalidVolumeRefNum: kotlin.UInt
    get() = TODO()

val kFSIterateDelete: kotlin.Int
    get() = TODO()

val kFSIterateFlat: kotlin.Int
    get() = TODO()

val kFSIterateReserved: kotlin.Int
    get() = TODO()

val kFSIterateSubtree: kotlin.Int
    get() = TODO()

val kFSMountServerMarkDoNotDisplay: kotlin.UInt
    get() = TODO()

val kFSMountServerMountOnMountDir: kotlin.UInt
    get() = TODO()

val kFSMountServerMountWithoutNotification: kotlin.UInt
    get() = TODO()

val kFSMountServerSuppressConnectionUI: kotlin.UInt
    get() = TODO()

val kFSNewLineBit: kotlin.UInt
    get() = TODO()

val kFSNewLineCharMask: kotlin.UInt
    get() = TODO()

val kFSNewLineMask: kotlin.UInt
    get() = TODO()

val kFSNoCacheBit: kotlin.UInt
    get() = TODO()

val kFSNoCacheMask: kotlin.UInt
    get() = TODO()

val kFSNodeCopyProtectBit: kotlin.UInt
    get() = TODO()

val kFSNodeCopyProtectMask: kotlin.UInt
    get() = TODO()

val kFSNodeDataOpenBit: kotlin.UInt
    get() = TODO()

val kFSNodeDataOpenMask: kotlin.UInt
    get() = TODO()

val kFSNodeForkOpenBit: kotlin.UInt
    get() = TODO()

val kFSNodeForkOpenMask: kotlin.UInt
    get() = TODO()

val kFSNodeHardLinkBit: kotlin.UInt
    get() = TODO()

val kFSNodeHardLinkMask: kotlin.UInt
    get() = TODO()

val kFSNodeInSharedBit: kotlin.UInt
    get() = TODO()

val kFSNodeInSharedMask: kotlin.UInt
    get() = TODO()

val kFSNodeIsDirectoryBit: kotlin.UInt
    get() = TODO()

val kFSNodeIsDirectoryMask: kotlin.UInt
    get() = TODO()

val kFSNodeIsMountedBit: kotlin.UInt
    get() = TODO()

val kFSNodeIsMountedMask: kotlin.UInt
    get() = TODO()

val kFSNodeIsSharePointBit: kotlin.UInt
    get() = TODO()

val kFSNodeIsSharePointMask: kotlin.UInt
    get() = TODO()

val kFSNodeLockedBit: kotlin.UInt
    get() = TODO()

val kFSNodeLockedMask: kotlin.UInt
    get() = TODO()

val kFSNodeResOpenBit: kotlin.UInt
    get() = TODO()

val kFSNodeResOpenMask: kotlin.UInt
    get() = TODO()

val kFSOperationBytesCompleteKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kFSOperationBytesRemainingKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kFSOperationObjectsCompleteKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kFSOperationObjectsRemainingKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kFSOperationStageComplete: kotlin.UInt
    get() = TODO()

val kFSOperationStagePreflighting: kotlin.UInt
    get() = TODO()

val kFSOperationStageRunning: kotlin.UInt
    get() = TODO()

val kFSOperationStageUndefined: kotlin.UInt
    get() = TODO()

val kFSOperationThroughputKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kFSOperationTotalBytesKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kFSOperationTotalObjectsKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kFSOperationTotalUserVisibleObjectsKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kFSOperationUserVisibleObjectsCompleteKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kFSOperationUserVisibleObjectsRemainingKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kFSPathMakeRefDefaultOptions: kotlin.UInt
    get() = TODO()

val kFSPathMakeRefDoNotFollowLeafSymlink: kotlin.UInt
    get() = TODO()

val kFSPleaseCacheBit: kotlin.UInt
    get() = TODO()

val kFSPleaseCacheMask: kotlin.UInt
    get() = TODO()

val kFSRdVerifyBit: kotlin.UInt
    get() = TODO()

val kFSRdVerifyMask: kotlin.UInt
    get() = TODO()

val kFSReplaceObjectDefaultOptions: kotlin.UInt
    get() = TODO()

val kFSReplaceObjectDoNotCheckObjectWriteAccess: kotlin.UInt
    get() = TODO()

val kFSReplaceObjectPreservePermissionInfo: kotlin.UInt
    get() = TODO()

val kFSReplaceObjectReplaceMetadata: kotlin.UInt
    get() = TODO()

val kFSReplaceObjectReplacePermissionInfo: kotlin.UInt
    get() = TODO()

val kFSReplaceObjectSaveOriginalAsABackup: kotlin.UInt
    get() = TODO()

val kFSUnmountVolumeForceUnmount: kotlin.UInt
    get() = TODO()

val kFSVolFlagDefaultVolumeBit: kotlin.UInt
    get() = TODO()

val kFSVolFlagDefaultVolumeMask: kotlin.UInt
    get() = TODO()

val kFSVolFlagFilesOpenBit: kotlin.UInt
    get() = TODO()

val kFSVolFlagFilesOpenMask: kotlin.UInt
    get() = TODO()

val kFSVolFlagHardwareLockedBit: kotlin.UInt
    get() = TODO()

val kFSVolFlagHardwareLockedMask: kotlin.UInt
    get() = TODO()

val kFSVolFlagJournalingActiveBit: kotlin.UInt
    get() = TODO()

val kFSVolFlagJournalingActiveMask: kotlin.UInt
    get() = TODO()

val kFSVolFlagSoftwareLockedBit: kotlin.UInt
    get() = TODO()

val kFSVolFlagSoftwareLockedMask: kotlin.UInt
    get() = TODO()

val kFSVolInfoBackupDate: kotlin.UInt
    get() = TODO()

val kFSVolInfoBlocks: kotlin.UInt
    get() = TODO()

val kFSVolInfoCheckedDate: kotlin.UInt
    get() = TODO()

val kFSVolInfoCreateDate: kotlin.UInt
    get() = TODO()

val kFSVolInfoDataClump: kotlin.UInt
    get() = TODO()

val kFSVolInfoDirCount: kotlin.UInt
    get() = TODO()

val kFSVolInfoDriveInfo: kotlin.UInt
    get() = TODO()

val kFSVolInfoFSInfo: kotlin.UInt
    get() = TODO()

val kFSVolInfoFileCount: kotlin.UInt
    get() = TODO()

val kFSVolInfoFinderInfo: kotlin.UInt
    get() = TODO()

val kFSVolInfoFlags: kotlin.UInt
    get() = TODO()

val kFSVolInfoGettableInfo: kotlin.UInt
    get() = TODO()

val kFSVolInfoModDate: kotlin.UInt
    get() = TODO()

val kFSVolInfoNextAlloc: kotlin.UInt
    get() = TODO()

val kFSVolInfoNextID: kotlin.UInt
    get() = TODO()

val kFSVolInfoNone: kotlin.UInt
    get() = TODO()

val kFSVolInfoRsrcClump: kotlin.UInt
    get() = TODO()

val kFSVolInfoSettableInfo: kotlin.UInt
    get() = TODO()

val kFSVolInfoSizes: kotlin.UInt
    get() = TODO()

val kFTPServerIcon: kotlin.UInt
    get() = TODO()

val kFavoriteItemsIcon: kotlin.UInt
    get() = TODO()

val kFavoritesFolderIcon: kotlin.Int
    get() = TODO()

val kFavoritesFolderType: kotlin.UInt
    get() = TODO()

val kFetchReference: kotlin.UInt
    get() = TODO()

val kFileSystemSupportFolderType: kotlin.UInt
    get() = TODO()

val kFindByContentFolderType: kotlin.UInt
    get() = TODO()

val kFindByContentIndexesFolderType: kotlin.UInt
    get() = TODO()

val kFindByContentPluginsFolderType: kotlin.UInt
    get() = TODO()

val kFindSupportFolderType: kotlin.UInt
    get() = TODO()

val kFinderIcon: kotlin.UInt
    get() = TODO()

val kFirstFailKCStopOn: kotlin.UInt
    get() = TODO()

val kFirstMagicBusyFiletype: kotlin.UInt
    get() = TODO()

val kFirstPassKCStopOn: kotlin.UInt
    get() = TODO()

val kFloatingPointException: kotlin.UInt
    get() = TODO()

val kFloppyIconResource: kotlin.Int
    get() = TODO()

val kFolderActionCode: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kFolderActionsFolderType: kotlin.UInt
    get() = TODO()

val kFolderClosedEvent: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kFolderCreatedAdminPrivs: kotlin.UInt
    get() = TODO()

val kFolderCreatedAdminPrivsBit: kotlin.UInt
    get() = TODO()

val kFolderCreatedInvisible: kotlin.UInt
    get() = TODO()

val kFolderCreatedInvisibleBit: kotlin.UInt
    get() = TODO()

val kFolderCreatedNameLocked: kotlin.UInt
    get() = TODO()

val kFolderCreatedNameLockedBit: kotlin.UInt
    get() = TODO()

val kFolderInLocalOrRemoteUserFolder: kotlin.UInt
    get() = TODO()

val kFolderInRemoteUserFolderIfAvailable: kotlin.UInt
    get() = TODO()

val kFolderInRemoteUserFolderIfAvailableBit: kotlin.UInt
    get() = TODO()

val kFolderInUserFolder: kotlin.UInt
    get() = TODO()

val kFolderInUserFolderBit: kotlin.UInt
    get() = TODO()

val kFolderItemsAddedEvent: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kFolderItemsRemovedEvent: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kFolderManagerFolderInMacOS9FolderIfMacOSXIsInstalledBit: kotlin.UInt
    get() = TODO()

val kFolderManagerFolderInMacOS9FolderIfMacOSXIsInstalledMask: kotlin.UInt
    get() = TODO()

val kFolderManagerLastDomain: kotlin.Int
    get() = TODO()

val kFolderManagerNewlyCreatedFolderIsLocalizedBit: kotlin.UInt
    get() = TODO()

val kFolderManagerNewlyCreatedFolderShouldHaveDotLocalizedCreatedWithinMask: kotlin.UInt
    get() = TODO()

val kFolderManagerNotCreatedOnRemoteVolumesBit: kotlin.UInt
    get() = TODO()

val kFolderManagerNotCreatedOnRemoteVolumesMask: kotlin.UInt
    get() = TODO()

val kFolderMustStayOnSameVolume: kotlin.UInt
    get() = TODO()

val kFolderMustStayOnSameVolumeBit: kotlin.UInt
    get() = TODO()

val kFolderNeverMatchedInIdentifyFolder: kotlin.UInt
    get() = TODO()

val kFolderNeverMatchedInIdentifyFolderBit: kotlin.UInt
    get() = TODO()

val kFolderOpenedEvent: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kFolderTrackedByAlias: kotlin.UInt
    get() = TODO()

val kFolderTrackedByAliasBit: kotlin.UInt
    get() = TODO()

val kFolderWindowMovedEvent: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kFontCollectionsFolderType: kotlin.UInt
    get() = TODO()

val kFontSuitcaseIcon: kotlin.UInt
    get() = TODO()

val kFontsFolderIcon: kotlin.Int
    get() = TODO()

val kFontsFolderIconResource: kotlin.Int
    get() = TODO()

val kFontsFolderType: kotlin.UInt
    get() = TODO()

val kForkInfoFlagsFileLockedBit: kotlin.UInt
    get() = TODO()

val kForkInfoFlagsFileLockedMask: kotlin.UInt
    get() = TODO()

val kForkInfoFlagsLargeFileBit: kotlin.UInt
    get() = TODO()

val kForkInfoFlagsLargeFileMask: kotlin.UInt
    get() = TODO()

val kForkInfoFlagsModifiedBit: kotlin.UInt
    get() = TODO()

val kForkInfoFlagsModifiedMask: kotlin.UInt
    get() = TODO()

val kForkInfoFlagsOwnClumpBit: kotlin.UInt
    get() = TODO()

val kForkInfoFlagsOwnClumpMask: kotlin.UInt
    get() = TODO()

val kForkInfoFlagsResourceBit: kotlin.UInt
    get() = TODO()

val kForkInfoFlagsResourceMask: kotlin.UInt
    get() = TODO()

val kForkInfoFlagsSharedWriteBit: kotlin.UInt
    get() = TODO()

val kForkInfoFlagsSharedWriteMask: kotlin.UInt
    get() = TODO()

val kForkInfoFlagsWriteBit: kotlin.UInt
    get() = TODO()

val kForkInfoFlagsWriteLockedBit: kotlin.UInt
    get() = TODO()

val kForkInfoFlagsWriteLockedMask: kotlin.UInt
    get() = TODO()

val kForkInfoFlagsWriteMask: kotlin.UInt
    get() = TODO()

val kForwardArrowIcon: kotlin.UInt
    get() = TODO()

val kFourByteCode: kotlin.UInt
    get() = TODO()

val kFragmentIsPrepared: kotlin.UInt
    get() = TODO()

val kFragmentNeedsPreparing: kotlin.UInt
    get() = TODO()

val kFrameworksFolderType: kotlin.UInt
    get() = TODO()

val kFullTrashIcon: kotlin.UInt
    get() = TODO()

val kFullTrashIconResource: kotlin.Int
    get() = TODO()

val kGenEditorsFolderType: kotlin.UInt
    get() = TODO()

val kGeneralFailureErr: kotlin.Int
    get() = TODO()

val kGenericApplicationIcon: kotlin.UInt
    get() = TODO()

val kGenericApplicationIconResource: kotlin.Int
    get() = TODO()

val kGenericCDROMIcon: kotlin.UInt
    get() = TODO()

val kGenericCDROMIconResource: kotlin.Int
    get() = TODO()

val kGenericComponentIcon: kotlin.UInt
    get() = TODO()

val kGenericControlPanelIcon: kotlin.UInt
    get() = TODO()

val kGenericControlStripModuleIcon: kotlin.UInt
    get() = TODO()

val kGenericDeskAccessoryIcon: kotlin.UInt
    get() = TODO()

val kGenericDeskAccessoryIconResource: kotlin.Int
    get() = TODO()

val kGenericDocumentIcon: kotlin.UInt
    get() = TODO()

val kGenericDocumentIconResource: kotlin.Int
    get() = TODO()

val kGenericEditionFileIcon: kotlin.UInt
    get() = TODO()

val kGenericEditionFileIconResource: kotlin.Int
    get() = TODO()

val kGenericExtensionIcon: kotlin.UInt
    get() = TODO()

val kGenericExtensionIconResource: kotlin.Int
    get() = TODO()

val kGenericFileServerIcon: kotlin.UInt
    get() = TODO()

val kGenericFileServerIconResource: kotlin.Int
    get() = TODO()

val kGenericFloppyIcon: kotlin.UInt
    get() = TODO()

val kGenericFolderIcon: kotlin.UInt
    get() = TODO()

val kGenericFolderIconResource: kotlin.Int
    get() = TODO()

val kGenericFontIcon: kotlin.UInt
    get() = TODO()

val kGenericFontScalerIcon: kotlin.UInt
    get() = TODO()

val kGenericHardDiskIcon: kotlin.UInt
    get() = TODO()

val kGenericHardDiskIconResource: kotlin.Int
    get() = TODO()

val kGenericIDiskIcon: kotlin.UInt
    get() = TODO()

val kGenericKCItemAttr: kotlin.UInt
    get() = TODO()

val kGenericMoverObjectIcon: kotlin.UInt
    get() = TODO()

val kGenericMoverObjectIconResource: kotlin.Int
    get() = TODO()

val kGenericNetworkIcon: kotlin.UInt
    get() = TODO()

val kGenericPCCardIcon: kotlin.UInt
    get() = TODO()

val kGenericPasswordKCItemClass: kotlin.UInt
    get() = TODO()

val kGenericPreferencesIcon: kotlin.UInt
    get() = TODO()

val kGenericPreferencesIconResource: kotlin.Int
    get() = TODO()

val kGenericQueryDocumentIcon: kotlin.UInt
    get() = TODO()

val kGenericQueryDocumentIconResource: kotlin.Int
    get() = TODO()

val kGenericRAMDiskIcon: kotlin.UInt
    get() = TODO()

val kGenericRAMDiskIconResource: kotlin.Int
    get() = TODO()

val kGenericRemovableMediaIcon: kotlin.UInt
    get() = TODO()

val kGenericSharedLibaryIcon: kotlin.UInt
    get() = TODO()

val kGenericStationeryIcon: kotlin.UInt
    get() = TODO()

val kGenericStationeryIconResource: kotlin.Int
    get() = TODO()

val kGenericSuitcaseIcon: kotlin.UInt
    get() = TODO()

val kGenericSuitcaseIconResource: kotlin.Int
    get() = TODO()

val kGenericURLIcon: kotlin.UInt
    get() = TODO()

val kGenericWORMIcon: kotlin.UInt
    get() = TODO()

val kGenericWindowIcon: kotlin.UInt
    get() = TODO()

val kGetDebugOption: kotlin.UInt
    get() = TODO()

val kGetPowerInfo: kotlin.UInt
    get() = TODO()

val kGetPowerLevel: kotlin.UInt
    get() = TODO()

val kGetSelectedText: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kGetWakeOnNetInfo: kotlin.UInt
    get() = TODO()

val kGridIcon: kotlin.UInt
    get() = TODO()

val kGroupID2Name: kotlin.UInt
    get() = TODO()

val kGroupIcon: kotlin.UInt
    get() = TODO()

val kGroupName2ID: kotlin.UInt
    get() = TODO()

val kGuestUserIcon: kotlin.UInt
    get() = TODO()

val kHIDBadLogPhysValuesErr: kotlin.Int
    get() = TODO()

val kHIDBadLogicalMaximumErr: kotlin.Int
    get() = TODO()

val kHIDBadLogicalMinimumErr: kotlin.Int
    get() = TODO()

val kHIDBadParameterErr: kotlin.Int
    get() = TODO()

val kHIDBaseError: kotlin.Int
    get() = TODO()

val kHIDBufferTooSmallErr: kotlin.Int
    get() = TODO()

val kHIDDeviceNotReady: kotlin.Int
    get() = TODO()

val kHIDEndOfDescriptorErr: kotlin.Int
    get() = TODO()

val kHIDIncompatibleReportErr: kotlin.Int
    get() = TODO()

val kHIDInvalidPreparsedDataErr: kotlin.Int
    get() = TODO()

val kHIDInvalidRangePageErr: kotlin.Int
    get() = TODO()

val kHIDInvalidReportLengthErr: kotlin.Int
    get() = TODO()

val kHIDInvalidReportTypeErr: kotlin.Int
    get() = TODO()

val kHIDInvertedLogicalRangeErr: kotlin.Int
    get() = TODO()

val kHIDInvertedPhysicalRangeErr: kotlin.Int
    get() = TODO()

val kHIDInvertedUsageRangeErr: kotlin.Int
    get() = TODO()

val kHIDNotEnoughMemoryErr: kotlin.Int
    get() = TODO()

val kHIDNotValueArrayErr: kotlin.Int
    get() = TODO()

val kHIDNullPointerErr: kotlin.Int
    get() = TODO()

val kHIDNullStateErr: kotlin.Int
    get() = TODO()

val kHIDReportCountZeroErr: kotlin.Int
    get() = TODO()

val kHIDReportIDZeroErr: kotlin.Int
    get() = TODO()

val kHIDReportSizeZeroErr: kotlin.Int
    get() = TODO()

val kHIDSuccess: kotlin.Int
    get() = TODO()

val kHIDUnmatchedDesignatorRangeErr: kotlin.Int
    get() = TODO()

val kHIDUnmatchedStringRangeErr: kotlin.Int
    get() = TODO()

val kHIDUnmatchedUsageRangeErr: kotlin.Int
    get() = TODO()

val kHIDUsageNotFoundErr: kotlin.Int
    get() = TODO()

val kHIDUsagePageZeroErr: kotlin.Int
    get() = TODO()

val kHIDValueOutOfRangeErr: kotlin.Int
    get() = TODO()

val kHIDVersionIncompatibleErr: kotlin.Int
    get() = TODO()

val kHTTPServerIcon: kotlin.UInt
    get() = TODO()

val kHandleIsResourceBit: kotlin.UInt
    get() = TODO()

val kHandleIsResourceMask: kotlin.UInt
    get() = TODO()

val kHandleLockedBit: kotlin.UInt
    get() = TODO()

val kHandleLockedMask: kotlin.UInt
    get() = TODO()

val kHandlePurgeableBit: kotlin.UInt
    get() = TODO()

val kHandlePurgeableMask: kotlin.UInt
    get() = TODO()

val kHasBeenInited: kotlin.UInt
    get() = TODO()

val kHasBundle: kotlin.UInt
    get() = TODO()

val kHasCustomIcon: kotlin.UInt
    get() = TODO()

val kHasNoINITs: kotlin.UInt
    get() = TODO()

val kHebrewFigureSpaceVariant: kotlin.UInt
    get() = TODO()

val kHebrewStandardVariant: kotlin.UInt
    get() = TODO()

val kHelpFolderIcon: kotlin.Int
    get() = TODO()

val kHelpFolderType: kotlin.UInt
    get() = TODO()

val kHelpIcon: kotlin.UInt
    get() = TODO()

val kHelpIconResource: kotlin.Int
    get() = TODO()

val kHuge1BitMask: kotlin.UInt
    get() = TODO()

val kHuge32BitData: kotlin.UInt
    get() = TODO()

val kHuge4BitData: kotlin.UInt
    get() = TODO()

val kHuge8BitData: kotlin.UInt
    get() = TODO()

val kHuge8BitMask: kotlin.UInt
    get() = TODO()

val kIPFileServerIcon: kotlin.UInt
    get() = TODO()

val kISOLatin1MusicCDVariant: kotlin.UInt
    get() = TODO()

val kISOLatin1StandardVariant: kotlin.UInt
    get() = TODO()

val kISOLatinArabicExplicitOrderVariant: kotlin.UInt
    get() = TODO()

val kISOLatinArabicImplicitOrderVariant: kotlin.UInt
    get() = TODO()

val kISOLatinArabicVisualOrderVariant: kotlin.UInt
    get() = TODO()

val kISOLatinHebrewExplicitOrderVariant: kotlin.UInt
    get() = TODO()

val kISOLatinHebrewImplicitOrderVariant: kotlin.UInt
    get() = TODO()

val kISOLatinHebrewVisualOrderVariant: kotlin.UInt
    get() = TODO()

val kISSDownloadsFolderType: kotlin.UInt
    get() = TODO()

val kISpBufferToSmallErr: kotlin.Int
    get() = TODO()

val kISpDeviceActiveErr: kotlin.Int
    get() = TODO()

val kISpDeviceInactiveErr: kotlin.Int
    get() = TODO()

val kISpElementInListErr: kotlin.Int
    get() = TODO()

val kISpElementNotInListErr: kotlin.Int
    get() = TODO()

val kISpInternalErr: kotlin.Int
    get() = TODO()

val kISpListBusyErr: kotlin.Int
    get() = TODO()

val kISpSystemActiveErr: kotlin.Int
    get() = TODO()

val kISpSystemInactiveErr: kotlin.Int
    get() = TODO()

val kISpSystemListErr: kotlin.Int
    get() = TODO()

val kIconFamilyType: kotlin.UInt
    get() = TODO()

val kIconServices1024PixelDataARGB: kotlin.UInt
    get() = TODO()

val kIconServices128PixelDataARGB: kotlin.UInt
    get() = TODO()

val kIconServices16PixelDataARGB: kotlin.UInt
    get() = TODO()

val kIconServices256PixelDataARGB: kotlin.UInt
    get() = TODO()

val kIconServices32PixelDataARGB: kotlin.UInt
    get() = TODO()

val kIconServices48PixelDataARGB: kotlin.UInt
    get() = TODO()

val kIconServices512PixelDataARGB: kotlin.UInt
    get() = TODO()

val kIconServicesCatalogInfoMask: kotlin.UInt
    get() = TODO()

val kIconServicesNoBadgeFlag: kotlin.UInt
    get() = TODO()

val kIconServicesNormalUsageFlag: kotlin.UInt
    get() = TODO()

val kIconServicesUpdateIfNeededFlag: kotlin.UInt
    get() = TODO()

val kIdleKCEvent: kotlin.UInt
    get() = TODO()

val kIdleKCEventMask: kotlin.UInt
    get() = TODO()

val kIllegalClockValueErr: kotlin.Int
    get() = TODO()

val kIllegalInstructionException: kotlin.UInt
    get() = TODO()

val kInDeferredTaskMask: kotlin.UInt
    get() = TODO()

val kInNestedInterruptMask: kotlin.UInt
    get() = TODO()

val kInSecondaryIntHandlerMask: kotlin.UInt
    get() = TODO()

val kInUseErr: kotlin.Int
    get() = TODO()

val kInVBLTaskMask: kotlin.UInt
    get() = TODO()

val kIndexFilesFolderType: kotlin.UInt
    get() = TODO()

val kInputManagersFolderType: kotlin.UInt
    get() = TODO()

val kInputMethodsFolderType: kotlin.UInt
    get() = TODO()

val kInstallerLogsFolderType: kotlin.UInt
    get() = TODO()

val kInstallerReceiptsFolderType: kotlin.UInt
    get() = TODO()

val kInstructionBreakpointException: kotlin.UInt
    get() = TODO()

val kIntegerException: kotlin.UInt
    get() = TODO()

val kInternationResourcesIcon: kotlin.UInt
    get() = TODO()

val kInternationalResourcesIcon: kotlin.UInt
    get() = TODO()

val kInternetFolderIcon: kotlin.Int
    get() = TODO()

val kInternetFolderType: kotlin.UInt
    get() = TODO()

val kInternetLocationAFP: kotlin.UInt
    get() = TODO()

val kInternetLocationAppleShareIcon: kotlin.UInt
    get() = TODO()

val kInternetLocationAppleTalk: kotlin.UInt
    get() = TODO()

val kInternetLocationAppleTalkZoneIcon: kotlin.UInt
    get() = TODO()

val kInternetLocationCreator: kotlin.UInt
    get() = TODO()

val kInternetLocationFTP: kotlin.UInt
    get() = TODO()

val kInternetLocationFTPIcon: kotlin.UInt
    get() = TODO()

val kInternetLocationFile: kotlin.UInt
    get() = TODO()

val kInternetLocationFileIcon: kotlin.UInt
    get() = TODO()

val kInternetLocationGeneric: kotlin.UInt
    get() = TODO()

val kInternetLocationGenericIcon: kotlin.UInt
    get() = TODO()

val kInternetLocationHTTP: kotlin.UInt
    get() = TODO()

val kInternetLocationHTTPIcon: kotlin.UInt
    get() = TODO()

val kInternetLocationMail: kotlin.UInt
    get() = TODO()

val kInternetLocationMailIcon: kotlin.UInt
    get() = TODO()

val kInternetLocationNNTP: kotlin.UInt
    get() = TODO()

val kInternetLocationNSL: kotlin.UInt
    get() = TODO()

val kInternetLocationNSLNeighborhoodIcon: kotlin.UInt
    get() = TODO()

val kInternetLocationNewsIcon: kotlin.UInt
    get() = TODO()

val kInternetPasswordKCItemClass: kotlin.UInt
    get() = TODO()

val kInternetPlugInFolderIcon: kotlin.Int
    get() = TODO()

val kInternetPlugInFolderType: kotlin.UInt
    get() = TODO()

val kInternetSearchSitesFolderIcon: kotlin.Int
    get() = TODO()

val kInternetSearchSitesFolderType: kotlin.UInt
    get() = TODO()

val kInternetSitesFolderType: kotlin.UInt
    get() = TODO()

val kInvalidCSClientErr: kotlin.Int
    get() = TODO()

val kInvalidDeviceNumber: kotlin.Int
    get() = TODO()

val kInvalidRegEntryErr: kotlin.Int
    get() = TODO()

val kInvisibleKCItemAttr: kotlin.UInt
    get() = TODO()

val kIsAlias: kotlin.UInt
    get() = TODO()

val kIsInvisible: kotlin.UInt
    get() = TODO()

val kIsOnDesk: kotlin.UInt
    get() = TODO()

val kIsShared: kotlin.UInt
    get() = TODO()

val kIsStationery: kotlin.UInt
    get() = TODO()

val kIssuerKCItemAttr: kotlin.UInt
    get() = TODO()

val kIssuerURLKCItemAttr: kotlin.UInt
    get() = TODO()

val kItemList: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kJapaneseBasicVariant: kotlin.UInt
    get() = TODO()

val kJapanesePostScriptPrintVariant: kotlin.UInt
    get() = TODO()

val kJapanesePostScriptScrnVariant: kotlin.UInt
    get() = TODO()

val kJapaneseStandardVariant: kotlin.UInt
    get() = TODO()

val kJapaneseStdNoVerticalsVariant: kotlin.UInt
    get() = TODO()

val kJapaneseVertAtKuPlusTenVariant: kotlin.UInt
    get() = TODO()

val kKCAuthTypeDPA: kotlin.UInt
    get() = TODO()

val kKCAuthTypeDefault: kotlin.UInt
    get() = TODO()

val kKCAuthTypeHTTPDigest: kotlin.UInt
    get() = TODO()

val kKCAuthTypeMSN: kotlin.UInt
    get() = TODO()

val kKCAuthTypeNTLM: kotlin.UInt
    get() = TODO()

val kKCAuthTypeRPA: kotlin.UInt
    get() = TODO()

val kKCProtocolTypeAFP: kotlin.UInt
    get() = TODO()

val kKCProtocolTypeAppleTalk: kotlin.UInt
    get() = TODO()

val kKCProtocolTypeFTP: kotlin.UInt
    get() = TODO()

val kKCProtocolTypeFTPAccount: kotlin.UInt
    get() = TODO()

val kKCProtocolTypeHTTP: kotlin.UInt
    get() = TODO()

val kKCProtocolTypeIMAP: kotlin.UInt
    get() = TODO()

val kKCProtocolTypeIRC: kotlin.UInt
    get() = TODO()

val kKCProtocolTypeLDAP: kotlin.UInt
    get() = TODO()

val kKCProtocolTypeNNTP: kotlin.UInt
    get() = TODO()

val kKCProtocolTypePOP3: kotlin.UInt
    get() = TODO()

val kKCProtocolTypeSMTP: kotlin.UInt
    get() = TODO()

val kKCProtocolTypeSOCKS: kotlin.UInt
    get() = TODO()

val kKCProtocolTypeTelnet: kotlin.UInt
    get() = TODO()

val kKeepArrangedIcon: kotlin.UInt
    get() = TODO()

val kKernelExtensionsFolderType: kotlin.UInt
    get() = TODO()

val kKeyboardLayoutIcon: kotlin.UInt
    get() = TODO()

val kKeyboardLayoutsFolderType: kotlin.UInt
    get() = TODO()

val kKeychainFolderType: kotlin.UInt
    get() = TODO()

val kKeychainListChangedKCEvent: kotlin.UInt
    get() = TODO()

val kLSAcceptAllowLoginUI: platform.CoreServices.LSAcceptanceFlags /* = kotlin.UInt */
    get() = TODO()

val kLSAcceptDefault: platform.CoreServices.LSAcceptanceFlags /* = kotlin.UInt */
    get() = TODO()

val kLSAppDoesNotClaimTypeErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSAppDoesNotSupportSchemeWarning: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSAppInTrashErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSApplicationNotFoundErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSAttributeNotFoundErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSAttributeNotSettableErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSCannotSetInfoErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSDataErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSDataTooOldErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSDataUnavailableErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSExecutableIncorrectFormat: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSGarbageCollectionUnsupportedErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSHandlerOptionsDefault: platform.CoreServices.LSHandlerOptions /* = kotlin.UInt */
    get() = TODO()

val kLSHandlerOptionsIgnoreCreator: platform.CoreServices.LSHandlerOptions /* = kotlin.UInt */
    get() = TODO()

val kLSIncompatibleApplicationVersionErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSIncompatibleSystemVersionErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSItemContentType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSItemDisplayKind: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSItemDisplayName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSItemExtension: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSItemExtensionIsHidden: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSItemFileCreator: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSItemFileType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSItemInfoAppIsScriptable: platform.CoreServices.LSItemInfoFlags /* = kotlin.UInt */
    get() = TODO()

val kLSItemInfoAppPrefersClassic: platform.CoreServices.LSItemInfoFlags /* = kotlin.UInt */
    get() = TODO()

val kLSItemInfoAppPrefersNative: platform.CoreServices.LSItemInfoFlags /* = kotlin.UInt */
    get() = TODO()

val kLSItemInfoExtensionIsHidden: platform.CoreServices.LSItemInfoFlags /* = kotlin.UInt */
    get() = TODO()

val kLSItemInfoIsAliasFile: platform.CoreServices.LSItemInfoFlags /* = kotlin.UInt */
    get() = TODO()

val kLSItemInfoIsApplication: platform.CoreServices.LSItemInfoFlags /* = kotlin.UInt */
    get() = TODO()

val kLSItemInfoIsClassicApp: platform.CoreServices.LSItemInfoFlags /* = kotlin.UInt */
    get() = TODO()

val kLSItemInfoIsContainer: platform.CoreServices.LSItemInfoFlags /* = kotlin.UInt */
    get() = TODO()

val kLSItemInfoIsInvisible: platform.CoreServices.LSItemInfoFlags /* = kotlin.UInt */
    get() = TODO()

val kLSItemInfoIsNativeApp: platform.CoreServices.LSItemInfoFlags /* = kotlin.UInt */
    get() = TODO()

val kLSItemInfoIsPackage: platform.CoreServices.LSItemInfoFlags /* = kotlin.UInt */
    get() = TODO()

val kLSItemInfoIsPlainFile: platform.CoreServices.LSItemInfoFlags /* = kotlin.UInt */
    get() = TODO()

val kLSItemInfoIsSymlink: platform.CoreServices.LSItemInfoFlags /* = kotlin.UInt */
    get() = TODO()

val kLSItemInfoIsVolume: platform.CoreServices.LSItemInfoFlags /* = kotlin.UInt */
    get() = TODO()

val kLSItemIsInvisible: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSItemQuarantineProperties: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSItemRoleHandlerDisplayName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSLaunchAndDisplayErrors: platform.CoreServices.LSLaunchFlags /* = kotlin.UInt */
    get() = TODO()

val kLSLaunchAndHide: platform.CoreServices.LSLaunchFlags /* = kotlin.UInt */
    get() = TODO()

val kLSLaunchAndHideOthers: platform.CoreServices.LSLaunchFlags /* = kotlin.UInt */
    get() = TODO()

val kLSLaunchAndPrint: platform.CoreServices.LSLaunchFlags /* = kotlin.UInt */
    get() = TODO()

val kLSLaunchAsync: platform.CoreServices.LSLaunchFlags /* = kotlin.UInt */
    get() = TODO()

val kLSLaunchDefaults: platform.CoreServices.LSLaunchFlags /* = kotlin.UInt */
    get() = TODO()

val kLSLaunchDontAddToRecents: platform.CoreServices.LSLaunchFlags /* = kotlin.UInt */
    get() = TODO()

val kLSLaunchDontSwitch: platform.CoreServices.LSLaunchFlags /* = kotlin.UInt */
    get() = TODO()

val kLSLaunchHasUntrustedContents: kotlin.UInt
    get() = TODO()

val kLSLaunchInClassic: kotlin.UInt
    get() = TODO()

val kLSLaunchInProgressErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSLaunchInhibitBGOnly: kotlin.UInt
    get() = TODO()

val kLSLaunchNewInstance: platform.CoreServices.LSLaunchFlags /* = kotlin.UInt */
    get() = TODO()

val kLSLaunchNoParams: kotlin.UInt
    get() = TODO()

val kLSLaunchStartClassic: kotlin.UInt
    get() = TODO()

val kLSMultipleSessionsNotSupportedErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSNoClassicEnvironmentErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSNoExecutableErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSNoLaunchPermissionErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSNoRegistrationInfoErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSNoRosettaEnvironmentErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSNotAnApplicationErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSNotInitializedErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSNotRegisteredErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSQuarantineAgentBundleIdentifierKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSQuarantineAgentNameKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSQuarantineDataURLKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSQuarantineOriginURLKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSQuarantineTimeStampKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSQuarantineTypeCalendarEventAttachment: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSQuarantineTypeEmailAttachment: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSQuarantineTypeInstantMessageAttachment: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSQuarantineTypeKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSQuarantineTypeOtherAttachment: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSQuarantineTypeOtherDownload: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSQuarantineTypeWebDownload: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kLSRequestAllFlags: platform.CoreServices.LSRequestedInfo /* = kotlin.UInt */
    get() = TODO()

val kLSRequestAllInfo: platform.CoreServices.LSRequestedInfo /* = kotlin.UInt */
    get() = TODO()

val kLSRequestAppTypeFlags: platform.CoreServices.LSRequestedInfo /* = kotlin.UInt */
    get() = TODO()

val kLSRequestBasicFlagsOnly: platform.CoreServices.LSRequestedInfo /* = kotlin.UInt */
    get() = TODO()

val kLSRequestExtension: platform.CoreServices.LSRequestedInfo /* = kotlin.UInt */
    get() = TODO()

val kLSRequestExtensionFlagsOnly: platform.CoreServices.LSRequestedInfo /* = kotlin.UInt */
    get() = TODO()

val kLSRequestIconAndKind: platform.CoreServices.LSRequestedInfo /* = kotlin.UInt */
    get() = TODO()

val kLSRequestTypeCreator: platform.CoreServices.LSRequestedInfo /* = kotlin.UInt */
    get() = TODO()

val kLSRolesAll: platform.CoreServices.LSRolesMask /* = kotlin.UInt */
    get() = TODO()

val kLSRolesEditor: platform.CoreServices.LSRolesMask /* = kotlin.UInt */
    get() = TODO()

val kLSRolesNone: platform.CoreServices.LSRolesMask /* = kotlin.UInt */
    get() = TODO()

val kLSRolesShell: platform.CoreServices.LSRolesMask /* = kotlin.UInt */
    get() = TODO()

val kLSRolesViewer: platform.CoreServices.LSRolesMask /* = kotlin.UInt */
    get() = TODO()

val kLSServerCommunicationErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSSharedFileListDoNotMountVolumes: kotlin.UInt
    get() = TODO()

var kLSSharedFileListFavoriteItems: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kLSSharedFileListFavoriteVolumes: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kLSSharedFileListGlobalLoginItems: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kLSSharedFileListItemBeforeFirst: platform.CoreServices.LSSharedFileListItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListItemRef>? */
    get() = TODO()
    set(value: platform.CoreServices.LSSharedFileListItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListItemRef>? */) = TODO()

var kLSSharedFileListItemHidden: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kLSSharedFileListItemLast: platform.CoreServices.LSSharedFileListItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListItemRef>? */
    get() = TODO()
    set(value: platform.CoreServices.LSSharedFileListItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListItemRef>? */) = TODO()

var kLSSharedFileListLoginItemHidden: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

val kLSSharedFileListNoUserInteraction: kotlin.UInt
    get() = TODO()

var kLSSharedFileListRecentApplicationItems: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kLSSharedFileListRecentDocumentItems: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kLSSharedFileListRecentItemsMaxAmount: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kLSSharedFileListRecentServerItems: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kLSSharedFileListSessionLoginItems: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kLSSharedFileListVolumesComputerVisible: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kLSSharedFileListVolumesIDiskVisible: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kLSSharedFileListVolumesNetworkVisible: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

val kLSUnknownCreator: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kLSUnknownErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLSUnknownType: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kLSUnknownTypeErr: platform.darwin.OSStatus /* = kotlin.Int */
    get() = TODO()

val kLabelKCItemAttr: kotlin.UInt
    get() = TODO()

val kLarge1BitMask: kotlin.UInt
    get() = TODO()

val kLarge32BitData: kotlin.UInt
    get() = TODO()

val kLarge4BitData: kotlin.UInt
    get() = TODO()

val kLarge4BitIconSize: kotlin.UInt
    get() = TODO()

val kLarge8BitData: kotlin.UInt
    get() = TODO()

val kLarge8BitIconSize: kotlin.UInt
    get() = TODO()

val kLarge8BitMask: kotlin.UInt
    get() = TODO()

val kLargeIconSize: kotlin.UInt
    get() = TODO()

val kLastDomainConstant: kotlin.Int
    get() = TODO()

val kLastMagicBusyFiletype: kotlin.UInt
    get() = TODO()

val kLaunchToGetTerminology: kotlin.UInt
    get() = TODO()

val kLauncherItemsFolderType: kotlin.UInt
    get() = TODO()

val kLeftToRight: kotlin.UInt
    get() = TODO()

val kLibraryAssistantsFolderType: kotlin.UInt
    get() = TODO()

val kLocalDomain: kotlin.Int
    get() = TODO()

val kLocaleAllPartsMask: kotlin.UInt
    get() = TODO()

val kLocaleAndVariantNameMask: kotlin.UInt
    get() = TODO()

val kLocaleLanguageMask: kotlin.UInt
    get() = TODO()

val kLocaleLanguageVariantMask: kotlin.UInt
    get() = TODO()

val kLocaleNameMask: kotlin.UInt
    get() = TODO()

val kLocaleOperationVariantNameMask: kotlin.UInt
    get() = TODO()

val kLocaleRegionMask: kotlin.UInt
    get() = TODO()

val kLocaleRegionVariantMask: kotlin.UInt
    get() = TODO()

val kLocaleScriptMask: kotlin.UInt
    get() = TODO()

val kLocaleScriptVariantMask: kotlin.UInt
    get() = TODO()

val kLocalesBufferTooSmallErr: kotlin.Int
    get() = TODO()

val kLocalesDefaultDisplayStatus: kotlin.Int
    get() = TODO()

val kLocalesFolderIcon: kotlin.Int
    get() = TODO()

val kLocalesFolderType: kotlin.UInt
    get() = TODO()

val kLocalesTableFormatErr: kotlin.Int
    get() = TODO()

val kLockKCEvent: kotlin.UInt
    get() = TODO()

val kLockKCEventMask: kotlin.UInt
    get() = TODO()

val kLockedBadgeIcon: kotlin.UInt
    get() = TODO()

val kLockedIcon: kotlin.UInt
    get() = TODO()

val kLogsFolderType: kotlin.UInt
    get() = TODO()

val kM68kISA: kotlin.UInt
    get() = TODO()

val kMDAttributeAllValues: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDAttributeDisplayValues: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDAttributeMultiValued: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDAttributeName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDAttributeReadOnlyValues: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDAttributeType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDExporterAvaliable: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemAcquisitionMake: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemAcquisitionModel: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemAlbum: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemAltitude: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemAperture: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemAppleLoopDescriptors: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemAppleLoopsKeyFilterType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemAppleLoopsLoopMode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemAppleLoopsRootKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemApplicationCategories: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemAttributeChangeDate: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemAudiences: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemAudioBitRate: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemAudioChannelCount: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemAudioEncodingApplication: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemAudioSampleRate: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemAudioTrackNumber: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemAuthorAddresses: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemAuthorEmailAddresses: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemAuthors: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemBitsPerSample: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemCFBundleIdentifier: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemCameraOwner: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemCity: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemCodecs: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemColorSpace: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemComment: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemComposer: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemContactKeywords: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemContentCreationDate: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemContentModificationDate: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemContentType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemContentTypeTree: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemContributors: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemCopyright: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemCountry: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemCoverage: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemCreator: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemDateAdded: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemDeliveryType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemDescription: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemDirector: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemDisplayName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemDownloadedDate: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemDueDate: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemDurationSeconds: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemEXIFGPSVersion: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemEXIFVersion: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemEditors: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemEmailAddresses: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemEncodingApplications: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemExecutableArchitectures: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemExecutablePlatform: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemExposureMode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemExposureProgram: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemExposureTimeSeconds: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemExposureTimeString: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFNumber: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFSContentChangeDate: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFSCreationDate: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFSExists: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFSHasCustomIcon: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFSInvisible: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFSIsExtensionHidden: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFSIsReadable: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFSIsStationery: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFSIsWriteable: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFSLabel: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFSName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFSNodeCount: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFSOwnerGroupID: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFSOwnerUserID: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFSSize: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFinderComment: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFlashOnOff: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFocalLength: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFocalLength35mm: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemFonts: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemGPSAreaInformation: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemGPSDOP: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemGPSDateStamp: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemGPSDestBearing: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemGPSDestDistance: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemGPSDestLatitude: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemGPSDestLongitude: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemGPSDifferental: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemGPSMapDatum: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemGPSMeasureMode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemGPSProcessingMethod: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemGPSStatus: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemGPSTrack: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemGenre: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemHTMLContent: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemHasAlphaChannel: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemHeadline: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemISOSpeed: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemIdentifier: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemImageDirection: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemInformation: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemInstantMessageAddresses: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemInstructions: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemIsApplicationManaged: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemIsGeneralMIDISequence: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemIsLikelyJunk: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemKeySignature: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemKeywords: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemKind: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemLabelID: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemLabelIcon: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemLabelKind: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemLabelUUID: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemLanguages: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemLastUsedDate: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemLatitude: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemLayerNames: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemLensModel: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemLongitude: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemLyricist: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemMaxAperture: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemMediaTypes: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemMeteringMode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemMusicalGenre: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemMusicalInstrumentCategory: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemMusicalInstrumentName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemNamedLocation: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemNumberOfPages: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemOrganizations: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemOrientation: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemOriginalFormat: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemOriginalSource: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemPageHeight: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemPageWidth: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemParticipants: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemPath: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemPerformers: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemPhoneNumbers: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemPixelCount: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemPixelHeight: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemPixelWidth: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemProducer: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemProfileName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemProjects: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemPublishers: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemRecipientAddresses: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemRecipientEmailAddresses: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemRecipients: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemRecordingDate: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemRecordingYear: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemRedEyeOnOff: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemResolutionHeightDPI: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemResolutionWidthDPI: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemRights: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemSecurityMethod: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemSpeed: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemStarRating: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemStateOrProvince: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemStreamable: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemSubject: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemSupportFileType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemTempo: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemTextContent: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemTheme: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemTimeSignature: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemTimestamp: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemTitle: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemTotalBitRate: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemURL: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemVersion: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemVideoBitRate: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemWhereFroms: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDItemWhiteBalance: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDLabelAddedNotification: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

var kMDLabelBundleURL: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

val kMDLabelChangedNotification: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

var kMDLabelContentChangeDate: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kMDLabelDisplayName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kMDLabelIconData: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kMDLabelIconUUID: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kMDLabelIsMutuallyExclusiveSetMember: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kMDLabelKind: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kMDLabelKindIsMutuallyExclusiveSetKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kMDLabelKindVisibilityKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

val kMDLabelRemovedNotification: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

var kMDLabelSetsFinderColor: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kMDLabelUUID: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kMDLabelVisibility: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kMDPrivateVisibility: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kMDPublicVisibility: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

val kMDQueryAllowFSTranslation: platform.CoreServices.MDQueryOptionFlags /* = kotlin.UInt */
    get() = TODO()

val kMDQueryDidFinishNotification: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDQueryDidUpdateNotification: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDQueryProgressNotification: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDQueryResultContentRelevance: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDQueryReverseSortOrderFlag: platform.CoreServices.MDQuerySortOptionFlags /* = kotlin.UInt */
    get() = TODO()

val kMDQueryScopeAllIndexed: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDQueryScopeComputer: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDQueryScopeComputerIndexed: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDQueryScopeHome: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDQueryScopeNetwork: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDQueryScopeNetworkIndexed: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDQuerySynchronous: platform.CoreServices.MDQueryOptionFlags /* = kotlin.UInt */
    get() = TODO()

val kMDQueryUpdateAddedItems: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDQueryUpdateChangedItems: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDQueryUpdateRemovedItems: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kMDQueryWantsUpdates: platform.CoreServices.MDQueryOptionFlags /* = kotlin.UInt */
    get() = TODO()

val kMIDIDriversFolderType: kotlin.UInt
    get() = TODO()

val kMPAddressSpaceInfoVersion: kotlin.UInt
    get() = TODO()

val kMPAllocate1024ByteAligned: kotlin.UInt
    get() = TODO()

val kMPAllocate16ByteAligned: kotlin.UInt
    get() = TODO()

val kMPAllocate32ByteAligned: kotlin.UInt
    get() = TODO()

val kMPAllocate4096ByteAligned: kotlin.UInt
    get() = TODO()

val kMPAllocate8ByteAligned: kotlin.UInt
    get() = TODO()

val kMPAllocateAltiVecAligned: kotlin.UInt
    get() = TODO()

val kMPAllocateClearMask: kotlin.UInt
    get() = TODO()

val kMPAllocateDefaultAligned: kotlin.UInt
    get() = TODO()

val kMPAllocateGloballyMask: kotlin.UInt
    get() = TODO()

val kMPAllocateInterlockAligned: kotlin.UInt
    get() = TODO()

val kMPAllocateMaxAlignment: kotlin.UInt
    get() = TODO()

val kMPAllocateNoCreateMask: kotlin.UInt
    get() = TODO()

val kMPAllocateNoGrowthMask: kotlin.UInt
    get() = TODO()

val kMPAllocateResidentMask: kotlin.UInt
    get() = TODO()

val kMPAllocateVMPageAligned: kotlin.UInt
    get() = TODO()

val kMPAllocateVMXAligned: kotlin.UInt
    get() = TODO()

val kMPAnyRemoteContext: kotlin.UInt
    get() = TODO()

val kMPAsyncInterruptRemoteContext: kotlin.UInt
    get() = TODO()

val kMPBlueBlockingErr: kotlin.Int
    get() = TODO()

val kMPCreateTaskNotDebuggableMask: kotlin.UInt
    get() = TODO()

val kMPCreateTaskSuspendedMask: kotlin.UInt
    get() = TODO()

val kMPCreateTaskTakesAllExceptionsMask: kotlin.UInt
    get() = TODO()

val kMPCreateTaskValidOptionsMask: kotlin.UInt
    get() = TODO()

val kMPCriticalRegionInfoVersion: kotlin.UInt
    get() = TODO()

val kMPDeletedErr: kotlin.Int
    get() = TODO()

val kMPEventInfoVersion: kotlin.UInt
    get() = TODO()

val kMPHighLevelDebugger: kotlin.UInt
    get() = TODO()

val kMPInsufficientResourcesErr: kotlin.Int
    get() = TODO()

val kMPInterruptRemoteContext: kotlin.UInt
    get() = TODO()

val kMPInvalidIDErr: kotlin.Int
    get() = TODO()

val kMPIterationEndErr: kotlin.Int
    get() = TODO()

val kMPLowLevelDebugger: kotlin.UInt
    get() = TODO()

val kMPMaxAllocSize: kotlin.UInt
    get() = TODO()

val kMPMidLevelDebugger: kotlin.UInt
    get() = TODO()

val kMPNanokernelNeedsMemoryErr: kotlin.Int
    get() = TODO()

val kMPNoID: kotlin.UInt
    get() = TODO()

val kMPNotificationInfoVersion: kotlin.UInt
    get() = TODO()

val kMPOwningProcessRemoteContext: kotlin.UInt
    get() = TODO()

val kMPPreserveTimerIDMask: kotlin.UInt
    get() = TODO()

val kMPPrivilegedErr: kotlin.Int
    get() = TODO()

val kMPProcessCreatedErr: kotlin.Int
    get() = TODO()

val kMPProcessTerminatedErr: kotlin.Int
    get() = TODO()

val kMPQueueInfoVersion: kotlin.UInt
    get() = TODO()

val kMPSemaphoreInfoVersion: kotlin.UInt
    get() = TODO()

val kMPTaskAbortedErr: kotlin.Int
    get() = TODO()

val kMPTaskBlocked: kotlin.UInt
    get() = TODO()

val kMPTaskBlockedErr: kotlin.Int
    get() = TODO()

val kMPTaskCreatedErr: kotlin.Int
    get() = TODO()

val kMPTaskInfoVersion: kotlin.UInt
    get() = TODO()

val kMPTaskPropagate: kotlin.UInt
    get() = TODO()

val kMPTaskPropagateMask: kotlin.UInt
    get() = TODO()

val kMPTaskReady: kotlin.UInt
    get() = TODO()

val kMPTaskResumeBranch: kotlin.UInt
    get() = TODO()

val kMPTaskResumeBranchMask: kotlin.UInt
    get() = TODO()

val kMPTaskResumeMask: kotlin.UInt
    get() = TODO()

val kMPTaskResumeStep: kotlin.UInt
    get() = TODO()

val kMPTaskResumeStepMask: kotlin.UInt
    get() = TODO()

val kMPTaskRunning: kotlin.UInt
    get() = TODO()

val kMPTaskState32BitMemoryException: kotlin.UInt
    get() = TODO()

val kMPTaskStateFPU: kotlin.UInt
    get() = TODO()

val kMPTaskStateMachine: kotlin.UInt
    get() = TODO()

val kMPTaskStateRegisters: kotlin.UInt
    get() = TODO()

val kMPTaskStateTaskInfo: kotlin.UInt
    get() = TODO()

val kMPTaskStateVectors: kotlin.UInt
    get() = TODO()

val kMPTaskStoppedErr: kotlin.Int
    get() = TODO()

val kMPTimeIsDeltaMask: kotlin.UInt
    get() = TODO()

val kMPTimeIsDurationMask: kotlin.UInt
    get() = TODO()

val kMPTimeoutErr: kotlin.Int
    get() = TODO()

const val kMPUnresolvedCFragSymbolAddress: kotlin.Int = 0

val kMacArabicAlBayanVariant: kotlin.UInt
    get() = TODO()

val kMacArabicStandardVariant: kotlin.UInt
    get() = TODO()

val kMacArabicThuluthVariant: kotlin.UInt
    get() = TODO()

val kMacArabicTrueTypeVariant: kotlin.UInt
    get() = TODO()

val kMacCroatianCurrencySignVariant: kotlin.UInt
    get() = TODO()

val kMacCroatianDefaultVariant: kotlin.UInt
    get() = TODO()

val kMacCroatianEuroSignVariant: kotlin.UInt
    get() = TODO()

val kMacCyrillicCurrSignStdVariant: kotlin.UInt
    get() = TODO()

val kMacCyrillicCurrSignUkrVariant: kotlin.UInt
    get() = TODO()

val kMacCyrillicDefaultVariant: kotlin.UInt
    get() = TODO()

val kMacCyrillicEuroSignVariant: kotlin.UInt
    get() = TODO()

val kMacFarsiStandardVariant: kotlin.UInt
    get() = TODO()

val kMacFarsiTrueTypeVariant: kotlin.UInt
    get() = TODO()

val kMacGreekDefaultVariant: kotlin.UInt
    get() = TODO()

val kMacGreekEuroSignVariant: kotlin.UInt
    get() = TODO()

val kMacGreekNoEuroSignVariant: kotlin.UInt
    get() = TODO()

val kMacHebrewFigureSpaceVariant: kotlin.UInt
    get() = TODO()

val kMacHebrewStandardVariant: kotlin.UInt
    get() = TODO()

val kMacIcelandicStandardVariant: kotlin.UInt
    get() = TODO()

val kMacIcelandicStdCurrSignVariant: kotlin.UInt
    get() = TODO()

val kMacIcelandicStdDefaultVariant: kotlin.UInt
    get() = TODO()

val kMacIcelandicStdEuroSignVariant: kotlin.UInt
    get() = TODO()

val kMacIcelandicTTCurrSignVariant: kotlin.UInt
    get() = TODO()

val kMacIcelandicTTDefaultVariant: kotlin.UInt
    get() = TODO()

val kMacIcelandicTTEuroSignVariant: kotlin.UInt
    get() = TODO()

val kMacIcelandicTrueTypeVariant: kotlin.UInt
    get() = TODO()

val kMacJapaneseBasicVariant: kotlin.UInt
    get() = TODO()

val kMacJapanesePostScriptPrintVariant: kotlin.UInt
    get() = TODO()

val kMacJapanesePostScriptScrnVariant: kotlin.UInt
    get() = TODO()

val kMacJapaneseStandardVariant: kotlin.UInt
    get() = TODO()

val kMacJapaneseStdNoVerticalsVariant: kotlin.UInt
    get() = TODO()

val kMacJapaneseVertAtKuPlusTenVariant: kotlin.UInt
    get() = TODO()

val kMacMemoryMaximumMemoryManagerBlockSize: kotlin.UInt
    get() = TODO()

val kMacOSReadMeFolderIcon: kotlin.Int
    get() = TODO()

val kMacOSReadMesFolderType: kotlin.UInt
    get() = TODO()

val kMacRomanCurrencySignVariant: kotlin.UInt
    get() = TODO()

val kMacRomanDefaultVariant: kotlin.UInt
    get() = TODO()

val kMacRomanEuroSignVariant: kotlin.UInt
    get() = TODO()

val kMacRomanLatin1CroatianVariant: kotlin.UInt
    get() = TODO()

val kMacRomanLatin1DefaultVariant: kotlin.UInt
    get() = TODO()

val kMacRomanLatin1IcelandicVariant: kotlin.UInt
    get() = TODO()

val kMacRomanLatin1RomanianVariant: kotlin.UInt
    get() = TODO()

val kMacRomanLatin1StandardVariant: kotlin.UInt
    get() = TODO()

val kMacRomanLatin1TurkishVariant: kotlin.UInt
    get() = TODO()

val kMacRomanStandardVariant: kotlin.UInt
    get() = TODO()

val kMacRomanianCurrencySignVariant: kotlin.UInt
    get() = TODO()

val kMacRomanianDefaultVariant: kotlin.UInt
    get() = TODO()

val kMacRomanianEuroSignVariant: kotlin.UInt
    get() = TODO()

val kMacVT100CurrencySignVariant: kotlin.UInt
    get() = TODO()

val kMacVT100DefaultVariant: kotlin.UInt
    get() = TODO()

val kMacVT100EuroSignVariant: kotlin.UInt
    get() = TODO()

val kMachineNameStrID: kotlin.Int
    get() = TODO()

val kMagicBusyCreationDate: kotlin.UInt
    get() = TODO()

val kMagicTemporaryItemsFolderType: kotlin.UInt
    get() = TODO()

val kManagedItemsFolderType: kotlin.UInt
    get() = TODO()

val kMaximumBlocksIn4GB: kotlin.UInt
    get() = TODO()

val kMini1BitMask: kotlin.UInt
    get() = TODO()

val kMini4BitData: kotlin.UInt
    get() = TODO()

val kMini8BitData: kotlin.UInt
    get() = TODO()

val kModDateKCItemAttr: kotlin.UInt
    get() = TODO()

val kModemOutOfMemory: kotlin.Int
    get() = TODO()

val kModemPreferencesMissing: kotlin.Int
    get() = TODO()

val kModemScriptMissing: kotlin.Int
    get() = TODO()

val kModemScriptsFolderType: kotlin.UInt
    get() = TODO()

val kMountedBadgeIcon: kotlin.UInt
    get() = TODO()

val kMountedFolderAliasType: kotlin.UInt
    get() = TODO()

val kMountedFolderIcon: kotlin.UInt
    get() = TODO()

val kMountedFolderIconResource: kotlin.Int
    get() = TODO()

val kMovieDocumentsFolderType: kotlin.UInt
    get() = TODO()

val kMultiprocessingFolderType: kotlin.UInt
    get() = TODO()

val kMusicDocumentsFolderType: kotlin.UInt
    get() = TODO()

val kNSL68kContextNotSupported: kotlin.Int
    get() = TODO()

val kNSLBadClientInfoPtr: kotlin.Int
    get() = TODO()

val kNSLBadDataTypeErr: kotlin.Int
    get() = TODO()

val kNSLBadNetConnection: kotlin.Int
    get() = TODO()

val kNSLBadProtocolTypeErr: kotlin.Int
    get() = TODO()

val kNSLBadReferenceErr: kotlin.Int
    get() = TODO()

val kNSLBadServiceTypeErr: kotlin.Int
    get() = TODO()

val kNSLBadURLSyntax: kotlin.Int
    get() = TODO()

val kNSLBufferTooSmallForData: kotlin.Int
    get() = TODO()

val kNSLCannotContinueLookup: kotlin.Int
    get() = TODO()

val kNSLErrNullPtrError: kotlin.Int
    get() = TODO()

val kNSLInitializationFailed: kotlin.Int
    get() = TODO()

val kNSLInsufficientOTVer: kotlin.Int
    get() = TODO()

val kNSLInsufficientSysVer: kotlin.Int
    get() = TODO()

val kNSLInvalidPluginSpec: kotlin.Int
    get() = TODO()

val kNSLNoCarbonLib: kotlin.Int
    get() = TODO()

val kNSLNoContextAvailable: kotlin.Int
    get() = TODO()

val kNSLNoElementsInList: kotlin.Int
    get() = TODO()

val kNSLNoPluginsForSearch: kotlin.Int
    get() = TODO()

val kNSLNoPluginsFound: kotlin.Int
    get() = TODO()

val kNSLNoSupportForService: kotlin.Int
    get() = TODO()

val kNSLNotImplementedYet: kotlin.Int
    get() = TODO()

val kNSLNotInitialized: kotlin.Int
    get() = TODO()

val kNSLNullListPtr: kotlin.Int
    get() = TODO()

val kNSLNullNeighborhoodPtr: kotlin.Int
    get() = TODO()

val kNSLPluginLoadFailed: kotlin.Int
    get() = TODO()

val kNSLRequestBufferAlreadyInList: kotlin.Int
    get() = TODO()

val kNSLSchedulerError: kotlin.Int
    get() = TODO()

val kNSLSearchAlreadyInProgress: kotlin.Int
    get() = TODO()

val kNSLSomePluginsFailedToLoad: kotlin.Int
    get() = TODO()

val kNSLUILibraryNotAvailable: kotlin.Int
    get() = TODO()

val kNSpAddPlayerFailedErr: kotlin.Int
    get() = TODO()

val kNSpAddressInUseErr: kotlin.Int
    get() = TODO()

val kNSpAlreadyAdvertisingErr: kotlin.Int
    get() = TODO()

val kNSpAlreadyInitializedErr: kotlin.Int
    get() = TODO()

val kNSpCantBlockErr: kotlin.Int
    get() = TODO()

val kNSpConnectFailedErr: kotlin.Int
    get() = TODO()

val kNSpCreateGroupFailedErr: kotlin.Int
    get() = TODO()

val kNSpFeatureNotImplementedErr: kotlin.Int
    get() = TODO()

val kNSpFreeQExhaustedErr: kotlin.Int
    get() = TODO()

val kNSpGameTerminatedErr: kotlin.Int
    get() = TODO()

val kNSpHostFailedErr: kotlin.Int
    get() = TODO()

val kNSpInitializationFailedErr: kotlin.Int
    get() = TODO()

val kNSpInvalidAddressErr: kotlin.Int
    get() = TODO()

val kNSpInvalidDefinitionErr: kotlin.Int
    get() = TODO()

val kNSpInvalidGameRefErr: kotlin.Int
    get() = TODO()

val kNSpInvalidGroupIDErr: kotlin.Int
    get() = TODO()

val kNSpInvalidParameterErr: kotlin.Int
    get() = TODO()

val kNSpInvalidPlayerIDErr: kotlin.Int
    get() = TODO()

val kNSpInvalidProtocolListErr: kotlin.Int
    get() = TODO()

val kNSpInvalidProtocolRefErr: kotlin.Int
    get() = TODO()

val kNSpJoinFailedErr: kotlin.Int
    get() = TODO()

val kNSpMemAllocationErr: kotlin.Int
    get() = TODO()

val kNSpMessageTooBigErr: kotlin.Int
    get() = TODO()

val kNSpNameRequiredErr: kotlin.Int
    get() = TODO()

val kNSpNoGroupsErr: kotlin.Int
    get() = TODO()

val kNSpNoHostVolunteersErr: kotlin.Int
    get() = TODO()

val kNSpNoPlayersErr: kotlin.Int
    get() = TODO()

val kNSpNotAdvertisingErr: kotlin.Int
    get() = TODO()

val kNSpOTNotPresentErr: kotlin.Int
    get() = TODO()

val kNSpOTVersionTooOldErr: kotlin.Int
    get() = TODO()

val kNSpPipeFullErr: kotlin.Int
    get() = TODO()

val kNSpProtocolNotAvailableErr: kotlin.Int
    get() = TODO()

val kNSpRemovePlayerFailedErr: kotlin.Int
    get() = TODO()

val kNSpSendFailedErr: kotlin.Int
    get() = TODO()

val kNSpTimeoutErr: kotlin.Int
    get() = TODO()

val kNSpTopologyNotSupportedErr: kotlin.Int
    get() = TODO()

val kNameLocked: kotlin.UInt
    get() = TODO()

val kNavCustomControlMessageFailedErr: kotlin.Int
    get() = TODO()

val kNavInvalidCustomControlMessageErr: kotlin.Int
    get() = TODO()

val kNavInvalidSystemConfigErr: kotlin.Int
    get() = TODO()

val kNavMissingKindStringErr: kotlin.Int
    get() = TODO()

val kNavWrongDialogClassErr: kotlin.Int
    get() = TODO()

val kNavWrongDialogStateErr: kotlin.Int
    get() = TODO()

val kNegativeKCItemAttr: kotlin.UInt
    get() = TODO()

val kNetworkDomain: kotlin.Int
    get() = TODO()

val kNewDebugHeap: kotlin.UInt
    get() = TODO()

val kNewSizeParameter: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kNewStyleHeap: kotlin.UInt
    get() = TODO()

val kNewSuspend: kotlin.UInt
    get() = TODO()

val kNextBody: kotlin.UInt
    get() = TODO()

val kNoByteCode: kotlin.UInt
    get() = TODO()

val kNoCardBusCISErr: kotlin.Int
    get() = TODO()

val kNoCardEnablersFoundErr: kotlin.Int
    get() = TODO()

val kNoCardErr: kotlin.Int
    get() = TODO()

val kNoCardSevicesSocketsErr: kotlin.Int
    get() = TODO()

val kNoClientTableErr: kotlin.Int
    get() = TODO()

val kNoCompatibleNameErr: kotlin.Int
    get() = TODO()

val kNoEnablerForCardErr: kotlin.Int
    get() = TODO()

val kNoFilesIcon: kotlin.UInt
    get() = TODO()

val kNoFolderIcon: kotlin.UInt
    get() = TODO()

val kNoIOWindowRequestedErr: kotlin.Int
    get() = TODO()

val kNoMoreInterruptSlotsErr: kotlin.Int
    get() = TODO()

val kNoMoreItemsErr: kotlin.Int
    get() = TODO()

val kNoMoreTimerClientsErr: kotlin.Int
    get() = TODO()

val kNoSuchPowerSource: kotlin.Int
    get() = TODO()

val kNoThreadID: kotlin.UInt
    get() = TODO()

val kNoTimeOut: kotlin.Int
    get() = TODO()

val kNoUserAuthentication: kotlin.UInt
    get() = TODO()

val kNoWriteIcon: kotlin.UInt
    get() = TODO()

val kNoneKCStopOn: kotlin.UInt
    get() = TODO()

val kNotPaged: kotlin.UInt
    get() = TODO()

val kNotReadyErr: kotlin.Int
    get() = TODO()

val kNotZVCapableErr: kotlin.Int
    get() = TODO()

val kOSIZCodeInSharedLibraries: kotlin.UInt
    get() = TODO()

val kOSIZDontOpenResourceFile: kotlin.UInt
    get() = TODO()

val kOSIZOpenWithReadPermission: kotlin.UInt
    get() = TODO()

val kOSIZdontAcceptRemoteEvents: kotlin.UInt
    get() = TODO()

val kOTAccessErr: kotlin.Int
    get() = TODO()

val kOTAddressBusyErr: kotlin.Int
    get() = TODO()

val kOTBadAddressErr: kotlin.Int
    get() = TODO()

val kOTBadConfigurationErr: kotlin.Int
    get() = TODO()

val kOTBadDataErr: kotlin.Int
    get() = TODO()

val kOTBadFlagErr: kotlin.Int
    get() = TODO()

val kOTBadNameErr: kotlin.Int
    get() = TODO()

val kOTBadOptionErr: kotlin.Int
    get() = TODO()

val kOTBadQLenErr: kotlin.Int
    get() = TODO()

val kOTBadReferenceErr: kotlin.Int
    get() = TODO()

val kOTBadSequenceErr: kotlin.Int
    get() = TODO()

val kOTBadSyncErr: kotlin.Int
    get() = TODO()

val kOTBufferOverflowErr: kotlin.Int
    get() = TODO()

val kOTCanceledErr: kotlin.Int
    get() = TODO()

val kOTClientNotInittedErr: kotlin.Int
    get() = TODO()

val kOTConfigurationChangedErr: kotlin.Int
    get() = TODO()

val kOTDuplicateFoundErr: kotlin.Int
    get() = TODO()

val kOTFlowErr: kotlin.Int
    get() = TODO()

val kOTIndOutErr: kotlin.Int
    get() = TODO()

val kOTLookErr: kotlin.Int
    get() = TODO()

val kOTNoAddressErr: kotlin.Int
    get() = TODO()

val kOTNoDataErr: kotlin.Int
    get() = TODO()

val kOTNoDisconnectErr: kotlin.Int
    get() = TODO()

val kOTNoError: kotlin.Int
    get() = TODO()

val kOTNoReleaseErr: kotlin.Int
    get() = TODO()

val kOTNoStructureTypeErr: kotlin.Int
    get() = TODO()

val kOTNoUDErrErr: kotlin.Int
    get() = TODO()

val kOTNotFoundErr: kotlin.Int
    get() = TODO()

val kOTNotSupportedErr: kotlin.Int
    get() = TODO()

val kOTOutOfMemoryErr: kotlin.Int
    get() = TODO()

val kOTOutStateErr: kotlin.Int
    get() = TODO()

val kOTPortHasDiedErr: kotlin.Int
    get() = TODO()

val kOTPortLostConnection: kotlin.Int
    get() = TODO()

val kOTPortWasEjectedErr: kotlin.Int
    get() = TODO()

val kOTProtocolErr: kotlin.Int
    get() = TODO()

val kOTProviderMismatchErr: kotlin.Int
    get() = TODO()

val kOTQFullErr: kotlin.Int
    get() = TODO()

val kOTResAddressErr: kotlin.Int
    get() = TODO()

val kOTResQLenErr: kotlin.Int
    get() = TODO()

val kOTStateChangeErr: kotlin.Int
    get() = TODO()

val kOTSysErrorErr: kotlin.Int
    get() = TODO()

val kOTUserRequestedErr: kotlin.Int
    get() = TODO()

val kOffset2Pos: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kOld68kRTA: kotlin.UInt
    get() = TODO()

val kOnAppropriateDisk: kotlin.Int
    get() = TODO()

val kOnSystemDisk: kotlin.Int
    get() = TODO()

val kOneByteCode: kotlin.UInt
    get() = TODO()

val kOpaqueAddressSpaceID: kotlin.UInt
    get() = TODO()

val kOpaqueAnyID: kotlin.UInt
    get() = TODO()

val kOpaqueAreaID: kotlin.UInt
    get() = TODO()

val kOpaqueCoherenceID: kotlin.UInt
    get() = TODO()

val kOpaqueConsoleID: kotlin.UInt
    get() = TODO()

val kOpaqueCpuID: kotlin.UInt
    get() = TODO()

val kOpaqueCriticalRegionID: kotlin.UInt
    get() = TODO()

val kOpaqueEventID: kotlin.UInt
    get() = TODO()

val kOpaqueNotificationID: kotlin.UInt
    get() = TODO()

val kOpaqueProcessID: kotlin.UInt
    get() = TODO()

val kOpaqueQueueID: kotlin.UInt
    get() = TODO()

val kOpaqueSemaphoreID: kotlin.UInt
    get() = TODO()

val kOpaqueTaskID: kotlin.UInt
    get() = TODO()

val kOpaqueTimerID: kotlin.UInt
    get() = TODO()

val kOpenDocEditorsFolderType: kotlin.UInt
    get() = TODO()

val kOpenDocFolderType: kotlin.UInt
    get() = TODO()

val kOpenDocLibrariesFolderType: kotlin.UInt
    get() = TODO()

val kOpenDocShellPlugInsFolderType: kotlin.UInt
    get() = TODO()

val kOpenDropIconVariant: kotlin.UInt
    get() = TODO()

val kOpenFolderIcon: kotlin.UInt
    get() = TODO()

val kOpenFolderIconResource: kotlin.Int
    get() = TODO()

val kOpenIconVariant: kotlin.UInt
    get() = TODO()

val kOutOfResourceErr: kotlin.Int
    get() = TODO()

val kOwnedFolderIcon: kotlin.UInt
    get() = TODO()

val kOwnedFolderIconResource: kotlin.Int
    get() = TODO()

val kOwnerID2Name: kotlin.UInt
    get() = TODO()

val kOwnerIcon: kotlin.UInt
    get() = TODO()

val kOwnerName2ID: kotlin.UInt
    get() = TODO()

val kPEFAbsoluteExport: kotlin.Int
    get() = TODO()

val kPEFCodeSection: kotlin.UInt
    get() = TODO()

val kPEFCodeSymbol: kotlin.UInt
    get() = TODO()

val kPEFConstantSection: kotlin.UInt
    get() = TODO()

val kPEFDataSymbol: kotlin.UInt
    get() = TODO()

val kPEFDebugSection: kotlin.UInt
    get() = TODO()

val kPEFExceptionSection: kotlin.UInt
    get() = TODO()

val kPEFExecDataSection: kotlin.UInt
    get() = TODO()

val kPEFExpSymClassShift: kotlin.UInt
    get() = TODO()

val kPEFExpSymMaxNameOffset: kotlin.UInt
    get() = TODO()

val kPEFExpSymNameOffsetMask: kotlin.UInt
    get() = TODO()

val kPEFFirstSectionHeaderOffset: kotlin.UInt
    get() = TODO()

val kPEFGlobalShare: kotlin.UInt
    get() = TODO()

val kPEFGlueSymbol: kotlin.UInt
    get() = TODO()

val kPEFHashLengthShift: kotlin.UInt
    get() = TODO()

val kPEFHashMaxLength: kotlin.UInt
    get() = TODO()

val kPEFHashSlotFirstKeyMask: kotlin.UInt
    get() = TODO()

val kPEFHashSlotMaxKeyIndex: kotlin.UInt
    get() = TODO()

val kPEFHashSlotMaxSymbolCount: kotlin.UInt
    get() = TODO()

val kPEFHashSlotSymCountShift: kotlin.UInt
    get() = TODO()

val kPEFHashValueMask: kotlin.UInt
    get() = TODO()

val kPEFImpSymClassShift: kotlin.UInt
    get() = TODO()

val kPEFImpSymMaxNameOffset: kotlin.UInt
    get() = TODO()

val kPEFImpSymNameOffsetMask: kotlin.UInt
    get() = TODO()

val kPEFInitLibBeforeMask: kotlin.UInt
    get() = TODO()

val kPEFLoaderSection: kotlin.UInt
    get() = TODO()

val kPEFPackedDataSection: kotlin.UInt
    get() = TODO()

val kPEFPkDataBlock: kotlin.UInt
    get() = TODO()

val kPEFPkDataCount5Mask: kotlin.UInt
    get() = TODO()

val kPEFPkDataMaxCount5: kotlin.UInt
    get() = TODO()

val kPEFPkDataOpcodeShift: kotlin.UInt
    get() = TODO()

val kPEFPkDataRepeat: kotlin.UInt
    get() = TODO()

val kPEFPkDataRepeatBlock: kotlin.UInt
    get() = TODO()

val kPEFPkDataRepeatZero: kotlin.UInt
    get() = TODO()

val kPEFPkDataVCountEndMask: kotlin.UInt
    get() = TODO()

val kPEFPkDataVCountMask: kotlin.UInt
    get() = TODO()

val kPEFPkDataVCountShift: kotlin.UInt
    get() = TODO()

val kPEFPkDataZero: kotlin.UInt
    get() = TODO()

val kPEFProcessShare: kotlin.UInt
    get() = TODO()

val kPEFProtectedShare: kotlin.UInt
    get() = TODO()

val kPEFReexportedImport: kotlin.Int
    get() = TODO()

val kPEFRelocBasicOpcodeRange: kotlin.UInt
    get() = TODO()

val kPEFRelocBySectC: kotlin.UInt
    get() = TODO()

val kPEFRelocBySectD: kotlin.UInt
    get() = TODO()

val kPEFRelocBySectDWithSkip: kotlin.UInt
    get() = TODO()

val kPEFRelocImportRun: kotlin.UInt
    get() = TODO()

val kPEFRelocIncrPosition: kotlin.UInt
    get() = TODO()

val kPEFRelocIncrPositionMaxOffset: kotlin.UInt
    get() = TODO()

val kPEFRelocLgByImport: kotlin.UInt
    get() = TODO()

val kPEFRelocLgByImportMaxIndex: kotlin.UInt
    get() = TODO()

val kPEFRelocLgBySectionSubopcode: kotlin.UInt
    get() = TODO()

val kPEFRelocLgRepeat: kotlin.UInt
    get() = TODO()

val kPEFRelocLgRepeatMaxChunkCount: kotlin.UInt
    get() = TODO()

val kPEFRelocLgRepeatMaxRepeatCount: kotlin.UInt
    get() = TODO()

val kPEFRelocLgSetOrBySection: kotlin.UInt
    get() = TODO()

val kPEFRelocLgSetOrBySectionMaxIndex: kotlin.UInt
    get() = TODO()

val kPEFRelocLgSetSectCSubopcode: kotlin.UInt
    get() = TODO()

val kPEFRelocLgSetSectDSubopcode: kotlin.UInt
    get() = TODO()

val kPEFRelocRunMaxRunLength: kotlin.UInt
    get() = TODO()

val kPEFRelocSetPosMaxOffset: kotlin.UInt
    get() = TODO()

val kPEFRelocSetPosition: kotlin.UInt
    get() = TODO()

val kPEFRelocSmByImport: kotlin.UInt
    get() = TODO()

val kPEFRelocSmBySection: kotlin.UInt
    get() = TODO()

val kPEFRelocSmIndexMaxIndex: kotlin.UInt
    get() = TODO()

val kPEFRelocSmRepeat: kotlin.UInt
    get() = TODO()

val kPEFRelocSmRepeatMaxChunkCount: kotlin.UInt
    get() = TODO()

val kPEFRelocSmRepeatMaxRepeatCount: kotlin.UInt
    get() = TODO()

val kPEFRelocSmSetSectC: kotlin.UInt
    get() = TODO()

val kPEFRelocSmSetSectD: kotlin.UInt
    get() = TODO()

val kPEFRelocTVector12: kotlin.UInt
    get() = TODO()

val kPEFRelocTVector8: kotlin.UInt
    get() = TODO()

val kPEFRelocUndefinedOpcode: kotlin.UInt
    get() = TODO()

val kPEFRelocVTable8: kotlin.UInt
    get() = TODO()

val kPEFRelocWithSkipMaxRelocCount: kotlin.UInt
    get() = TODO()

val kPEFRelocWithSkipMaxSkipCount: kotlin.UInt
    get() = TODO()

val kPEFTOCSymbol: kotlin.UInt
    get() = TODO()

val kPEFTVectorSymbol: kotlin.UInt
    get() = TODO()

val kPEFTag1: kotlin.UInt
    get() = TODO()

val kPEFTag2: kotlin.UInt
    get() = TODO()

val kPEFTracebackSection: kotlin.UInt
    get() = TODO()

val kPEFUndefinedSymbol: kotlin.UInt
    get() = TODO()

val kPEFUnpackedDataSection: kotlin.UInt
    get() = TODO()

val kPEFVersion: kotlin.UInt
    get() = TODO()

val kPEFWeakImportLibMask: kotlin.UInt
    get() = TODO()

val kPEFWeakImportSymMask: kotlin.UInt
    get() = TODO()

val kPOSIXErrorBase: kotlin.UInt
    get() = TODO()

val kPOSIXErrorE2BIG: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEACCES: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEADDRINUSE: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEADDRNOTAVAIL: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEAFNOSUPPORT: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEAGAIN: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEALREADY: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEAUTH: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEBADARCH: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEBADEXEC: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEBADF: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEBADMACHO: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEBADMSG: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEBADRPC: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEBUSY: kotlin.UInt
    get() = TODO()

val kPOSIXErrorECANCELED: kotlin.UInt
    get() = TODO()

val kPOSIXErrorECHILD: kotlin.UInt
    get() = TODO()

val kPOSIXErrorECONNABORTED: kotlin.UInt
    get() = TODO()

val kPOSIXErrorECONNREFUSED: kotlin.UInt
    get() = TODO()

val kPOSIXErrorECONNRESET: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEDEADLK: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEDESTADDRREQ: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEDEVERR: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEDOM: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEDQUOT: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEEXIST: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEFAULT: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEFBIG: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEFTYPE: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEHOSTDOWN: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEHOSTUNREACH: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEIDRM: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEILSEQ: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEINPROGRESS: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEINTR: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEINVAL: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEIO: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEISCONN: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEISDIR: kotlin.UInt
    get() = TODO()

val kPOSIXErrorELOOP: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEMFILE: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEMLINK: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEMSGSIZE: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEMULTIHOP: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENAMETOOLONG: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENEEDAUTH: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENETDOWN: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENETRESET: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENETUNREACH: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENFILE: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENOATTR: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENOBUFS: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENODATA: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENODEV: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENOENT: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENOEXEC: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENOLCK: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENOLINK: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENOMEM: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENOMSG: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENOPROTOOPT: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENOSPC: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENOSR: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENOSTR: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENOSYS: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENOTBLK: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENOTCONN: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENOTDIR: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENOTEMPTY: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENOTSOCK: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENOTSUP: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENOTTY: kotlin.UInt
    get() = TODO()

val kPOSIXErrorENXIO: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEOPNOTSUPP: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEOVERFLOW: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEPERM: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEPFNOSUPPORT: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEPIPE: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEPROCLIM: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEPROCUNAVAIL: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEPROGMISMATCH: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEPROGUNAVAIL: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEPROTO: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEPROTONOSUPPORT: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEPROTOTYPE: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEPWROFF: kotlin.UInt
    get() = TODO()

val kPOSIXErrorERANGE: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEREMOTE: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEROFS: kotlin.UInt
    get() = TODO()

val kPOSIXErrorERPCMISMATCH: kotlin.UInt
    get() = TODO()

val kPOSIXErrorESHLIBVERS: kotlin.UInt
    get() = TODO()

val kPOSIXErrorESHUTDOWN: kotlin.UInt
    get() = TODO()

val kPOSIXErrorESOCKTNOSUPPORT: kotlin.UInt
    get() = TODO()

val kPOSIXErrorESPIPE: kotlin.UInt
    get() = TODO()

val kPOSIXErrorESRCH: kotlin.UInt
    get() = TODO()

val kPOSIXErrorESTALE: kotlin.UInt
    get() = TODO()

val kPOSIXErrorETIME: kotlin.UInt
    get() = TODO()

val kPOSIXErrorETIMEDOUT: kotlin.UInt
    get() = TODO()

val kPOSIXErrorETOOMANYREFS: kotlin.UInt
    get() = TODO()

val kPOSIXErrorETXTBSY: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEUSERS: kotlin.UInt
    get() = TODO()

val kPOSIXErrorEXDEV: kotlin.UInt
    get() = TODO()

val kPackageAliasType: kotlin.UInt
    get() = TODO()

val kPageInMemory: kotlin.UInt
    get() = TODO()

val kPageOnDisk: kotlin.UInt
    get() = TODO()

val kPascalStackBased: kotlin.UInt
    get() = TODO()

val kPassCallToChainErr: kotlin.Int
    get() = TODO()

val kPassSelector: kotlin.UInt
    get() = TODO()

val kPassword: kotlin.UInt
    get() = TODO()

val kPasswordChangedKCEvent: kotlin.UInt
    get() = TODO()

val kPasswordChangedKCEventMask: kotlin.UInt
    get() = TODO()

val kPathKCItemAttr: kotlin.UInt
    get() = TODO()

val kPictureDocumentsFolderType: kotlin.UInt
    get() = TODO()

val kPolicyKCStopOn: kotlin.UInt
    get() = TODO()

val kPortKCItemAttr: kotlin.UInt
    get() = TODO()

val kPos2Offset: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kPostCardEventErr: kotlin.Int
    get() = TODO()

val kPowerHandlerExistsForDeviceErr: kotlin.Int
    get() = TODO()

val kPowerHandlerNotFoundForDeviceErr: kotlin.Int
    get() = TODO()

val kPowerHandlerNotFoundForProcErr: kotlin.Int
    get() = TODO()

val kPowerMgtMessageNotHandled: kotlin.Int
    get() = TODO()

val kPowerMgtRequestDenied: kotlin.Int
    get() = TODO()

val kPowerPCISA: kotlin.UInt
    get() = TODO()

val kPowerPCRTA: kotlin.UInt
    get() = TODO()

val kPreMacOS91AppleExtrasFolderType: kotlin.UInt
    get() = TODO()

val kPreMacOS91ApplicationsFolderType: kotlin.UInt
    get() = TODO()

val kPreMacOS91AssistantsFolderType: kotlin.UInt
    get() = TODO()

val kPreMacOS91AutomountedServersFolderType: kotlin.UInt
    get() = TODO()

val kPreMacOS91InstallerLogsFolderType: kotlin.UInt
    get() = TODO()

val kPreMacOS91InternetFolderType: kotlin.UInt
    get() = TODO()

val kPreMacOS91MacOSReadMesFolderType: kotlin.UInt
    get() = TODO()

val kPreMacOS91StationeryFolderType: kotlin.UInt
    get() = TODO()

val kPreMacOS91UtilitiesFolderType: kotlin.UInt
    get() = TODO()

val kPreemptiveThread: kotlin.UInt
    get() = TODO()

val kPreferencePanesFolderType: kotlin.UInt
    get() = TODO()

val kPreferencesFolderAliasType: kotlin.UInt
    get() = TODO()

val kPreferencesFolderIcon: kotlin.Int
    get() = TODO()

val kPreferencesFolderIconResource: kotlin.Int
    get() = TODO()

val kPreferencesFolderType: kotlin.UInt
    get() = TODO()

val kPreviousBody: kotlin.UInt
    get() = TODO()

val kPrintMonitorDocsFolderAliasType: kotlin.UInt
    get() = TODO()

val kPrintMonitorDocsFolderType: kotlin.UInt
    get() = TODO()

val kPrintMonitorFolderIcon: kotlin.Int
    get() = TODO()

val kPrintMonitorFolderIconResource: kotlin.Int
    get() = TODO()

val kPrinterDescriptionFolderIcon: kotlin.Int
    get() = TODO()

val kPrinterDescriptionFolderType: kotlin.UInt
    get() = TODO()

val kPrinterDriverFolderIcon: kotlin.Int
    get() = TODO()

val kPrinterDriverFolderType: kotlin.UInt
    get() = TODO()

val kPrintersFolderType: kotlin.UInt
    get() = TODO()

val kPrintingPlugInsFolderType: kotlin.UInt
    get() = TODO()

val kPrivateFolderIcon: kotlin.UInt
    get() = TODO()

val kPrivateFolderIconResource: kotlin.Int
    get() = TODO()

val kPrivateFrameworksFolderType: kotlin.UInt
    get() = TODO()

val kPrivilegeViolationException: kotlin.UInt
    get() = TODO()

val kProcDescriptorIsAbsolute: kotlin.UInt
    get() = TODO()

val kProcDescriptorIsIndex: kotlin.UInt
    get() = TODO()

val kProcDescriptorIsProcPtr: kotlin.UInt
    get() = TODO()

val kProcDescriptorIsRelative: kotlin.UInt
    get() = TODO()

val kProcessorTempRoutineRequiresMPLib2: kotlin.Int
    get() = TODO()

val kProtectedApplicationFolderIcon: kotlin.UInt
    get() = TODO()

val kProtectedSystemFolderIcon: kotlin.UInt
    get() = TODO()

val kProtocolKCItemAttr: kotlin.UInt
    get() = TODO()

val kPublicFolderIcon: kotlin.Int
    get() = TODO()

val kPublicFolderType: kotlin.UInt
    get() = TODO()

val kPublicKeyHashKCItemAttr: kotlin.UInt
    get() = TODO()

val kQDCorruptPICTDataErr: kotlin.Int
    get() = TODO()

val kQDCursorAlreadyRegistered: kotlin.Int
    get() = TODO()

val kQDCursorNotRegistered: kotlin.Int
    get() = TODO()

val kQDNoColorHWCursorSupport: kotlin.Int
    get() = TODO()

val kQDNoPalette: kotlin.Int
    get() = TODO()

val kQTSSUnknownErr: kotlin.Int
    get() = TODO()

val kQuestionMarkIcon: kotlin.UInt
    get() = TODO()

val kQuickLookFolderType: kotlin.UInt
    get() = TODO()

val kQuickTimeComponentsFolderType: kotlin.UInt
    get() = TODO()

val kQuickTimeExtensionsFolderType: kotlin.UInt
    get() = TODO()

val kRAATalkInactive: kotlin.Int
    get() = TODO()

val kRACallBackFailed: kotlin.Int
    get() = TODO()

val kRAConfigurationDBInitErr: kotlin.Int
    get() = TODO()

val kRAConnectionCanceled: kotlin.Int
    get() = TODO()

val kRADuplicateIPAddr: kotlin.Int
    get() = TODO()

val kRAExtAuthenticationFailed: kotlin.Int
    get() = TODO()

val kRAIncompatiblePrefs: kotlin.Int
    get() = TODO()

val kRAInitOpenTransportFailed: kotlin.Int
    get() = TODO()

val kRAInstallationDamaged: kotlin.Int
    get() = TODO()

val kRAInternalError: kotlin.Int
    get() = TODO()

val kRAInvalidParameter: kotlin.Int
    get() = TODO()

val kRAInvalidPassword: kotlin.Int
    get() = TODO()

val kRAInvalidPort: kotlin.Int
    get() = TODO()

val kRAInvalidPortState: kotlin.Int
    get() = TODO()

val kRAInvalidSerialProtocol: kotlin.Int
    get() = TODO()

val kRAMissingResources: kotlin.Int
    get() = TODO()

val kRANCPRejectedbyPeer: kotlin.Int
    get() = TODO()

val kRANotConnected: kotlin.Int
    get() = TODO()

val kRANotEnabled: kotlin.Int
    get() = TODO()

val kRANotPrimaryInterface: kotlin.Int
    get() = TODO()

val kRANotSupported: kotlin.Int
    get() = TODO()

val kRAOutOfMemory: kotlin.Int
    get() = TODO()

val kRAPPPAuthenticationFailed: kotlin.Int
    get() = TODO()

val kRAPPPNegotiationFailed: kotlin.Int
    get() = TODO()

val kRAPPPPeerDisconnected: kotlin.Int
    get() = TODO()

val kRAPPPProtocolRejected: kotlin.Int
    get() = TODO()

val kRAPPPUserDisconnected: kotlin.Int
    get() = TODO()

val kRAPeerNotResponding: kotlin.Int
    get() = TODO()

val kRAPortBusy: kotlin.Int
    get() = TODO()

val kRAPortSetupFailed: kotlin.Int
    get() = TODO()

val kRARemoteAccessNotReady: kotlin.Int
    get() = TODO()

val kRAStartupFailed: kotlin.Int
    get() = TODO()

val kRATCPIPInactive: kotlin.Int
    get() = TODO()

val kRATCPIPNotConfigured: kotlin.Int
    get() = TODO()

val kRAUnknownPortState: kotlin.Int
    get() = TODO()

val kRAUnknownUser: kotlin.Int
    get() = TODO()

val kRAUserInteractionRequired: kotlin.Int
    get() = TODO()

val kRAUserLoginDisabled: kotlin.Int
    get() = TODO()

val kRAUserPwdChangeRequired: kotlin.Int
    get() = TODO()

val kRAUserPwdEntryRequired: kotlin.Int
    get() = TODO()

val kRdPermKCStatus: kotlin.UInt
    get() = TODO()

val kReadExtensionTermsMask: kotlin.UInt
    get() = TODO()

val kReadFailureErr: kotlin.Int
    get() = TODO()

val kReadOnlyMemoryException: kotlin.UInt
    get() = TODO()

val kReadReference: kotlin.UInt
    get() = TODO()

val kReadyThreadState: kotlin.UInt
    get() = TODO()

val kRecentApplicationsFolderIcon: kotlin.Int
    get() = TODO()

val kRecentApplicationsFolderType: kotlin.UInt
    get() = TODO()

val kRecentDocumentsFolderIcon: kotlin.Int
    get() = TODO()

val kRecentDocumentsFolderType: kotlin.UInt
    get() = TODO()

val kRecentItemsIcon: kotlin.UInt
    get() = TODO()

val kRecentServersFolderIcon: kotlin.Int
    get() = TODO()

val kRecentServersFolderType: kotlin.UInt
    get() = TODO()

val kRedirectedRelativeFolder: kotlin.UInt
    get() = TODO()

val kRegisterA0: kotlin.UInt
    get() = TODO()

val kRegisterA1: kotlin.UInt
    get() = TODO()

val kRegisterA2: kotlin.UInt
    get() = TODO()

val kRegisterA3: kotlin.UInt
    get() = TODO()

val kRegisterA4: kotlin.UInt
    get() = TODO()

val kRegisterA5: kotlin.UInt
    get() = TODO()

val kRegisterA6: kotlin.UInt
    get() = TODO()

val kRegisterBased: kotlin.UInt
    get() = TODO()

val kRegisterD0: kotlin.UInt
    get() = TODO()

val kRegisterD1: kotlin.UInt
    get() = TODO()

val kRegisterD2: kotlin.UInt
    get() = TODO()

val kRegisterD3: kotlin.UInt
    get() = TODO()

val kRegisterD4: kotlin.UInt
    get() = TODO()

val kRegisterD5: kotlin.UInt
    get() = TODO()

val kRegisterD6: kotlin.UInt
    get() = TODO()

val kRegisterD7: kotlin.UInt
    get() = TODO()

val kRegisterParameterMask: kotlin.Int
    get() = TODO()

val kRegisterParameterPhase: kotlin.Int
    get() = TODO()

val kRegisterParameterSizePhase: kotlin.Int
    get() = TODO()

val kRegisterParameterSizeWidth: kotlin.Int
    get() = TODO()

val kRegisterParameterWhichPhase: kotlin.Int
    get() = TODO()

val kRegisterParameterWhichWidth: kotlin.Int
    get() = TODO()

val kRegisterParameterWidth: kotlin.Int
    get() = TODO()

val kRegisterResultLocationPhase: kotlin.Int
    get() = TODO()

val kRegisterResultLocationWidth: kotlin.Int
    get() = TODO()

val kRelativeFolder: kotlin.UInt
    get() = TODO()

val kResFileNotOpened: kotlin.Int
    get() = TODO()

val kResolveAliasFileNoUI: kotlin.UInt
    get() = TODO()

val kResolveAliasTryFileIDFirst: kotlin.UInt
    get() = TODO()

val kResultSizeMask: kotlin.Int
    get() = TODO()

val kResultSizePhase: kotlin.Int
    get() = TODO()

val kResultSizeWidth: kotlin.Int
    get() = TODO()

val kReturnNextGroup: kotlin.UInt
    get() = TODO()

val kReturnNextUG: kotlin.UInt
    get() = TODO()

val kReturnNextUser: kotlin.UInt
    get() = TODO()

val kRightContainerArrowIcon: kotlin.UInt
    get() = TODO()

val kRightToLeft: kotlin.UInt
    get() = TODO()

val kRolloverIconVariant: kotlin.UInt
    get() = TODO()

val kRootFolder: kotlin.UInt
    get() = TODO()

val kRoutineDescriptorVersion: kotlin.UInt
    get() = TODO()

val kRoutineIsDispatchedDefaultRoutine: kotlin.UInt
    get() = TODO()

val kRoutineIsNotDispatchedDefaultRoutine: kotlin.UInt
    get() = TODO()

val kRoutingResourceID: kotlin.UInt
    get() = TODO()

val kRoutingResourceType: kotlin.UInt
    get() = TODO()

val kRsrcChainAboveAllMaps: kotlin.UInt
    get() = TODO()

val kRsrcChainAboveApplicationMap: kotlin.UInt
    get() = TODO()

val kRsrcChainBelowApplicationMap: kotlin.UInt
    get() = TODO()

val kRsrcChainBelowSystemMap: kotlin.UInt
    get() = TODO()

val kRunningThreadState: kotlin.UInt
    get() = TODO()

val kSKDocumentStateAddPending: platform.CoreServices.SKDocumentIndexState /* = kotlin.UInt */
    get() = TODO()

val kSKDocumentStateDeletePending: platform.CoreServices.SKDocumentIndexState /* = kotlin.UInt */
    get() = TODO()

val kSKDocumentStateIndexed: platform.CoreServices.SKDocumentIndexState /* = kotlin.UInt */
    get() = TODO()

val kSKDocumentStateNotIndexed: platform.CoreServices.SKDocumentIndexState /* = kotlin.UInt */
    get() = TODO()

val kSKEndTermChars: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kSKIndexInverted: platform.CoreServices.SKIndexType /* = kotlin.UInt */
    get() = TODO()

val kSKIndexInvertedVector: platform.CoreServices.SKIndexType /* = kotlin.UInt */
    get() = TODO()

val kSKIndexUnknown: platform.CoreServices.SKIndexType /* = kotlin.UInt */
    get() = TODO()

val kSKIndexVector: platform.CoreServices.SKIndexType /* = kotlin.UInt */
    get() = TODO()

val kSKLanguageTypes: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kSKMaximumTerms: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kSKMinTermLength: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kSKProximityIndexing: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kSKSearchBooleanRanked: platform.CoreServices.SKSearchType /* = kotlin.UInt */
    get() = TODO()

val kSKSearchOptionDefault: kotlin.UInt
    get() = TODO()

val kSKSearchOptionFindSimilar: kotlin.UInt
    get() = TODO()

val kSKSearchOptionNoRelevanceScores: kotlin.UInt
    get() = TODO()

val kSKSearchOptionSpaceMeansOR: kotlin.UInt
    get() = TODO()

val kSKSearchPrefixRanked: platform.CoreServices.SKSearchType /* = kotlin.UInt */
    get() = TODO()

val kSKSearchRanked: platform.CoreServices.SKSearchType /* = kotlin.UInt */
    get() = TODO()

val kSKSearchRequiredRanked: platform.CoreServices.SKSearchType /* = kotlin.UInt */
    get() = TODO()

val kSKStartTermChars: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kSKStopWords: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kSKSubstitutions: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kSKTermChars: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kSOAP1999Schema: kotlin.UInt
    get() = TODO()

val kSOAP2001Schema: kotlin.UInt
    get() = TODO()

val kSSpCantInstallErr: kotlin.Int
    get() = TODO()

val kSSpInternalErr: kotlin.Int
    get() = TODO()

val kSSpParallelUpVectorErr: kotlin.Int
    get() = TODO()

val kSSpScaleToZeroErr: kotlin.Int
    get() = TODO()

val kSSpVersionErr: kotlin.Int
    get() = TODO()

val kScreenSaversFolderType: kotlin.UInt
    get() = TODO()

val kScriptCodeKCItemAttr: kotlin.UInt
    get() = TODO()

val kScriptingAdditionsFolderIcon: kotlin.Int
    get() = TODO()

val kScriptingAdditionsFolderType: kotlin.UInt
    get() = TODO()

val kScriptsFolderIcon: kotlin.Int
    get() = TODO()

val kScriptsFolderType: kotlin.UInt
    get() = TODO()

val kSecOptionReserved: kotlin.UInt
    get() = TODO()

val kSecurityDomainKCItemAttr: kotlin.UInt
    get() = TODO()

val kSelectorsAreIndexable: kotlin.UInt
    get() = TODO()

val kSelectorsAreNotIndexable: kotlin.UInt
    get() = TODO()

val kSerialNumberKCItemAttr: kotlin.UInt
    get() = TODO()

val kServerKCItemAttr: kotlin.UInt
    get() = TODO()

val kServiceKCItemAttr: kotlin.UInt
    get() = TODO()

val kServicesFolderType: kotlin.UInt
    get() = TODO()

val kSetDebugOption: kotlin.UInt
    get() = TODO()

val kSetPowerLevel: kotlin.UInt
    get() = TODO()

val kSharedBadgeIcon: kotlin.UInt
    get() = TODO()

val kSharedFolderAliasType: kotlin.UInt
    get() = TODO()

val kSharedFolderIcon: kotlin.UInt
    get() = TODO()

val kSharedFolderIconResource: kotlin.Int
    get() = TODO()

val kSharedLibrariesFolderIcon: kotlin.Int
    get() = TODO()

val kSharedLibrariesFolderType: kotlin.UInt
    get() = TODO()

val kSharedUserDataFolderType: kotlin.UInt
    get() = TODO()

val kSharingPrivsNotApplicableIcon: kotlin.UInt
    get() = TODO()

val kSharingPrivsReadOnlyIcon: kotlin.UInt
    get() = TODO()

val kSharingPrivsReadWriteIcon: kotlin.UInt
    get() = TODO()

val kSharingPrivsUnknownIcon: kotlin.UInt
    get() = TODO()

val kSharingPrivsWritableIcon: kotlin.UInt
    get() = TODO()

val kShiftJIS_BasicVariant: kotlin.UInt
    get() = TODO()

val kShiftJIS_DOSVariant: kotlin.UInt
    get() = TODO()

val kShiftJIS_MusicCDVariant: kotlin.UInt
    get() = TODO()

val kShortcutIcon: kotlin.UInt
    get() = TODO()

val kShowHideInputWindow: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kShutdownFolderType: kotlin.UInt
    get() = TODO()

val kShutdownItemsDisabledFolderIcon: kotlin.Int
    get() = TODO()

val kShutdownItemsDisabledFolderType: kotlin.UInt
    get() = TODO()

val kShutdownItemsFolderIcon: kotlin.Int
    get() = TODO()

val kSignKCItemAttr: kotlin.UInt
    get() = TODO()

val kSignatureKCItemAttr: kotlin.UInt
    get() = TODO()

val kSleepDemand: kotlin.UInt
    get() = TODO()

val kSleepDeny: kotlin.UInt
    get() = TODO()

val kSleepNow: kotlin.UInt
    get() = TODO()

val kSleepRequest: kotlin.UInt
    get() = TODO()

val kSleepRevoke: kotlin.UInt
    get() = TODO()

val kSleepUnlock: kotlin.UInt
    get() = TODO()

val kSleepWakeUp: kotlin.UInt
    get() = TODO()

val kSmall1BitMask: kotlin.UInt
    get() = TODO()

val kSmall32BitData: kotlin.UInt
    get() = TODO()

val kSmall4BitData: kotlin.UInt
    get() = TODO()

val kSmall4BitIconSize: kotlin.UInt
    get() = TODO()

val kSmall8BitData: kotlin.UInt
    get() = TODO()

val kSmall8BitIconSize: kotlin.UInt
    get() = TODO()

val kSmall8BitMask: kotlin.UInt
    get() = TODO()

val kSmallIconSize: kotlin.UInt
    get() = TODO()

val kSortAscendingIcon: kotlin.UInt
    get() = TODO()

val kSortDescendingIcon: kotlin.UInt
    get() = TODO()

val kSoundFileIcon: kotlin.UInt
    get() = TODO()

val kSoundSetsFolderType: kotlin.UInt
    get() = TODO()

val kSpeakableItemsFolder: kotlin.Int
    get() = TODO()

val kSpeakableItemsFolderType: kotlin.UInt
    get() = TODO()

val kSpecialCase: kotlin.UInt
    get() = TODO()

val kSpecialCaseCaretHook: kotlin.UInt
    get() = TODO()

val kSpecialCaseDrawHook: kotlin.UInt
    get() = TODO()

val kSpecialCaseEOLHook: kotlin.UInt
    get() = TODO()

val kSpecialCaseGNEFilterProc: kotlin.UInt
    get() = TODO()

val kSpecialCaseHighHook: kotlin.UInt
    get() = TODO()

val kSpecialCaseHitTestHook: kotlin.UInt
    get() = TODO()

val kSpecialCaseMBarHook: kotlin.UInt
    get() = TODO()

val kSpecialCaseNWidthHook: kotlin.UInt
    get() = TODO()

val kSpecialCaseProtocolHandler: kotlin.UInt
    get() = TODO()

val kSpecialCaseSelectorMask: kotlin.Int
    get() = TODO()

val kSpecialCaseSelectorPhase: kotlin.Int
    get() = TODO()

val kSpecialCaseSelectorWidth: kotlin.Int
    get() = TODO()

val kSpecialCaseSocketListener: kotlin.UInt
    get() = TODO()

val kSpecialCaseTEDoText: kotlin.UInt
    get() = TODO()

val kSpecialCaseTEFindWord: kotlin.UInt
    get() = TODO()

val kSpecialCaseTERecalc: kotlin.UInt
    get() = TODO()

val kSpecialCaseTextWidthHook: kotlin.UInt
    get() = TODO()

val kSpecialCaseWidthHook: kotlin.UInt
    get() = TODO()

val kSpecialFolder: kotlin.UInt
    get() = TODO()

val kSpeechFolderType: kotlin.UInt
    get() = TODO()

val kSpotlightImportersFolderType: kotlin.UInt
    get() = TODO()

val kSpotlightMetadataCacheFolderType: kotlin.UInt
    get() = TODO()

val kSpotlightSavedSearchesFolderType: kotlin.UInt
    get() = TODO()

val kStackDispatchedPascalStackBased: kotlin.UInt
    get() = TODO()

val kStackOverflowException: kotlin.UInt
    get() = TODO()

val kStackParameterMask: kotlin.Int
    get() = TODO()

val kStackParameterPhase: kotlin.Int
    get() = TODO()

val kStackParameterWidth: kotlin.Int
    get() = TODO()

val kStartDateKCItemAttr: kotlin.UInt
    get() = TODO()

val kStartupFolderAliasType: kotlin.UInt
    get() = TODO()

val kStartupFolderIconResource: kotlin.Int
    get() = TODO()

val kStartupFolderType: kotlin.UInt
    get() = TODO()

val kStartupItemsDisabledFolderIcon: kotlin.Int
    get() = TODO()

val kStartupItemsDisabledFolderType: kotlin.UInt
    get() = TODO()

val kStartupItemsFolderIcon: kotlin.Int
    get() = TODO()

val kStationeryFolderType: kotlin.UInt
    get() = TODO()

val kStillIdle: kotlin.UInt
    get() = TODO()

val kStoppedThreadState: kotlin.UInt
    get() = TODO()

val kSubjectKCItemAttr: kotlin.UInt
    get() = TODO()

val kSuspendDemand: kotlin.UInt
    get() = TODO()

val kSuspendRequest: kotlin.UInt
    get() = TODO()

val kSuspendRevoke: kotlin.UInt
    get() = TODO()

val kSuspendWakeToDoze: kotlin.UInt
    get() = TODO()

val kSuspendWakeUp: kotlin.UInt
    get() = TODO()

val kSysSWTooOld: kotlin.Int
    get() = TODO()

val kSystemControlPanelFolderType: kotlin.UInt
    get() = TODO()

val kSystemDesktopFolderType: kotlin.UInt
    get() = TODO()

val kSystemDomain: kotlin.Int
    get() = TODO()

val kSystemEventKCEventMask: kotlin.UInt
    get() = TODO()

val kSystemExtensionDisabledFolderIcon: kotlin.Int
    get() = TODO()

val kSystemExtensionDisabledFolderType: kotlin.UInt
    get() = TODO()

val kSystemFolderAliasType: kotlin.UInt
    get() = TODO()

val kSystemFolderIcon: kotlin.Int
    get() = TODO()

val kSystemFolderIconResource: kotlin.Int
    get() = TODO()

val kSystemFolderType: kotlin.UInt
    get() = TODO()

val kSystemIconsCreator: kotlin.UInt
    get() = TODO()

val kSystemKCEvent: kotlin.UInt
    get() = TODO()

val kSystemPreferencesFolderType: kotlin.UInt
    get() = TODO()

val kSystemResFile: kotlin.Int
    get() = TODO()

val kSystemSoundsFolderType: kotlin.UInt
    get() = TODO()

val kSystemSuitcaseIcon: kotlin.UInt
    get() = TODO()

val kSystemTrashFolderType: kotlin.UInt
    get() = TODO()

val kTECAddFallbackInterruptBit: kotlin.UInt
    get() = TODO()

val kTECAddFallbackInterruptMask: kotlin.UInt
    get() = TODO()

val kTECAddForceASCIIChangesBit: kotlin.UInt
    get() = TODO()

val kTECAddForceASCIIChangesMask: kotlin.UInt
    get() = TODO()

val kTECAddTextRunHeuristicsBit: kotlin.UInt
    get() = TODO()

val kTECAddTextRunHeuristicsMask: kotlin.UInt
    get() = TODO()

val kTECArrayFullErr: kotlin.Int
    get() = TODO()

val kTECAvailableEncodingsResType: kotlin.UInt
    get() = TODO()

val kTECAvailableSniffersResType: kotlin.UInt
    get() = TODO()

val kTECBadTextRunErr: kotlin.Int
    get() = TODO()

val kTECBufferBelowMinimumSizeErr: kotlin.Int
    get() = TODO()

val kTECChinesePluginSignature: kotlin.UInt
    get() = TODO()

val kTECConversionInfoResType: kotlin.UInt
    get() = TODO()

val kTECCorruptConverterErr: kotlin.Int
    get() = TODO()

val kTECDirectionErr: kotlin.Int
    get() = TODO()

val kTECDisableFallbacksBit: kotlin.UInt
    get() = TODO()

val kTECDisableFallbacksMask: kotlin.UInt
    get() = TODO()

val kTECDisableLooseMappingsBit: kotlin.UInt
    get() = TODO()

val kTECDisableLooseMappingsMask: kotlin.UInt
    get() = TODO()

val kTECFallbackTextLengthFixBit: kotlin.UInt
    get() = TODO()

val kTECFallbackTextLengthFixMask: kotlin.UInt
    get() = TODO()

val kTECGlobalsUnavailableErr: kotlin.Int
    get() = TODO()

val kTECIncompleteElementErr: kotlin.Int
    get() = TODO()

val kTECInfoCurrentFormat: kotlin.UInt
    get() = TODO()

val kTECInternetNameDefaultUsageMask: kotlin.UInt
    get() = TODO()

val kTECInternetNameStrictUsageMask: kotlin.UInt
    get() = TODO()

val kTECInternetNameTolerantUsageMask: kotlin.UInt
    get() = TODO()

val kTECInternetNamesResType: kotlin.UInt
    get() = TODO()

val kTECItemUnavailableErr: kotlin.Int
    get() = TODO()

val kTECJapanesePluginSignature: kotlin.UInt
    get() = TODO()

val kTECKeepInfoFixBit: kotlin.UInt
    get() = TODO()

val kTECKeepInfoFixMask: kotlin.UInt
    get() = TODO()

val kTECKoreanPluginSignature: kotlin.UInt
    get() = TODO()

val kTECMailEncodingsResType: kotlin.UInt
    get() = TODO()

val kTECMissingTableErr: kotlin.Int
    get() = TODO()

val kTECNeedFlushStatus: kotlin.Int
    get() = TODO()

val kTECNoConversionPathErr: kotlin.Int
    get() = TODO()

val kTECOutputBufferFullStatus: kotlin.Int
    get() = TODO()

val kTECPartialCharErr: kotlin.Int
    get() = TODO()

val kTECPluginCreator: kotlin.UInt
    get() = TODO()

val kTECPluginDispatchTableCurrentVersion: kotlin.UInt
    get() = TODO()

val kTECPluginDispatchTableVersion1: kotlin.UInt
    get() = TODO()

val kTECPluginDispatchTableVersion1_1: kotlin.UInt
    get() = TODO()

val kTECPluginDispatchTableVersion1_2: kotlin.UInt
    get() = TODO()

val kTECPluginManyToOne: kotlin.UInt
    get() = TODO()

val kTECPluginOneToMany: kotlin.UInt
    get() = TODO()

val kTECPluginOneToOne: kotlin.UInt
    get() = TODO()

val kTECPluginSniffObj: kotlin.UInt
    get() = TODO()

val kTECPluginType: kotlin.UInt
    get() = TODO()

val kTECPreferredEncodingFixBit: kotlin.UInt
    get() = TODO()

val kTECPreferredEncodingFixMask: kotlin.UInt
    get() = TODO()

val kTECResourceID: kotlin.UInt
    get() = TODO()

val kTECSignature: kotlin.UInt
    get() = TODO()

val kTECSubTextEncodingsResType: kotlin.UInt
    get() = TODO()

val kTECTableChecksumErr: kotlin.Int
    get() = TODO()

val kTECTableFormatErr: kotlin.Int
    get() = TODO()

val kTECTextRunBitClearFixBit: kotlin.UInt
    get() = TODO()

val kTECTextRunBitClearFixMask: kotlin.UInt
    get() = TODO()

val kTECTextToUnicodeScanFixBit: kotlin.UInt
    get() = TODO()

val kTECTextToUnicodeScanFixMask: kotlin.UInt
    get() = TODO()

val kTECUnicodePluginSignature: kotlin.UInt
    get() = TODO()

val kTECUnmappableElementErr: kotlin.Int
    get() = TODO()

val kTECUsedFallbacksStatus: kotlin.Int
    get() = TODO()

val kTECWebEncodingsResType: kotlin.UInt
    get() = TODO()

val kTEC_MIBEnumDontCare: kotlin.Int
    get() = TODO()

val kTMTaskActive: kotlin.UInt
    get() = TODO()

val kTSMHiliteBlockFillText: kotlin.UInt
    get() = TODO()

val kTSMHiliteCaretPosition: kotlin.UInt
    get() = TODO()

val kTSMHiliteConvertedText: kotlin.UInt
    get() = TODO()

val kTSMHiliteNoHilite: kotlin.UInt
    get() = TODO()

val kTSMHiliteOutlineText: kotlin.UInt
    get() = TODO()

val kTSMHiliteRawText: kotlin.UInt
    get() = TODO()

val kTSMHiliteSelectedConvertedText: kotlin.UInt
    get() = TODO()

val kTSMHiliteSelectedRawText: kotlin.UInt
    get() = TODO()

val kTSMHiliteSelectedText: kotlin.UInt
    get() = TODO()

val kTSMInsideOfActiveInputArea: kotlin.UInt
    get() = TODO()

val kTSMInsideOfBody: kotlin.UInt
    get() = TODO()

val kTSMOutsideOfBody: kotlin.UInt
    get() = TODO()

val kTXNATSUIIsNotInstalledErr: kotlin.Int
    get() = TODO()

val kTXNAlreadyInitializedErr: kotlin.Int
    get() = TODO()

val kTXNAttributeTagInvalidForRunErr: kotlin.Int
    get() = TODO()

val kTXNBadDefaultFileTypeWarning: kotlin.Int
    get() = TODO()

val kTXNCannotAddFrameErr: kotlin.Int
    get() = TODO()

val kTXNCannotSetAutoIndentErr: kotlin.Int
    get() = TODO()

val kTXNCannotTurnTSMOffWhenUsingUnicodeErr: kotlin.Int
    get() = TODO()

val kTXNCopyNotAllowedInEchoModeErr: kotlin.Int
    get() = TODO()

val kTXNDataTypeNotAllowedErr: kotlin.Int
    get() = TODO()

val kTXNEndIterationErr: kotlin.Int
    get() = TODO()

val kTXNIllegalToCrossDataBoundariesErr: kotlin.Int
    get() = TODO()

val kTXNInvalidFrameIDErr: kotlin.Int
    get() = TODO()

val kTXNInvalidRunIndex: kotlin.Int
    get() = TODO()

val kTXNNoMatchErr: kotlin.Int
    get() = TODO()

val kTXNOutsideOfFrameErr: kotlin.Int
    get() = TODO()

val kTXNOutsideOfLineErr: kotlin.Int
    get() = TODO()

val kTXNRunIndexOutofBoundsErr: kotlin.Int
    get() = TODO()

val kTXNSomeOrAllTagsInvalidForRunErr: kotlin.Int
    get() = TODO()

val kTXNUserCanceledOperationErr: kotlin.Int
    get() = TODO()

val kTaskCreationException: kotlin.UInt
    get() = TODO()

val kTaskTerminationException: kotlin.UInt
    get() = TODO()

val kTemporaryFolderType: kotlin.UInt
    get() = TODO()

val kTemporaryItemsInCacheDataFolderType: kotlin.UInt
    get() = TODO()

val kTemporaryItemsInUserDomainFolderType: kotlin.UInt
    get() = TODO()

val kTextCenter: kotlin.Int
    get() = TODO()

val kTextEncodingANSEL: kotlin.UInt
    get() = TODO()

val kTextEncodingBaseName: kotlin.UInt
    get() = TODO()

val kTextEncodingBig5: kotlin.UInt
    get() = TODO()

val kTextEncodingBig5_E: kotlin.UInt
    get() = TODO()

val kTextEncodingBig5_HKSCS_1999: kotlin.UInt
    get() = TODO()

val kTextEncodingCNS_11643_92_P1: kotlin.UInt
    get() = TODO()

val kTextEncodingCNS_11643_92_P2: kotlin.UInt
    get() = TODO()

val kTextEncodingCNS_11643_92_P3: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSArabic: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSBalticRim: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSCanadianFrench: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSChineseSimplif: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSChineseTrad: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSCyrillic: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSGreek: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSGreek1: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSGreek2: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSHebrew: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSIcelandic: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSJapanese: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSKorean: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSLatin1: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSLatin2: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSLatinUS: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSNordic: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSPortuguese: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSRussian: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSThai: kotlin.UInt
    get() = TODO()

val kTextEncodingDOSTurkish: kotlin.UInt
    get() = TODO()

val kTextEncodingDefaultFormat: kotlin.UInt
    get() = TODO()

val kTextEncodingDefaultVariant: kotlin.UInt
    get() = TODO()

val kTextEncodingEBCDIC_CP037: kotlin.UInt
    get() = TODO()

val kTextEncodingEBCDIC_LatinCore: kotlin.UInt
    get() = TODO()

val kTextEncodingEBCDIC_US: kotlin.UInt
    get() = TODO()

val kTextEncodingEUC_CN: kotlin.UInt
    get() = TODO()

val kTextEncodingEUC_JP: kotlin.UInt
    get() = TODO()

val kTextEncodingEUC_KR: kotlin.UInt
    get() = TODO()

val kTextEncodingEUC_TW: kotlin.UInt
    get() = TODO()

val kTextEncodingFormatName: kotlin.UInt
    get() = TODO()

val kTextEncodingFullName: kotlin.UInt
    get() = TODO()

val kTextEncodingGBK_95: kotlin.UInt
    get() = TODO()

val kTextEncodingGB_18030_2000: kotlin.UInt
    get() = TODO()

val kTextEncodingGB_18030_2005: kotlin.UInt
    get() = TODO()

val kTextEncodingGB_2312_80: kotlin.UInt
    get() = TODO()

val kTextEncodingHZ_GB_2312: kotlin.UInt
    get() = TODO()

val kTextEncodingISO10646_1993: kotlin.UInt
    get() = TODO()

val kTextEncodingISOLatin1: kotlin.UInt
    get() = TODO()

val kTextEncodingISOLatin10: kotlin.UInt
    get() = TODO()

val kTextEncodingISOLatin2: kotlin.UInt
    get() = TODO()

val kTextEncodingISOLatin3: kotlin.UInt
    get() = TODO()

val kTextEncodingISOLatin4: kotlin.UInt
    get() = TODO()

val kTextEncodingISOLatin5: kotlin.UInt
    get() = TODO()

val kTextEncodingISOLatin6: kotlin.UInt
    get() = TODO()

val kTextEncodingISOLatin7: kotlin.UInt
    get() = TODO()

val kTextEncodingISOLatin8: kotlin.UInt
    get() = TODO()

val kTextEncodingISOLatin9: kotlin.UInt
    get() = TODO()

val kTextEncodingISOLatinArabic: kotlin.UInt
    get() = TODO()

val kTextEncodingISOLatinCyrillic: kotlin.UInt
    get() = TODO()

val kTextEncodingISOLatinGreek: kotlin.UInt
    get() = TODO()

val kTextEncodingISOLatinHebrew: kotlin.UInt
    get() = TODO()

val kTextEncodingISO_2022_CN: kotlin.UInt
    get() = TODO()

val kTextEncodingISO_2022_CN_EXT: kotlin.UInt
    get() = TODO()

val kTextEncodingISO_2022_JP: kotlin.UInt
    get() = TODO()

val kTextEncodingISO_2022_JP_1: kotlin.UInt
    get() = TODO()

val kTextEncodingISO_2022_JP_2: kotlin.UInt
    get() = TODO()

val kTextEncodingISO_2022_JP_3: kotlin.UInt
    get() = TODO()

val kTextEncodingISO_2022_KR: kotlin.UInt
    get() = TODO()

val kTextEncodingJIS_C6226_78: kotlin.UInt
    get() = TODO()

val kTextEncodingJIS_X0201_76: kotlin.UInt
    get() = TODO()

val kTextEncodingJIS_X0208_83: kotlin.UInt
    get() = TODO()

val kTextEncodingJIS_X0208_90: kotlin.UInt
    get() = TODO()

val kTextEncodingJIS_X0212_90: kotlin.UInt
    get() = TODO()

val kTextEncodingJIS_X0213_MenKuTen: kotlin.UInt
    get() = TODO()

val kTextEncodingKOI8_R: kotlin.UInt
    get() = TODO()

val kTextEncodingKOI8_U: kotlin.UInt
    get() = TODO()

val kTextEncodingKSC_5601_87: kotlin.UInt
    get() = TODO()

val kTextEncodingKSC_5601_92_Johab: kotlin.UInt
    get() = TODO()

val kTextEncodingMacArabic: kotlin.UInt
    get() = TODO()

val kTextEncodingMacArmenian: kotlin.UInt
    get() = TODO()

val kTextEncodingMacBengali: kotlin.UInt
    get() = TODO()

val kTextEncodingMacBurmese: kotlin.UInt
    get() = TODO()

val kTextEncodingMacCeltic: kotlin.UInt
    get() = TODO()

val kTextEncodingMacCentralEurRoman: kotlin.UInt
    get() = TODO()

val kTextEncodingMacChineseSimp: kotlin.UInt
    get() = TODO()

val kTextEncodingMacChineseTrad: kotlin.UInt
    get() = TODO()

val kTextEncodingMacCroatian: kotlin.UInt
    get() = TODO()

val kTextEncodingMacCyrillic: kotlin.UInt
    get() = TODO()

val kTextEncodingMacDevanagari: kotlin.UInt
    get() = TODO()

val kTextEncodingMacDingbats: kotlin.UInt
    get() = TODO()

val kTextEncodingMacEastEurRoman: kotlin.UInt
    get() = TODO()

val kTextEncodingMacEthiopic: kotlin.UInt
    get() = TODO()

val kTextEncodingMacExtArabic: kotlin.UInt
    get() = TODO()

val kTextEncodingMacFarsi: kotlin.UInt
    get() = TODO()

val kTextEncodingMacGaelic: kotlin.UInt
    get() = TODO()

val kTextEncodingMacGeez: kotlin.UInt
    get() = TODO()

val kTextEncodingMacGeorgian: kotlin.UInt
    get() = TODO()

val kTextEncodingMacGreek: kotlin.UInt
    get() = TODO()

val kTextEncodingMacGujarati: kotlin.UInt
    get() = TODO()

val kTextEncodingMacGurmukhi: kotlin.UInt
    get() = TODO()

val kTextEncodingMacHFS: kotlin.UInt
    get() = TODO()

val kTextEncodingMacHebrew: kotlin.UInt
    get() = TODO()

val kTextEncodingMacIcelandic: kotlin.UInt
    get() = TODO()

val kTextEncodingMacInuit: kotlin.UInt
    get() = TODO()

val kTextEncodingMacJapanese: kotlin.UInt
    get() = TODO()

val kTextEncodingMacKannada: kotlin.UInt
    get() = TODO()

val kTextEncodingMacKeyboardGlyphs: kotlin.UInt
    get() = TODO()

val kTextEncodingMacKhmer: kotlin.UInt
    get() = TODO()

val kTextEncodingMacKorean: kotlin.UInt
    get() = TODO()

val kTextEncodingMacLaotian: kotlin.UInt
    get() = TODO()

val kTextEncodingMacMalayalam: kotlin.UInt
    get() = TODO()

val kTextEncodingMacMongolian: kotlin.UInt
    get() = TODO()

val kTextEncodingMacOriya: kotlin.UInt
    get() = TODO()

val kTextEncodingMacRSymbol: kotlin.UInt
    get() = TODO()

val kTextEncodingMacRoman: kotlin.UInt
    get() = TODO()

val kTextEncodingMacRomanLatin1: kotlin.UInt
    get() = TODO()

val kTextEncodingMacRomanian: kotlin.UInt
    get() = TODO()

val kTextEncodingMacSimpChinese: kotlin.UInt
    get() = TODO()

val kTextEncodingMacSinhalese: kotlin.UInt
    get() = TODO()

val kTextEncodingMacSymbol: kotlin.UInt
    get() = TODO()

val kTextEncodingMacTamil: kotlin.UInt
    get() = TODO()

val kTextEncodingMacTelugu: kotlin.UInt
    get() = TODO()

val kTextEncodingMacThai: kotlin.UInt
    get() = TODO()

val kTextEncodingMacTibetan: kotlin.UInt
    get() = TODO()

val kTextEncodingMacTradChinese: kotlin.UInt
    get() = TODO()

val kTextEncodingMacTurkish: kotlin.UInt
    get() = TODO()

val kTextEncodingMacUkrainian: kotlin.UInt
    get() = TODO()

val kTextEncodingMacUnicode: kotlin.UInt
    get() = TODO()

val kTextEncodingMacUninterp: kotlin.UInt
    get() = TODO()

val kTextEncodingMacVT100: kotlin.UInt
    get() = TODO()

val kTextEncodingMacVietnamese: kotlin.UInt
    get() = TODO()

val kTextEncodingMultiRun: kotlin.UInt
    get() = TODO()

val kTextEncodingNextStepJapanese: kotlin.UInt
    get() = TODO()

val kTextEncodingNextStepLatin: kotlin.UInt
    get() = TODO()

val kTextEncodingShiftJIS: kotlin.UInt
    get() = TODO()

val kTextEncodingShiftJIS_X0213: kotlin.UInt
    get() = TODO()

val kTextEncodingShiftJIS_X0213_00: kotlin.UInt
    get() = TODO()

val kTextEncodingUS_ASCII: kotlin.UInt
    get() = TODO()

val kTextEncodingUnicodeDefault: kotlin.UInt
    get() = TODO()

val kTextEncodingUnicodeV10_0: kotlin.UInt
    get() = TODO()

val kTextEncodingUnicodeV11_0: kotlin.UInt
    get() = TODO()

val kTextEncodingUnicodeV1_1: kotlin.UInt
    get() = TODO()

val kTextEncodingUnicodeV2_0: kotlin.UInt
    get() = TODO()

val kTextEncodingUnicodeV2_1: kotlin.UInt
    get() = TODO()

val kTextEncodingUnicodeV3_0: kotlin.UInt
    get() = TODO()

val kTextEncodingUnicodeV3_1: kotlin.UInt
    get() = TODO()

val kTextEncodingUnicodeV3_2: kotlin.UInt
    get() = TODO()

val kTextEncodingUnicodeV4_0: kotlin.UInt
    get() = TODO()

val kTextEncodingUnicodeV5_0: kotlin.UInt
    get() = TODO()

val kTextEncodingUnicodeV5_1: kotlin.UInt
    get() = TODO()

val kTextEncodingUnicodeV6_0: kotlin.UInt
    get() = TODO()

val kTextEncodingUnicodeV6_1: kotlin.UInt
    get() = TODO()

val kTextEncodingUnicodeV6_3: kotlin.UInt
    get() = TODO()

val kTextEncodingUnicodeV7_0: kotlin.UInt
    get() = TODO()

val kTextEncodingUnicodeV8_0: kotlin.UInt
    get() = TODO()

val kTextEncodingUnicodeV9_0: kotlin.UInt
    get() = TODO()

val kTextEncodingUnknown: kotlin.UInt
    get() = TODO()

val kTextEncodingVISCII: kotlin.UInt
    get() = TODO()

val kTextEncodingVariantName: kotlin.UInt
    get() = TODO()

val kTextEncodingWindowsANSI: kotlin.UInt
    get() = TODO()

val kTextEncodingWindowsArabic: kotlin.UInt
    get() = TODO()

val kTextEncodingWindowsBalticRim: kotlin.UInt
    get() = TODO()

val kTextEncodingWindowsCyrillic: kotlin.UInt
    get() = TODO()

val kTextEncodingWindowsGreek: kotlin.UInt
    get() = TODO()

val kTextEncodingWindowsHebrew: kotlin.UInt
    get() = TODO()

val kTextEncodingWindowsKoreanJohab: kotlin.UInt
    get() = TODO()

val kTextEncodingWindowsLatin1: kotlin.UInt
    get() = TODO()

val kTextEncodingWindowsLatin2: kotlin.UInt
    get() = TODO()

val kTextEncodingWindowsLatin5: kotlin.UInt
    get() = TODO()

val kTextEncodingWindowsVietnamese: kotlin.UInt
    get() = TODO()

val kTextEncodingsFolderIcon: kotlin.Int
    get() = TODO()

val kTextEncodingsFolderType: kotlin.UInt
    get() = TODO()

val kTextFlushDefault: kotlin.Int
    get() = TODO()

val kTextFlushLeft: kotlin.Int
    get() = TODO()

val kTextFlushRight: kotlin.Int
    get() = TODO()

val kTextLanguageDontCare: kotlin.Int
    get() = TODO()

val kTextMalformedInputErr: kotlin.Int
    get() = TODO()

val kTextRegionDontCare: kotlin.Int
    get() = TODO()

val kTextScriptDontCare: kotlin.Int
    get() = TODO()

val kTextServiceClass: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kTextUndefinedElementErr: kotlin.Int
    get() = TODO()

val kTextUnsupportedEncodingErr: kotlin.Int
    get() = TODO()

val kThemesFolderType: kotlin.UInt
    get() = TODO()

val kThinkCStackBased: kotlin.UInt
    get() = TODO()

val kThumbnail32BitData: kotlin.UInt
    get() = TODO()

val kThumbnail8BitMask: kotlin.UInt
    get() = TODO()

val kTileIconVariant: kotlin.UInt
    get() = TODO()

val kTooManyIOWindowsErr: kotlin.Int
    get() = TODO()

val kToolbarAdvancedIcon: kotlin.UInt
    get() = TODO()

val kToolbarApplicationsFolderIcon: kotlin.UInt
    get() = TODO()

val kToolbarCustomizeIcon: kotlin.UInt
    get() = TODO()

val kToolbarDeleteIcon: kotlin.UInt
    get() = TODO()

val kToolbarDesktopFolderIcon: kotlin.UInt
    get() = TODO()

val kToolbarDocumentsFolderIcon: kotlin.UInt
    get() = TODO()

val kToolbarDownloadsFolderIcon: kotlin.UInt
    get() = TODO()

val kToolbarFavoritesIcon: kotlin.UInt
    get() = TODO()

val kToolbarHomeIcon: kotlin.UInt
    get() = TODO()

val kToolbarInfoIcon: kotlin.UInt
    get() = TODO()

val kToolbarLabelsIcon: kotlin.UInt
    get() = TODO()

val kToolbarLibraryFolderIcon: kotlin.UInt
    get() = TODO()

val kToolbarMovieFolderIcon: kotlin.UInt
    get() = TODO()

val kToolbarMusicFolderIcon: kotlin.UInt
    get() = TODO()

val kToolbarPicturesFolderIcon: kotlin.UInt
    get() = TODO()

val kToolbarPublicFolderIcon: kotlin.UInt
    get() = TODO()

val kToolbarSitesFolderIcon: kotlin.UInt
    get() = TODO()

val kToolbarUtilitiesFolderIcon: kotlin.UInt
    get() = TODO()

val kTraceException: kotlin.UInt
    get() = TODO()

val kTrapException: kotlin.UInt
    get() = TODO()

val kTrashFolderType: kotlin.UInt
    get() = TODO()

val kTrashIcon: kotlin.UInt
    get() = TODO()

val kTrashIconResource: kotlin.Int
    get() = TODO()

val kTrueTypeFlatFontIcon: kotlin.UInt
    get() = TODO()

val kTrueTypeFontIcon: kotlin.UInt
    get() = TODO()

val kTrueTypeMultiFlatFontIcon: kotlin.UInt
    get() = TODO()

val kTwoByteCode: kotlin.UInt
    get() = TODO()

val kTwoWayEncryptPassword: kotlin.UInt
    get() = TODO()

val kTypeKCItemAttr: kotlin.UInt
    get() = TODO()

val kUCBidiCatArabicNumber: kotlin.UInt
    get() = TODO()

val kUCBidiCatBlockSeparator: kotlin.UInt
    get() = TODO()

val kUCBidiCatBoundaryNeutral: kotlin.UInt
    get() = TODO()

val kUCBidiCatCommonNumberSeparator: kotlin.UInt
    get() = TODO()

val kUCBidiCatEuroNumber: kotlin.UInt
    get() = TODO()

val kUCBidiCatEuroNumberSeparator: kotlin.UInt
    get() = TODO()

val kUCBidiCatEuroNumberTerminator: kotlin.UInt
    get() = TODO()

val kUCBidiCatFirstStrongIsolate: kotlin.UInt
    get() = TODO()

val kUCBidiCatLeftRight: kotlin.UInt
    get() = TODO()

val kUCBidiCatLeftRightEmbedding: kotlin.UInt
    get() = TODO()

val kUCBidiCatLeftRightIsolate: kotlin.UInt
    get() = TODO()

val kUCBidiCatLeftRightOverride: kotlin.UInt
    get() = TODO()

val kUCBidiCatNonSpacingMark: kotlin.UInt
    get() = TODO()

val kUCBidiCatNotApplicable: kotlin.UInt
    get() = TODO()

val kUCBidiCatOtherNeutral: kotlin.UInt
    get() = TODO()

val kUCBidiCatPopDirectionalFormat: kotlin.UInt
    get() = TODO()

val kUCBidiCatPopDirectionalIsolate: kotlin.UInt
    get() = TODO()

val kUCBidiCatRightLeft: kotlin.UInt
    get() = TODO()

val kUCBidiCatRightLeftArabic: kotlin.UInt
    get() = TODO()

val kUCBidiCatRightLeftEmbedding: kotlin.UInt
    get() = TODO()

val kUCBidiCatRightLeftIsolate: kotlin.UInt
    get() = TODO()

val kUCBidiCatRightLeftOverride: kotlin.UInt
    get() = TODO()

val kUCBidiCatSegmentSeparator: kotlin.UInt
    get() = TODO()

val kUCBidiCatWhitespace: kotlin.UInt
    get() = TODO()

val kUCCharPropTypeBidiCategory: kotlin.UInt
    get() = TODO()

val kUCCharPropTypeCombiningClass: kotlin.UInt
    get() = TODO()

val kUCCharPropTypeDecimalDigitValue: kotlin.UInt
    get() = TODO()

val kUCCharPropTypeGenlCategory: kotlin.UInt
    get() = TODO()

val kUCCollateCaseInsensitiveMask: kotlin.UInt
    get() = TODO()

val kUCCollateComposeInsensitiveMask: kotlin.UInt
    get() = TODO()

val kUCCollateDiacritInsensitiveMask: kotlin.UInt
    get() = TODO()

val kUCCollateDigitsAsNumberMask: kotlin.UInt
    get() = TODO()

val kUCCollateDigitsOverrideMask: kotlin.UInt
    get() = TODO()

val kUCCollatePunctuationSignificantMask: kotlin.UInt
    get() = TODO()

val kUCCollateStandardOptions: kotlin.UInt
    get() = TODO()

val kUCCollateTypeHFSExtended: kotlin.UInt
    get() = TODO()

val kUCCollateTypeMask: kotlin.UInt
    get() = TODO()

val kUCCollateTypeShiftBits: kotlin.UInt
    get() = TODO()

val kUCCollateTypeSourceMask: kotlin.UInt
    get() = TODO()

val kUCCollateWidthInsensitiveMask: kotlin.UInt
    get() = TODO()

val kUCGenlCatLetterLowercase: kotlin.UInt
    get() = TODO()

val kUCGenlCatLetterModifier: kotlin.UInt
    get() = TODO()

val kUCGenlCatLetterOther: kotlin.UInt
    get() = TODO()

val kUCGenlCatLetterTitlecase: kotlin.UInt
    get() = TODO()

val kUCGenlCatLetterUppercase: kotlin.UInt
    get() = TODO()

val kUCGenlCatMarkEnclosing: kotlin.UInt
    get() = TODO()

val kUCGenlCatMarkNonSpacing: kotlin.UInt
    get() = TODO()

val kUCGenlCatMarkSpacingCombining: kotlin.UInt
    get() = TODO()

val kUCGenlCatNumberDecimalDigit: kotlin.UInt
    get() = TODO()

val kUCGenlCatNumberLetter: kotlin.UInt
    get() = TODO()

val kUCGenlCatNumberOther: kotlin.UInt
    get() = TODO()

val kUCGenlCatOtherControl: kotlin.UInt
    get() = TODO()

val kUCGenlCatOtherFormat: kotlin.UInt
    get() = TODO()

val kUCGenlCatOtherNotAssigned: kotlin.UInt
    get() = TODO()

val kUCGenlCatOtherPrivateUse: kotlin.UInt
    get() = TODO()

val kUCGenlCatOtherSurrogate: kotlin.UInt
    get() = TODO()

val kUCGenlCatPunctClose: kotlin.UInt
    get() = TODO()

val kUCGenlCatPunctConnector: kotlin.UInt
    get() = TODO()

val kUCGenlCatPunctDash: kotlin.UInt
    get() = TODO()

val kUCGenlCatPunctFinalQuote: kotlin.UInt
    get() = TODO()

val kUCGenlCatPunctInitialQuote: kotlin.UInt
    get() = TODO()

val kUCGenlCatPunctOpen: kotlin.UInt
    get() = TODO()

val kUCGenlCatPunctOther: kotlin.UInt
    get() = TODO()

val kUCGenlCatSeparatorLine: kotlin.UInt
    get() = TODO()

val kUCGenlCatSeparatorParagraph: kotlin.UInt
    get() = TODO()

val kUCGenlCatSeparatorSpace: kotlin.UInt
    get() = TODO()

val kUCGenlCatSymbolCurrency: kotlin.UInt
    get() = TODO()

val kUCGenlCatSymbolMath: kotlin.UInt
    get() = TODO()

val kUCGenlCatSymbolModifier: kotlin.UInt
    get() = TODO()

val kUCGenlCatSymbolOther: kotlin.UInt
    get() = TODO()

val kUCHighSurrogateRangeEnd: kotlin.UInt
    get() = TODO()

val kUCHighSurrogateRangeStart: kotlin.UInt
    get() = TODO()

val kUCKeyActionAutoKey: kotlin.UInt
    get() = TODO()

val kUCKeyActionDisplay: kotlin.UInt
    get() = TODO()

val kUCKeyActionDown: kotlin.UInt
    get() = TODO()

val kUCKeyActionUp: kotlin.UInt
    get() = TODO()

val kUCKeyLayoutFeatureInfoFormat: kotlin.UInt
    get() = TODO()

val kUCKeyLayoutHeaderFormat: kotlin.UInt
    get() = TODO()

val kUCKeyModifiersToTableNumFormat: kotlin.UInt
    get() = TODO()

val kUCKeyOutputGetIndexMask: kotlin.UInt
    get() = TODO()

val kUCKeyOutputSequenceIndexMask: kotlin.UInt
    get() = TODO()

val kUCKeyOutputStateIndexMask: kotlin.UInt
    get() = TODO()

val kUCKeyOutputTestForIndexMask: kotlin.UInt
    get() = TODO()

val kUCKeySequenceDataIndexFormat: kotlin.UInt
    get() = TODO()

val kUCKeyStateEntryRangeFormat: kotlin.UInt
    get() = TODO()

val kUCKeyStateEntryTerminalFormat: kotlin.UInt
    get() = TODO()

val kUCKeyStateRecordsIndexFormat: kotlin.UInt
    get() = TODO()

val kUCKeyStateTerminatorsFormat: kotlin.UInt
    get() = TODO()

val kUCKeyToCharTableIndexFormat: kotlin.UInt
    get() = TODO()

val kUCKeyTranslateNoDeadKeysBit: kotlin.UInt
    get() = TODO()

val kUCKeyTranslateNoDeadKeysMask: kotlin.UInt
    get() = TODO()

val kUCLowSurrogateRangeEnd: kotlin.UInt
    get() = TODO()

val kUCLowSurrogateRangeStart: kotlin.UInt
    get() = TODO()

val kUCOutputBufferTooSmall: kotlin.Int
    get() = TODO()

val kUCTSDirectionNext: kotlin.UInt
    get() = TODO()

val kUCTSDirectionPrevious: kotlin.UInt
    get() = TODO()

val kUCTSNoKeysAddedToObjectErr: kotlin.Int
    get() = TODO()

val kUCTSOptionsDataIsOrderedMask: kotlin.UInt
    get() = TODO()

val kUCTSOptionsNoneMask: kotlin.UInt
    get() = TODO()

val kUCTSOptionsReleaseStringMask: kotlin.UInt
    get() = TODO()

val kUCTSSearchListErr: kotlin.Int
    get() = TODO()

val kUCTextBreakCharMask: kotlin.UInt
    get() = TODO()

val kUCTextBreakClusterMask: kotlin.UInt
    get() = TODO()

val kUCTextBreakGoBackwardsMask: kotlin.UInt
    get() = TODO()

val kUCTextBreakIterateMask: kotlin.UInt
    get() = TODO()

val kUCTextBreakLeadingEdgeMask: kotlin.UInt
    get() = TODO()

val kUCTextBreakLineMask: kotlin.UInt
    get() = TODO()

val kUCTextBreakLocatorMissingType: kotlin.Int
    get() = TODO()

val kUCTextBreakParagraphMask: kotlin.UInt
    get() = TODO()

val kUCTextBreakWordMask: kotlin.UInt
    get() = TODO()

val kUCTokenNotFound: kotlin.Int
    get() = TODO()

val kUCTokenizerIterationFinished: kotlin.Int
    get() = TODO()

val kUCTokenizerUnknownLang: kotlin.Int
    get() = TODO()

val kUCTypeSelectMaxListSize: kotlin.UInt
    get() = TODO()

val kURL68kNotSupportedError: kotlin.Int
    get() = TODO()

val kURLAccessNotAvailableError: kotlin.Int
    get() = TODO()

val kURLAuthenticationError: kotlin.Int
    get() = TODO()

val kURLDestinationExistsError: kotlin.Int
    get() = TODO()

val kURLExtensionFailureError: kotlin.Int
    get() = TODO()

val kURLFileEmptyError: kotlin.Int
    get() = TODO()

val kURLInvalidCallError: kotlin.Int
    get() = TODO()

val kURLInvalidConfigurationError: kotlin.Int
    get() = TODO()

val kURLInvalidURLError: kotlin.Int
    get() = TODO()

val kURLInvalidURLReferenceError: kotlin.Int
    get() = TODO()

val kURLProgressAlreadyDisplayedError: kotlin.Int
    get() = TODO()

val kURLPropertyBufferTooSmallError: kotlin.Int
    get() = TODO()

val kURLPropertyNotYetKnownError: kotlin.Int
    get() = TODO()

val kURLServerBusyError: kotlin.Int
    get() = TODO()

val kURLUnknownPropertyError: kotlin.Int
    get() = TODO()

val kURLUnsettablePropertyError: kotlin.Int
    get() = TODO()

val kURLUnsupportedSchemeError: kotlin.Int
    get() = TODO()

val kUSBAbortedError: kotlin.Int
    get() = TODO()

val kUSBAlreadyOpenErr: kotlin.Int
    get() = TODO()

val kUSBBadDispatchTable: kotlin.Int
    get() = TODO()

val kUSBBitstufErr: kotlin.Int
    get() = TODO()

val kUSBBufOvrRunErr: kotlin.Int
    get() = TODO()

val kUSBBufUnderRunErr: kotlin.Int
    get() = TODO()

val kUSBCRCErr: kotlin.Int
    get() = TODO()

val kUSBCompletionError: kotlin.Int
    get() = TODO()

val kUSBDataToggleErr: kotlin.Int
    get() = TODO()

val kUSBDeviceBusy: kotlin.Int
    get() = TODO()

val kUSBDeviceDisconnected: kotlin.Int
    get() = TODO()

val kUSBDeviceErr: kotlin.Int
    get() = TODO()

val kUSBDeviceNotSuspended: kotlin.Int
    get() = TODO()

val kUSBDevicePowerProblem: kotlin.Int
    get() = TODO()

val kUSBDeviceSuspended: kotlin.Int
    get() = TODO()

val kUSBEndpointStallErr: kotlin.Int
    get() = TODO()

val kUSBFlagsError: kotlin.Int
    get() = TODO()

val kUSBIncorrectTypeErr: kotlin.Int
    get() = TODO()

val kUSBInternalErr: kotlin.Int
    get() = TODO()

val kUSBInternalReserved1: kotlin.Int
    get() = TODO()

val kUSBInternalReserved10: kotlin.Int
    get() = TODO()

val kUSBInternalReserved2: kotlin.Int
    get() = TODO()

val kUSBInternalReserved3: kotlin.Int
    get() = TODO()

val kUSBInternalReserved4: kotlin.Int
    get() = TODO()

val kUSBInternalReserved5: kotlin.Int
    get() = TODO()

val kUSBInternalReserved6: kotlin.Int
    get() = TODO()

val kUSBInternalReserved7: kotlin.Int
    get() = TODO()

val kUSBInternalReserved8: kotlin.Int
    get() = TODO()

val kUSBInternalReserved9: kotlin.Int
    get() = TODO()

val kUSBInvalidBuffer: kotlin.Int
    get() = TODO()

val kUSBLinkErr: kotlin.Int
    get() = TODO()

val kUSBNoBandwidthError: kotlin.Int
    get() = TODO()

val kUSBNoDelay: kotlin.UInt
    get() = TODO()

val kUSBNoDeviceErr: kotlin.Int
    get() = TODO()

val kUSBNoErr: kotlin.UInt
    get() = TODO()

val kUSBNoTran: kotlin.UInt
    get() = TODO()

val kUSBNotFound: kotlin.Int
    get() = TODO()

val kUSBNotHandled: kotlin.Int
    get() = TODO()

val kUSBNotRespondingErr: kotlin.Int
    get() = TODO()

val kUSBNotSent1Err: kotlin.Int
    get() = TODO()

val kUSBNotSent2Err: kotlin.Int
    get() = TODO()

val kUSBOutOfMemoryErr: kotlin.Int
    get() = TODO()

val kUSBOverRunErr: kotlin.Int
    get() = TODO()

val kUSBPBLengthError: kotlin.Int
    get() = TODO()

val kUSBPBVersionError: kotlin.Int
    get() = TODO()

val kUSBPIDCheckErr: kotlin.Int
    get() = TODO()

val kUSBPending: kotlin.UInt
    get() = TODO()

val kUSBPipeIdleError: kotlin.Int
    get() = TODO()

val kUSBPipeStalledError: kotlin.Int
    get() = TODO()

val kUSBPortDisabled: kotlin.Int
    get() = TODO()

val kUSBQueueAborted: kotlin.Int
    get() = TODO()

val kUSBQueueFull: kotlin.Int
    get() = TODO()

val kUSBRes1Err: kotlin.Int
    get() = TODO()

val kUSBRes2Err: kotlin.Int
    get() = TODO()

val kUSBRqErr: kotlin.Int
    get() = TODO()

val kUSBTimedOut: kotlin.Int
    get() = TODO()

val kUSBTooManyPipesErr: kotlin.Int
    get() = TODO()

val kUSBTooManyTransactionsErr: kotlin.Int
    get() = TODO()

val kUSBUnderRunErr: kotlin.Int
    get() = TODO()

val kUSBUnknownDeviceErr: kotlin.Int
    get() = TODO()

val kUSBUnknownInterfaceErr: kotlin.Int
    get() = TODO()

val kUSBUnknownNotification: kotlin.Int
    get() = TODO()

val kUSBUnknownPipeErr: kotlin.Int
    get() = TODO()

val kUSBUnknownRequestErr: kotlin.Int
    get() = TODO()

val kUSBWrongPIDErr: kotlin.Int
    get() = TODO()

val kUTCDefaultOptions: kotlin.UInt
    get() = TODO()

val kUTCOverflowErr: kotlin.Int
    get() = TODO()

val kUTCUnderflowErr: kotlin.Int
    get() = TODO()

val kUTExportedTypeDeclarationsKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTImportedTypeDeclarationsKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTagClassFilenameExtension: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTagClassMIMEType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTagClassNSPboardType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTagClassOSType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTType3DContent: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeAVIMovie: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeAliasFile: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeAliasRecord: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeAppleICNS: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeAppleProtectedMPEG4Audio: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeAppleProtectedMPEG4Video: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeAppleScript: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeApplication: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeApplicationBundle: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeApplicationFile: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeArchive: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeAssemblyLanguageSource: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeAudio: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeAudioInterchangeFileFormat: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeAudiovisualContent: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeBMP: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeBinaryPropertyList: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeBookmark: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeBundle: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeBzip2Archive: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeCHeader: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeCPlusPlusHeader: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeCPlusPlusSource: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeCSource: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeCalendarEvent: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeCommaSeparatedText: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeCompositeContent: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeConformsToKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeContact: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeContent: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeData: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeDatabase: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeDelimitedText: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeDescriptionKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeDirectory: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeDiskImage: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeElectronicPublication: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeEmailMessage: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeExecutable: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeFileURL: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeFlatRTFD: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeFolder: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeFont: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeFramework: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeGIF: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeGNUZipArchive: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeHTML: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeICO: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeIconFileKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeIdentifierKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeImage: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeInkText: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeInternetLocation: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeItem: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeJPEG: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeJPEG2000: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeJSON: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeJavaArchive: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeJavaClass: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeJavaScript: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeJavaSource: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeLivePhoto: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeLog: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeM3UPlaylist: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeMIDIAudio: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeMP3: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeMPEG: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeMPEG2TransportStream: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeMPEG2Video: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeMPEG4: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeMPEG4Audio: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeMessage: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeMountPoint: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeMovie: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeOSAScript: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeOSAScriptBundle: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeObjectiveCPlusPlusSource: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeObjectiveCSource: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypePDF: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypePHPScript: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypePICT: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypePKCS12: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypePNG: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypePackage: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypePerlScript: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypePlainText: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypePlaylist: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypePluginBundle: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypePresentation: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypePropertyList: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypePythonScript: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeQuickLookGenerator: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeQuickTimeImage: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeQuickTimeMovie: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeRTF: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeRTFD: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeRawImage: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeReferenceURLKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeResolvable: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeRubyScript: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeScalableVectorGraphics: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeScript: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeShellScript: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeSourceCode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeSpotlightImporter: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeSpreadsheet: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeSwiftSource: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeSymLink: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeSystemPreferencesPane: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeTIFF: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeTXNTextAndMultimediaData: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeTabSeparatedText: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeTagSpecificationKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeText: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeToDoItem: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeURL: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeURLBookmarkData: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeUTF16ExternalPlainText: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeUTF16PlainText: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeUTF8PlainText: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeUTF8TabSeparatedText: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeUnixExecutable: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeVCard: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeVersionKey: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeVideo: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeVolume: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeWaveformAudio: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeWebArchive: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeWindowsExecutable: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeX509Certificate: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeXML: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeXMLPropertyList: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeXPCService: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUTTypeZipArchive: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()

val kUnicode16BitFormat: kotlin.UInt
    get() = TODO()

val kUnicode32BitFormat: kotlin.UInt
    get() = TODO()

val kUnicodeByteOrderMark: kotlin.UInt
    get() = TODO()

val kUnicodeCanonicalCompVariant: kotlin.UInt
    get() = TODO()

val kUnicodeCanonicalDecompVariant: kotlin.UInt
    get() = TODO()

val kUnicodeCollationClass: kotlin.UInt
    get() = TODO()

val kUnicodeDefaultDirection: kotlin.UInt
    get() = TODO()

val kUnicodeDefaultDirectionMask: kotlin.UInt
    get() = TODO()

val kUnicodeDirectionalityBits: kotlin.UInt
    get() = TODO()

val kUnicodeDirectionalityMask: kotlin.UInt
    get() = TODO()

val kUnicodeFallbackCustomFirst: kotlin.UInt
    get() = TODO()

val kUnicodeFallbackCustomOnly: kotlin.UInt
    get() = TODO()

val kUnicodeFallbackDefaultFirst: kotlin.UInt
    get() = TODO()

val kUnicodeFallbackDefaultOnly: kotlin.UInt
    get() = TODO()

val kUnicodeFallbackInterruptSafeMask: kotlin.UInt
    get() = TODO()

val kUnicodeFallbackSequencingBits: kotlin.UInt
    get() = TODO()

val kUnicodeFallbackSequencingMask: kotlin.UInt
    get() = TODO()

val kUnicodeForceASCIIRangeBit: kotlin.UInt
    get() = TODO()

val kUnicodeForceASCIIRangeMask: kotlin.UInt
    get() = TODO()

val kUnicodeHFSPlusCompVariant: kotlin.UInt
    get() = TODO()

val kUnicodeHFSPlusDecompVariant: kotlin.UInt
    get() = TODO()

val kUnicodeKeepInfoBit: kotlin.UInt
    get() = TODO()

val kUnicodeKeepInfoMask: kotlin.UInt
    get() = TODO()

val kUnicodeKeepSameEncodingBit: kotlin.UInt
    get() = TODO()

val kUnicodeKeepSameEncodingMask: kotlin.UInt
    get() = TODO()

val kUnicodeLeftToRight: kotlin.UInt
    get() = TODO()

val kUnicodeLeftToRightMask: kotlin.UInt
    get() = TODO()

val kUnicodeLooseMappingsBit: kotlin.UInt
    get() = TODO()

val kUnicodeLooseMappingsMask: kotlin.UInt
    get() = TODO()

val kUnicodeMapLineFeedToReturnBit: kotlin.UInt
    get() = TODO()

val kUnicodeMapLineFeedToReturnMask: kotlin.UInt
    get() = TODO()

val kUnicodeMatchOtherBaseBit: kotlin.UInt
    get() = TODO()

val kUnicodeMatchOtherBaseMask: kotlin.UInt
    get() = TODO()

val kUnicodeMatchOtherFormatBit: kotlin.UInt
    get() = TODO()

val kUnicodeMatchOtherFormatMask: kotlin.UInt
    get() = TODO()

val kUnicodeMatchOtherVariantBit: kotlin.UInt
    get() = TODO()

val kUnicodeMatchOtherVariantMask: kotlin.UInt
    get() = TODO()

val kUnicodeMatchUnicodeBaseBit: kotlin.UInt
    get() = TODO()

val kUnicodeMatchUnicodeBaseMask: kotlin.UInt
    get() = TODO()

val kUnicodeMatchUnicodeFormatBit: kotlin.UInt
    get() = TODO()

val kUnicodeMatchUnicodeFormatMask: kotlin.UInt
    get() = TODO()

val kUnicodeMatchUnicodeVariantBit: kotlin.UInt
    get() = TODO()

val kUnicodeMatchUnicodeVariantMask: kotlin.UInt
    get() = TODO()

val kUnicodeMaxDecomposedVariant: kotlin.UInt
    get() = TODO()

val kUnicodeNoCompatibilityVariant: kotlin.UInt
    get() = TODO()

val kUnicodeNoComposedVariant: kotlin.UInt
    get() = TODO()

val kUnicodeNoCorporateVariant: kotlin.UInt
    get() = TODO()

val kUnicodeNoHalfwidthCharsBit: kotlin.UInt
    get() = TODO()

val kUnicodeNoHalfwidthCharsMask: kotlin.UInt
    get() = TODO()

val kUnicodeNoSubset: kotlin.UInt
    get() = TODO()

val kUnicodeNormalizationFormC: kotlin.UInt
    get() = TODO()

val kUnicodeNormalizationFormD: kotlin.UInt
    get() = TODO()

val kUnicodeNotAChar: kotlin.UInt
    get() = TODO()

val kUnicodeNotFromInputMethod: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kUnicodeObjectReplacement: kotlin.UInt
    get() = TODO()

val kUnicodeReplacementChar: kotlin.UInt
    get() = TODO()

val kUnicodeRightToLeft: kotlin.UInt
    get() = TODO()

val kUnicodeRightToLeftMask: kotlin.UInt
    get() = TODO()

val kUnicodeSCSUFormat: kotlin.UInt
    get() = TODO()

val kUnicodeStringUnterminatedBit: kotlin.UInt
    get() = TODO()

val kUnicodeStringUnterminatedMask: kotlin.UInt
    get() = TODO()

val kUnicodeSwappedByteOrderMark: kotlin.UInt
    get() = TODO()

val kUnicodeTextBreakClass: kotlin.UInt
    get() = TODO()

val kUnicodeTextRunBit: kotlin.UInt
    get() = TODO()

val kUnicodeTextRunHeuristicsBit: kotlin.UInt
    get() = TODO()

val kUnicodeTextRunHeuristicsMask: kotlin.UInt
    get() = TODO()

val kUnicodeTextRunMask: kotlin.UInt
    get() = TODO()

val kUnicodeUTF16BEFormat: kotlin.UInt
    get() = TODO()

val kUnicodeUTF16Format: kotlin.UInt
    get() = TODO()

val kUnicodeUTF16LEFormat: kotlin.UInt
    get() = TODO()

val kUnicodeUTF32BEFormat: kotlin.UInt
    get() = TODO()

val kUnicodeUTF32Format: kotlin.UInt
    get() = TODO()

val kUnicodeUTF32LEFormat: kotlin.UInt
    get() = TODO()

val kUnicodeUTF7Format: kotlin.UInt
    get() = TODO()

val kUnicodeUTF8Format: kotlin.UInt
    get() = TODO()

val kUnicodeUseExternalEncodingFormBit: kotlin.UInt
    get() = TODO()

val kUnicodeUseExternalEncodingFormMask: kotlin.UInt
    get() = TODO()

val kUnicodeUseFallbacksBit: kotlin.UInt
    get() = TODO()

val kUnicodeUseFallbacksMask: kotlin.UInt
    get() = TODO()

val kUnicodeUseHFSPlusMapping: kotlin.Int
    get() = TODO()

val kUnicodeUseLatestMapping: kotlin.Int
    get() = TODO()

val kUnicodeVerticalFormBit: kotlin.UInt
    get() = TODO()

val kUnicodeVerticalFormMask: kotlin.UInt
    get() = TODO()

val kUnknownException: kotlin.UInt
    get() = TODO()

val kUnknownFSObjectIcon: kotlin.UInt
    get() = TODO()

val kUnlockKCEvent: kotlin.UInt
    get() = TODO()

val kUnlockKCEventMask: kotlin.UInt
    get() = TODO()

val kUnlockStateKCStatus: kotlin.UInt
    get() = TODO()

val kUnlockedIcon: kotlin.UInt
    get() = TODO()

val kUnmappedMemoryException: kotlin.UInt
    get() = TODO()

val kUnresolvablePageFaultException: kotlin.UInt
    get() = TODO()

val kUnsupportedCardErr: kotlin.Int
    get() = TODO()

val kUnsupportedFunctionErr: kotlin.Int
    get() = TODO()

val kUnsupportedModeErr: kotlin.Int
    get() = TODO()

val kUnsupportedVsErr: kotlin.Int
    get() = TODO()

val kUnwrapKCItemAttr: kotlin.UInt
    get() = TODO()

val kUpdateActiveInputArea: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val kUpdateKCEvent: kotlin.UInt
    get() = TODO()

val kUpdateKCEventMask: kotlin.UInt
    get() = TODO()

val kUseCurrentISA: kotlin.UInt
    get() = TODO()

val kUseNativeISA: kotlin.UInt
    get() = TODO()

val kUsePremadeThread: kotlin.UInt
    get() = TODO()

val kUseWidePositioning: kotlin.UInt
    get() = TODO()

val kUserDomain: kotlin.Int
    get() = TODO()

val kUserFolderIcon: kotlin.UInt
    get() = TODO()

val kUserIDiskIcon: kotlin.UInt
    get() = TODO()

val kUserIcon: kotlin.UInt
    get() = TODO()

val kUserSpecificTmpFolderType: kotlin.UInt
    get() = TODO()

val kUsersFolderIcon: kotlin.Int
    get() = TODO()

val kUsersFolderType: kotlin.UInt
    get() = TODO()

val kUtilitiesFolderIcon: kotlin.Int
    get() = TODO()

val kUtilitiesFolderType: kotlin.UInt
    get() = TODO()

val kVCBFlagsHFSPlusAPIsBit: kotlin.UInt
    get() = TODO()

val kVCBFlagsHFSPlusAPIsMask: kotlin.UInt
    get() = TODO()

val kVCBFlagsHardwareGoneBit: kotlin.UInt
    get() = TODO()

val kVCBFlagsHardwareGoneMask: kotlin.UInt
    get() = TODO()

val kVCBFlagsIdleFlushBit: kotlin.UInt
    get() = TODO()

val kVCBFlagsIdleFlushMask: kotlin.UInt
    get() = TODO()

val kVCBFlagsVolumeDirtyBit: kotlin.UInt
    get() = TODO()

val kVCBFlagsVolumeDirtyMask: kotlin.UInt
    get() = TODO()

val kVLibTag2: kotlin.Int
    get() = TODO()

val kVerifyKCItemAttr: kotlin.UInt
    get() = TODO()

val kVoicesFolderIcon: kotlin.Int
    get() = TODO()

val kVoicesFolderType: kotlin.UInt
    get() = TODO()

val kVolumeKCItemAttr: kotlin.UInt
    get() = TODO()

val kVolumeRootFolderType: kotlin.UInt
    get() = TODO()

val kVolumeSettingsFolderType: kotlin.UInt
    get() = TODO()

var kWSDebugIncomingBody: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSDebugIncomingHeaders: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSDebugOutgoingBody: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSDebugOutgoingHeaders: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSFaultCode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSFaultExtra: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSFaultString: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSHTTPExtraHeaders: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSHTTPFollowsRedirects: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSHTTPMessage: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSHTTPProxy: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSHTTPResponseMessage: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSHTTPVersion: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSMethodInvocationResult: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSMethodInvocationResultParameterName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSMethodInvocationTimeoutValue: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSNetworkStreamFaultString: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSRecordNamespaceURI: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSRecordParameterOrder: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSRecordType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSSOAP1999Protocol: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSSOAP2001Protocol: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSSOAPBodyEncodingStyle: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSSOAPMessageHeaders: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSSOAPMethodNamespaceURI: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSSOAPStyleDoc: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSSOAPStyleRPC: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSStreamErrorDomain: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSStreamErrorError: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSStreamErrorMessage: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

var kWSXMLRPCProtocol: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */
    get() = TODO()
    set(value: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) = TODO()

val kWakeToDoze: kotlin.UInt
    get() = TODO()

val kWhereToEmptyTrashFolderType: kotlin.UInt
    get() = TODO()

val kWidePosOffsetBit: kotlin.UInt
    get() = TODO()

val kWidgetsFolderType: kotlin.UInt
    get() = TODO()

val kWindowsLatin1PalmVariant: kotlin.UInt
    get() = TODO()

val kWindowsLatin1StandardVariant: kotlin.UInt
    get() = TODO()

val kWorkgroupFolderIcon: kotlin.UInt
    get() = TODO()

val kWrPermKCStatus: kotlin.UInt
    get() = TODO()

val kWrapKCItemAttr: kotlin.UInt
    get() = TODO()

val kWriteFailureErr: kotlin.Int
    get() = TODO()

val kWriteProtectedErr: kotlin.Int
    get() = TODO()

val kWriteReference: kotlin.UInt
    get() = TODO()

val kX86ISA: kotlin.UInt
    get() = TODO()

val kX86RTA: kotlin.UInt
    get() = TODO()

val kXLibTag1: kotlin.Int
    get() = TODO()

val kXLibVersion: kotlin.Int
    get() = TODO()

val kadministratorUser: kotlin.UInt
    get() = TODO()

val kernelAlreadyFreeErr: kotlin.Int
    get() = TODO()

val kernelAsyncReceiveLimitErr: kotlin.Int
    get() = TODO()

val kernelAsyncSendLimitErr: kotlin.Int
    get() = TODO()

val kernelAttributeErr: kotlin.Int
    get() = TODO()

val kernelCanceledErr: kotlin.Int
    get() = TODO()

val kernelDeletePermissionErr: kotlin.Int
    get() = TODO()

val kernelExceptionErr: kotlin.Int
    get() = TODO()

val kernelExecutePermissionErr: kotlin.Int
    get() = TODO()

val kernelExecutionLevelErr: kotlin.Int
    get() = TODO()

val kernelIDErr: kotlin.Int
    get() = TODO()

val kernelInUseErr: kotlin.Int
    get() = TODO()

val kernelIncompleteErr: kotlin.Int
    get() = TODO()

val kernelObjectExistsErr: kotlin.Int
    get() = TODO()

val kernelOptionsErr: kotlin.Int
    get() = TODO()

val kernelPrivilegeErr: kotlin.Int
    get() = TODO()

val kernelReadPermissionErr: kotlin.Int
    get() = TODO()

val kernelReturnValueErr: kotlin.Int
    get() = TODO()

val kernelTerminatedErr: kotlin.Int
    get() = TODO()

val kernelTimeoutErr: kotlin.Int
    get() = TODO()

val kernelUnrecoverableErr: kotlin.Int
    get() = TODO()

val kernelUnsupportedErr: kotlin.Int
    get() = TODO()

val kernelWritePermissionErr: kotlin.Int
    get() = TODO()

val keyAEAdjustMarksProc: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEAngle: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEArcAngle: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEBaseAddr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEBestType: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEBgndColor: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEBgndPattern: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEBounds: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEBufferSize: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val keyAECellList: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEClassID: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEClauseOffsets: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEColor: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEColorTable: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAECompOperator: kotlin.UInt
    get() = TODO()

val keyAECompareProc: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEContainer: kotlin.UInt
    get() = TODO()

val keyAECountProc: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAECurrentPoint: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val keyAECurveHeight: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAECurveWidth: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEDashStyle: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEData: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEDefaultType: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEDefinitionRect: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEDescType: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEDesiredClass: kotlin.UInt
    get() = TODO()

val keyAEDestination: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEDoAntiAlias: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEDoDithered: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEDoRotate: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEDoScale: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEDoTranslate: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEDragging: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEEditionFileLoc: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEElements: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEEndPoint: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEEventClass: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEEventID: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEFile: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEFileType: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEFillColor: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEFillPattern: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEFixLength: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val keyAEFlipHorizontal: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEFlipVertical: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEFont: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEFormula: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEGetErrDescProc: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEGraphicObjects: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEHiliteRange: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEID: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEImageQuality: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEIndex: kotlin.UInt
    get() = TODO()

val keyAEInsertHere: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEKeyData: kotlin.UInt
    get() = TODO()

val keyAEKeyForm: kotlin.UInt
    get() = TODO()

val keyAEKeyForms: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEKeyword: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAELaunchedAsLogInItem: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAELaunchedAsServiceItem: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAELeftSide: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAELevel: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAELineArrow: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAELogicalOperator: kotlin.UInt
    get() = TODO()

val keyAELogicalTerms: kotlin.UInt
    get() = TODO()

val keyAEMarkProc: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEMarkTokenProc: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEMoveView: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val keyAEName: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAENewElementLoc: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAENextBody: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val keyAEObject: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEObject1: kotlin.UInt
    get() = TODO()

val keyAEObject2: kotlin.UInt
    get() = TODO()

val keyAEObjectClass: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEOffStyles: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEOffset: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEOnStyles: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEPMTable: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEPOSTHeaderData: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEParamFlags: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEParameters: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEPenColor: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEPenPattern: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEPenWidth: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEPinRange: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEPixMapMinus: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEPixelDepth: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEPoint: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEPointList: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEPointSize: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEPosition: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEPropData: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEPropFlags: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEPropID: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEProperties: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEProperty: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEProtection: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAERangeStart: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAERangeStop: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAERecorderCount: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAERegionClass: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAERenderAs: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEReplyHeaderData: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAERequestedType: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEResult: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEResultInfo: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAERotPoint: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAERotation: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAERowList: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAESaveOptions: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEScale: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEScriptTag: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAESearchText: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEServerInstance: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val keyAEShowWhere: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEStartAngle: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEStartPoint: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEStyles: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAESuiteID: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAETSMDocumentRefcon: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val keyAETSMEventRecord: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val keyAETSMEventRef: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val keyAETSMGlyphInfoArray: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val keyAETSMScriptTag: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val keyAETSMTextFMFont: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val keyAETSMTextFont: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val keyAETSMTextPointSize: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val keyAETest: kotlin.UInt
    get() = TODO()

val keyAEText: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAETextColor: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAETextFont: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAETextLineAscent: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAETextLineHeight: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAETextPointSize: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAETextServiceEncoding: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val keyAETextServiceMacEncoding: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val keyAETextStyles: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAETheData: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val keyAETheText: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAETransferMode: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAETranslation: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAETryAsStructGraf: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEUniformStyles: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEUpdateOn: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEUpdateRange: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val keyAEUserTerm: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEVersion: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEWhoseRangeStart: kotlin.UInt
    get() = TODO()

val keyAEWhoseRangeStop: kotlin.UInt
    get() = TODO()

val keyAEWindow: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEWritingCode: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEXMLReplyData: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAEXMLRequestData: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAcceptTimeoutAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyActualSenderAuditToken: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAdditionalHTTPHeaders: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyAddressAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyCloseAllWindows: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyDirectObject: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyDisableAuthenticationAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyDisposeTokenProc: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyDriveNumber: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyErrorCode: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyErrorNumber: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyErrorString: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyEventClassAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyEventIDAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyEventSourceAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyHighLevelClass: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyHighLevelID: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyInteractLevelAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyKey: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyKeyCode: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyKeyboard: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyLocalWhere: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyMenuID: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyMenuItem: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyMiscellaneous: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyMissedKeywordAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyModifiers: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyNewBounds: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyOptionalKeywordAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyOriginalAddressAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyOriginalBounds: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyPreDispatch: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyProcessSerialNumber: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyRPCMethodName: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyRPCMethodParam: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyRPCMethodParamOrder: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyReplyPortAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyReplyRequestedAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyReturnIDAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keySOAPAction: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keySOAPMethodNameSpace: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keySOAPMethodNameSpaceURI: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keySOAPSMDNamespace: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keySOAPSMDNamespaceURI: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keySOAPSMDType: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keySOAPSchemaVersion: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keySOAPStructureMetaData: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keySelectProc: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keySelection: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keySenderApplescriptEntitlementsAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keySenderApplicationIdentifierEntitlementAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keySenderApplicationSandboxed: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keySenderAuditTokenAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keySenderEGIDAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keySenderEUIDAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keySenderGIDAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keySenderPIDAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keySenderUIDAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyTimeoutAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyTransactionIDAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyUserNameAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyUserPasswordAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyWhen: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyWhere: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyWindow: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val keyXMLDebuggingAttr: platform.CoreServices.AEKeyword /* = kotlin.UInt */
    get() = TODO()

val kfullPrivileges: kotlin.Int
    get() = TODO()

val kiMovieFolderType: kotlin.UInt
    get() = TODO()

val kiMoviePlugInsFolderType: kotlin.UInt
    get() = TODO()

val kiMovieSoundEffectsFolderType: kotlin.UInt
    get() = TODO()

val kioACAccessBlankAccessBit: kotlin.Int
    get() = TODO()

val kioACAccessBlankAccessMask: kotlin.Int
    get() = TODO()

val kioACAccessEveryoneReadBit: kotlin.Int
    get() = TODO()

val kioACAccessEveryoneReadMask: kotlin.Int
    get() = TODO()

val kioACAccessEveryoneSearchBit: kotlin.Int
    get() = TODO()

val kioACAccessEveryoneSearchMask: kotlin.Int
    get() = TODO()

val kioACAccessEveryoneWriteBit: kotlin.Int
    get() = TODO()

val kioACAccessEveryoneWriteMask: kotlin.Int
    get() = TODO()

val kioACAccessGroupReadBit: kotlin.Int
    get() = TODO()

val kioACAccessGroupReadMask: kotlin.Int
    get() = TODO()

val kioACAccessGroupSearchBit: kotlin.Int
    get() = TODO()

val kioACAccessGroupSearchMask: kotlin.Int
    get() = TODO()

val kioACAccessGroupWriteBit: kotlin.Int
    get() = TODO()

val kioACAccessGroupWriteMask: kotlin.Int
    get() = TODO()

val kioACAccessOwnerBit: kotlin.Int
    get() = TODO()

val kioACAccessOwnerMask: kotlin.Int
    get() = TODO()

val kioACAccessOwnerReadBit: kotlin.Int
    get() = TODO()

val kioACAccessOwnerReadMask: kotlin.Int
    get() = TODO()

val kioACAccessOwnerSearchBit: kotlin.Int
    get() = TODO()

val kioACAccessOwnerSearchMask: kotlin.Int
    get() = TODO()

val kioACAccessOwnerWriteBit: kotlin.Int
    get() = TODO()

val kioACAccessOwnerWriteMask: kotlin.Int
    get() = TODO()

val kioACAccessUserReadBit: kotlin.Int
    get() = TODO()

val kioACAccessUserReadMask: kotlin.Int
    get() = TODO()

val kioACAccessUserSearchBit: kotlin.Int
    get() = TODO()

val kioACAccessUserSearchMask: kotlin.Int
    get() = TODO()

val kioACAccessUserWriteBit: kotlin.Int
    get() = TODO()

val kioACAccessUserWriteMask: kotlin.Int
    get() = TODO()

val kioACUserNoMakeChangesBit: kotlin.UInt
    get() = TODO()

val kioACUserNoMakeChangesMask: kotlin.UInt
    get() = TODO()

val kioACUserNoSeeFilesBit: kotlin.UInt
    get() = TODO()

val kioACUserNoSeeFilesMask: kotlin.UInt
    get() = TODO()

val kioACUserNoSeeFolderBit: kotlin.UInt
    get() = TODO()

val kioACUserNoSeeFolderMask: kotlin.UInt
    get() = TODO()

val kioACUserNotOwnerBit: kotlin.UInt
    get() = TODO()

val kioACUserNotOwnerMask: kotlin.UInt
    get() = TODO()

val kioFCBFileLockedBit: kotlin.UInt
    get() = TODO()

val kioFCBFileLockedMask: kotlin.UInt
    get() = TODO()

val kioFCBLargeFileBit: kotlin.UInt
    get() = TODO()

val kioFCBLargeFileMask: kotlin.UInt
    get() = TODO()

val kioFCBModifiedBit: kotlin.UInt
    get() = TODO()

val kioFCBModifiedMask: kotlin.UInt
    get() = TODO()

val kioFCBOwnClumpBit: kotlin.UInt
    get() = TODO()

val kioFCBOwnClumpMask: kotlin.UInt
    get() = TODO()

val kioFCBResourceBit: kotlin.UInt
    get() = TODO()

val kioFCBResourceMask: kotlin.UInt
    get() = TODO()

val kioFCBSharedWriteBit: kotlin.UInt
    get() = TODO()

val kioFCBSharedWriteMask: kotlin.UInt
    get() = TODO()

val kioFCBWriteBit: kotlin.UInt
    get() = TODO()

val kioFCBWriteLockedBit: kotlin.UInt
    get() = TODO()

val kioFCBWriteLockedMask: kotlin.UInt
    get() = TODO()

val kioFCBWriteMask: kotlin.UInt
    get() = TODO()

val kioFlAttribCopyProtBit: kotlin.UInt
    get() = TODO()

val kioFlAttribCopyProtMask: kotlin.UInt
    get() = TODO()

val kioFlAttribDataOpenBit: kotlin.UInt
    get() = TODO()

val kioFlAttribDataOpenMask: kotlin.UInt
    get() = TODO()

val kioFlAttribDirBit: kotlin.UInt
    get() = TODO()

val kioFlAttribDirMask: kotlin.UInt
    get() = TODO()

val kioFlAttribFileOpenBit: kotlin.UInt
    get() = TODO()

val kioFlAttribFileOpenMask: kotlin.UInt
    get() = TODO()

val kioFlAttribInSharedBit: kotlin.UInt
    get() = TODO()

val kioFlAttribInSharedMask: kotlin.UInt
    get() = TODO()

val kioFlAttribLockedBit: kotlin.UInt
    get() = TODO()

val kioFlAttribLockedMask: kotlin.UInt
    get() = TODO()

val kioFlAttribMountedBit: kotlin.UInt
    get() = TODO()

val kioFlAttribMountedMask: kotlin.UInt
    get() = TODO()

val kioFlAttribResOpenBit: kotlin.UInt
    get() = TODO()

val kioFlAttribResOpenMask: kotlin.UInt
    get() = TODO()

val kioFlAttribSharePointBit: kotlin.UInt
    get() = TODO()

val kioFlAttribSharePointMask: kotlin.UInt
    get() = TODO()

val kioVAtrbDefaultVolumeBit: kotlin.UInt
    get() = TODO()

val kioVAtrbDefaultVolumeMask: kotlin.UInt
    get() = TODO()

val kioVAtrbFilesOpenBit: kotlin.UInt
    get() = TODO()

val kioVAtrbFilesOpenMask: kotlin.UInt
    get() = TODO()

val kioVAtrbHardwareLockedBit: kotlin.UInt
    get() = TODO()

val kioVAtrbHardwareLockedMask: kotlin.UInt
    get() = TODO()

val kioVAtrbSoftwareLockedBit: kotlin.UInt
    get() = TODO()

val kioVAtrbSoftwareLockedMask: kotlin.UInt
    get() = TODO()

val knoGroup: kotlin.UInt
    get() = TODO()

val knoUser: kotlin.UInt
    get() = TODO()

val kownerPrivileges: kotlin.Int
    get() = TODO()

val laDictionaryNotOpenedErr: kotlin.Int
    get() = TODO()

val laDictionaryTooManyErr: kotlin.Int
    get() = TODO()

val laDictionaryUnknownErr: kotlin.Int
    get() = TODO()

val laEngineNotFoundErr: kotlin.Int
    get() = TODO()

val laEnvironmentBusyErr: kotlin.Int
    get() = TODO()

val laEnvironmentExistErr: kotlin.Int
    get() = TODO()

val laEnvironmentNotFoundErr: kotlin.Int
    get() = TODO()

val laFailAnalysisErr: kotlin.Int
    get() = TODO()

val laInvalidPathErr: kotlin.Int
    get() = TODO()

val laNoMoreMorphemeErr: kotlin.Int
    get() = TODO()

val laPropertyErr: kotlin.Int
    get() = TODO()

val laPropertyIsReadOnlyErr: kotlin.Int
    get() = TODO()

val laPropertyNotFoundErr: kotlin.Int
    get() = TODO()

val laPropertyUnknownErr: kotlin.Int
    get() = TODO()

val laPropertyValueErr: kotlin.Int
    get() = TODO()

val laTextOverFlowErr: kotlin.Int
    get() = TODO()

val laTooSmallBufferErr: kotlin.Int
    get() = TODO()

val langAfricaans: kotlin.UInt
    get() = TODO()

val langAfrikaans: kotlin.UInt
    get() = TODO()

val langAlbanian: kotlin.UInt
    get() = TODO()

val langAmharic: kotlin.UInt
    get() = TODO()

val langArabic: kotlin.UInt
    get() = TODO()

val langArmenian: kotlin.UInt
    get() = TODO()

val langAssamese: kotlin.UInt
    get() = TODO()

val langAymara: kotlin.UInt
    get() = TODO()

val langAzerbaijanAr: kotlin.UInt
    get() = TODO()

val langAzerbaijanRoman: kotlin.UInt
    get() = TODO()

val langAzerbaijani: kotlin.UInt
    get() = TODO()

val langBasque: kotlin.UInt
    get() = TODO()

val langBelorussian: kotlin.UInt
    get() = TODO()

val langBengali: kotlin.UInt
    get() = TODO()

val langBreton: kotlin.UInt
    get() = TODO()

val langBulgarian: kotlin.UInt
    get() = TODO()

val langBurmese: kotlin.UInt
    get() = TODO()

val langByelorussian: kotlin.UInt
    get() = TODO()

val langCatalan: kotlin.UInt
    get() = TODO()

val langChewa: kotlin.UInt
    get() = TODO()

val langChinese: kotlin.UInt
    get() = TODO()

val langCroatian: kotlin.UInt
    get() = TODO()

val langCzech: kotlin.UInt
    get() = TODO()

val langDanish: kotlin.UInt
    get() = TODO()

val langDutch: kotlin.UInt
    get() = TODO()

val langDzongkha: kotlin.UInt
    get() = TODO()

val langEnglish: kotlin.UInt
    get() = TODO()

val langEsperanto: kotlin.UInt
    get() = TODO()

val langEstonian: kotlin.UInt
    get() = TODO()

val langFaeroese: kotlin.UInt
    get() = TODO()

val langFaroese: kotlin.UInt
    get() = TODO()

val langFarsi: kotlin.UInt
    get() = TODO()

val langFinnish: kotlin.UInt
    get() = TODO()

val langFlemish: kotlin.UInt
    get() = TODO()

val langFrench: kotlin.UInt
    get() = TODO()

val langGalician: kotlin.UInt
    get() = TODO()

val langGalla: kotlin.UInt
    get() = TODO()

val langGeorgian: kotlin.UInt
    get() = TODO()

val langGerman: kotlin.UInt
    get() = TODO()

val langGreek: kotlin.UInt
    get() = TODO()

val langGreekAncient: kotlin.UInt
    get() = TODO()

val langGreekPoly: kotlin.UInt
    get() = TODO()

val langGreenlandic: kotlin.UInt
    get() = TODO()

val langGuarani: kotlin.UInt
    get() = TODO()

val langGujarati: kotlin.UInt
    get() = TODO()

val langHebrew: kotlin.UInt
    get() = TODO()

val langHindi: kotlin.UInt
    get() = TODO()

val langHungarian: kotlin.UInt
    get() = TODO()

val langIcelandic: kotlin.UInt
    get() = TODO()

val langIndonesian: kotlin.UInt
    get() = TODO()

val langInuktitut: kotlin.UInt
    get() = TODO()

val langIrish: kotlin.UInt
    get() = TODO()

val langIrishGaelic: kotlin.UInt
    get() = TODO()

val langIrishGaelicScript: kotlin.UInt
    get() = TODO()

val langItalian: kotlin.UInt
    get() = TODO()

val langJapanese: kotlin.UInt
    get() = TODO()

val langJavaneseRom: kotlin.UInt
    get() = TODO()

val langKannada: kotlin.UInt
    get() = TODO()

val langKashmiri: kotlin.UInt
    get() = TODO()

val langKazakh: kotlin.UInt
    get() = TODO()

val langKhmer: kotlin.UInt
    get() = TODO()

val langKinyarwanda: kotlin.UInt
    get() = TODO()

val langKirghiz: kotlin.UInt
    get() = TODO()

val langKorean: kotlin.UInt
    get() = TODO()

val langKurdish: kotlin.UInt
    get() = TODO()

val langLao: kotlin.UInt
    get() = TODO()

val langLappish: kotlin.UInt
    get() = TODO()

val langLapponian: kotlin.UInt
    get() = TODO()

val langLatin: kotlin.UInt
    get() = TODO()

val langLatvian: kotlin.UInt
    get() = TODO()

val langLettish: kotlin.UInt
    get() = TODO()

val langLithuanian: kotlin.UInt
    get() = TODO()

val langMacedonian: kotlin.UInt
    get() = TODO()

val langMalagasy: kotlin.UInt
    get() = TODO()

val langMalayArabic: kotlin.UInt
    get() = TODO()

val langMalayRoman: kotlin.UInt
    get() = TODO()

val langMalayalam: kotlin.UInt
    get() = TODO()

val langMalta: kotlin.UInt
    get() = TODO()

val langMaltese: kotlin.UInt
    get() = TODO()

val langManxGaelic: kotlin.UInt
    get() = TODO()

val langMarathi: kotlin.UInt
    get() = TODO()

val langMoldavian: kotlin.UInt
    get() = TODO()

val langMongolian: kotlin.UInt
    get() = TODO()

val langMongolianCyr: kotlin.UInt
    get() = TODO()

val langNepali: kotlin.UInt
    get() = TODO()

val langNorwegian: kotlin.UInt
    get() = TODO()

val langNyanja: kotlin.UInt
    get() = TODO()

val langNynorsk: kotlin.UInt
    get() = TODO()

val langOriya: kotlin.UInt
    get() = TODO()

val langOromo: kotlin.UInt
    get() = TODO()

val langPashto: kotlin.UInt
    get() = TODO()

val langPersian: kotlin.UInt
    get() = TODO()

val langPolish: kotlin.UInt
    get() = TODO()

val langPortugese: kotlin.UInt
    get() = TODO()

val langPortuguese: kotlin.UInt
    get() = TODO()

val langPunjabi: kotlin.UInt
    get() = TODO()

val langQuechua: kotlin.UInt
    get() = TODO()

val langRomanian: kotlin.UInt
    get() = TODO()

val langRuanda: kotlin.UInt
    get() = TODO()

val langRundi: kotlin.UInt
    get() = TODO()

val langRussian: kotlin.UInt
    get() = TODO()

val langSaamisk: kotlin.UInt
    get() = TODO()

val langSami: kotlin.UInt
    get() = TODO()

val langSanskrit: kotlin.UInt
    get() = TODO()

val langScottishGaelic: kotlin.UInt
    get() = TODO()

val langSerbian: kotlin.UInt
    get() = TODO()

val langSimpChinese: kotlin.UInt
    get() = TODO()

val langSindhi: kotlin.UInt
    get() = TODO()

val langSinhalese: kotlin.UInt
    get() = TODO()

val langSlovak: kotlin.UInt
    get() = TODO()

val langSlovenian: kotlin.UInt
    get() = TODO()

val langSomali: kotlin.UInt
    get() = TODO()

val langSpanish: kotlin.UInt
    get() = TODO()

val langSundaneseRom: kotlin.UInt
    get() = TODO()

val langSwahili: kotlin.UInt
    get() = TODO()

val langSwedish: kotlin.UInt
    get() = TODO()

val langTagalog: kotlin.UInt
    get() = TODO()

val langTajiki: kotlin.UInt
    get() = TODO()

val langTamil: kotlin.UInt
    get() = TODO()

val langTatar: kotlin.UInt
    get() = TODO()

val langTelugu: kotlin.UInt
    get() = TODO()

val langThai: kotlin.UInt
    get() = TODO()

val langTibetan: kotlin.UInt
    get() = TODO()

val langTigrinya: kotlin.UInt
    get() = TODO()

val langTongan: kotlin.UInt
    get() = TODO()

val langTradChinese: kotlin.UInt
    get() = TODO()

val langTurkish: kotlin.UInt
    get() = TODO()

val langTurkmen: kotlin.UInt
    get() = TODO()

val langUighur: kotlin.UInt
    get() = TODO()

val langUkrainian: kotlin.UInt
    get() = TODO()

val langUnspecified: kotlin.UInt
    get() = TODO()

val langUrdu: kotlin.UInt
    get() = TODO()

val langUzbek: kotlin.UInt
    get() = TODO()

val langVietnamese: kotlin.UInt
    get() = TODO()

val langWelsh: kotlin.UInt
    get() = TODO()

val langYiddish: kotlin.UInt
    get() = TODO()

val langYugoslavian: kotlin.UInt
    get() = TODO()

val lapProtErr: kotlin.Int
    get() = TODO()

val large1BitMask: kotlin.UInt
    get() = TODO()

val large4BitData: kotlin.UInt
    get() = TODO()

val large8BitData: kotlin.UInt
    get() = TODO()

val lastDskErr: kotlin.Int
    get() = TODO()

val leftOverChars: kotlin.UInt
    get() = TODO()

val leftSingGuillemet: kotlin.UInt
    get() = TODO()

val limitReachedErr: kotlin.Int
    get() = TODO()

val localOnlyErr: kotlin.Int
    get() = TODO()

val lockPortBitsBadPortErr: kotlin.Int
    get() = TODO()

val lockPortBitsBadSurfaceErr: kotlin.Int
    get() = TODO()

val lockPortBitsSurfaceLostErr: kotlin.Int
    get() = TODO()

val lockPortBitsWindowClippedErr: kotlin.Int
    get() = TODO()

val lockPortBitsWindowMovedErr: kotlin.Int
    get() = TODO()

val lockPortBitsWindowResizedErr: kotlin.Int
    get() = TODO()

val lockPortBitsWrongGDeviceErr: kotlin.Int
    get() = TODO()

val longDate: kotlin.UInt
    get() = TODO()

val longDateFound: kotlin.UInt
    get() = TODO()

val longDay: kotlin.UInt
    get() = TODO()

val longMonth: kotlin.UInt
    get() = TODO()

val longWeek: kotlin.UInt
    get() = TODO()

val longYear: kotlin.UInt
    get() = TODO()

val mBarNFnd: kotlin.Int
    get() = TODO()

val mFulErr: kotlin.Int
    get() = TODO()

val macron: kotlin.UInt
    get() = TODO()

val mapChanged: kotlin.UInt
    get() = TODO()

val mapChangedBit: kotlin.UInt
    get() = TODO()

val mapCompact: kotlin.UInt
    get() = TODO()

val mapCompactBit: kotlin.UInt
    get() = TODO()

val mapReadErr: kotlin.Int
    get() = TODO()

val mapReadOnly: kotlin.UInt
    get() = TODO()

val mapReadOnlyBit: kotlin.UInt
    get() = TODO()

val matrixErr: kotlin.Int
    get() = TODO()

val maxCountry: kotlin.UInt
    get() = TODO()

val maxDateField: kotlin.Int
    get() = TODO()

val maxSizeToGrowTooSmall: kotlin.Int
    get() = TODO()

val mdy: kotlin.UInt
    get() = TODO()

val mediaTypesDontMatch: kotlin.Int
    get() = TODO()

val memAZErr: kotlin.Int
    get() = TODO()

val memAdrErr: kotlin.Int
    get() = TODO()

val memBCErr: kotlin.Int
    get() = TODO()

val memFragErr: kotlin.Int
    get() = TODO()

val memFullErr: kotlin.Int
    get() = TODO()

val memLockedErr: kotlin.Int
    get() = TODO()

val memPCErr: kotlin.Int
    get() = TODO()

val memPurErr: kotlin.Int
    get() = TODO()

val memROZErr: kotlin.Int
    get() = TODO()

val memROZError: kotlin.Int
    get() = TODO()

val memROZWarn: kotlin.Int
    get() = TODO()

val memSCErr: kotlin.Int
    get() = TODO()

val memWZErr: kotlin.Int
    get() = TODO()

val menuInvalidErr: kotlin.Int
    get() = TODO()

val menuItemNotFoundErr: kotlin.Int
    get() = TODO()

val menuNotFoundErr: kotlin.Int
    get() = TODO()

val menuPrgErr: kotlin.UInt
    get() = TODO()

val menuPropertyInvalid: kotlin.Int
    get() = TODO()

val menuPropertyInvalidErr: kotlin.Int
    get() = TODO()

val menuPropertyNotFoundErr: kotlin.Int
    get() = TODO()

val menuUsesSystemDefErr: kotlin.Int
    get() = TODO()

val midiDupIDErr: kotlin.Int
    get() = TODO()

val midiInvalidCmdErr: kotlin.Int
    get() = TODO()

val midiManagerAbsentOSErr: kotlin.Int
    get() = TODO()

val midiNameLenErr: kotlin.Int
    get() = TODO()

val midiNoClientErr: kotlin.Int
    get() = TODO()

val midiNoConErr: kotlin.Int
    get() = TODO()

val midiNoPortErr: kotlin.Int
    get() = TODO()

val midiTooManyConsErr: kotlin.Int
    get() = TODO()

val midiTooManyPortsErr: kotlin.Int
    get() = TODO()

val midiVConnectErr: kotlin.Int
    get() = TODO()

val midiVConnectMade: kotlin.Int
    get() = TODO()

val midiVConnectRmvd: kotlin.Int
    get() = TODO()

val midiWriteErr: kotlin.Int
    get() = TODO()

val minCountry: kotlin.UInt
    get() = TODO()

val minLeadingZ: kotlin.UInt
    get() = TODO()

val mini1BitMask: kotlin.UInt
    get() = TODO()

val mini4BitData: kotlin.UInt
    get() = TODO()

val mini8BitData: kotlin.UInt
    get() = TODO()

val minuteField: kotlin.UInt
    get() = TODO()

val minuteMask: kotlin.UInt
    get() = TODO()

val missingRequiredParameterErr: kotlin.Int
    get() = TODO()

val mmInternalError: kotlin.Int
    get() = TODO()

val mntLdingZ: kotlin.UInt
    get() = TODO()

val monthField: kotlin.UInt
    get() = TODO()

val monthMask: kotlin.UInt
    get() = TODO()

val mountedFolderIconResource: kotlin.Int
    get() = TODO()

val movieTextNotFoundErr: kotlin.Int
    get() = TODO()

val movieToolboxUninitialized: kotlin.Int
    get() = TODO()

val mpWorkFlagCopyWorkBlock: kotlin.UInt
    get() = TODO()

val mpWorkFlagDoCompletion: kotlin.UInt
    get() = TODO()

val mpWorkFlagDoWork: kotlin.UInt
    get() = TODO()

val mpWorkFlagDontBlock: kotlin.UInt
    get() = TODO()

val mpWorkFlagGetIsRunning: kotlin.UInt
    get() = TODO()

val mpWorkFlagGetProcessorCount: kotlin.UInt
    get() = TODO()

val multiplePublisherWrn: kotlin.Int
    get() = TODO()

val myd: kotlin.UInt
    get() = TODO()

val nameTypeErr: kotlin.Int
    get() = TODO()

val nbpBuffOvr: kotlin.Int
    get() = TODO()

val nbpConfDiff: kotlin.Int
    get() = TODO()

val nbpDuplicate: kotlin.Int
    get() = TODO()

val nbpNISErr: kotlin.Int
    get() = TODO()

val nbpNoConfirm: kotlin.Int
    get() = TODO()

val nbpNotFound: kotlin.Int
    get() = TODO()

val needClearScrapErr: kotlin.Int
    get() = TODO()

val negZcbFreeErr: kotlin.UInt
    get() = TODO()

const val negativeInfinity: platform.darwin.Fixed /* = kotlin.Int */ = 0

val networkErr: kotlin.Int
    get() = TODO()

val newLineBit: kotlin.UInt
    get() = TODO()

val newLineCharMask: kotlin.UInt
    get() = TODO()

val newLineMask: kotlin.UInt
    get() = TODO()

val nilHandleErr: kotlin.Int
    get() = TODO()

val nilScrapFlavorDataErr: kotlin.Int
    get() = TODO()

val nmTypErr: kotlin.Int
    get() = TODO()

val nmType: kotlin.UInt
    get() = TODO()

val noAdrMkErr: kotlin.Int
    get() = TODO()

val noBridgeErr: kotlin.Int
    get() = TODO()

val noCacheBit: kotlin.UInt
    get() = TODO()

val noCacheMask: kotlin.UInt
    get() = TODO()

val noCalls: kotlin.UInt
    get() = TODO()

val noCodecErr: kotlin.Int
    get() = TODO()

val noDMAErr: kotlin.Int
    get() = TODO()

val noDataArea: kotlin.Int
    get() = TODO()

val noDataHandler: kotlin.Int
    get() = TODO()

val noDefaultDataRef: kotlin.Int
    get() = TODO()

val noDefaultUserErr: kotlin.Int
    get() = TODO()

val noDeviceForChannel: kotlin.Int
    get() = TODO()

val noDriveErr: kotlin.Int
    get() = TODO()

val noDtaMkErr: kotlin.Int
    get() = TODO()

val noExportProcAvailableErr: kotlin.Int
    get() = TODO()

val noGlobalsErr: kotlin.Int
    get() = TODO()

val noHardware: kotlin.Int
    get() = TODO()

val noHardwareErr: kotlin.Int
    get() = TODO()

val noHelpForItem: kotlin.Int
    get() = TODO()

val noIconDataAvailableErr: kotlin.Int
    get() = TODO()

val noInformErr: kotlin.Int
    get() = TODO()

val noMMUErr: kotlin.Int
    get() = TODO()

val noMPPErr: kotlin.Int
    get() = TODO()

val noMacDskErr: kotlin.Int
    get() = TODO()

val noMachineNameErr: kotlin.Int
    get() = TODO()

val noMaskFoundErr: kotlin.Int
    get() = TODO()

val noMediaHandler: kotlin.Int
    get() = TODO()

val noMemForPictPlaybackErr: kotlin.Int
    get() = TODO()

val noMemoryNodeFailedInitialize: kotlin.Int
    get() = TODO()

val noMoreFolderDescErr: kotlin.Int
    get() = TODO()

val noMoreKeyColorsErr: kotlin.Int
    get() = TODO()

val noMoreRealTime: kotlin.Int
    get() = TODO()

val noMovieFound: kotlin.Int
    get() = TODO()

val noNybErr: kotlin.Int
    get() = TODO()

val noOutstandingHLE: kotlin.Int
    get() = TODO()

val noPathMappingErr: kotlin.Int
    get() = TODO()

val noPortErr: kotlin.Int
    get() = TODO()

val noPrefAppErr: kotlin.Int
    get() = TODO()

val noRecordOfApp: kotlin.Int
    get() = TODO()

val noRelErr: kotlin.Int
    get() = TODO()

val noRequest: kotlin.UInt
    get() = TODO()

val noResponseErr: kotlin.Int
    get() = TODO()

val noScrapErr: kotlin.Int
    get() = TODO()

val noScrapPromiseKeeperErr: kotlin.Int
    get() = TODO()

val noSendResp: kotlin.Int
    get() = TODO()

val noSessionErr: kotlin.Int
    get() = TODO()

val noSoundTrackInMovieErr: kotlin.Int
    get() = TODO()

val noSourceTreeFoundErr: kotlin.Int
    get() = TODO()

val noSuchIconErr: kotlin.Int
    get() = TODO()

val noSuitableDisplaysErr: kotlin.Int
    get() = TODO()

val noSynthFound: kotlin.Int
    get() = TODO()

val noThumbnailFoundErr: kotlin.Int
    get() = TODO()

val noToolboxNameErr: kotlin.Int
    get() = TODO()

val noTranslationPathErr: kotlin.Int
    get() = TODO()

val noTypeErr: kotlin.Int
    get() = TODO()

val noUserInteractionAllowed: kotlin.Int
    get() = TODO()

val noUserNameErr: kotlin.Int
    get() = TODO()

val noUserRecErr: kotlin.Int
    get() = TODO()

val noUserRefErr: kotlin.Int
    get() = TODO()

val noVideoTrackInMovieErr: kotlin.Int
    get() = TODO()

val nonDragOriginatorErr: kotlin.Int
    get() = TODO()

val nonMatchingEditState: kotlin.Int
    get() = TODO()

val notAFileErr: kotlin.Int
    get() = TODO()

val notAQTVRMovieErr: kotlin.Int
    get() = TODO()

val notARemountErr: kotlin.Int
    get() = TODO()

val notAllowedToSaveMovieErr: kotlin.Int
    get() = TODO()

val notAppropriateForClassic: kotlin.Int
    get() = TODO()

val notBTree: kotlin.Int
    get() = TODO()

val notEnoughBufferSpace: kotlin.Int
    get() = TODO()

val notEnoughDataErr: kotlin.Int
    get() = TODO()

val notEnoughDiskSpaceToGrab: kotlin.Int
    get() = TODO()

val notEnoughHardware: kotlin.Int
    get() = TODO()

val notEnoughHardwareErr: kotlin.Int
    get() = TODO()

val notEnoughMemoryErr: kotlin.Int
    get() = TODO()

val notEnoughMemoryToGrab: kotlin.Int
    get() = TODO()

val notExactMatrixErr: kotlin.Int
    get() = TODO()

val notExactSizeErr: kotlin.Int
    get() = TODO()

val notHeldErr: kotlin.Int
    get() = TODO()

val notImplementedMusicOSErr: kotlin.Int
    get() = TODO()

val notInitErr: kotlin.Int
    get() = TODO()

val notLeafAtomErr: kotlin.Int
    get() = TODO()

val notLockedErr: kotlin.Int
    get() = TODO()

val notLoggedInErr: kotlin.Int
    get() = TODO()

val notOpenErr: kotlin.Int
    get() = TODO()

val notRegisteredSectionErr: kotlin.Int
    get() = TODO()

val notThePublisherWrn: kotlin.Int
    get() = TODO()

val noteChannelNotAllocatedOSErr: kotlin.Int
    get() = TODO()

val nrCallNotSupported: kotlin.Int
    get() = TODO()

val nrDataTruncatedErr: kotlin.Int
    get() = TODO()

val nrExitedIteratorScope: kotlin.Int
    get() = TODO()

val nrInvalidEntryIterationOp: kotlin.Int
    get() = TODO()

val nrInvalidNodeErr: kotlin.Int
    get() = TODO()

val nrIterationDone: kotlin.Int
    get() = TODO()

val nrLockedErr: kotlin.Int
    get() = TODO()

val nrNameErr: kotlin.Int
    get() = TODO()

val nrNotCreatedErr: kotlin.Int
    get() = TODO()

val nrNotEnoughMemoryErr: kotlin.Int
    get() = TODO()

val nrNotFoundErr: kotlin.Int
    get() = TODO()

val nrNotModifiedErr: kotlin.Int
    get() = TODO()

val nrNotSlotDeviceErr: kotlin.Int
    get() = TODO()

val nrOverrunErr: kotlin.Int
    get() = TODO()

val nrPathBufferTooSmall: kotlin.Int
    get() = TODO()

val nrPathNotFound: kotlin.Int
    get() = TODO()

val nrPowerErr: kotlin.Int
    get() = TODO()

val nrPowerSwitchAbortErr: kotlin.Int
    get() = TODO()

val nrPropertyAlreadyExists: kotlin.Int
    get() = TODO()

val nrResultCodeBase: kotlin.Int
    get() = TODO()

val nrTransactionAborted: kotlin.Int
    get() = TODO()

val nrTypeMismatchErr: kotlin.Int
    get() = TODO()

val nsDrvErr: kotlin.Int
    get() = TODO()

val nsStackErr: kotlin.Int
    get() = TODO()

val nsvErr: kotlin.Int
    get() = TODO()

val numberFormattingBadCurrencyPositionErr: kotlin.Int
    get() = TODO()

val numberFormattingBadFormatErr: kotlin.Int
    get() = TODO()

val numberFormattingBadNumberFormattingObjectErr: kotlin.Int
    get() = TODO()

val numberFormattingBadOptionsErr: kotlin.Int
    get() = TODO()

val numberFormattingBadTokenErr: kotlin.Int
    get() = TODO()

val numberFormattingDelimiterMissingErr: kotlin.Int
    get() = TODO()

val numberFormattingEmptyFormatErr: kotlin.Int
    get() = TODO()

val numberFormattingLiteralMissingErr: kotlin.Int
    get() = TODO()

val numberFormattingNotADigitErr: kotlin.Int
    get() = TODO()

val numberFormattingNotANumberErr: kotlin.Int
    get() = TODO()

val numberFormattingOverflowInDestinationErr: kotlin.Int
    get() = TODO()

val numberFormattingSpuriousCharErr: kotlin.Int
    get() = TODO()

val numberFormattingUnOrderedCurrencyRangeErr: kotlin.Int
    get() = TODO()

val numberFormattingUnOrdredCurrencyRangeErr: kotlin.Int
    get() = TODO()

val numberFortmattingNotADigitErr: kotlin.Int
    get() = TODO()

val offLinErr: kotlin.Int
    get() = TODO()

val ogonek: kotlin.UInt
    get() = TODO()

val opWrErr: kotlin.Int
    get() = TODO()

val openErr: kotlin.Int
    get() = TODO()

val openFolderIconResource: kotlin.Int
    get() = TODO()

val overDot: kotlin.UInt
    get() = TODO()

val ownedFolderIconResource: kotlin.Int
    get() = TODO()

val pATMachine: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pATType: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pATZone: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pArcAngle: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pBackgroundColor: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pBackgroundPattern: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pBestType: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pBounds: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pClass: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pClipboard: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pColor: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pColorTable: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pConduit: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pContents: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pCornerCurveHeight: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pCornerCurveWidth: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pDNS: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pDNSForm: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pDashStyle: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pDefaultType: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pDefinitionRect: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pDeviceAddress: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pDeviceType: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pDottedDecimal: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pEnabled: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pEndPoint: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pFTPKind: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pFillColor: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pFillPattern: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pFont: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pFormula: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pGraphicObjects: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pHasCloseBox: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pHasTitleBar: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pHost: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pID: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pIndex: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pInsertionLoc: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pIsFloating: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pIsFrontProcess: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pIsModal: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pIsModified: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pIsResizable: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pIsStationeryPad: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pIsZoomable: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pIsZoomed: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pItemNumber: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pJustification: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pKeyKind: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pKeystrokeKey: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pLineArrow: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pMenuID: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pModifiers: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pName: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pNetwork: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pNewElementLoc: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pNode: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pPath: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pPenColor: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pPenPattern: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pPenWidth: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pPixelDepth: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pPointList: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pPointSize: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pPort: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pProtection: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pProtocol: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pRotation: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pSCSIBus: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pSCSILUN: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pScale: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pScheme: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pScript: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pScriptTag: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pSelected: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pSelection: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pSocket: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pStartAngle: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pStartPoint: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pTextColor: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pTextEncoding: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pTextFont: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pTextItemDelimiters: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pTextPointSize: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pTextStyles: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pTransferMode: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pTranslation: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pURL: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pUniformStyles: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pUpdateOn: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pUserName: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pUserPassword: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pUserSelection: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pVersion: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val pVisible: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val paramErr: kotlin.Int
    get() = TODO()

val pathNotVerifiedErr: kotlin.Int
    get() = TODO()

val pathTooLongErr: kotlin.Int
    get() = TODO()

val perThousand: kotlin.UInt
    get() = TODO()

val permErr: kotlin.Int
    get() = TODO()

val pi: platform.posix.double_t /* = kotlin.Double */
    get() = TODO()

val pickerCantLive: kotlin.Int
    get() = TODO()

val pickerResourceError: kotlin.Int
    get() = TODO()

val pictInfoIDErr: kotlin.Int
    get() = TODO()

val pictInfoVerbErr: kotlin.Int
    get() = TODO()

val pictInfoVersionErr: kotlin.Int
    get() = TODO()

val pictureDataErr: kotlin.Int
    get() = TODO()

val pixMapTooDeepErr: kotlin.Int
    get() = TODO()

val platform68k: kotlin.UInt
    get() = TODO()

val platformAIXppc: kotlin.UInt
    get() = TODO()

val platformIA32NativeEntryPoint: kotlin.UInt
    get() = TODO()

val platformIRIXmips: kotlin.UInt
    get() = TODO()

val platformInterpreted: kotlin.UInt
    get() = TODO()

val platformLinuxintel: kotlin.UInt
    get() = TODO()

val platformLinuxppc: kotlin.UInt
    get() = TODO()

val platformMacOSx86: kotlin.UInt
    get() = TODO()

val platformNeXT68k: kotlin.UInt
    get() = TODO()

val platformNeXTIntel: kotlin.UInt
    get() = TODO()

val platformNeXTppc: kotlin.UInt
    get() = TODO()

val platformNeXTsparc: kotlin.UInt
    get() = TODO()

val platformPowerPC: kotlin.UInt
    get() = TODO()

val platformPowerPC64NativeEntryPoint: kotlin.UInt
    get() = TODO()

val platformPowerPCNativeEntryPoint: kotlin.UInt
    get() = TODO()

val platformSunOSintel: kotlin.UInt
    get() = TODO()

val platformSunOSsparc: kotlin.UInt
    get() = TODO()

val platformWin32: kotlin.UInt
    get() = TODO()

val platformX86_64NativeEntryPoint: kotlin.UInt
    get() = TODO()

val pleaseCacheBit: kotlin.UInt
    get() = TODO()

val pleaseCacheMask: kotlin.UInt
    get() = TODO()

val pmBusyErr: kotlin.Int
    get() = TODO()

val pmField: kotlin.UInt
    get() = TODO()

val pmMask: kotlin.UInt
    get() = TODO()

val pmRecvEndErr: kotlin.Int
    get() = TODO()

val pmRecvStartErr: kotlin.Int
    get() = TODO()

val pmReplyTOErr: kotlin.Int
    get() = TODO()

val pmSendEndErr: kotlin.Int
    get() = TODO()

val pmSendStartErr: kotlin.Int
    get() = TODO()

val portClosedErr: kotlin.Int
    get() = TODO()

val portInUse: kotlin.Int
    get() = TODO()

val portNameExistsErr: kotlin.Int
    get() = TODO()

val portNotCf: kotlin.Int
    get() = TODO()

val portNotPwr: kotlin.Int
    get() = TODO()

val posErr: kotlin.Int
    get() = TODO()

const val positiveInfinity: platform.darwin.Fixed /* = kotlin.Int */ = 0

val prInitErr: kotlin.Int
    get() = TODO()

val prWrErr: kotlin.Int
    get() = TODO()

val preferencesFolderIconResource: kotlin.Int
    get() = TODO()

val printMonitorFolderIconResource: kotlin.Int
    get() = TODO()

val printerStatusOpCodeNotSupportedErr: kotlin.Int
    get() = TODO()

val privateFolderIconResource: kotlin.Int
    get() = TODO()

val procNotFound: kotlin.Int
    get() = TODO()

val processStateIncorrectErr: kotlin.Int
    get() = TODO()

val progressProcAborted: kotlin.Int
    get() = TODO()

val propertyNotSupportedByNodeErr: kotlin.Int
    get() = TODO()

val protocolErr: kotlin.Int
    get() = TODO()

val qErr: kotlin.Int
    get() = TODO()

val qfcbNotCreatedErr: kotlin.Int
    get() = TODO()

val qfcbNotFoundErr: kotlin.Int
    get() = TODO()

val qtActionNotHandledErr: kotlin.Int
    get() = TODO()

val qtNetworkAlreadyAllocatedErr: kotlin.Int
    get() = TODO()

val qtParamErr: kotlin.Int
    get() = TODO()

val qtXMLApplicationErr: kotlin.Int
    get() = TODO()

val qtXMLParseErr: kotlin.Int
    get() = TODO()

val qtmlDllEntryNotFoundErr: kotlin.Int
    get() = TODO()

val qtmlDllLoadErr: kotlin.Int
    get() = TODO()

val qtmlUninitialized: kotlin.Int
    get() = TODO()

val qtsAddressBusyErr: kotlin.Int
    get() = TODO()

val qtsBadDataErr: kotlin.Int
    get() = TODO()

val qtsBadSelectorErr: kotlin.Int
    get() = TODO()

val qtsBadStateErr: kotlin.Int
    get() = TODO()

val qtsConnectionFailedErr: kotlin.Int
    get() = TODO()

val qtsTimeoutErr: kotlin.Int
    get() = TODO()

val qtsTooMuchDataErr: kotlin.Int
    get() = TODO()

val qtsUnknownValueErr: kotlin.Int
    get() = TODO()

val qtsUnsupportedDataTypeErr: kotlin.Int
    get() = TODO()

val qtsUnsupportedFeatureErr: kotlin.Int
    get() = TODO()

val qtsUnsupportedRateErr: kotlin.Int
    get() = TODO()

val qtvrLibraryLoadErr: kotlin.Int
    get() = TODO()

val qtvrUninitialized: kotlin.Int
    get() = TODO()

val queueFull: kotlin.Int
    get() = TODO()

val rAliasType: kotlin.UInt
    get() = TODO()

val rcDBAsyncNotSupp: kotlin.Int
    get() = TODO()

val rcDBBadAsyncPB: kotlin.Int
    get() = TODO()

val rcDBBadDDEV: kotlin.Int
    get() = TODO()

val rcDBBadSessID: kotlin.Int
    get() = TODO()

val rcDBBadSessNum: kotlin.Int
    get() = TODO()

val rcDBBadType: kotlin.Int
    get() = TODO()

val rcDBBreak: kotlin.Int
    get() = TODO()

val rcDBError: kotlin.Int
    get() = TODO()

val rcDBExec: kotlin.Int
    get() = TODO()

val rcDBNoHandler: kotlin.Int
    get() = TODO()

val rcDBNull: kotlin.Int
    get() = TODO()

val rcDBPackNotInited: kotlin.Int
    get() = TODO()

val rcDBValue: kotlin.Int
    get() = TODO()

val rcDBWrongVersion: kotlin.Int
    get() = TODO()

val rcvrErr: kotlin.Int
    get() = TODO()

val rdVerify: kotlin.UInt
    get() = TODO()

val rdVerifyBit: kotlin.UInt
    get() = TODO()

val rdVerifyMask: kotlin.UInt
    get() = TODO()

val readErr: kotlin.Int
    get() = TODO()

val readQErr: kotlin.Int
    get() = TODO()

val readReference: kotlin.UInt
    get() = TODO()

val recNotFnd: kotlin.Int
    get() = TODO()

val recordDataTooBigErr: kotlin.Int
    get() = TODO()

val registerComponentAfterExisting: kotlin.UInt
    get() = TODO()

val registerComponentAliasesOnly: kotlin.UInt
    get() = TODO()

val registerComponentGlobal: kotlin.UInt
    get() = TODO()

val registerComponentNoDuplicates: kotlin.UInt
    get() = TODO()

val reqAborted: kotlin.Int
    get() = TODO()

val reqFailed: kotlin.Int
    get() = TODO()

val requiredFlagsDontMatch: kotlin.Int
    get() = TODO()

val res1Field: kotlin.UInt
    get() = TODO()

val res2Field: kotlin.UInt
    get() = TODO()

val res3Field: kotlin.UInt
    get() = TODO()

val resAttrErr: kotlin.Int
    get() = TODO()

val resChanged: kotlin.UInt
    get() = TODO()

val resChangedBit: kotlin.UInt
    get() = TODO()

val resFNotFound: kotlin.Int
    get() = TODO()

val resLocked: kotlin.UInt
    get() = TODO()

val resLockedBit: kotlin.UInt
    get() = TODO()

val resNotFound: kotlin.Int
    get() = TODO()

val resPreload: kotlin.UInt
    get() = TODO()

val resPreloadBit: kotlin.UInt
    get() = TODO()

val resProblem: kotlin.Int
    get() = TODO()

val resProtected: kotlin.UInt
    get() = TODO()

val resProtectedBit: kotlin.UInt
    get() = TODO()

val resPurgeable: kotlin.UInt
    get() = TODO()

val resPurgeableBit: kotlin.UInt
    get() = TODO()

val resSysHeap: kotlin.UInt
    get() = TODO()

val resSysHeapBit: kotlin.UInt
    get() = TODO()

val resSysRefBit: kotlin.UInt
    get() = TODO()

val resourceInMemory: kotlin.Int
    get() = TODO()

val retryComponentRegistrationErr: kotlin.Int
    get() = TODO()

val rfNumErr: kotlin.Int
    get() = TODO()

val rgnOverflowErr: kotlin.Int
    get() = TODO()

val rgnTooBigErr: kotlin.Int
    get() = TODO()

val rgnTooBigError: kotlin.Int
    get() = TODO()

val rightSingGuillemet: kotlin.UInt
    get() = TODO()

val ringMark: kotlin.UInt
    get() = TODO()

val rmvRefFailed: kotlin.Int
    get() = TODO()

val rmvResFailed: kotlin.Int
    get() = TODO()

val romanAppFond: kotlin.UInt
    get() = TODO()

val romanFlags: kotlin.UInt
    get() = TODO()

val romanSysFond: kotlin.UInt
    get() = TODO()

val routingNotFoundErr: kotlin.Int
    get() = TODO()

val sIQType: kotlin.UInt
    get() = TODO()

val sameFileErr: kotlin.Int
    get() = TODO()

val samplesAlreadyInMediaErr: kotlin.Int
    get() = TODO()

val scTypeNotFoundErr: kotlin.Int
    get() = TODO()

val scrapFlavorFlagsMismatchErr: kotlin.Int
    get() = TODO()

val scrapFlavorNotFoundErr: kotlin.Int
    get() = TODO()

val scrapFlavorSizeMismatchErr: kotlin.Int
    get() = TODO()

val scrapPromiseNotKeptErr: kotlin.Int
    get() = TODO()

val scriptCurLang: kotlin.Int
    get() = TODO()

val scriptDefLang: kotlin.Int
    get() = TODO()

val sdmInitErr: kotlin.UInt
    get() = TODO()

val sdmJTInitErr: kotlin.UInt
    get() = TODO()

val sdmPRAMInitErr: kotlin.UInt
    get() = TODO()

val sdmPriInitErr: kotlin.UInt
    get() = TODO()

val sdmSRTInitErr: kotlin.UInt
    get() = TODO()

val seNoDB: kotlin.Int
    get() = TODO()

val secLeadingZ: kotlin.UInt
    get() = TODO()

val secondField: kotlin.UInt
    get() = TODO()

val secondMask: kotlin.UInt
    get() = TODO()

val sectNFErr: kotlin.Int
    get() = TODO()

val seekErr: kotlin.Int
    get() = TODO()

val selectorNotSupportedByNodeErr: kotlin.Int
    get() = TODO()

val sepNotConsistent: kotlin.UInt
    get() = TODO()

val sepNotIntlSep: kotlin.UInt
    get() = TODO()

val seqGrabInfoNotAvailable: kotlin.Int
    get() = TODO()

val sessClosedErr: kotlin.Int
    get() = TODO()

val sessTableErr: kotlin.Int
    get() = TODO()

val settingNotSupportedByNodeErr: kotlin.Int
    get() = TODO()

val sharedFolderIconResource: kotlin.Int
    get() = TODO()

val shortDate: kotlin.UInt
    get() = TODO()

val shutDownAlert: kotlin.UInt
    get() = TODO()

val siBadDeviceName: kotlin.Int
    get() = TODO()

val siBadRefNum: kotlin.Int
    get() = TODO()

val siBadSoundInDevice: kotlin.Int
    get() = TODO()

val siDeviceBusyErr: kotlin.Int
    get() = TODO()

val siHardDriveTooSlow: kotlin.Int
    get() = TODO()

val siInitSDTblErr: kotlin.UInt
    get() = TODO()

val siInitSPTblErr: kotlin.UInt
    get() = TODO()

val siInitVBLQsErr: kotlin.UInt
    get() = TODO()

val siInputDeviceErr: kotlin.Int
    get() = TODO()

val siInvalidCompression: kotlin.Int
    get() = TODO()

val siInvalidSampleRate: kotlin.Int
    get() = TODO()

val siInvalidSampleSize: kotlin.Int
    get() = TODO()

val siNoBufferSpecified: kotlin.Int
    get() = TODO()

val siNoSoundInHardware: kotlin.Int
    get() = TODO()

val siUnknownInfoType: kotlin.Int
    get() = TODO()

val siUnknownQuality: kotlin.Int
    get() = TODO()

val siVBRCompressionNotSupported: kotlin.Int
    get() = TODO()

val sktClosedErr: kotlin.Int
    get() = TODO()

val sleepQType: kotlin.UInt
    get() = TODO()

val slotNumErr: kotlin.Int
    get() = TODO()

val slpQType: kotlin.UInt
    get() = TODO()

val smAllScripts: kotlin.Int
    get() = TODO()

val smAmharic: kotlin.UInt
    get() = TODO()

val smArabic: kotlin.UInt
    get() = TODO()

val smArmenian: kotlin.UInt
    get() = TODO()

val smBLFieldBad: kotlin.Int
    get() = TODO()

val smBadBoardId: kotlin.Int
    get() = TODO()

val smBadRefId: kotlin.Int
    get() = TODO()

val smBadScript: kotlin.Int
    get() = TODO()

val smBadVerb: kotlin.Int
    get() = TODO()

val smBadsList: kotlin.Int
    get() = TODO()

val smBadsPtrErr: kotlin.Int
    get() = TODO()

val smBengali: kotlin.UInt
    get() = TODO()

val smBlkMoveErr: kotlin.Int
    get() = TODO()

val smBurmese: kotlin.UInt
    get() = TODO()

val smBusErrTO: kotlin.Int
    get() = TODO()

val smByteLanesErr: kotlin.Int
    get() = TODO()

val smCPUErr: kotlin.Int
    get() = TODO()

val smCRCFail: kotlin.Int
    get() = TODO()

val smCentralEuroRoman: kotlin.UInt
    get() = TODO()

val smChar1byte: kotlin.UInt
    get() = TODO()

val smChar2byte: kotlin.UInt
    get() = TODO()

val smCharAscii: kotlin.UInt
    get() = TODO()

val smCharBidirect: kotlin.UInt
    get() = TODO()

val smCharBopomofo: kotlin.UInt
    get() = TODO()

val smCharContextualLR: kotlin.UInt
    get() = TODO()

val smCharEuro: kotlin.UInt
    get() = TODO()

val smCharExtAscii: kotlin.UInt
    get() = TODO()

val smCharFISGana: kotlin.UInt
    get() = TODO()

val smCharFISGreek: kotlin.UInt
    get() = TODO()

val smCharFISIdeo: kotlin.UInt
    get() = TODO()

val smCharFISKana: kotlin.UInt
    get() = TODO()

val smCharFISRussian: kotlin.UInt
    get() = TODO()

val smCharGanaKana: kotlin.UInt
    get() = TODO()

val smCharHangul: kotlin.UInt
    get() = TODO()

val smCharHiragana: kotlin.UInt
    get() = TODO()

val smCharHorizontal: kotlin.UInt
    get() = TODO()

val smCharIdeographic: kotlin.UInt
    get() = TODO()

val smCharJamo: kotlin.UInt
    get() = TODO()

val smCharKatakana: kotlin.UInt
    get() = TODO()

val smCharLeft: kotlin.UInt
    get() = TODO()

val smCharLower: kotlin.UInt
    get() = TODO()

val smCharNonContextualLR: kotlin.UInt
    get() = TODO()

val smCharPunct: kotlin.UInt
    get() = TODO()

val smCharRight: kotlin.UInt
    get() = TODO()

val smCharTwoByteGreek: kotlin.UInt
    get() = TODO()

val smCharTwoByteRussian: kotlin.UInt
    get() = TODO()

val smCharUpper: kotlin.UInt
    get() = TODO()

val smCharVertical: kotlin.UInt
    get() = TODO()

val smChinese: kotlin.UInt
    get() = TODO()

val smCkStatusErr: kotlin.Int
    get() = TODO()

val smCodeRevErr: kotlin.Int
    get() = TODO()

val smCurrentScript: kotlin.Int
    get() = TODO()

val smCyrillic: kotlin.UInt
    get() = TODO()

val smDevanagari: kotlin.UInt
    get() = TODO()

val smDisDrvrNamErr: kotlin.Int
    get() = TODO()

val smDisabledSlot: kotlin.Int
    get() = TODO()

val smDisposePErr: kotlin.Int
    get() = TODO()

val smEastEurRoman: kotlin.UInt
    get() = TODO()

val smEmptySlot: kotlin.Int
    get() = TODO()

val smEthiopic: kotlin.UInt
    get() = TODO()

val smExtArabic: kotlin.UInt
    get() = TODO()

val smFHBlkDispErr: kotlin.Int
    get() = TODO()

val smFHBlockRdErr: kotlin.Int
    get() = TODO()

val smFISClassLvl1: kotlin.UInt
    get() = TODO()

val smFISClassLvl2: kotlin.UInt
    get() = TODO()

val smFISClassUser: kotlin.UInt
    get() = TODO()

val smFirstByte: kotlin.Int
    get() = TODO()

val smFondEnd: kotlin.UInt
    get() = TODO()

val smFondStart: kotlin.UInt
    get() = TODO()

val smFormatErr: kotlin.Int
    get() = TODO()

val smGeez: kotlin.UInt
    get() = TODO()

val smGeorgian: kotlin.UInt
    get() = TODO()

val smGetDrvrNamErr: kotlin.Int
    get() = TODO()

val smGetPRErr: kotlin.Int
    get() = TODO()

val smGreek: kotlin.UInt
    get() = TODO()

val smGujarati: kotlin.UInt
    get() = TODO()

val smGurmukhi: kotlin.UInt
    get() = TODO()

val smHebrew: kotlin.UInt
    get() = TODO()

val smIdeographicLevel1: kotlin.UInt
    get() = TODO()

val smIdeographicLevel2: kotlin.UInt
    get() = TODO()

val smIdeographicUser: kotlin.UInt
    get() = TODO()

val smInitStatVErr: kotlin.Int
    get() = TODO()

val smInitTblVErr: kotlin.Int
    get() = TODO()

val smJamoBogJaeum: kotlin.UInt
    get() = TODO()

val smJamoBogMoeum: kotlin.UInt
    get() = TODO()

val smJamoJaeum: kotlin.UInt
    get() = TODO()

val smJamoMoeum: kotlin.UInt
    get() = TODO()

val smJapanese: kotlin.UInt
    get() = TODO()

val smKCHRCache: kotlin.UInt
    get() = TODO()

val smKanaHardOK: kotlin.UInt
    get() = TODO()

val smKanaSmall: kotlin.UInt
    get() = TODO()

val smKanaSoftOK: kotlin.UInt
    get() = TODO()

val smKannada: kotlin.UInt
    get() = TODO()

val smKeyDisableKybdSwitch: kotlin.Int
    get() = TODO()

val smKeyDisableKybds: kotlin.Int
    get() = TODO()

val smKeyEnableKybds: kotlin.Int
    get() = TODO()

val smKeyForceKeyScriptBit: kotlin.UInt
    get() = TODO()

val smKeyForceKeyScriptMask: kotlin.UInt
    get() = TODO()

val smKeyNextInputMethod: kotlin.Int
    get() = TODO()

val smKeyNextKybd: kotlin.Int
    get() = TODO()

val smKeyNextScript: kotlin.Int
    get() = TODO()

val smKeyRoman: kotlin.Int
    get() = TODO()

val smKeyScript: kotlin.UInt
    get() = TODO()

val smKeySetDirLeftRight: kotlin.Int
    get() = TODO()

val smKeySetDirRightLeft: kotlin.Int
    get() = TODO()

val smKeySwapInputMethod: kotlin.Int
    get() = TODO()

val smKeySwapKybd: kotlin.Int
    get() = TODO()

val smKeySwapScript: kotlin.Int
    get() = TODO()

val smKeySysScript: kotlin.Int
    get() = TODO()

val smKeyToggleDirection: kotlin.Int
    get() = TODO()

val smKeyToggleInline: kotlin.Int
    get() = TODO()

val smKhmer: kotlin.UInt
    get() = TODO()

val smKlingon: kotlin.UInt
    get() = TODO()

val smKorean: kotlin.UInt
    get() = TODO()

val smLao: kotlin.UInt
    get() = TODO()

val smLaotian: kotlin.UInt
    get() = TODO()

val smLastByte: kotlin.Int
    get() = TODO()

val smMalayalam: kotlin.UInt
    get() = TODO()

val smMaskAll: kotlin.Int
    get() = TODO()

val smMaskAscii: kotlin.Int
    get() = TODO()

val smMaskAscii1: kotlin.Int
    get() = TODO()

val smMaskAscii2: kotlin.Int
    get() = TODO()

val smMaskBopomofo2: kotlin.Int
    get() = TODO()

val smMaskGana2: kotlin.Int
    get() = TODO()

val smMaskHangul2: kotlin.Int
    get() = TODO()

val smMaskJamo2: kotlin.Int
    get() = TODO()

val smMaskKana1: kotlin.Int
    get() = TODO()

val smMaskKana2: kotlin.Int
    get() = TODO()

val smMaskNative: kotlin.Int
    get() = TODO()

val smMiddleByte: kotlin.Int
    get() = TODO()

val smMongolian: kotlin.UInt
    get() = TODO()

val smNewPErr: kotlin.Int
    get() = TODO()

val smNilsBlockErr: kotlin.Int
    get() = TODO()

val smNoBoardId: kotlin.Int
    get() = TODO()

val smNoBoardSRsrc: kotlin.Int
    get() = TODO()

val smNoDir: kotlin.Int
    get() = TODO()

val smNoGoodOpens: kotlin.Int
    get() = TODO()

val smNoJmpTbl: kotlin.Int
    get() = TODO()

val smNoMoresRsrcs: kotlin.Int
    get() = TODO()

val smNosInfoArray: kotlin.Int
    get() = TODO()

val smNotInstalled: kotlin.Int
    get() = TODO()

val smNumberPartsTable: kotlin.UInt
    get() = TODO()

val smOffsetErr: kotlin.Int
    get() = TODO()

val smOriya: kotlin.UInt
    get() = TODO()

val smPRAMInitErr: kotlin.Int
    get() = TODO()

val smPriInitErr: kotlin.Int
    get() = TODO()

val smPunctBlank: kotlin.UInt
    get() = TODO()

val smPunctGraphic: kotlin.UInt
    get() = TODO()

val smPunctNormal: kotlin.UInt
    get() = TODO()

val smPunctNumber: kotlin.UInt
    get() = TODO()

val smPunctRepeat: kotlin.UInt
    get() = TODO()

val smPunctSymbol: kotlin.UInt
    get() = TODO()

val smRSymbol: kotlin.UInt
    get() = TODO()

val smRecNotFnd: kotlin.Int
    get() = TODO()

val smRegionCode: kotlin.UInt
    get() = TODO()

val smReservedErr: kotlin.Int
    get() = TODO()

val smReservedSlot: kotlin.Int
    get() = TODO()

val smResrvErr: kotlin.Int
    get() = TODO()

val smRevisionErr: kotlin.Int
    get() = TODO()

val smRoman: kotlin.UInt
    get() = TODO()

val smRussian: kotlin.UInt
    get() = TODO()

val smSDMInitErr: kotlin.Int
    get() = TODO()

val smSRTInitErr: kotlin.Int
    get() = TODO()

val smSRTOvrFlErr: kotlin.Int
    get() = TODO()

val smSelOOBErr: kotlin.Int
    get() = TODO()

val smSimpChinese: kotlin.UInt
    get() = TODO()

val smSindhi: kotlin.UInt
    get() = TODO()

val smSingleByte: kotlin.Int
    get() = TODO()

val smSinhalese: kotlin.UInt
    get() = TODO()

val smSlavic: kotlin.UInt
    get() = TODO()

val smSlotOOBErr: kotlin.Int
    get() = TODO()

val smSysScript: kotlin.UInt
    get() = TODO()

val smSystemScript: kotlin.Int
    get() = TODO()

val smTamil: kotlin.UInt
    get() = TODO()

val smTelugu: kotlin.UInt
    get() = TODO()

val smThai: kotlin.UInt
    get() = TODO()

val smTibetan: kotlin.UInt
    get() = TODO()

val smTradChinese: kotlin.UInt
    get() = TODO()

val smTransAscii: kotlin.UInt
    get() = TODO()

val smTransAscii1: kotlin.UInt
    get() = TODO()

val smTransAscii2: kotlin.UInt
    get() = TODO()

val smTransBopomofo2: kotlin.UInt
    get() = TODO()

val smTransCase: kotlin.UInt
    get() = TODO()

val smTransGana2: kotlin.UInt
    get() = TODO()

val smTransHangul2: kotlin.UInt
    get() = TODO()

val smTransHangulFormat: kotlin.UInt
    get() = TODO()

val smTransJamo2: kotlin.UInt
    get() = TODO()

val smTransKana1: kotlin.UInt
    get() = TODO()

val smTransKana2: kotlin.UInt
    get() = TODO()

val smTransLower: kotlin.UInt
    get() = TODO()

val smTransNative: kotlin.UInt
    get() = TODO()

val smTransPreDoubleByting: kotlin.UInt
    get() = TODO()

val smTransPreLowerCasing: kotlin.UInt
    get() = TODO()

val smTransRuleBaseFormat: kotlin.UInt
    get() = TODO()

val smTransSystem: kotlin.UInt
    get() = TODO()

val smTransUpper: kotlin.UInt
    get() = TODO()

val smUnExBusErr: kotlin.Int
    get() = TODO()

val smUnTokenTable: kotlin.UInt
    get() = TODO()

val smUnicodeScript: kotlin.UInt
    get() = TODO()

val smUninterp: kotlin.UInt
    get() = TODO()

val smUprHalfCharSet: kotlin.UInt
    get() = TODO()

val smVietnamese: kotlin.UInt
    get() = TODO()

val smWhiteSpaceList: kotlin.UInt
    get() = TODO()

val smWordSelectTable: kotlin.UInt
    get() = TODO()

val smWordWrapTable: kotlin.UInt
    get() = TODO()

val small1BitMask: kotlin.UInt
    get() = TODO()

val small4BitData: kotlin.UInt
    get() = TODO()

val small8BitData: kotlin.UInt
    get() = TODO()

val smallDateBit: kotlin.Int
    get() = TODO()

val smcClassMask: kotlin.UInt
    get() = TODO()

val smcDoubleMask: kotlin.UInt
    get() = TODO()

val smcOrientationMask: kotlin.UInt
    get() = TODO()

val smcReserved: kotlin.UInt
    get() = TODO()

val smcRightMask: kotlin.UInt
    get() = TODO()

val smcTypeMask: kotlin.UInt
    get() = TODO()

val smcUpperMask: kotlin.UInt
    get() = TODO()

val smfDisableKeyScriptSync: kotlin.UInt
    get() = TODO()

val smfDisableKeyScriptSyncMask: kotlin.UInt
    get() = TODO()

val smfDualCaret: kotlin.UInt
    get() = TODO()

val smfNameTagEnab: kotlin.UInt
    get() = TODO()

val smfShowIcon: kotlin.UInt
    get() = TODO()

val smfUseAssocFontInfo: kotlin.UInt
    get() = TODO()

val smsGetDrvrErr: kotlin.Int
    get() = TODO()

val smsPointerNil: kotlin.Int
    get() = TODO()

val smsfAutoInit: kotlin.UInt
    get() = TODO()

val smsfB0Digits: kotlin.UInt
    get() = TODO()

val smsfContext: kotlin.UInt
    get() = TODO()

val smsfForms: kotlin.UInt
    get() = TODO()

val smsfIntellCP: kotlin.UInt
    get() = TODO()

val smsfLigatures: kotlin.UInt
    get() = TODO()

val smsfNatCase: kotlin.UInt
    get() = TODO()

val smsfNoForceFont: kotlin.UInt
    get() = TODO()

val smsfReverse: kotlin.UInt
    get() = TODO()

val smsfSingByte: kotlin.UInt
    get() = TODO()

val smsfSynchUnstyledTE: kotlin.UInt
    get() = TODO()

val smsfUnivExt: kotlin.UInt
    get() = TODO()

val sortsAfter: kotlin.Int
    get() = TODO()

val sortsBefore: kotlin.Int
    get() = TODO()

val sortsEqual: kotlin.Int
    get() = TODO()

val soundSupportNotAvailableErr: kotlin.Int
    get() = TODO()

val sourceNotFoundErr: kotlin.Int
    get() = TODO()

val spdAdjErr: kotlin.Int
    get() = TODO()

val staleEditState: kotlin.Int
    get() = TODO()

val startupFolderIconResource: kotlin.Int
    get() = TODO()

val statusErr: kotlin.Int
    get() = TODO()

val strUserBreak: kotlin.Int
    get() = TODO()

val streamingNodeNotReadyErr: kotlin.Int
    get() = TODO()

val stringOverflow: kotlin.UInt
    get() = TODO()

val supDay: kotlin.UInt
    get() = TODO()

val supMonth: kotlin.UInt
    get() = TODO()

val supWeek: kotlin.UInt
    get() = TODO()

val supYear: kotlin.UInt
    get() = TODO()

val svDisabled: kotlin.Int
    get() = TODO()

val svTempDisable: kotlin.Int
    get() = TODO()

val synthNotReady: kotlin.Int
    get() = TODO()

val synthOpenFailed: kotlin.Int
    get() = TODO()

val synthesizerNotRespondingOSErr: kotlin.Int
    get() = TODO()

val synthesizerOSErr: kotlin.Int
    get() = TODO()

val systemCurLang: kotlin.Int
    get() = TODO()

val systemDefLang: kotlin.Int
    get() = TODO()

val systemFolderIconResource: kotlin.Int
    get() = TODO()

val teScrapSizeErr: kotlin.Int
    get() = TODO()

val telAPattNotSupp: kotlin.Int
    get() = TODO()

val telAlreadyOpen: kotlin.Int
    get() = TODO()

val telAutoAnsNotOn: kotlin.Int
    get() = TODO()

val telBadAPattErr: kotlin.Int
    get() = TODO()

val telBadBearerType: kotlin.Int
    get() = TODO()

val telBadCAErr: kotlin.Int
    get() = TODO()

val telBadCodeResource: kotlin.Int
    get() = TODO()

val telBadDNDType: kotlin.Int
    get() = TODO()

val telBadDNErr: kotlin.Int
    get() = TODO()

val telBadDNType: kotlin.Int
    get() = TODO()

val telBadDisplayMode: kotlin.Int
    get() = TODO()

val telBadFeatureID: kotlin.Int
    get() = TODO()

val telBadFunction: kotlin.Int
    get() = TODO()

val telBadFwdType: kotlin.Int
    get() = TODO()

val telBadHTypeErr: kotlin.Int
    get() = TODO()

val telBadHandErr: kotlin.Int
    get() = TODO()

val telBadIndex: kotlin.Int
    get() = TODO()

val telBadIntExt: kotlin.Int
    get() = TODO()

val telBadIntercomID: kotlin.Int
    get() = TODO()

val telBadLevelErr: kotlin.Int
    get() = TODO()

val telBadPageID: kotlin.Int
    get() = TODO()

val telBadParkID: kotlin.Int
    get() = TODO()

val telBadPickupGroupID: kotlin.Int
    get() = TODO()

val telBadProcErr: kotlin.Int
    get() = TODO()

val telBadProcID: kotlin.Int
    get() = TODO()

val telBadRate: kotlin.Int
    get() = TODO()

val telBadSWErr: kotlin.Int
    get() = TODO()

val telBadSampleRate: kotlin.Int
    get() = TODO()

val telBadSelect: kotlin.Int
    get() = TODO()

val telBadStateErr: kotlin.Int
    get() = TODO()

val telBadTermErr: kotlin.Int
    get() = TODO()

val telBadVTypeErr: kotlin.Int
    get() = TODO()

val telCANotAcceptable: kotlin.Int
    get() = TODO()

val telCANotDeflectable: kotlin.Int
    get() = TODO()

val telCANotRejectable: kotlin.Int
    get() = TODO()

val telCAUnavail: kotlin.Int
    get() = TODO()

val telCBErr: kotlin.Int
    get() = TODO()

val telConfErr: kotlin.Int
    get() = TODO()

val telConfLimitErr: kotlin.Int
    get() = TODO()

val telConfLimitExceeded: kotlin.Int
    get() = TODO()

val telConfNoLimit: kotlin.Int
    get() = TODO()

val telConfRej: kotlin.Int
    get() = TODO()

val telDNDTypeNotSupp: kotlin.Int
    get() = TODO()

val telDNTypeNotSupp: kotlin.Int
    get() = TODO()

val telDetAlreadyOn: kotlin.Int
    get() = TODO()

val telDeviceNotFound: kotlin.Int
    get() = TODO()

val telDisplayModeNotSupp: kotlin.Int
    get() = TODO()

val telFeatActive: kotlin.Int
    get() = TODO()

val telFeatNotAvail: kotlin.Int
    get() = TODO()

val telFeatNotSub: kotlin.Int
    get() = TODO()

val telFeatNotSupp: kotlin.Int
    get() = TODO()

val telFwdTypeNotSupp: kotlin.Int
    get() = TODO()

val telGenericError: kotlin.Int
    get() = TODO()

val telHTypeNotSupp: kotlin.Int
    get() = TODO()

val telIndexNotSupp: kotlin.Int
    get() = TODO()

val telInitFailed: kotlin.Int
    get() = TODO()

val telIntExtNotSupp: kotlin.Int
    get() = TODO()

val telNoCallbackRef: kotlin.Int
    get() = TODO()

val telNoCommFolder: kotlin.Int
    get() = TODO()

val telNoErr: kotlin.Int
    get() = TODO()

val telNoMemErr: kotlin.Int
    get() = TODO()

val telNoOpenErr: kotlin.Int
    get() = TODO()

val telNoSuchTool: kotlin.Int
    get() = TODO()

val telNoTools: kotlin.Int
    get() = TODO()

val telNotEnoughdspBW: kotlin.Int
    get() = TODO()

val telPBErr: kotlin.Int
    get() = TODO()

val telStateNotSupp: kotlin.Int
    get() = TODO()

val telStillNeeded: kotlin.Int
    get() = TODO()

val telTermNotOpen: kotlin.Int
    get() = TODO()

val telTransferErr: kotlin.Int
    get() = TODO()

val telTransferRej: kotlin.Int
    get() = TODO()

val telUnknownErr: kotlin.Int
    get() = TODO()

val telVTypeNotSupp: kotlin.Int
    get() = TODO()

val telValidateFailed: kotlin.Int
    get() = TODO()

val textParserBadParamErr: kotlin.Int
    get() = TODO()

val textParserBadParserObjectErr: kotlin.Int
    get() = TODO()

val textParserBadTextEncodingErr: kotlin.Int
    get() = TODO()

val textParserBadTextLanguageErr: kotlin.Int
    get() = TODO()

val textParserBadTokenValueErr: kotlin.Int
    get() = TODO()

val textParserNoMoreTextErr: kotlin.Int
    get() = TODO()

val textParserNoMoreTokensErr: kotlin.Int
    get() = TODO()

val textParserNoSuchTokenFoundErr: kotlin.Int
    get() = TODO()

val textParserObjectNotFoundErr: kotlin.Int
    get() = TODO()

val textParserParamErr: kotlin.Int
    get() = TODO()

val themeBadCursorIndexErr: kotlin.Int
    get() = TODO()

val themeBadTextColorErr: kotlin.Int
    get() = TODO()

val themeHasNoAccentsErr: kotlin.Int
    get() = TODO()

val themeInvalidBrushErr: kotlin.Int
    get() = TODO()

val themeMonitorDepthNotSupportedErr: kotlin.Int
    get() = TODO()

val themeNoAppropriateBrushErr: kotlin.Int
    get() = TODO()

val themeProcessNotRegisteredErr: kotlin.Int
    get() = TODO()

val themeProcessRegisteredErr: kotlin.Int
    get() = TODO()

val themeScriptFontNotFoundErr: kotlin.Int
    get() = TODO()

val threadBadAppContextErr: kotlin.Int
    get() = TODO()

val threadNotFoundErr: kotlin.Int
    get() = TODO()

val threadProtocolErr: kotlin.Int
    get() = TODO()

val threadTooManyReqsErr: kotlin.Int
    get() = TODO()

val tilde: kotlin.UInt
    get() = TODO()

val timeCycle12: kotlin.UInt
    get() = TODO()

val timeCycle24: kotlin.UInt
    get() = TODO()

val timeCycleZero: kotlin.UInt
    get() = TODO()

val timeNotInMedia: kotlin.Int
    get() = TODO()

val timeNotInTrack: kotlin.Int
    get() = TODO()

val timeNotInViewErr: kotlin.Int
    get() = TODO()

val tk0BadErr: kotlin.Int
    get() = TODO()

val tmfoErr: kotlin.Int
    get() = TODO()

val tmwdoErr: kotlin.Int
    get() = TODO()

val togChar12HourBit: kotlin.Int
    get() = TODO()

val togCharZCycleBit: kotlin.Int
    get() = TODO()

val togDelta12HourBit: kotlin.Int
    get() = TODO()

val toggleBadChar: kotlin.UInt
    get() = TODO()

val toggleBadDelta: kotlin.UInt
    get() = TODO()

val toggleBadField: kotlin.UInt
    get() = TODO()

val toggleBadNum: kotlin.UInt
    get() = TODO()

val toggleErr3: kotlin.UInt
    get() = TODO()

val toggleErr4: kotlin.UInt
    get() = TODO()

val toggleErr5: kotlin.UInt
    get() = TODO()

val toggleOK: kotlin.UInt
    get() = TODO()

val toggleOutOfRange: kotlin.UInt
    get() = TODO()

val toggleUndefined: kotlin.UInt
    get() = TODO()

val toggleUnknown: kotlin.UInt
    get() = TODO()

val tokDecPoint: kotlin.UInt
    get() = TODO()

val tokEMinus: kotlin.UInt
    get() = TODO()

val tokEPlus: kotlin.UInt
    get() = TODO()

val tokEscape: kotlin.UInt
    get() = TODO()

val tokLeadPlacer: kotlin.UInt
    get() = TODO()

val tokLeader: kotlin.UInt
    get() = TODO()

val tokLeftQuote: kotlin.UInt
    get() = TODO()

val tokMaxSymbols: kotlin.UInt
    get() = TODO()

val tokMinusSign: kotlin.UInt
    get() = TODO()

val tokNonLeader: kotlin.UInt
    get() = TODO()

val tokPercent: kotlin.UInt
    get() = TODO()

val tokPlusSign: kotlin.UInt
    get() = TODO()

val tokReserved: kotlin.UInt
    get() = TODO()

val tokRightQuote: kotlin.UInt
    get() = TODO()

val tokSeparator: kotlin.UInt
    get() = TODO()

val tokThousands: kotlin.UInt
    get() = TODO()

val tokZeroLead: kotlin.UInt
    get() = TODO()

val token1Quote: kotlin.UInt
    get() = TODO()

val token2Equal: kotlin.UInt
    get() = TODO()

val token2Quote: kotlin.UInt
    get() = TODO()

val tokenAlpha: kotlin.UInt
    get() = TODO()

val tokenAltNum: kotlin.UInt
    get() = TODO()

val tokenAltReal: kotlin.UInt
    get() = TODO()

val tokenAmpersand: kotlin.UInt
    get() = TODO()

val tokenAsterisk: kotlin.UInt
    get() = TODO()

val tokenAtSign: kotlin.UInt
    get() = TODO()

val tokenBackSlash: kotlin.UInt
    get() = TODO()

val tokenBar: kotlin.UInt
    get() = TODO()

val tokenCapPi: kotlin.UInt
    get() = TODO()

val tokenCarat: kotlin.Int
    get() = TODO()

val tokenCaret: kotlin.UInt
    get() = TODO()

val tokenCenterDot: kotlin.UInt
    get() = TODO()

val tokenColon: kotlin.UInt
    get() = TODO()

val tokenColonEqual: kotlin.UInt
    get() = TODO()

val tokenComma: kotlin.UInt
    get() = TODO()

val tokenDivide: kotlin.UInt
    get() = TODO()

val tokenDollar: kotlin.UInt
    get() = TODO()

val tokenEllipsis: kotlin.UInt
    get() = TODO()

val tokenEmpty: kotlin.Int
    get() = TODO()

val tokenEqual: kotlin.UInt
    get() = TODO()

val tokenErr: kotlin.UInt
    get() = TODO()

val tokenEscape: kotlin.UInt
    get() = TODO()

val tokenExclam: kotlin.UInt
    get() = TODO()

val tokenExclamEqual: kotlin.UInt
    get() = TODO()

val tokenFraction: kotlin.UInt
    get() = TODO()

val tokenGreat: kotlin.UInt
    get() = TODO()

val tokenGreatEqual1: kotlin.UInt
    get() = TODO()

val tokenGreatEqual2: kotlin.UInt
    get() = TODO()

val tokenHash: kotlin.UInt
    get() = TODO()

val tokenInfinity: kotlin.UInt
    get() = TODO()

val tokenIntegral: kotlin.UInt
    get() = TODO()

val tokenIntl: kotlin.Int
    get() = TODO()

val tokenIntlCurrency: kotlin.UInt
    get() = TODO()

val tokenLeft1Quote: kotlin.UInt
    get() = TODO()

val tokenLeft2Quote: kotlin.UInt
    get() = TODO()

val tokenLeftBracket: kotlin.UInt
    get() = TODO()

val tokenLeftComment: kotlin.UInt
    get() = TODO()

val tokenLeftCurly: kotlin.UInt
    get() = TODO()

val tokenLeftEnclose: kotlin.UInt
    get() = TODO()

val tokenLeftLit: kotlin.UInt
    get() = TODO()

val tokenLeftParen: kotlin.UInt
    get() = TODO()

val tokenLeftSingGuillemet: kotlin.UInt
    get() = TODO()

val tokenLess: kotlin.UInt
    get() = TODO()

val tokenLessEqual1: kotlin.UInt
    get() = TODO()

val tokenLessEqual2: kotlin.UInt
    get() = TODO()

val tokenLessGreat: kotlin.UInt
    get() = TODO()

val tokenLiteral: kotlin.UInt
    get() = TODO()

val tokenMicro: kotlin.UInt
    get() = TODO()

val tokenMinus: kotlin.UInt
    get() = TODO()

val tokenNewLine: kotlin.UInt
    get() = TODO()

val tokenNil: kotlin.UInt
    get() = TODO()

val tokenNoBreakSpace: kotlin.UInt
    get() = TODO()

val tokenNotEqual: kotlin.UInt
    get() = TODO()

val tokenNumeric: kotlin.UInt
    get() = TODO()

val tokenOK: kotlin.UInt
    get() = TODO()

val tokenOverflow: kotlin.UInt
    get() = TODO()

val tokenPerThousand: kotlin.UInt
    get() = TODO()

val tokenPercent: kotlin.UInt
    get() = TODO()

val tokenPeriod: kotlin.UInt
    get() = TODO()

val tokenPi: kotlin.UInt
    get() = TODO()

val tokenPlus: kotlin.UInt
    get() = TODO()

val tokenPlusMinus: kotlin.UInt
    get() = TODO()

val tokenQuestion: kotlin.UInt
    get() = TODO()

val tokenRealNum: kotlin.UInt
    get() = TODO()

val tokenReserve1: kotlin.UInt
    get() = TODO()

val tokenReserve2: kotlin.UInt
    get() = TODO()

val tokenRight1Quote: kotlin.UInt
    get() = TODO()

val tokenRight2Quote: kotlin.UInt
    get() = TODO()

val tokenRightBracket: kotlin.UInt
    get() = TODO()

val tokenRightComment: kotlin.UInt
    get() = TODO()

val tokenRightCurly: kotlin.UInt
    get() = TODO()

val tokenRightEnclose: kotlin.UInt
    get() = TODO()

val tokenRightLit: kotlin.UInt
    get() = TODO()

val tokenRightParen: kotlin.UInt
    get() = TODO()

val tokenRightSingGuillemet: kotlin.UInt
    get() = TODO()

val tokenRoot: kotlin.UInt
    get() = TODO()

val tokenSemicolon: kotlin.UInt
    get() = TODO()

val tokenSigma: kotlin.UInt
    get() = TODO()

val tokenSlash: kotlin.UInt
    get() = TODO()

val tokenTilda: kotlin.Int
    get() = TODO()

val tokenTilde: kotlin.UInt
    get() = TODO()

val tokenUnderline: kotlin.UInt
    get() = TODO()

val tokenUnknown: kotlin.UInt
    get() = TODO()

val tokenWhite: kotlin.UInt
    get() = TODO()

val tooManyReqs: kotlin.Int
    get() = TODO()

val tooManySeps: kotlin.UInt
    get() = TODO()

val tooManySkts: kotlin.Int
    get() = TODO()

val trackIDNotFound: kotlin.Int
    get() = TODO()

val trackNotInMovie: kotlin.Int
    get() = TODO()

val trashIconResource: kotlin.Int
    get() = TODO()

val true32b: kotlin.UInt
    get() = TODO()

val tsmAlreadyRegisteredErr: kotlin.Int
    get() = TODO()

val tsmCantChangeForcedClassStateErr: kotlin.Int
    get() = TODO()

val tsmCantOpenComponentErr: kotlin.Int
    get() = TODO()

val tsmComponentAlreadyOpenErr: kotlin.Int
    get() = TODO()

val tsmComponentNoErr: kotlin.Int
    get() = TODO()

val tsmComponentPropertyNotFoundErr: kotlin.Int
    get() = TODO()

val tsmComponentPropertyUnsupportedErr: kotlin.Int
    get() = TODO()

val tsmDefaultIsNotInputMethodErr: kotlin.Int
    get() = TODO()

val tsmDocNotActiveErr: kotlin.Int
    get() = TODO()

val tsmDocPropertyBufferTooSmallErr: kotlin.Int
    get() = TODO()

val tsmDocPropertyNotFoundErr: kotlin.Int
    get() = TODO()

val tsmDocumentOpenErr: kotlin.Int
    get() = TODO()

val tsmInputMethodIsOldErr: kotlin.Int
    get() = TODO()

val tsmInputMethodNotFoundErr: kotlin.Int
    get() = TODO()

val tsmInputModeChangeFailedErr: kotlin.Int
    get() = TODO()

val tsmInvalidContext: kotlin.Int
    get() = TODO()

val tsmInvalidDocIDErr: kotlin.Int
    get() = TODO()

val tsmNeverRegisteredErr: kotlin.Int
    get() = TODO()

val tsmNoHandler: kotlin.Int
    get() = TODO()

val tsmNoMoreTokens: kotlin.Int
    get() = TODO()

val tsmNoOpenTSErr: kotlin.Int
    get() = TODO()

val tsmNoStem: kotlin.Int
    get() = TODO()

val tsmNotAnAppErr: kotlin.Int
    get() = TODO()

val tsmScriptHasNoIMErr: kotlin.Int
    get() = TODO()

val tsmTSHasNoMenuErr: kotlin.Int
    get() = TODO()

val tsmTSMDocBusyErr: kotlin.Int
    get() = TODO()

val tsmTSNotOpenErr: kotlin.Int
    get() = TODO()

val tsmTextServiceNotFoundErr: kotlin.Int
    get() = TODO()

val tsmUnknownErr: kotlin.Int
    get() = TODO()

val tsmUnsupScriptLanguageErr: kotlin.Int
    get() = TODO()

val tsmUnsupportedTypeErr: kotlin.Int
    get() = TODO()

val tsmUseInputWindowErr: kotlin.Int
    get() = TODO()

val tuneParseOSErr: kotlin.Int
    get() = TODO()

val tunePlayerFullOSErr: kotlin.Int
    get() = TODO()

val twoSideErr: kotlin.Int
    get() = TODO()

val type128BitFloatingPoint: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeAEList: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeAERecord: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeAEText: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeAbsoluteOrdinal: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeAlias: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeAppParameters: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeApplSignature: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeAppleEvent: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeApplicationBundleID: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeApplicationURL: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeArc: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeAuditToken: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeBest: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeBookmarkData: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeBoolean: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCFAbsoluteTime: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCFArrayRef: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCFAttributedStringRef: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCFBooleanRef: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCFDictionaryRef: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCFMutableArrayRef: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCFMutableAttributedStringRef: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCFMutableDictionaryRef: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCFMutableStringRef: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCFNumberRef: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCFStringRef: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCFTypeRef: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCString: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCell: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCentimeters: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeChar: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeClassInfo: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeColorTable: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeColumn: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCompDescriptor: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeComponentInstance: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val typeCubicCentimeter: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCubicFeet: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCubicInches: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCubicMeters: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCubicYards: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeCurrentContainer: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeDashStyle: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeData: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeDecimalStruct: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeDegreesC: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeDegreesF: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeDegreesK: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeDrawingArea: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeEPS: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeElemInfo: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeEncodedString: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeEnumerated: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeEnumeration: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeEventInfo: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeEventRecord: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeEventRef: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val typeFSRef: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeFalse: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeFeet: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeFileURL: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeFinderWindow: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeFixed: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeFixedPoint: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeFixedRectangle: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeGIF: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeGallons: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeGlyphInfoArray: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val typeGrams: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeGraphicLine: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeGraphicText: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeGroupedGraphic: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeHIMenu: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeHIWindow: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeIEEE32BitFloatingPoint: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeIEEE64BitFloatingPoint: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeISO8601DateTime: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeInches: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeIndexDescriptor: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeInsertionLoc: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeIntlText: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeIntlWritingCode: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeJPEG: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeKernelProcessID: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeKeyword: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeKilograms: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeKilometers: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeLiters: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeLogicalDescriptor: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeLongDateTime: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeLongFixed: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeLongFixedPoint: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeLongFixedRectangle: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeLongPoint: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeLongRectangle: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeLowLevelEventRecord: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val typeMachPort: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeMachineLoc: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeMeters: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeMiles: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeNull: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeOSLTokenList: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeObjectBeingExamined: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeObjectSpecifier: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeOffsetArray: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val typeOunces: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeOval: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typePString: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeParamInfo: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typePict: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typePixMapMinus: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typePixelMap: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typePolygon: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typePounds: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeProcessSerialNumber: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typePropInfo: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeProperty: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typePtr: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeQDPoint: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeQDRectangle: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeQDRegion: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeQuarts: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeRGB16: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeRGB96: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeRGBColor: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeRangeDescriptor: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeRectangle: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeRelativeDescriptor: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeReplyPortAttr: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeRotation: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeRoundedRectangle: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeRow: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeSInt16: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeSInt32: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeSInt64: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeScrapStyles: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeScript: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeSectionH: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeSquareFeet: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeSquareKilometers: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeSquareMeters: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeSquareMiles: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeSquareYards: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeStyledText: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeStyledUnicodeText: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeSuiteInfo: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeTIFF: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeTable: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeText: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val typeTextRange: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val typeTextRangeArray: platform.darwin.OSType /* = kotlin.UInt */
    get() = TODO()

val typeTextStyles: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeToken: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeTrue: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeType: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeUInt16: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeUInt32: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeUInt64: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeUTF16ExternalRepresentation: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeUTF8Text: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeUnicodeText: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeVersion: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeWhoseDescriptor: kotlin.UInt
    get() = TODO()

val typeWhoseRange: kotlin.UInt
    get() = TODO()

val typeWildCard: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val typeYards: platform.CoreServices.DescType /* = kotlin.UInt */
    get() = TODO()

val unicodeBufErr: kotlin.Int
    get() = TODO()

val unicodeCharErr: kotlin.Int
    get() = TODO()

val unicodeChecksumErr: kotlin.Int
    get() = TODO()

val unicodeContextualErr: kotlin.Int
    get() = TODO()

val unicodeDirectionErr: kotlin.Int
    get() = TODO()

val unicodeElementErr: kotlin.Int
    get() = TODO()

val unicodeFallbacksErr: kotlin.Int
    get() = TODO()

val unicodeNoTableErr: kotlin.Int
    get() = TODO()

val unicodeNotFoundErr: kotlin.Int
    get() = TODO()

val unicodePartConvertErr: kotlin.Int
    get() = TODO()

val unicodeTableFormatErr: kotlin.Int
    get() = TODO()

val unicodeTextEncodingDataErr: kotlin.Int
    get() = TODO()

val unicodeVariantErr: kotlin.Int
    get() = TODO()

val unimpErr: kotlin.Int
    get() = TODO()

val unitEmptyErr: kotlin.Int
    get() = TODO()

val unitTblFullErr: kotlin.Int
    get() = TODO()

val unknownFormatErr: kotlin.Int
    get() = TODO()

val unknownInsertModeErr: kotlin.Int
    get() = TODO()

val unresolvedComponentDLLErr: kotlin.Int
    get() = TODO()

val unsupportedAuxiliaryImportData: kotlin.Int
    get() = TODO()

val unsupportedForPlatformErr: kotlin.Int
    get() = TODO()

val unsupportedOSErr: kotlin.Int
    get() = TODO()

val unsupportedProcessorErr: kotlin.Int
    get() = TODO()

val updPixMemErr: kotlin.Int
    get() = TODO()

val uppCallComponentCanDoProcInfo: kotlin.UInt
    get() = TODO()

val uppCallComponentCloseProcInfo: kotlin.UInt
    get() = TODO()

val uppCallComponentGetMPWorkFunctionProcInfo: kotlin.UInt
    get() = TODO()

val uppCallComponentGetPublicResourceProcInfo: kotlin.UInt
    get() = TODO()

val uppCallComponentOpenProcInfo: kotlin.UInt
    get() = TODO()

val uppCallComponentRegisterProcInfo: kotlin.UInt
    get() = TODO()

val uppCallComponentTargetProcInfo: kotlin.UInt
    get() = TODO()

val uppCallComponentUnregisterProcInfo: kotlin.UInt
    get() = TODO()

val uppCallComponentVersionProcInfo: kotlin.UInt
    get() = TODO()

val uppComponentFunctionImplementedProcInfo: kotlin.UInt
    get() = TODO()

val uppComponentSetTargetProcInfo: kotlin.UInt
    get() = TODO()

val uppGetComponentVersionProcInfo: kotlin.UInt
    get() = TODO()

val urlDataHFTPBadNameListErr: kotlin.Int
    get() = TODO()

val urlDataHFTPBadPasswordErr: kotlin.Int
    get() = TODO()

val urlDataHFTPBadUserErr: kotlin.Int
    get() = TODO()

val urlDataHFTPDataConnectionErr: kotlin.Int
    get() = TODO()

val urlDataHFTPFilenameErr: kotlin.Int
    get() = TODO()

val urlDataHFTPNeedPasswordErr: kotlin.Int
    get() = TODO()

val urlDataHFTPNoDirectoryErr: kotlin.Int
    get() = TODO()

val urlDataHFTPNoNetDriverErr: kotlin.Int
    get() = TODO()

val urlDataHFTPNoPasswordErr: kotlin.Int
    get() = TODO()

val urlDataHFTPPermissionsErr: kotlin.Int
    get() = TODO()

val urlDataHFTPProtocolErr: kotlin.Int
    get() = TODO()

val urlDataHFTPQuotaErr: kotlin.Int
    get() = TODO()

val urlDataHFTPServerDisconnectedErr: kotlin.Int
    get() = TODO()

val urlDataHFTPServerErr: kotlin.Int
    get() = TODO()

val urlDataHFTPShutdownErr: kotlin.Int
    get() = TODO()

val urlDataHFTPURLErr: kotlin.Int
    get() = TODO()

val urlDataHHTTPNoNetDriverErr: kotlin.Int
    get() = TODO()

val urlDataHHTTPProtocolErr: kotlin.Int
    get() = TODO()

val urlDataHHTTPRedirectErr: kotlin.Int
    get() = TODO()

val urlDataHHTTPURLErr: kotlin.Int
    get() = TODO()

val useATalk: kotlin.UInt
    get() = TODO()

val useAsync: kotlin.UInt
    get() = TODO()

val useExtClk: kotlin.UInt
    get() = TODO()

val useFree: kotlin.UInt
    get() = TODO()

val useMIDI: kotlin.UInt
    get() = TODO()

val userBreak: kotlin.Int
    get() = TODO()

val userCanceledErr: kotlin.Int
    get() = TODO()

val userDataItemNotFound: kotlin.Int
    get() = TODO()

val userRejectErr: kotlin.Int
    get() = TODO()

val vLckdErr: kotlin.Int
    get() = TODO()

val vTypErr: kotlin.Int
    get() = TODO()

val vType: kotlin.UInt
    get() = TODO()

val validDateFields: kotlin.Int
    get() = TODO()

val validInstancesExist: kotlin.Int
    get() = TODO()

val verAfrikaans: kotlin.UInt
    get() = TODO()

val verAlternateGr: kotlin.UInt
    get() = TODO()

val verArabia: kotlin.UInt
    get() = TODO()

val verArabic: kotlin.UInt
    get() = TODO()

val verArmenia: kotlin.UInt
    get() = TODO()

val verArmenian: kotlin.UInt
    get() = TODO()

val verAustralia: kotlin.UInt
    get() = TODO()

val verAustria: kotlin.UInt
    get() = TODO()

val verAustriaGerman: kotlin.UInt
    get() = TODO()

val verBelarus: kotlin.UInt
    get() = TODO()

val verBelgiumLux: kotlin.UInt
    get() = TODO()

val verBelgiumLuxPoint: kotlin.UInt
    get() = TODO()

val verBengali: kotlin.UInt
    get() = TODO()

val verBhutan: kotlin.UInt
    get() = TODO()

val verBrazil: kotlin.UInt
    get() = TODO()

val verBreton: kotlin.UInt
    get() = TODO()

val verBritain: kotlin.UInt
    get() = TODO()

val verBrittany: kotlin.UInt
    get() = TODO()

val verBulgaria: kotlin.UInt
    get() = TODO()

val verByeloRussian: kotlin.UInt
    get() = TODO()

val verCanadaComma: kotlin.UInt
    get() = TODO()

val verCanadaPoint: kotlin.UInt
    get() = TODO()

val verCatalonia: kotlin.UInt
    get() = TODO()

val verChina: kotlin.UInt
    get() = TODO()

val verCroatia: kotlin.UInt
    get() = TODO()

val verCyprus: kotlin.UInt
    get() = TODO()

val verCzech: kotlin.UInt
    get() = TODO()

val verDenmark: kotlin.UInt
    get() = TODO()

val verEastAsiaGeneric: kotlin.UInt
    get() = TODO()

val verEngCanada: kotlin.UInt
    get() = TODO()

val verErr: kotlin.Int
    get() = TODO()

val verEsperanto: kotlin.UInt
    get() = TODO()

val verEstonia: kotlin.UInt
    get() = TODO()

val verFaeroeIsl: kotlin.UInt
    get() = TODO()

val verFarEastGeneric: kotlin.UInt
    get() = TODO()

val verFaroeIsl: kotlin.UInt
    get() = TODO()

val verFinland: kotlin.UInt
    get() = TODO()

val verFlemish: kotlin.UInt
    get() = TODO()

val verFlemishPoint: kotlin.UInt
    get() = TODO()

val verFrBelgium: kotlin.UInt
    get() = TODO()

val verFrBelgiumLux: kotlin.UInt
    get() = TODO()

val verFrCanada: kotlin.UInt
    get() = TODO()

val verFrSwiss: kotlin.UInt
    get() = TODO()

val verFrance: kotlin.UInt
    get() = TODO()

val verFrenchUniversal: kotlin.UInt
    get() = TODO()

val verGenericFE: kotlin.UInt
    get() = TODO()

val verGeorgia: kotlin.UInt
    get() = TODO()

val verGeorgian: kotlin.UInt
    get() = TODO()

val verGermanReformed: kotlin.UInt
    get() = TODO()

val verGermany: kotlin.UInt
    get() = TODO()

val verGrSwiss: kotlin.UInt
    get() = TODO()

val verGreece: kotlin.UInt
    get() = TODO()

val verGreeceAlt: kotlin.UInt
    get() = TODO()

val verGreecePoly: kotlin.UInt
    get() = TODO()

val verGreekAncient: kotlin.UInt
    get() = TODO()

val verGreenland: kotlin.UInt
    get() = TODO()

val verGujarati: kotlin.UInt
    get() = TODO()

val verHungary: kotlin.UInt
    get() = TODO()

val verIceland: kotlin.UInt
    get() = TODO()

val verIndia: kotlin.UInt
    get() = TODO()

val verIndiaHindi: kotlin.UInt
    get() = TODO()

val verIndiaUrdu: kotlin.UInt
    get() = TODO()

val verInternational: kotlin.UInt
    get() = TODO()

val verIran: kotlin.UInt
    get() = TODO()

val verIreland: kotlin.UInt
    get() = TODO()

val verIrelandEnglish: kotlin.UInt
    get() = TODO()

val verIrishGaelicScript: kotlin.UInt
    get() = TODO()

val verIsrael: kotlin.UInt
    get() = TODO()

val verItalianSwiss: kotlin.UInt
    get() = TODO()

val verItaly: kotlin.UInt
    get() = TODO()

val verJapan: kotlin.UInt
    get() = TODO()

val verKorea: kotlin.UInt
    get() = TODO()

val verLapland: kotlin.UInt
    get() = TODO()

val verLatvia: kotlin.UInt
    get() = TODO()

val verLithuania: kotlin.UInt
    get() = TODO()

val verMacedonia: kotlin.UInt
    get() = TODO()

val verMacedonian: kotlin.UInt
    get() = TODO()

val verMagyar: kotlin.UInt
    get() = TODO()

val verMalta: kotlin.UInt
    get() = TODO()

val verManxGaelic: kotlin.UInt
    get() = TODO()

val verMarathi: kotlin.UInt
    get() = TODO()

val verMultilingual: kotlin.UInt
    get() = TODO()

val verNepal: kotlin.UInt
    get() = TODO()

val verNetherlands: kotlin.UInt
    get() = TODO()

val verNetherlandsComma: kotlin.UInt
    get() = TODO()

val verNorway: kotlin.UInt
    get() = TODO()

val verNunavut: kotlin.UInt
    get() = TODO()

val verNynorsk: kotlin.UInt
    get() = TODO()

val verPakistan: kotlin.UInt
    get() = TODO()

val verPakistanUrdu: kotlin.UInt
    get() = TODO()

val verPoland: kotlin.UInt
    get() = TODO()

val verPortugal: kotlin.UInt
    get() = TODO()

val verPunjabi: kotlin.UInt
    get() = TODO()

val verRomania: kotlin.UInt
    get() = TODO()

val verRumania: kotlin.UInt
    get() = TODO()

val verRussia: kotlin.UInt
    get() = TODO()

val verSami: kotlin.UInt
    get() = TODO()

val verScottishGaelic: kotlin.UInt
    get() = TODO()

val verScriptGeneric: kotlin.UInt
    get() = TODO()

val verSerbia: kotlin.UInt
    get() = TODO()

val verSerbian: kotlin.UInt
    get() = TODO()

val verSingapore: kotlin.UInt
    get() = TODO()

val verSlovak: kotlin.UInt
    get() = TODO()

val verSlovenia: kotlin.UInt
    get() = TODO()

val verSlovenian: kotlin.UInt
    get() = TODO()

val verSpLatinAmerica: kotlin.UInt
    get() = TODO()

val verSpain: kotlin.UInt
    get() = TODO()

val verSweden: kotlin.UInt
    get() = TODO()

val verTaiwan: kotlin.UInt
    get() = TODO()

val verThailand: kotlin.UInt
    get() = TODO()

val verTibet: kotlin.UInt
    get() = TODO()

val verTibetan: kotlin.UInt
    get() = TODO()

val verTonga: kotlin.UInt
    get() = TODO()

val verTurkey: kotlin.UInt
    get() = TODO()

val verTurkishModified: kotlin.UInt
    get() = TODO()

val verUS: kotlin.UInt
    get() = TODO()

val verUkraine: kotlin.UInt
    get() = TODO()

val verUkrania: kotlin.UInt
    get() = TODO()

val verUnspecified: kotlin.UInt
    get() = TODO()

val verUzbek: kotlin.UInt
    get() = TODO()

val verVietnam: kotlin.UInt
    get() = TODO()

val verWales: kotlin.UInt
    get() = TODO()

val verWelsh: kotlin.UInt
    get() = TODO()

val verYugoCroatian: kotlin.UInt
    get() = TODO()

val verYugoslavia: kotlin.UInt
    get() = TODO()

val vervariantDenmark: kotlin.UInt
    get() = TODO()

val vervariantNorway: kotlin.UInt
    get() = TODO()

val vervariantPortugal: kotlin.UInt
    get() = TODO()

val videoOutputInUseErr: kotlin.Int
    get() = TODO()

val vmAddressNotInFileViewErr: kotlin.Int
    get() = TODO()

val vmBadDriver: kotlin.Int
    get() = TODO()

val vmBusyBackingFileErr: kotlin.Int
    get() = TODO()

val vmFileViewAccessErr: kotlin.Int
    get() = TODO()

val vmInvalidBackingFileIDErr: kotlin.Int
    get() = TODO()

val vmInvalidFileViewIDErr: kotlin.Int
    get() = TODO()

val vmInvalidOwningProcessErr: kotlin.Int
    get() = TODO()

val vmKernelMMUInitErr: kotlin.Int
    get() = TODO()

val vmMappingPrivilegesErr: kotlin.Int
    get() = TODO()

val vmMemLckdErr: kotlin.Int
    get() = TODO()

val vmMorePhysicalThanVirtualErr: kotlin.Int
    get() = TODO()

val vmNoMoreBackingFilesErr: kotlin.Int
    get() = TODO()

val vmNoMoreFileViewsErr: kotlin.Int
    get() = TODO()

val vmNoVectorErr: kotlin.Int
    get() = TODO()

val vmOffErr: kotlin.Int
    get() = TODO()

val voiceNotFound: kotlin.Int
    get() = TODO()

val volGoneErr: kotlin.Int
    get() = TODO()

val volMountChangedBit: kotlin.UInt
    get() = TODO()

val volMountChangedMask: kotlin.UInt
    get() = TODO()

val volMountExtendedFlagsBit: kotlin.UInt
    get() = TODO()

val volMountExtendedFlagsMask: kotlin.UInt
    get() = TODO()

val volMountFSReservedMask: kotlin.UInt
    get() = TODO()

val volMountInteractBit: kotlin.UInt
    get() = TODO()

val volMountInteractMask: kotlin.UInt
    get() = TODO()

val volMountNoLoginMsgFlagBit: kotlin.UInt
    get() = TODO()

val volMountNoLoginMsgFlagMask: kotlin.UInt
    get() = TODO()

val volMountSysReservedMask: kotlin.UInt
    get() = TODO()

val volOffLinErr: kotlin.Int
    get() = TODO()

val volOnLinErr: kotlin.Int
    get() = TODO()

val volVMBusyErr: kotlin.Int
    get() = TODO()

val wPrErr: kotlin.Int
    get() = TODO()

val wackBadFileErr: kotlin.Int
    get() = TODO()

val wackBadMetaDataErr: kotlin.Int
    get() = TODO()

val wackForkNotFoundErr: kotlin.Int
    get() = TODO()

val weekOfYearField: kotlin.UInt
    get() = TODO()

val weekOfYearMask: kotlin.UInt
    get() = TODO()

val wfFileNotFound: kotlin.Int
    get() = TODO()

val windowAppModalStateAlreadyExistsErr: kotlin.Int
    get() = TODO()

val windowAttributeImmutableErr: kotlin.Int
    get() = TODO()

val windowAttributesConflictErr: kotlin.Int
    get() = TODO()

val windowGroupInvalidErr: kotlin.Int
    get() = TODO()

val windowManagerInternalErr: kotlin.Int
    get() = TODO()

val windowNoAppModalStateErr: kotlin.Int
    get() = TODO()

val windowWrongStateErr: kotlin.Int
    get() = TODO()

val wrPermErr: kotlin.Int
    get() = TODO()

val wrUnderrun: kotlin.Int
    get() = TODO()

val wrgVolTypErr: kotlin.Int
    get() = TODO()

val writErr: kotlin.Int
    get() = TODO()

val writeReference: kotlin.UInt
    get() = TODO()

val writingPastEnd: kotlin.Int
    get() = TODO()

val wrongApplicationPlatform: kotlin.Int
    get() = TODO()

val ydm: kotlin.UInt
    get() = TODO()

val yearField: kotlin.UInt
    get() = TODO()

val yearMask: kotlin.UInt
    get() = TODO()

val ymd: kotlin.UInt
    get() = TODO()

val zeroCycle: kotlin.UInt
    get() = TODO()

fun AEBuildAppleEvent(/*0*/ theClass: platform.CoreServices.AEEventClass /* = kotlin.UInt */, /*1*/ theID: platform.CoreServices.AEEventID /* = kotlin.UInt */, /*2*/ addressType: platform.CoreServices.DescType /* = kotlin.UInt */, /*3*/ addressData: kotlinx.cinterop.CValuesRef<*>?, /*4*/ addressLength: platform.darwin.Size /* = kotlin.Long */, /*5*/ returnID: platform.darwin.SInt16 /* = kotlin.Short */, /*6*/ transactionID: platform.darwin.SInt32 /* = kotlin.Int */, /*7*/ result: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, /*8*/ error: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEBuildError>?, /*9*/ paramsFmt: kotlin.String?, /*10*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEBuildDesc(/*0*/ dst: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*1*/ error: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEBuildError>?, /*2*/ src: kotlin.String?, /*3*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEBuildParameters(/*0*/ event: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, /*1*/ error: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEBuildError>?, /*2*/ format: kotlin.String?, /*3*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AECallObjectAccessor(/*0*/ desiredClass: platform.CoreServices.DescType /* = kotlin.UInt */, /*1*/ containerToken: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*2*/ containerClass: platform.CoreServices.DescType /* = kotlin.UInt */, /*3*/ keyForm: platform.CoreServices.DescType /* = kotlin.UInt */, /*4*/ keyData: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*5*/ token: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AECheckIsRecord(/*0*/ theDesc: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): kotlin.Boolean { TODO() }

fun AECoerceDesc(/*0*/ theAEDesc: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*1*/ toType: platform.CoreServices.DescType /* = kotlin.UInt */, /*2*/ result: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AECoercePtr(/*0*/ typeCode: platform.CoreServices.DescType /* = kotlin.UInt */, /*1*/ dataPtr: kotlinx.cinterop.CValuesRef<*>?, /*2*/ dataSize: platform.darwin.Size /* = kotlin.Long */, /*3*/ toType: platform.CoreServices.DescType /* = kotlin.UInt */, /*4*/ result: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AECompareDesc(/*0*/ desc1: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*1*/ desc2: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*2*/ resultP: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AECountItems(/*0*/ theAEDescList: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDescList /* = platform.CoreServices.AEDesc */>?, /*1*/ theCount: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.LongVar /* = kotlinx.cinterop.LongVarOf<kotlin.Long> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AECreateAppleEvent(/*0*/ theAEEventClass: platform.CoreServices.AEEventClass /* = kotlin.UInt */, /*1*/ theAEEventID: platform.CoreServices.AEEventID /* = kotlin.UInt */, /*2*/ target: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEAddressDesc /* = platform.CoreServices.AEDesc */>?, /*3*/ returnID: platform.CoreServices.AEReturnID /* = kotlin.Short */, /*4*/ transactionID: platform.CoreServices.AETransactionID /* = kotlin.Int */, /*5*/ result: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AECreateDesc(/*0*/ typeCode: platform.CoreServices.DescType /* = kotlin.UInt */, /*1*/ dataPtr: kotlinx.cinterop.CValuesRef<*>?, /*2*/ dataSize: platform.darwin.Size /* = kotlin.Long */, /*3*/ result: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AECreateDescFromExternalPtr(/*0*/ descriptorType: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ dataPtr: kotlinx.cinterop.CValuesRef<*>?, /*2*/ dataLength: platform.darwin.Size /* = kotlin.Long */, /*3*/ disposeCallback: platform.CoreServices.AEDisposeExternalUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.Size /* = kotlin.Long */, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*4*/ disposeRefcon: platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*5*/ theDesc: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AECreateList(/*0*/ factoringPtr: kotlinx.cinterop.CValuesRef<*>?, /*1*/ factoredSize: platform.darwin.Size /* = kotlin.Long */, /*2*/ isRecord: kotlin.Boolean, /*3*/ resultList: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDescList /* = platform.CoreServices.AEDesc */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AECreateRemoteProcessResolver(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ url: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */): platform.CoreServices.AERemoteProcessResolverRef? /* = kotlinx.cinterop.CPointer<cnames.structs.AERemoteProcessResolver>? */ { TODO() }

fun AEDecodeMessage(/*0*/ header: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_header_t>?, /*1*/ event: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, /*2*/ reply: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEDeleteItem(/*0*/ theAEDescList: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDescList /* = platform.CoreServices.AEDesc */>?, /*1*/ index: kotlin.Long): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEDeleteParam(/*0*/ theAppleEvent: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, /*1*/ theAEKeyword: platform.CoreServices.AEKeyword /* = kotlin.UInt */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEDeterminePermissionToAutomateTarget(/*0*/ target: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEAddressDesc /* = platform.CoreServices.AEDesc */>?, /*1*/ theAEEventClass: platform.CoreServices.AEEventClass /* = kotlin.UInt */, /*2*/ theAEEventID: platform.CoreServices.AEEventID /* = kotlin.UInt */, /*3*/ askUserIfNeeded: kotlin.Boolean): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEDisposeDesc(/*0*/ theAEDesc: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEDisposeRemoteProcessResolver(/*0*/ ref: platform.CoreServices.AERemoteProcessResolverRef? /* = kotlinx.cinterop.CPointer<cnames.structs.AERemoteProcessResolver>? */) { TODO() }

fun AEDisposeToken(/*0*/ theToken: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEDuplicateDesc(/*0*/ theAEDesc: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*1*/ result: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEFlattenDesc(/*0*/ theAEDesc: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*1*/ buffer: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */, /*2*/ bufferSize: platform.darwin.Size /* = kotlin.Long */, /*3*/ actualSize: kotlinx.cinterop.CValuesRef<platform.darwin.SizeVar /* = kotlinx.cinterop.LongVarOf<platform.darwin.Size /* = kotlin.Long */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEGetArray(/*0*/ theAEDescList: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDescList /* = platform.CoreServices.AEDesc */>?, /*1*/ arrayType: platform.CoreServices.AEArrayType /* = kotlin.Byte */, /*2*/ arrayPtr: platform.CoreServices.AEArrayDataPointer? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AEArrayData>? */, /*3*/ maximumSize: platform.darwin.Size /* = kotlin.Long */, /*4*/ itemType: kotlinx.cinterop.CValuesRef<platform.CoreServices.DescTypeVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.DescType /* = kotlin.UInt */> */>?, /*5*/ itemSize: kotlinx.cinterop.CValuesRef<platform.darwin.SizeVar /* = kotlinx.cinterop.LongVarOf<platform.darwin.Size /* = kotlin.Long */> */>?, /*6*/ itemCount: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.LongVar /* = kotlinx.cinterop.LongVarOf<kotlin.Long> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEGetAttributeDesc(/*0*/ theAppleEvent: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, /*1*/ theAEKeyword: platform.CoreServices.AEKeyword /* = kotlin.UInt */, /*2*/ desiredType: platform.CoreServices.DescType /* = kotlin.UInt */, /*3*/ result: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEGetAttributePtr(/*0*/ theAppleEvent: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, /*1*/ theAEKeyword: platform.CoreServices.AEKeyword /* = kotlin.UInt */, /*2*/ desiredType: platform.CoreServices.DescType /* = kotlin.UInt */, /*3*/ typeCode: kotlinx.cinterop.CValuesRef<platform.CoreServices.DescTypeVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.DescType /* = kotlin.UInt */> */>?, /*4*/ dataPtr: kotlinx.cinterop.CValuesRef<*>?, /*5*/ maximumSize: platform.darwin.Size /* = kotlin.Long */, /*6*/ actualSize: kotlinx.cinterop.CValuesRef<platform.darwin.SizeVar /* = kotlinx.cinterop.LongVarOf<platform.darwin.Size /* = kotlin.Long */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEGetCoercionHandler(/*0*/ fromType: platform.CoreServices.DescType /* = kotlin.UInt */, /*1*/ toType: platform.CoreServices.DescType /* = kotlin.UInt */, /*2*/ handler: kotlinx.cinterop.CValuesRef<platform.CoreServices.AECoercionHandlerUPPVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AECoercionHandlerUPP /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType /* = kotlin.UInt */, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>> */> */>?, /*3*/ handlerRefcon: kotlinx.cinterop.CValuesRef<platform.darwin.SRefConVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.SRefCon /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?, /*4*/ fromTypeIsDesc: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?, /*5*/ isSysHandler: kotlin.Boolean): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEGetDescData(/*0*/ theAEDesc: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*1*/ dataPtr: kotlinx.cinterop.CValuesRef<*>?, /*2*/ maximumSize: platform.darwin.Size /* = kotlin.Long */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEGetDescDataRange(/*0*/ dataDesc: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*1*/ buffer: kotlinx.cinterop.CValuesRef<*>?, /*2*/ offset: platform.darwin.Size /* = kotlin.Long */, /*3*/ length: platform.darwin.Size /* = kotlin.Long */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEGetDescDataSize(/*0*/ theAEDesc: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.Size /* = kotlin.Long */ { TODO() }

fun AEGetEventHandler(/*0*/ theAEEventClass: platform.CoreServices.AEEventClass /* = kotlin.UInt */, /*1*/ theAEEventID: platform.CoreServices.AEEventID /* = kotlin.UInt */, /*2*/ handler: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEEventHandlerUPPVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AEEventHandlerUPP /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>> */> */>?, /*3*/ handlerRefcon: kotlinx.cinterop.CValuesRef<platform.darwin.SRefConVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.SRefCon /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?, /*4*/ isSysHandler: kotlin.Boolean): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEGetNthDesc(/*0*/ theAEDescList: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDescList /* = platform.CoreServices.AEDesc */>?, /*1*/ index: kotlin.Long, /*2*/ desiredType: platform.CoreServices.DescType /* = kotlin.UInt */, /*3*/ theAEKeyword: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEKeywordVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.AEKeyword /* = kotlin.UInt */> */>?, /*4*/ result: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEGetNthPtr(/*0*/ theAEDescList: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDescList /* = platform.CoreServices.AEDesc */>?, /*1*/ index: kotlin.Long, /*2*/ desiredType: platform.CoreServices.DescType /* = kotlin.UInt */, /*3*/ theAEKeyword: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEKeywordVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.AEKeyword /* = kotlin.UInt */> */>?, /*4*/ typeCode: kotlinx.cinterop.CValuesRef<platform.CoreServices.DescTypeVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.DescType /* = kotlin.UInt */> */>?, /*5*/ dataPtr: kotlinx.cinterop.CValuesRef<*>?, /*6*/ maximumSize: platform.darwin.Size /* = kotlin.Long */, /*7*/ actualSize: kotlinx.cinterop.CValuesRef<platform.darwin.SizeVar /* = kotlinx.cinterop.LongVarOf<platform.darwin.Size /* = kotlin.Long */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEGetObjectAccessor(/*0*/ desiredClass: platform.CoreServices.DescType /* = kotlin.UInt */, /*1*/ containerType: platform.CoreServices.DescType /* = kotlin.UInt */, /*2*/ accessor: kotlinx.cinterop.CValuesRef<platform.CoreServices.OSLAccessorUPPVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.OSLAccessorUPP /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType /* = kotlin.UInt */, platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>> */> */>?, /*3*/ accessorRefcon: kotlinx.cinterop.CValuesRef<platform.darwin.SRefConVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.SRefCon /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?, /*4*/ isSysHandler: kotlin.Boolean): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEGetParamDesc(/*0*/ theAppleEvent: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, /*1*/ theAEKeyword: platform.CoreServices.AEKeyword /* = kotlin.UInt */, /*2*/ desiredType: platform.CoreServices.DescType /* = kotlin.UInt */, /*3*/ result: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEGetParamPtr(/*0*/ theAppleEvent: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, /*1*/ theAEKeyword: platform.CoreServices.AEKeyword /* = kotlin.UInt */, /*2*/ desiredType: platform.CoreServices.DescType /* = kotlin.UInt */, /*3*/ actualType: kotlinx.cinterop.CValuesRef<platform.CoreServices.DescTypeVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.DescType /* = kotlin.UInt */> */>?, /*4*/ dataPtr: kotlinx.cinterop.CValuesRef<*>?, /*5*/ maximumSize: platform.darwin.Size /* = kotlin.Long */, /*6*/ actualSize: kotlinx.cinterop.CValuesRef<platform.darwin.SizeVar /* = kotlinx.cinterop.LongVarOf<platform.darwin.Size /* = kotlin.Long */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEGetRegisteredMachPort(): platform.darwin.mach_port_t /* = kotlin.UInt */ { TODO() }

fun AEGetSpecialHandler(/*0*/ functionClass: platform.CoreServices.AEKeyword /* = kotlin.UInt */, /*1*/ handler: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEEventHandlerUPPVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AEEventHandlerUPP /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>> */> */>?, /*2*/ isSysHandler: kotlin.Boolean): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEInitializeDesc(/*0*/ desc: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?) { TODO() }

fun AEInstallCoercionHandler(/*0*/ fromType: platform.CoreServices.DescType /* = kotlin.UInt */, /*1*/ toType: platform.CoreServices.DescType /* = kotlin.UInt */, /*2*/ handler: platform.CoreServices.AECoercionHandlerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType /* = kotlin.UInt */, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */, /*3*/ handlerRefcon: platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*4*/ fromTypeIsDesc: kotlin.Boolean, /*5*/ isSysHandler: kotlin.Boolean): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEInstallEventHandler(/*0*/ theAEEventClass: platform.CoreServices.AEEventClass /* = kotlin.UInt */, /*1*/ theAEEventID: platform.CoreServices.AEEventID /* = kotlin.UInt */, /*2*/ handler: platform.CoreServices.AEEventHandlerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */, /*3*/ handlerRefcon: platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*4*/ isSysHandler: kotlin.Boolean): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEInstallObjectAccessor(/*0*/ desiredClass: platform.CoreServices.DescType /* = kotlin.UInt */, /*1*/ containerType: platform.CoreServices.DescType /* = kotlin.UInt */, /*2*/ theAccessor: platform.CoreServices.OSLAccessorUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType /* = kotlin.UInt */, platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */, /*3*/ accessorRefcon: platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*4*/ isSysHandler: kotlin.Boolean): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEInstallSpecialHandler(/*0*/ functionClass: platform.CoreServices.AEKeyword /* = kotlin.UInt */, /*1*/ handler: platform.CoreServices.AEEventHandlerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */, /*2*/ isSysHandler: kotlin.Boolean): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEManagerInfo(/*0*/ keyWord: platform.CoreServices.AEKeyword /* = kotlin.UInt */, /*1*/ result: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.LongVar /* = kotlinx.cinterop.LongVarOf<kotlin.Long> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEObjectInit(): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEPrintDescToHandle(/*0*/ desc: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*1*/ result: kotlinx.cinterop.CValuesRef<platform.darwin.HandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Handle /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEProcessMessage(/*0*/ header: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_header_t>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEPutArray(/*0*/ theAEDescList: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDescList /* = platform.CoreServices.AEDesc */>?, /*1*/ arrayType: platform.CoreServices.AEArrayType /* = kotlin.Byte */, /*2*/ arrayPtr: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEArrayData>?, /*3*/ itemType: platform.CoreServices.DescType /* = kotlin.UInt */, /*4*/ itemSize: platform.darwin.Size /* = kotlin.Long */, /*5*/ itemCount: kotlin.Long): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEPutAttributeDesc(/*0*/ theAppleEvent: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, /*1*/ theAEKeyword: platform.CoreServices.AEKeyword /* = kotlin.UInt */, /*2*/ theAEDesc: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEPutAttributePtr(/*0*/ theAppleEvent: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, /*1*/ theAEKeyword: platform.CoreServices.AEKeyword /* = kotlin.UInt */, /*2*/ typeCode: platform.CoreServices.DescType /* = kotlin.UInt */, /*3*/ dataPtr: kotlinx.cinterop.CValuesRef<*>?, /*4*/ dataSize: platform.darwin.Size /* = kotlin.Long */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEPutDesc(/*0*/ theAEDescList: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDescList /* = platform.CoreServices.AEDesc */>?, /*1*/ index: kotlin.Long, /*2*/ theAEDesc: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEPutParamDesc(/*0*/ theAppleEvent: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, /*1*/ theAEKeyword: platform.CoreServices.AEKeyword /* = kotlin.UInt */, /*2*/ theAEDesc: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEPutParamPtr(/*0*/ theAppleEvent: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, /*1*/ theAEKeyword: platform.CoreServices.AEKeyword /* = kotlin.UInt */, /*2*/ typeCode: platform.CoreServices.DescType /* = kotlin.UInt */, /*3*/ dataPtr: kotlinx.cinterop.CValuesRef<*>?, /*4*/ dataSize: platform.darwin.Size /* = kotlin.Long */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEPutPtr(/*0*/ theAEDescList: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDescList /* = platform.CoreServices.AEDesc */>?, /*1*/ index: kotlin.Long, /*2*/ typeCode: platform.CoreServices.DescType /* = kotlin.UInt */, /*3*/ dataPtr: kotlinx.cinterop.CValuesRef<*>?, /*4*/ dataSize: platform.darwin.Size /* = kotlin.Long */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AERemoteProcessResolverGetProcesses(/*0*/ ref: platform.CoreServices.AERemoteProcessResolverRef? /* = kotlinx.cinterop.CPointer<cnames.structs.AERemoteProcessResolver>? */, /*1*/ outError: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFStreamError>?): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun AERemoteProcessResolverScheduleWithRunLoop(/*0*/ ref: platform.CoreServices.AERemoteProcessResolverRef? /* = kotlinx.cinterop.CPointer<cnames.structs.AERemoteProcessResolver>? */, /*1*/ runLoop: platform.CoreFoundation.CFRunLoopRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFRunLoop>? */, /*2*/ runLoopMode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ callback: platform.CoreServices.AERemoteProcessResolverCallback? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AERemoteProcessResolverRef? /* = kotlinx.cinterop.CPointer<cnames.structs.AERemoteProcessResolver>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*4*/ ctx: kotlinx.cinterop.CValuesRef<platform.CoreServices.AERemoteProcessResolverContext>?) { TODO() }

fun AERemoveCoercionHandler(/*0*/ fromType: platform.CoreServices.DescType /* = kotlin.UInt */, /*1*/ toType: platform.CoreServices.DescType /* = kotlin.UInt */, /*2*/ handler: platform.CoreServices.AECoercionHandlerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType /* = kotlin.UInt */, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */, /*3*/ isSysHandler: kotlin.Boolean): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AERemoveEventHandler(/*0*/ theAEEventClass: platform.CoreServices.AEEventClass /* = kotlin.UInt */, /*1*/ theAEEventID: platform.CoreServices.AEEventID /* = kotlin.UInt */, /*2*/ handler: platform.CoreServices.AEEventHandlerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */, /*3*/ isSysHandler: kotlin.Boolean): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AERemoveObjectAccessor(/*0*/ desiredClass: platform.CoreServices.DescType /* = kotlin.UInt */, /*1*/ containerType: platform.CoreServices.DescType /* = kotlin.UInt */, /*2*/ theAccessor: platform.CoreServices.OSLAccessorUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType /* = kotlin.UInt */, platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */, /*3*/ isSysHandler: kotlin.Boolean): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AERemoveSpecialHandler(/*0*/ functionClass: platform.CoreServices.AEKeyword /* = kotlin.UInt */, /*1*/ handler: platform.CoreServices.AEEventHandlerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */, /*2*/ isSysHandler: kotlin.Boolean): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEReplaceDescData(/*0*/ typeCode: platform.CoreServices.DescType /* = kotlin.UInt */, /*1*/ dataPtr: kotlinx.cinterop.CValuesRef<*>?, /*2*/ dataSize: platform.darwin.Size /* = kotlin.Long */, /*3*/ theAEDesc: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEResolve(/*0*/ objectSpecifier: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*1*/ callbackFlags: kotlin.Short, /*2*/ theToken: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AESendMessage(/*0*/ event: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, /*1*/ reply: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, /*2*/ sendMode: platform.CoreServices.AESendMode /* = kotlin.Int */, /*3*/ timeOutInTicks: kotlin.Long): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AESetObjectCallbacks(/*0*/ myCompareProc: platform.CoreServices.OSLCompareUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */, /*1*/ myCountProc: platform.CoreServices.OSLCountUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVar /* = kotlinx.cinterop.LongVarOf<kotlin.Long> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */, /*2*/ myDisposeTokenProc: platform.CoreServices.OSLDisposeTokenUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */, /*3*/ myGetMarkTokenProc: platform.CoreServices.OSLGetMarkTokenUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */, /*4*/ myMarkProc: platform.CoreServices.OSLMarkUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlin.Long) -> platform.darwin.OSErr /* = kotlin.Short */>>? */, /*5*/ myAdjustMarksProc: platform.CoreServices.OSLAdjustMarksUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Long, kotlin.Long, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */, /*6*/ myGetErrDescProcPtr: platform.CoreServices.OSLGetErrDescUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.CoreServices.AEDesc> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AESizeOfAttribute(/*0*/ theAppleEvent: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, /*1*/ theAEKeyword: platform.CoreServices.AEKeyword /* = kotlin.UInt */, /*2*/ typeCode: kotlinx.cinterop.CValuesRef<platform.CoreServices.DescTypeVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.DescType /* = kotlin.UInt */> */>?, /*3*/ dataSize: kotlinx.cinterop.CValuesRef<platform.darwin.SizeVar /* = kotlinx.cinterop.LongVarOf<platform.darwin.Size /* = kotlin.Long */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AESizeOfFlattenedDesc(/*0*/ theAEDesc: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.Size /* = kotlin.Long */ { TODO() }

fun AESizeOfNthItem(/*0*/ theAEDescList: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDescList /* = platform.CoreServices.AEDesc */>?, /*1*/ index: kotlin.Long, /*2*/ typeCode: kotlinx.cinterop.CValuesRef<platform.CoreServices.DescTypeVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.DescType /* = kotlin.UInt */> */>?, /*3*/ dataSize: kotlinx.cinterop.CValuesRef<platform.darwin.SizeVar /* = kotlinx.cinterop.LongVarOf<platform.darwin.Size /* = kotlin.Long */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AESizeOfParam(/*0*/ theAppleEvent: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, /*1*/ theAEKeyword: platform.CoreServices.AEKeyword /* = kotlin.UInt */, /*2*/ typeCode: kotlinx.cinterop.CValuesRef<platform.CoreServices.DescTypeVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.DescType /* = kotlin.UInt */> */>?, /*3*/ dataSize: kotlinx.cinterop.CValuesRef<platform.darwin.SizeVar /* = kotlinx.cinterop.LongVarOf<platform.darwin.Size /* = kotlin.Long */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AEStreamClose(/*0*/ ref: platform.CoreServices.AEStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEStreamRef>? */, /*1*/ desc: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEStreamCloseDesc(/*0*/ ref: platform.CoreServices.AEStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEStreamRef>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEStreamCloseList(/*0*/ ref: platform.CoreServices.AEStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEStreamRef>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEStreamCloseRecord(/*0*/ ref: platform.CoreServices.AEStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEStreamRef>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEStreamCreateEvent(/*0*/ clazz: platform.CoreServices.AEEventClass /* = kotlin.UInt */, /*1*/ id: platform.CoreServices.AEEventID /* = kotlin.UInt */, /*2*/ targetType: platform.CoreServices.DescType /* = kotlin.UInt */, /*3*/ targetData: kotlinx.cinterop.CValuesRef<*>?, /*4*/ targetLength: platform.darwin.Size /* = kotlin.Long */, /*5*/ returnID: platform.darwin.SInt16 /* = kotlin.Short */, /*6*/ transactionID: platform.darwin.SInt32 /* = kotlin.Int */): platform.CoreServices.AEStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEStreamRef>? */ { TODO() }

fun AEStreamOpen(): platform.CoreServices.AEStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEStreamRef>? */ { TODO() }

fun AEStreamOpenDesc(/*0*/ ref: platform.CoreServices.AEStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEStreamRef>? */, /*1*/ newType: platform.CoreServices.DescType /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEStreamOpenEvent(/*0*/ event: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?): platform.CoreServices.AEStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEStreamRef>? */ { TODO() }

fun AEStreamOpenKeyDesc(/*0*/ ref: platform.CoreServices.AEStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEStreamRef>? */, /*1*/ key: platform.CoreServices.AEKeyword /* = kotlin.UInt */, /*2*/ newType: platform.CoreServices.DescType /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEStreamOpenList(/*0*/ ref: platform.CoreServices.AEStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEStreamRef>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEStreamOpenRecord(/*0*/ ref: platform.CoreServices.AEStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEStreamRef>? */, /*1*/ newType: platform.CoreServices.DescType /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEStreamOptionalParam(/*0*/ ref: platform.CoreServices.AEStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEStreamRef>? */, /*1*/ key: platform.CoreServices.AEKeyword /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEStreamSetRecordType(/*0*/ ref: platform.CoreServices.AEStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEStreamRef>? */, /*1*/ newType: platform.CoreServices.DescType /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEStreamWriteAEDesc(/*0*/ ref: platform.CoreServices.AEStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEStreamRef>? */, /*1*/ desc: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEStreamWriteData(/*0*/ ref: platform.CoreServices.AEStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEStreamRef>? */, /*1*/ data: kotlinx.cinterop.CValuesRef<*>?, /*2*/ length: platform.darwin.Size /* = kotlin.Long */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEStreamWriteDesc(/*0*/ ref: platform.CoreServices.AEStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEStreamRef>? */, /*1*/ newType: platform.CoreServices.DescType /* = kotlin.UInt */, /*2*/ data: kotlinx.cinterop.CValuesRef<*>?, /*3*/ length: platform.darwin.Size /* = kotlin.Long */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEStreamWriteKey(/*0*/ ref: platform.CoreServices.AEStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEStreamRef>? */, /*1*/ key: platform.CoreServices.AEKeyword /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEStreamWriteKeyDesc(/*0*/ ref: platform.CoreServices.AEStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueAEStreamRef>? */, /*1*/ key: platform.CoreServices.AEKeyword /* = kotlin.UInt */, /*2*/ newType: platform.CoreServices.DescType /* = kotlin.UInt */, /*3*/ data: kotlinx.cinterop.CValuesRef<*>?, /*4*/ length: platform.darwin.Size /* = kotlin.Long */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AEUnflattenDesc(/*0*/ buffer: kotlinx.cinterop.CValuesRef<*>?, /*1*/ result: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun AbsoluteDeltaToDuration(/*0*/ leftAbsoluteTime: kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */>, /*1*/ rightAbsoluteTime: kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */>): platform.darwin.Duration /* = kotlin.Int */ { TODO() }

fun AbsoluteDeltaToNanoseconds(/*0*/ leftAbsoluteTime: kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */>, /*1*/ rightAbsoluteTime: kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */>): kotlinx.cinterop.CValue<platform.CoreServices.Nanoseconds /* = platform.darwin.UnsignedWide */> { TODO() }

fun AbsoluteToDuration(/*0*/ absoluteTime: kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */>): platform.darwin.Duration /* = kotlin.Int */ { TODO() }

fun AbsoluteToNanoseconds(/*0*/ absoluteTime: kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */>): kotlinx.cinterop.CValue<platform.CoreServices.Nanoseconds /* = platform.darwin.UnsignedWide */> { TODO() }

fun AcquireIconRef(/*0*/ theIconRef: platform.CoreServices.IconRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AddAbsoluteToAbsolute(/*0*/ absoluteTime1: kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */>, /*1*/ absoluteTime2: kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */>): kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */> { TODO() }

fun AddAtomic(/*0*/ amount: platform.darwin.SInt32 /* = kotlin.Int */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?): platform.darwin.SInt32 /* = kotlin.Int */ { TODO() }

fun AddAtomic16(/*0*/ amount: platform.darwin.SInt32 /* = kotlin.Int */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.SInt16Var /* = kotlinx.cinterop.ShortVarOf<platform.darwin.SInt16 /* = kotlin.Short */> */>?): platform.darwin.SInt16 /* = kotlin.Short */ { TODO() }

fun AddAtomic8(/*0*/ amount: platform.darwin.SInt32 /* = kotlin.Int */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.SInt8Var /* = kotlinx.cinterop.ByteVarOf<platform.darwin.SInt8 /* = kotlin.Byte */> */>?): platform.darwin.SInt8 /* = kotlin.Byte */ { TODO() }

fun AddCollectionItem(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ tag: platform.CoreServices.CollectionTag /* = kotlin.UInt */, /*2*/ id: platform.darwin.SInt32 /* = kotlin.Int */, /*3*/ itemSize: platform.darwin.SInt32 /* = kotlin.Int */, /*4*/ itemData: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AddCollectionItemHdl(/*0*/ aCollection: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ tag: platform.CoreServices.CollectionTag /* = kotlin.UInt */, /*2*/ id: platform.darwin.SInt32 /* = kotlin.Int */, /*3*/ itemData: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AddDurationToAbsolute(/*0*/ duration: platform.darwin.Duration /* = kotlin.Int */, /*1*/ absoluteTime: kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */>): kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */> { TODO() }

fun AddFolderDescriptor(/*0*/ foldType: platform.CoreServices.FolderType /* = kotlin.UInt */, /*1*/ flags: platform.CoreServices.FolderDescFlags /* = kotlin.UInt */, /*2*/ foldClass: platform.CoreServices.FolderClass /* = kotlin.UInt */, /*3*/ foldLocation: platform.CoreServices.FolderLocation /* = kotlin.UInt */, /*4*/ badgeSignature: platform.darwin.OSType /* = kotlin.UInt */, /*5*/ badgeType: platform.darwin.OSType /* = kotlin.UInt */, /*6*/ name: platform.darwin.ConstStrFileNameParam? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*7*/ replaceFlag: kotlin.Boolean): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun AddNanosecondsToAbsolute(/*0*/ nanoseconds: kotlinx.cinterop.CValue<platform.CoreServices.Nanoseconds /* = platform.darwin.UnsignedWide */>, /*1*/ absoluteTime: kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */>): kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */> { TODO() }

fun AddResource(/*0*/ theData: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*1*/ theType: platform.darwin.ResType /* = kotlin.UInt */, /*2*/ theID: platform.CoreServices.ResID /* = kotlin.Short */, /*3*/ name: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */) { TODO() }

fun BatteryCount(): kotlin.Short { TODO() }

fun BitAnd(/*0*/ value1: kotlin.Long, /*1*/ value2: kotlin.Long): kotlin.Long { TODO() }

fun BitAndAtomic(/*0*/ mask: platform.darwin.UInt32 /* = kotlin.UInt */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?): platform.darwin.UInt32 /* = kotlin.UInt */ { TODO() }

fun BitAndAtomic16(/*0*/ mask: platform.darwin.UInt32 /* = kotlin.UInt */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.UInt16Var /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UInt16 /* = kotlin.UShort */> */>?): platform.darwin.UInt16 /* = kotlin.UShort */ { TODO() }

fun BitAndAtomic8(/*0*/ mask: platform.darwin.UInt32 /* = kotlin.UInt */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>?): platform.darwin.UInt8 /* = kotlin.UByte */ { TODO() }

fun BitClr(/*0*/ bytePtr: kotlinx.cinterop.CValuesRef<*>?, /*1*/ bitNum: kotlin.Long) { TODO() }

fun BitNot(/*0*/ value: kotlin.Long): kotlin.Long { TODO() }

fun BitOr(/*0*/ value1: kotlin.Long, /*1*/ value2: kotlin.Long): kotlin.Long { TODO() }

fun BitOrAtomic(/*0*/ mask: platform.darwin.UInt32 /* = kotlin.UInt */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?): platform.darwin.UInt32 /* = kotlin.UInt */ { TODO() }

fun BitOrAtomic16(/*0*/ mask: platform.darwin.UInt32 /* = kotlin.UInt */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.UInt16Var /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UInt16 /* = kotlin.UShort */> */>?): platform.darwin.UInt16 /* = kotlin.UShort */ { TODO() }

fun BitOrAtomic8(/*0*/ mask: platform.darwin.UInt32 /* = kotlin.UInt */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>?): platform.darwin.UInt8 /* = kotlin.UByte */ { TODO() }

fun BitSet(/*0*/ bytePtr: kotlinx.cinterop.CValuesRef<*>?, /*1*/ bitNum: kotlin.Long) { TODO() }

fun BitShift(/*0*/ value: kotlin.Long, /*1*/ count: kotlin.Short): kotlin.Long { TODO() }

fun BitTst(/*0*/ bytePtr: kotlinx.cinterop.CValuesRef<*>?, /*1*/ bitNum: kotlin.Long): kotlin.Boolean { TODO() }

fun BitXor(/*0*/ value1: kotlin.Long, /*1*/ value2: kotlin.Long): kotlin.Long { TODO() }

fun BitXorAtomic(/*0*/ mask: platform.darwin.UInt32 /* = kotlin.UInt */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?): platform.darwin.UInt32 /* = kotlin.UInt */ { TODO() }

fun BitXorAtomic16(/*0*/ mask: platform.darwin.UInt32 /* = kotlin.UInt */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.UInt16Var /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UInt16 /* = kotlin.UShort */> */>?): platform.darwin.UInt16 /* = kotlin.UShort */ { TODO() }

fun BitXorAtomic8(/*0*/ mask: platform.darwin.UInt32 /* = kotlin.UInt */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>?): platform.darwin.UInt8 /* = kotlin.UByte */ { TODO() }

fun CSBackupIsItemExcluded(/*0*/ item: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*1*/ excludeByPath: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?): kotlin.Boolean { TODO() }

fun CSBackupSetItemExcluded(/*0*/ item: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*1*/ exclude: kotlin.Boolean, /*2*/ excludeByPath: kotlin.Boolean): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun CSCopyMachineName(): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun CSCopyUserName(/*0*/ useShortName: kotlin.Boolean): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun CSDiskSpaceCancelRecovery(/*0*/ operationUUID: platform.CoreFoundation.CFUUIDRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFUUID>? */) { TODO() }

fun CSDiskSpaceGetRecoveryEstimate(/*0*/ volumeURL: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */): platform.darwin.UInt64 /* = kotlin.ULong */ { TODO() }

fun CSDiskSpaceStartRecovery(/*0*/ volumeURL: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*1*/ bytesNeeded: platform.darwin.UInt64 /* = kotlin.ULong */, /*2*/ options: platform.CoreServices.CSDiskSpaceRecoveryOptions /* = kotlin.Int */, /*3*/ outOperationUUID: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFUUIDRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFUUIDRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFUUID> */> */>?, /*4*/ callbackQueue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*5*/ callback: platform.CoreServices.CSDiskSpaceRecoveryCallback? /* = ((kotlin.Boolean, platform.darwin.UInt64 /* = kotlin.ULong */, platform.CoreFoundation.CFErrorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFError>? */) -> kotlin.Unit)? */) { TODO() }

fun CSGetComponentsThreadMode(): platform.CoreServices.CSComponentsThreadMode /* = kotlin.UInt */ { TODO() }

fun CSGetDefaultIdentityAuthority(): platform.CoreServices.CSIdentityAuthorityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityAuthority>? */ { TODO() }

fun CSGetLocalIdentityAuthority(): platform.CoreServices.CSIdentityAuthorityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityAuthority>? */ { TODO() }

fun CSGetManagedIdentityAuthority(): platform.CoreServices.CSIdentityAuthorityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityAuthority>? */ { TODO() }

fun CSIdentityAddAlias(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */, /*1*/ alias: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) { TODO() }

fun CSIdentityAddMember(/*0*/ group: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */, /*1*/ member: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */) { TODO() }

fun CSIdentityAuthenticateUsingPassword(/*0*/ user: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */, /*1*/ password: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): kotlin.Boolean { TODO() }

fun CSIdentityAuthorityCopyLocalizedName(/*0*/ authority: platform.CoreServices.CSIdentityAuthorityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityAuthority>? */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun CSIdentityAuthorityGetTypeID(): platform.CoreFoundation.CFTypeID /* = kotlin.ULong */ { TODO() }

fun CSIdentityCommit(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */, /*1*/ authorization: platform.Security.AuthorizationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.AuthorizationOpaqueRef>? */, /*2*/ error: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFErrorRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFErrorRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFError> */> */>?): kotlin.Boolean { TODO() }

fun CSIdentityCommitAsynchronously(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */, /*1*/ clientContext: kotlinx.cinterop.CValuesRef<platform.CoreServices.CSIdentityClientContext>?, /*2*/ runLoop: platform.CoreFoundation.CFRunLoopRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFRunLoop>? */, /*3*/ runLoopMode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*4*/ authorization: platform.Security.AuthorizationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.AuthorizationOpaqueRef>? */): kotlin.Boolean { TODO() }

fun CSIdentityCreate(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ identityClass: platform.CoreServices.CSIdentityClass /* = kotlin.Long */, /*2*/ fullName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ posixName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*4*/ flags: platform.CoreServices.CSIdentityFlags /* = kotlin.ULong */, /*5*/ authority: platform.CoreServices.CSIdentityAuthorityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityAuthority>? */): platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */ { TODO() }

fun CSIdentityCreateCopy(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */): platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */ { TODO() }

fun CSIdentityCreateGroupMembershipQuery(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ group: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */): platform.CoreServices.CSIdentityQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityQuery>? */ { TODO() }

fun CSIdentityCreatePersistentReference(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */): platform.CoreFoundation.CFDataRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFData>? */ { TODO() }

fun CSIdentityDelete(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */) { TODO() }

fun CSIdentityGetAliases(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun CSIdentityGetAuthority(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */): platform.CoreServices.CSIdentityAuthorityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityAuthority>? */ { TODO() }

fun CSIdentityGetCertificate(/*0*/ user: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */): platform.Security.SecCertificateRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecCertificateRef>? */ { TODO() }

fun CSIdentityGetClass(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */): platform.CoreServices.CSIdentityClass /* = kotlin.Long */ { TODO() }

fun CSIdentityGetEmailAddress(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun CSIdentityGetFullName(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun CSIdentityGetImageData(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */): platform.CoreFoundation.CFDataRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFData>? */ { TODO() }

fun CSIdentityGetImageDataType(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun CSIdentityGetImageURL(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */): platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */ { TODO() }

fun CSIdentityGetPosixID(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */): platform.posix.id_t /* = kotlin.UInt */ { TODO() }

fun CSIdentityGetPosixName(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun CSIdentityGetTypeID(): platform.CoreFoundation.CFTypeID /* = kotlin.ULong */ { TODO() }

fun CSIdentityGetUUID(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */): platform.CoreFoundation.CFUUIDRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFUUID>? */ { TODO() }

fun CSIdentityIsCommitting(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */): kotlin.Boolean { TODO() }

fun CSIdentityIsEnabled(/*0*/ user: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */): kotlin.Boolean { TODO() }

fun CSIdentityIsHidden(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */): kotlin.Boolean { TODO() }

fun CSIdentityIsMemberOfGroup(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */, /*1*/ group: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */): kotlin.Boolean { TODO() }

fun CSIdentityQueryCopyResults(/*0*/ query: platform.CoreServices.CSIdentityQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityQuery>? */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun CSIdentityQueryCreate(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ identityClass: platform.CoreServices.CSIdentityClass /* = kotlin.Long */, /*2*/ authority: platform.CoreServices.CSIdentityAuthorityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityAuthority>? */): platform.CoreServices.CSIdentityQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityQuery>? */ { TODO() }

fun CSIdentityQueryCreateForCurrentUser(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */): platform.CoreServices.CSIdentityQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityQuery>? */ { TODO() }

fun CSIdentityQueryCreateForName(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ name: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ comparisonMethod: platform.CoreServices.CSIdentityQueryStringComparisonMethod /* = kotlin.Long */, /*3*/ identityClass: platform.CoreServices.CSIdentityClass /* = kotlin.Long */, /*4*/ authority: platform.CoreServices.CSIdentityAuthorityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityAuthority>? */): platform.CoreServices.CSIdentityQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityQuery>? */ { TODO() }

fun CSIdentityQueryCreateForPersistentReference(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ referenceData: platform.CoreFoundation.CFDataRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFData>? */): platform.CoreServices.CSIdentityQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityQuery>? */ { TODO() }

fun CSIdentityQueryCreateForPosixID(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ posixID: platform.posix.id_t /* = kotlin.UInt */, /*2*/ identityClass: platform.CoreServices.CSIdentityClass /* = kotlin.Long */, /*3*/ authority: platform.CoreServices.CSIdentityAuthorityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityAuthority>? */): platform.CoreServices.CSIdentityQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityQuery>? */ { TODO() }

fun CSIdentityQueryCreateForUUID(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ uuid: platform.CoreFoundation.CFUUIDRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFUUID>? */, /*2*/ authority: platform.CoreServices.CSIdentityAuthorityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityAuthority>? */): platform.CoreServices.CSIdentityQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityQuery>? */ { TODO() }

fun CSIdentityQueryExecute(/*0*/ query: platform.CoreServices.CSIdentityQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityQuery>? */, /*1*/ flags: platform.CoreServices.CSIdentityQueryFlags /* = kotlin.ULong */, /*2*/ error: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFErrorRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFErrorRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFError> */> */>?): kotlin.Boolean { TODO() }

fun CSIdentityQueryExecuteAsynchronously(/*0*/ query: platform.CoreServices.CSIdentityQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityQuery>? */, /*1*/ flags: platform.CoreServices.CSIdentityQueryFlags /* = kotlin.ULong */, /*2*/ clientContext: kotlinx.cinterop.CValuesRef<platform.CoreServices.CSIdentityQueryClientContext>?, /*3*/ runLoop: platform.CoreFoundation.CFRunLoopRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFRunLoop>? */, /*4*/ runLoopMode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): kotlin.Boolean { TODO() }

fun CSIdentityQueryGetTypeID(): platform.CoreFoundation.CFTypeID /* = kotlin.ULong */ { TODO() }

fun CSIdentityQueryStop(/*0*/ query: platform.CoreServices.CSIdentityQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentityQuery>? */) { TODO() }

fun CSIdentityRemoveAlias(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */, /*1*/ alias: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) { TODO() }

fun CSIdentityRemoveClient(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */) { TODO() }

fun CSIdentityRemoveMember(/*0*/ group: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */, /*1*/ member: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */) { TODO() }

fun CSIdentitySetCertificate(/*0*/ user: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */, /*1*/ certificate: platform.Security.SecCertificateRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecCertificateRef>? */) { TODO() }

fun CSIdentitySetEmailAddress(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */, /*1*/ emailAddress: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) { TODO() }

fun CSIdentitySetFullName(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */, /*1*/ fullName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) { TODO() }

fun CSIdentitySetImageData(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */, /*1*/ imageData: platform.CoreFoundation.CFDataRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFData>? */, /*2*/ imageDataType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) { TODO() }

fun CSIdentitySetImageURL(/*0*/ identity: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */, /*1*/ url: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */) { TODO() }

fun CSIdentitySetIsEnabled(/*0*/ user: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */, /*1*/ isEnabled: kotlin.Boolean) { TODO() }

fun CSIdentitySetPassword(/*0*/ user: platform.CoreServices.CSIdentityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CSIdentity>? */, /*1*/ password: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) { TODO() }

fun CSSetComponentsThreadMode(/*0*/ mode: platform.CoreServices.CSComponentsThreadMode /* = kotlin.UInt */) { TODO() }

fun CallComponentCanDo(/*0*/ ci: platform.CoreServices.ComponentInstance? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>? */, /*1*/ ftnNumber: platform.darwin.SInt16 /* = kotlin.Short */): platform.CoreServices.ComponentResult /* = kotlin.Int */ { TODO() }

fun CallComponentClose(/*0*/ ci: platform.CoreServices.ComponentInstance? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>? */, /*1*/ self: platform.CoreServices.ComponentInstance? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>? */): platform.CoreServices.ComponentResult /* = kotlin.Int */ { TODO() }

fun CallComponentDispatch(/*0*/ cp: kotlinx.cinterop.CValuesRef<platform.CoreServices.ComponentParameters>?): platform.CoreServices.ComponentResult /* = kotlin.Int */ { TODO() }

fun CallComponentFunction(/*0*/ params: kotlinx.cinterop.CValuesRef<platform.CoreServices.ComponentParameters>?, /*1*/ func: platform.CoreServices.ComponentFunctionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Long>>? */): platform.CoreServices.ComponentResult /* = kotlin.Int */ { TODO() }

fun CallComponentFunctionWithStorage(/*0*/ storage: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*1*/ params: kotlinx.cinterop.CValuesRef<platform.CoreServices.ComponentParameters>?, /*2*/ func: platform.CoreServices.ComponentFunctionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Long>>? */): platform.CoreServices.ComponentResult /* = kotlin.Int */ { TODO() }

fun CallComponentFunctionWithStorageProcInfo(/*0*/ storage: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*1*/ params: kotlinx.cinterop.CValuesRef<platform.CoreServices.ComponentParameters>?, /*2*/ func: platform.darwin.ProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Long>>? */, /*3*/ funcProcInfo: platform.CoreServices.ProcInfoType /* = kotlin.ULong */): platform.CoreServices.ComponentResult /* = kotlin.Int */ { TODO() }

fun CallComponentGetMPWorkFunction(/*0*/ ci: platform.CoreServices.ComponentInstance? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>? */, /*1*/ workFunction: kotlinx.cinterop.CValuesRef<platform.CoreServices.ComponentMPWorkFunctionUPPVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ComponentMPWorkFunctionUPP /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.ComponentMPWorkFunctionHeaderRecordPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentMPWorkFunctionHeaderRecord>? */) -> platform.CoreServices.ComponentResult /* = kotlin.Int */>> */> */>?, /*2*/ refCon: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?): platform.CoreServices.ComponentResult /* = kotlin.Int */ { TODO() }

fun CallComponentGetPublicResource(/*0*/ ci: platform.CoreServices.ComponentInstance? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>? */, /*1*/ resourceType: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ resourceID: platform.darwin.SInt16 /* = kotlin.Short */, /*3*/ resource: kotlinx.cinterop.CValuesRef<platform.darwin.HandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Handle /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */> */> */>?): platform.CoreServices.ComponentResult /* = kotlin.Int */ { TODO() }

fun CallComponentOpen(/*0*/ ci: platform.CoreServices.ComponentInstance? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>? */, /*1*/ self: platform.CoreServices.ComponentInstance? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>? */): platform.CoreServices.ComponentResult /* = kotlin.Int */ { TODO() }

fun CallComponentRegister(/*0*/ ci: platform.CoreServices.ComponentInstance? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>? */): platform.CoreServices.ComponentResult /* = kotlin.Int */ { TODO() }

fun CallComponentTarget(/*0*/ ci: platform.CoreServices.ComponentInstance? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>? */, /*1*/ target: platform.CoreServices.ComponentInstance? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>? */): platform.CoreServices.ComponentResult /* = kotlin.Int */ { TODO() }

fun CallComponentUnregister(/*0*/ ci: platform.CoreServices.ComponentInstance? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>? */): platform.CoreServices.ComponentResult /* = kotlin.Int */ { TODO() }

fun CallComponentVersion(/*0*/ ci: platform.CoreServices.ComponentInstance? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>? */): platform.CoreServices.ComponentResult /* = kotlin.Int */ { TODO() }

fun CaptureComponent(/*0*/ capturedComponent: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */, /*1*/ capturingComponent: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */): platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */ { TODO() }

fun ChangeTextToUnicodeInfo(/*0*/ ioTextToUnicodeInfo: platform.CoreServices.TextToUnicodeInfo? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTextToUnicodeInfo>? */, /*1*/ iUnicodeMapping: platform.CoreServices.ConstUnicodeMappingPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.UnicodeMapping>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun ChangeUnicodeToTextInfo(/*0*/ ioUnicodeToTextInfo: platform.CoreServices.UnicodeToTextInfo? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUnicodeToTextInfo>? */, /*1*/ iUnicodeMapping: platform.CoreServices.ConstUnicodeMappingPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.UnicodeMapping>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun ChangedResource(/*0*/ theResource: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) { TODO() }

fun CloneCollection(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */): platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */ { TODO() }

fun CloseComponent(/*0*/ aComponentInstance: platform.CoreServices.ComponentInstance? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun CloseComponentResFile(/*0*/ refnum: platform.CoreServices.ResFileRefNum /* = kotlin.Int */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun CloseResFile(/*0*/ refNum: platform.CoreServices.ResFileRefNum /* = kotlin.Int */) { TODO() }

fun CollectionTagExists(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ tag: platform.CoreServices.CollectionTag /* = kotlin.UInt */): kotlin.Boolean { TODO() }

fun CompareAndSwap(/*0*/ oldValue: platform.darwin.UInt32 /* = kotlin.UInt */, /*1*/ newValue: platform.darwin.UInt32 /* = kotlin.UInt */, /*2*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?): kotlin.Boolean { TODO() }

fun CompositeIconRef(/*0*/ backgroundIconRef: platform.CoreServices.IconRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef>? */, /*1*/ foregroundIconRef: platform.CoreServices.IconRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef>? */, /*2*/ compositeIconRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.IconRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IconRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef> */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun ConvertFromPStringToUnicode(/*0*/ iTextToUnicodeInfo: platform.CoreServices.TextToUnicodeInfo? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTextToUnicodeInfo>? */, /*1*/ iPascalStr: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*2*/ iOutputBufLen: platform.darwin.ByteCount /* = kotlin.ULong */, /*3*/ oUnicodeLen: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, /*4*/ oUnicodeStr: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun ConvertFromTextToUnicode(/*0*/ iTextToUnicodeInfo: platform.CoreServices.TextToUnicodeInfo? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTextToUnicodeInfo>? */, /*1*/ iSourceLen: platform.darwin.ByteCount /* = kotlin.ULong */, /*2*/ iSourceStr: platform.darwin.ConstLogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*3*/ iControlFlags: platform.darwin.OptionBits /* = kotlin.UInt */, /*4*/ iOffsetCount: platform.darwin.ItemCount /* = kotlin.ULong */, /*5*/ iOffsetArray: kotlinx.cinterop.CValuesRef<platform.darwin.ByteOffsetVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteOffset /* = kotlin.ULong */> */>?, /*6*/ oOffsetCount: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?, /*7*/ oOffsetArray: kotlinx.cinterop.CValuesRef<platform.darwin.ByteOffsetVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteOffset /* = kotlin.ULong */> */>?, /*8*/ iOutputBufLen: platform.darwin.ByteCount /* = kotlin.ULong */, /*9*/ oSourceRead: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, /*10*/ oUnicodeLen: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, /*11*/ oUnicodeStr: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun ConvertFromUnicodeToPString(/*0*/ iUnicodeToTextInfo: platform.CoreServices.UnicodeToTextInfo? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUnicodeToTextInfo>? */, /*1*/ iUnicodeLen: platform.darwin.ByteCount /* = kotlin.ULong */, /*2*/ iUnicodeStr: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*3*/ oPascalStr: platform.darwin.Str255? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun ConvertFromUnicodeToScriptCodeRun(/*0*/ iUnicodeToTextInfo: platform.CoreServices.UnicodeToTextRunInfo? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUnicodeToTextRunInfo>? */, /*1*/ iUnicodeLen: platform.darwin.ByteCount /* = kotlin.ULong */, /*2*/ iUnicodeStr: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*3*/ iControlFlags: platform.darwin.OptionBits /* = kotlin.UInt */, /*4*/ iOffsetCount: platform.darwin.ItemCount /* = kotlin.ULong */, /*5*/ iOffsetArray: kotlinx.cinterop.CValuesRef<platform.darwin.ByteOffsetVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteOffset /* = kotlin.ULong */> */>?, /*6*/ oOffsetCount: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?, /*7*/ oOffsetArray: kotlinx.cinterop.CValuesRef<platform.darwin.ByteOffsetVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteOffset /* = kotlin.ULong */> */>?, /*8*/ iOutputBufLen: platform.darwin.ByteCount /* = kotlin.ULong */, /*9*/ oInputRead: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, /*10*/ oOutputLen: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, /*11*/ oOutputStr: platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*12*/ iScriptRunBufLen: platform.darwin.ItemCount /* = kotlin.ULong */, /*13*/ oScriptRunOutLen: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?, /*14*/ oScriptCodeRuns: kotlinx.cinterop.CValuesRef<platform.CoreServices.ScriptCodeRun>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun ConvertFromUnicodeToText(/*0*/ iUnicodeToTextInfo: platform.CoreServices.UnicodeToTextInfo? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUnicodeToTextInfo>? */, /*1*/ iUnicodeLen: platform.darwin.ByteCount /* = kotlin.ULong */, /*2*/ iUnicodeStr: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*3*/ iControlFlags: platform.darwin.OptionBits /* = kotlin.UInt */, /*4*/ iOffsetCount: platform.darwin.ItemCount /* = kotlin.ULong */, /*5*/ iOffsetArray: kotlinx.cinterop.CValuesRef<platform.darwin.ByteOffsetVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteOffset /* = kotlin.ULong */> */>?, /*6*/ oOffsetCount: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?, /*7*/ oOffsetArray: kotlinx.cinterop.CValuesRef<platform.darwin.ByteOffsetVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteOffset /* = kotlin.ULong */> */>?, /*8*/ iOutputBufLen: platform.darwin.ByteCount /* = kotlin.ULong */, /*9*/ oInputRead: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, /*10*/ oOutputLen: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, /*11*/ oOutputStr: platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun ConvertFromUnicodeToTextRun(/*0*/ iUnicodeToTextInfo: platform.CoreServices.UnicodeToTextRunInfo? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUnicodeToTextRunInfo>? */, /*1*/ iUnicodeLen: platform.darwin.ByteCount /* = kotlin.ULong */, /*2*/ iUnicodeStr: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*3*/ iControlFlags: platform.darwin.OptionBits /* = kotlin.UInt */, /*4*/ iOffsetCount: platform.darwin.ItemCount /* = kotlin.ULong */, /*5*/ iOffsetArray: kotlinx.cinterop.CValuesRef<platform.darwin.ByteOffsetVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteOffset /* = kotlin.ULong */> */>?, /*6*/ oOffsetCount: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?, /*7*/ oOffsetArray: kotlinx.cinterop.CValuesRef<platform.darwin.ByteOffsetVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteOffset /* = kotlin.ULong */> */>?, /*8*/ iOutputBufLen: platform.darwin.ByteCount /* = kotlin.ULong */, /*9*/ oInputRead: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, /*10*/ oOutputLen: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, /*11*/ oOutputStr: platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*12*/ iEncodingRunBufLen: platform.darwin.ItemCount /* = kotlin.ULong */, /*13*/ oEncodingRunOutLen: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?, /*14*/ oEncodingRuns: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingRun>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun CopyCollection(/*0*/ srcCollection: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ dstCollection: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */): platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */ { TODO() }

fun CoreEndianFlipData(/*0*/ dataDomain: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ dataType: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ id: platform.darwin.SInt16 /* = kotlin.Short */, /*3*/ data: kotlinx.cinterop.CValuesRef<*>?, /*4*/ dataLen: platform.darwin.ByteCount /* = kotlin.ULong */, /*5*/ currentlyNative: kotlin.Boolean): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun CoreEndianGetFlipper(/*0*/ dataDomain: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ dataType: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ proc: kotlinx.cinterop.CValuesRef<platform.CoreServices.CoreEndianFlipProcVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.CoreEndianFlipProc /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSType /* = kotlin.UInt */, platform.darwin.OSType /* = kotlin.UInt */, platform.darwin.SInt16 /* = kotlin.Short */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.ByteCount /* = kotlin.ULong */, kotlin.Boolean, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>> */> */>?, /*3*/ refcon: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun CoreEndianInstallFlipper(/*0*/ dataDomain: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ dataType: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ proc: platform.CoreServices.CoreEndianFlipProc? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSType /* = kotlin.UInt */, platform.darwin.OSType /* = kotlin.UInt */, platform.darwin.SInt16 /* = kotlin.Short */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.ByteCount /* = kotlin.ULong */, kotlin.Boolean, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */, /*3*/ refcon: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun Count1Resources(/*0*/ theType: platform.darwin.ResType /* = kotlin.UInt */): platform.CoreServices.ResourceCount /* = kotlin.Short */ { TODO() }

fun Count1Types(): platform.CoreServices.ResourceCount /* = kotlin.Short */ { TODO() }

fun CountCollectionItems(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */): platform.darwin.SInt32 /* = kotlin.Int */ { TODO() }

fun CountCollectionOwners(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */): platform.darwin.SInt32 /* = kotlin.Int */ { TODO() }

fun CountCollectionTags(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */): platform.darwin.SInt32 /* = kotlin.Int */ { TODO() }

fun CountComponentInstances(/*0*/ aComponent: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */): kotlin.Long { TODO() }

fun CountComponents(/*0*/ looking: kotlinx.cinterop.CValuesRef<platform.CoreServices.ComponentDescription>?): kotlin.Long { TODO() }

fun CountResources(/*0*/ theType: platform.darwin.ResType /* = kotlin.UInt */): platform.CoreServices.ResourceCount /* = kotlin.Short */ { TODO() }

fun CountTaggedCollectionItems(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ tag: platform.CoreServices.CollectionTag /* = kotlin.UInt */): platform.darwin.SInt32 /* = kotlin.Int */ { TODO() }

fun CountTypes(): platform.CoreServices.ResourceCount /* = kotlin.Short */ { TODO() }

fun CountUnicodeMappings(/*0*/ iFilter: platform.darwin.OptionBits /* = kotlin.UInt */, /*1*/ iFindMapping: platform.CoreServices.ConstUnicodeMappingPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.UnicodeMapping>? */, /*2*/ oActualCount: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun CreateCompDescriptor(/*0*/ comparisonOperator: platform.CoreServices.DescType /* = kotlin.UInt */, /*1*/ operand1: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*2*/ operand2: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*3*/ disposeInputs: kotlin.Boolean, /*4*/ theDescriptor: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun CreateLogicalDescriptor(/*0*/ theLogicalTerms: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDescList /* = platform.CoreServices.AEDesc */>?, /*1*/ theLogicOperator: platform.CoreServices.DescType /* = kotlin.UInt */, /*2*/ disposeInputs: kotlin.Boolean, /*3*/ theDescriptor: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun CreateObjSpecifier(/*0*/ desiredClass: platform.CoreServices.DescType /* = kotlin.UInt */, /*1*/ theContainer: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*2*/ keyForm: platform.CoreServices.DescType /* = kotlin.UInt */, /*3*/ keyData: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*4*/ disposeInputs: kotlin.Boolean, /*5*/ objSpecifier: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun CreateOffsetDescriptor(/*0*/ theOffset: kotlin.Long, /*1*/ theDescriptor: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun CreateRangeDescriptor(/*0*/ rangeStart: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*1*/ rangeStop: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*2*/ disposeInputs: kotlin.Boolean, /*3*/ theDescriptor: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun CreateTextEncoding(/*0*/ encodingBase: platform.CoreServices.TextEncodingBase /* = kotlin.UInt */, /*1*/ encodingVariant: platform.CoreServices.TextEncodingVariant /* = kotlin.UInt */, /*2*/ encodingFormat: platform.CoreServices.TextEncodingFormat /* = kotlin.UInt */): platform.CoreServices.TextEncoding /* = kotlin.UInt */ { TODO() }

fun CreateTextToUnicodeInfo(/*0*/ iUnicodeMapping: platform.CoreServices.ConstUnicodeMappingPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.UnicodeMapping>? */, /*1*/ oTextToUnicodeInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextToUnicodeInfoVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TextToUnicodeInfo /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTextToUnicodeInfo> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun CreateTextToUnicodeInfoByEncoding(/*0*/ iEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */, /*1*/ oTextToUnicodeInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextToUnicodeInfoVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TextToUnicodeInfo /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTextToUnicodeInfo> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun CreateThreadPool(/*0*/ threadStyle: platform.CoreServices.ThreadStyle /* = kotlin.UInt */, /*1*/ numToCreate: platform.darwin.SInt16 /* = kotlin.Short */, /*2*/ stackSize: platform.darwin.Size /* = kotlin.Long */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun CreateUnicodeToTextInfo(/*0*/ iUnicodeMapping: platform.CoreServices.ConstUnicodeMappingPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.UnicodeMapping>? */, /*1*/ oUnicodeToTextInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.UnicodeToTextInfoVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UnicodeToTextInfo /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUnicodeToTextInfo> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun CreateUnicodeToTextInfoByEncoding(/*0*/ iEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */, /*1*/ oUnicodeToTextInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.UnicodeToTextInfoVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UnicodeToTextInfo /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUnicodeToTextInfo> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun CreateUnicodeToTextRunInfo(/*0*/ iNumberOfMappings: platform.darwin.ItemCount /* = kotlin.ULong */, /*1*/ iUnicodeMappings: kotlinx.cinterop.CValuesRef<platform.CoreServices.UnicodeMapping>?, /*2*/ oUnicodeToTextInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.UnicodeToTextRunInfoVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UnicodeToTextRunInfo /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUnicodeToTextRunInfo> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun CreateUnicodeToTextRunInfoByEncoding(/*0*/ iNumberOfEncodings: platform.darwin.ItemCount /* = kotlin.ULong */, /*1*/ iEncodings: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, /*2*/ oUnicodeToTextInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.UnicodeToTextRunInfoVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UnicodeToTextRunInfo /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUnicodeToTextRunInfo> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun CreateUnicodeToTextRunInfoByScriptCode(/*0*/ iNumberOfScriptCodes: platform.darwin.ItemCount /* = kotlin.ULong */, /*1*/ iScripts: kotlinx.cinterop.CValuesRef<platform.darwin.ScriptCodeVar /* = kotlinx.cinterop.ShortVarOf<platform.darwin.ScriptCode /* = kotlin.Short */> */>?, /*2*/ oUnicodeToTextInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.UnicodeToTextRunInfoVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UnicodeToTextRunInfo /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUnicodeToTextRunInfo> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun CurResFile(): platform.CoreServices.ResFileRefNum /* = kotlin.Int */ { TODO() }

fun CurrentProcessorSpeed(): kotlin.Short { TODO() }

fun DCSCopyTextDefinition(/*0*/ dictionary: platform.CoreServices.DCSDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__DCSDictionary>? */, /*1*/ textString: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ range: kotlinx.cinterop.CValue<platform.CoreFoundation.CFRange>): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun DCSGetTermRangeInString(/*0*/ dictionary: platform.CoreServices.DCSDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__DCSDictionary>? */, /*1*/ textString: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ offset: platform.CoreFoundation.CFIndex /* = kotlin.Long */): kotlinx.cinterop.CValue<platform.CoreFoundation.CFRange> { TODO() }

fun DebugAssert(/*0*/ componentSignature: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ options: platform.darwin.UInt32 /* = kotlin.UInt */, /*2*/ assertionString: kotlin.String?, /*3*/ exceptionLabelString: kotlin.String?, /*4*/ errorString: kotlin.String?, /*5*/ fileName: kotlin.String?, /*6*/ lineNumber: kotlin.Long, /*7*/ value: kotlinx.cinterop.CValuesRef<*>?) { TODO() }

fun DecrementAtomic(/*0*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?): platform.darwin.SInt32 /* = kotlin.Int */ { TODO() }

fun DecrementAtomic16(/*0*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.SInt16Var /* = kotlinx.cinterop.ShortVarOf<platform.darwin.SInt16 /* = kotlin.Short */> */>?): platform.darwin.SInt16 /* = kotlin.Short */ { TODO() }

fun DecrementAtomic8(/*0*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.SInt8Var /* = kotlinx.cinterop.ByteVarOf<platform.darwin.SInt8 /* = kotlin.Byte */> */>?): platform.darwin.SInt8 /* = kotlin.Byte */ { TODO() }

fun Delay(/*0*/ numTicks: kotlin.ULong, /*1*/ finalTicks: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ULongVar /* = kotlinx.cinterop.ULongVarOf<kotlin.ULong> */>?) { TODO() }

fun DelegateComponentCall(/*0*/ originalParams: kotlinx.cinterop.CValuesRef<platform.CoreServices.ComponentParameters>?, /*1*/ ci: platform.CoreServices.ComponentInstance? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>? */): platform.CoreServices.ComponentResult /* = kotlin.Int */ { TODO() }

fun DeleteGestaltValue(/*0*/ selector: platform.darwin.OSType /* = kotlin.UInt */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun Dequeue(/*0*/ qElement: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */, /*1*/ qHeader: platform.CoreServices.QHdrPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QHdr>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun DetachResource(/*0*/ theResource: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) { TODO() }

fun DetachResourceFile(/*0*/ refNum: platform.CoreServices.ResFileRefNum /* = kotlin.Int */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun DetermineIfPathIsEnclosedByFolder(/*0*/ domainOrVRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ folderType: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ utf8Path: kotlinx.cinterop.CValuesRef<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>?, /*3*/ pathIsRealPath: kotlin.Boolean, /*4*/ outResult: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun DisposeAECoerceDescUPP(/*0*/ userUPP: platform.CoreServices.AECoerceDescUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType /* = kotlin.UInt */, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */) { TODO() }

fun DisposeAECoercePtrUPP(/*0*/ userUPP: platform.CoreServices.AECoercePtrUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.Size /* = kotlin.Long */, platform.CoreServices.DescType /* = kotlin.UInt */, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */) { TODO() }

fun DisposeAEDisposeExternalUPP(/*0*/ userUPP: platform.CoreServices.AEDisposeExternalUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.Size /* = kotlin.Long */, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun DisposeAEEventHandlerUPP(/*0*/ userUPP: platform.CoreServices.AEEventHandlerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */) { TODO() }

fun DisposeAVLCompareItemsUPP(/*0*/ userUPP: platform.CoreServices.AVLCompareItemsUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AVLTreePtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.AVLNodeType /* = kotlin.UShort */) -> platform.darwin.SInt32 /* = kotlin.Int */>>? */) { TODO() }

fun DisposeAVLDisposeItemUPP(/*0*/ userUPP: platform.CoreServices.AVLDisposeItemUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AVLTreePtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun DisposeAVLItemSizeUPP(/*0*/ userUPP: platform.CoreServices.AVLItemSizeUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AVLTreePtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.ByteCount /* = kotlin.ULong */>>? */) { TODO() }

fun DisposeAVLWalkUPP(/*0*/ userUPP: platform.CoreServices.AVLWalkUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AVLTreePtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.AVLVisitStage /* = kotlin.UShort */, platform.CoreServices.AVLNodeType /* = kotlin.UShort */, platform.darwin.UInt32 /* = kotlin.UInt */, platform.darwin.SInt32 /* = kotlin.Int */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */) { TODO() }

fun DisposeCollection(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */) { TODO() }

fun DisposeCollectionExceptionUPP(/*0*/ userUPP: platform.CoreServices.CollectionExceptionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, platform.darwin.OSErr /* = kotlin.Short */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */) { TODO() }

fun DisposeCollectionFlattenUPP(/*0*/ userUPP: platform.CoreServices.CollectionFlattenUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.SInt32 /* = kotlin.Int */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */) { TODO() }

fun DisposeComponentFunctionUPP(/*0*/ userUPP: platform.CoreServices.ComponentFunctionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Long>>? */) { TODO() }

fun DisposeComponentMPWorkFunctionUPP(/*0*/ userUPP: platform.CoreServices.ComponentMPWorkFunctionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.ComponentMPWorkFunctionHeaderRecordPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentMPWorkFunctionHeaderRecord>? */) -> platform.CoreServices.ComponentResult /* = kotlin.Int */>>? */) { TODO() }

fun DisposeComponentRoutineUPP(/*0*/ userUPP: platform.CoreServices.ComponentRoutineUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.ComponentParameters>?, platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) -> platform.CoreServices.ComponentResult /* = kotlin.Int */>>? */) { TODO() }

fun DisposeDebugAssertOutputHandlerUPP(/*0*/ userUPP: platform.CoreServices.DebugAssertOutputHandlerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSType /* = kotlin.UInt */, platform.darwin.UInt32 /* = kotlin.UInt */, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlin.Long, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */) -> kotlin.Unit>>? */) { TODO() }

fun DisposeDebugComponent(/*0*/ componentSignature: platform.darwin.OSType /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun DisposeDebugComponentCallbackUPP(/*0*/ userUPP: platform.CoreServices.DebugComponentCallbackUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.SInt32 /* = kotlin.Int */, platform.darwin.UInt32 /* = kotlin.UInt */, kotlinx.cinterop.CPointer<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?) -> kotlin.Unit>>? */) { TODO() }

fun DisposeDebuggerDisposeThreadUPP(/*0*/ userUPP: platform.CoreServices.DebuggerDisposeThreadUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID /* = kotlin.ULong */) -> kotlin.Unit>>? */) { TODO() }

fun DisposeDebuggerNewThreadUPP(/*0*/ userUPP: platform.CoreServices.DebuggerNewThreadUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID /* = kotlin.ULong */) -> kotlin.Unit>>? */) { TODO() }

fun DisposeDebuggerThreadSchedulerUPP(/*0*/ userUPP: platform.CoreServices.DebuggerThreadSchedulerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.SchedulerInfoRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SchedulerInfoRec>? */) -> platform.CoreServices.ThreadID /* = kotlin.ULong */>>? */) { TODO() }

fun DisposeDeferredTaskUPP(/*0*/ userUPP: platform.CoreServices.DeferredTaskUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Long) -> kotlin.Unit>>? */) { TODO() }

fun DisposeExceptionHandlerUPP(/*0*/ userUPP: platform.CoreServices.ExceptionHandlerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.ExceptionInformation>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) { TODO() }

fun DisposeFNSubscriptionUPP(/*0*/ userUPP: platform.CoreServices.FNSubscriptionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FNMessage /* = kotlin.UInt */, platform.darwin.OptionBits /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.FNSubscriptionRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFNSubscriptionRef>? */) -> kotlin.Unit>>? */) { TODO() }

fun DisposeFSVolumeEjectUPP(/*0*/ userUPP: platform.CoreServices.FSVolumeEjectUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, platform.posix.pid_t /* = kotlin.Int */) -> kotlin.Unit>>? */) { TODO() }

fun DisposeFSVolumeMountUPP(/*0*/ userUPP: platform.CoreServices.FSVolumeMountUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */) -> kotlin.Unit>>? */) { TODO() }

fun DisposeFSVolumeUnmountUPP(/*0*/ userUPP: platform.CoreServices.FSVolumeUnmountUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, platform.posix.pid_t /* = kotlin.Int */) -> kotlin.Unit>>? */) { TODO() }

fun DisposeFolderManagerNotificationUPP(/*0*/ userUPP: platform.CoreServices.FolderManagerNotificationUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSType /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) { TODO() }

fun DisposeGetMissingComponentResourceUPP(/*0*/ userUPP: platform.CoreServices.GetMissingComponentResourceUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */, platform.darwin.OSType /* = kotlin.UInt */, platform.darwin.SInt16 /* = kotlin.Short */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.darwin.HandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Handle /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */> */> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */) { TODO() }

fun DisposeHandle(/*0*/ h: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) { TODO() }

fun DisposeIOCompletionUPP(/*0*/ userUPP: platform.CoreServices.IOCompletionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ParmBlkPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun DisposeIndexToUCStringUPP(/*0*/ userUPP: platform.CoreServices.IndexToUCStringUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.UInt32 /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.CoreFoundation.CFStringRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFStringRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString> */> */>?, kotlinx.cinterop.CPointer<platform.CoreServices.UCTypeSelectOptionsVar /* = kotlinx.cinterop.UShortVarOf<platform.CoreServices.UCTypeSelectOptions /* = kotlin.UShort */> */>?) -> kotlin.Boolean>>? */) { TODO() }

fun DisposeKCCallbackUPP(/*0*/ userUPP: platform.CoreServices.KCCallbackUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.KCEvent /* = kotlin.UShort */, kotlinx.cinterop.CPointer<platform.CoreServices.KCCallbackInfo>?, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) { TODO() }

fun DisposeOSLAccessorUPP(/*0*/ userUPP: platform.CoreServices.OSLAccessorUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType /* = kotlin.UInt */, platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */) { TODO() }

fun DisposeOSLAdjustMarksUPP(/*0*/ userUPP: platform.CoreServices.OSLAdjustMarksUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Long, kotlin.Long, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */) { TODO() }

fun DisposeOSLCompareUPP(/*0*/ userUPP: platform.CoreServices.OSLCompareUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */) { TODO() }

fun DisposeOSLCountUPP(/*0*/ userUPP: platform.CoreServices.OSLCountUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVar /* = kotlinx.cinterop.LongVarOf<kotlin.Long> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */) { TODO() }

fun DisposeOSLDisposeTokenUPP(/*0*/ userUPP: platform.CoreServices.OSLDisposeTokenUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */) { TODO() }

fun DisposeOSLGetErrDescUPP(/*0*/ userUPP: platform.CoreServices.OSLGetErrDescUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.CoreServices.AEDesc> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */) { TODO() }

fun DisposeOSLGetMarkTokenUPP(/*0*/ userUPP: platform.CoreServices.OSLGetMarkTokenUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */) { TODO() }

fun DisposeOSLMarkUPP(/*0*/ userUPP: platform.CoreServices.OSLMarkUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlin.Long) -> platform.darwin.OSErr /* = kotlin.Short */>>? */) { TODO() }

fun DisposePtr(/*0*/ p: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */) { TODO() }

fun DisposeResErrUPP(/*0*/ userUPP: platform.CoreServices.ResErrUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSErr /* = kotlin.Short */) -> kotlin.Unit>>? */) { TODO() }

fun DisposeSelectorFunctionUPP(/*0*/ userUPP: platform.CoreServices.SelectorFunctionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */) { TODO() }

fun DisposeSleepQUPP(/*0*/ userUPP: platform.CoreServices.SleepQUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Long, platform.CoreServices.SleepQRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SleepQRec>? */) -> kotlin.Long>>? */) { TODO() }

fun DisposeTextToUnicodeInfo(/*0*/ ioTextToUnicodeInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextToUnicodeInfoVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TextToUnicodeInfo /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTextToUnicodeInfo> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun DisposeThread(/*0*/ threadToDump: platform.CoreServices.ThreadID /* = kotlin.ULong */, /*1*/ threadResult: kotlinx.cinterop.CValuesRef<*>?, /*2*/ recycleThread: kotlin.Boolean): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun DisposeThreadEntryUPP(/*0*/ userUPP: platform.CoreServices.ThreadEntryUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreServices.voidPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */) { TODO() }

fun DisposeThreadSchedulerUPP(/*0*/ userUPP: platform.CoreServices.ThreadSchedulerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.SchedulerInfoRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SchedulerInfoRec>? */) -> platform.CoreServices.ThreadID /* = kotlin.ULong */>>? */) { TODO() }

fun DisposeThreadSwitchUPP(/*0*/ userUPP: platform.CoreServices.ThreadSwitchUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID /* = kotlin.ULong */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun DisposeThreadTerminationUPP(/*0*/ userUPP: platform.CoreServices.ThreadTerminationUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID /* = kotlin.ULong */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun DisposeTimerUPP(/*0*/ userUPP: platform.CoreServices.TimerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TMTaskPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.TMTask>? */) -> kotlin.Unit>>? */) { TODO() }

fun DisposeUnicodeToTextFallbackUPP(/*0*/ userUPP: platform.CoreServices.UnicodeToTextFallbackUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, platform.darwin.ByteCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, platform.CoreServices.TextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */, platform.darwin.ByteCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.ConstUnicodeMappingPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.UnicodeMapping>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */) { TODO() }

fun DisposeUnicodeToTextInfo(/*0*/ ioUnicodeToTextInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.UnicodeToTextInfoVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UnicodeToTextInfo /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUnicodeToTextInfo> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun DisposeUnicodeToTextRunInfo(/*0*/ ioUnicodeToTextRunInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.UnicodeToTextRunInfoVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UnicodeToTextRunInfo /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUnicodeToTextRunInfo> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun DurationToAbsolute(/*0*/ duration: platform.darwin.Duration /* = kotlin.Int */): kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */> { TODO() }

fun DurationToNanoseconds(/*0*/ theDuration: platform.darwin.Duration /* = kotlin.Int */): kotlinx.cinterop.CValue<platform.CoreServices.Nanoseconds /* = platform.darwin.UnsignedWide */> { TODO() }

fun EmptyCollection(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */) { TODO() }

fun EmptyHandle(/*0*/ h: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) { TODO() }

fun Enqueue(/*0*/ qElement: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */, /*1*/ qHeader: platform.CoreServices.QHdrPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QHdr>? */) { TODO() }

fun FNGetDirectoryForSubscription(/*0*/ subscription: platform.CoreServices.FNSubscriptionRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFNSubscriptionRef>? */, /*1*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FNNotify(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ message: platform.CoreServices.FNMessage /* = kotlin.UInt */, /*2*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FNNotifyAll(/*0*/ message: platform.CoreServices.FNMessage /* = kotlin.UInt */, /*1*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FNNotifyByPath(/*0*/ path: kotlinx.cinterop.CValuesRef<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>?, /*1*/ message: platform.CoreServices.FNMessage /* = kotlin.UInt */, /*2*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FNSubscribe(/*0*/ directoryRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ callback: platform.CoreServices.FNSubscriptionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FNMessage /* = kotlin.UInt */, platform.darwin.OptionBits /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.FNSubscriptionRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFNSubscriptionRef>? */) -> kotlin.Unit>>? */, /*2*/ refcon: kotlinx.cinterop.CValuesRef<*>?, /*3*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */, /*4*/ subscription: kotlinx.cinterop.CValuesRef<platform.CoreServices.FNSubscriptionRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FNSubscriptionRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFNSubscriptionRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FNSubscribeByPath(/*0*/ directoryPath: kotlinx.cinterop.CValuesRef<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>?, /*1*/ callback: platform.CoreServices.FNSubscriptionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FNMessage /* = kotlin.UInt */, platform.darwin.OptionBits /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.FNSubscriptionRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFNSubscriptionRef>? */) -> kotlin.Unit>>? */, /*2*/ refcon: kotlinx.cinterop.CValuesRef<*>?, /*3*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */, /*4*/ subscription: kotlinx.cinterop.CValuesRef<platform.CoreServices.FNSubscriptionRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FNSubscriptionRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFNSubscriptionRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FNUnsubscribe(/*0*/ subscription: platform.CoreServices.FNSubscriptionRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFNSubscriptionRef>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSAllocateFork(/*0*/ forkRefNum: platform.CoreServices.FSIORefNum /* = kotlin.Int */, /*1*/ flags: platform.CoreServices.FSAllocationFlags /* = kotlin.UShort */, /*2*/ positionMode: platform.darwin.UInt16 /* = kotlin.UShort */, /*3*/ positionOffset: platform.darwin.SInt64 /* = kotlin.Long */, /*4*/ requestCount: platform.darwin.UInt64 /* = kotlin.ULong */, /*5*/ actualCount: kotlinx.cinterop.CValuesRef<platform.darwin.UInt64Var /* = kotlinx.cinterop.ULongVarOf<platform.darwin.UInt64 /* = kotlin.ULong */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSCancelVolumeOperation(/*0*/ volumeOp: platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSCatalogSearch(/*0*/ iterator: platform.CoreServices.FSIterator? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSIterator>? */, /*1*/ searchCriteria: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSSearchParams>?, /*2*/ maximumObjects: platform.darwin.ItemCount /* = kotlin.ULong */, /*3*/ actualObjects: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?, /*4*/ containerChanged: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?, /*5*/ whichInfo: platform.CoreServices.FSCatalogInfoBitmap /* = kotlin.UInt */, /*6*/ catalogInfos: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSCatalogInfo>?, /*7*/ refs: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*8*/ specs: platform.CoreServices.FSSpecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSSpec>? */, /*9*/ names: kotlinx.cinterop.CValuesRef<platform.osx.HFSUniStr255>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSCloseFork(/*0*/ forkRefNum: platform.CoreServices.FSIORefNum /* = kotlin.Int */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSCloseIterator(/*0*/ iterator: platform.CoreServices.FSIterator? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSIterator>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSCompareFSRefs(/*0*/ ref1: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ ref2: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSCopyAliasInfo(/*0*/ inAlias: platform.CoreServices.AliasHandle? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasPtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasPtr /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasRecord> */> */>? */, /*1*/ targetName: kotlinx.cinterop.CValuesRef<platform.osx.HFSUniStr255>?, /*2*/ volumeName: kotlinx.cinterop.CValuesRef<platform.osx.HFSUniStr255>?, /*3*/ pathString: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFStringRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFStringRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString> */> */>?, /*4*/ whichInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSAliasInfoBitmapVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FSAliasInfoBitmap /* = kotlin.UInt */> */>?, /*5*/ info: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSAliasInfo>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSCopyDADiskForVolume(/*0*/ vRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ disk: kotlinx.cinterop.CValuesRef<platform.DiskArbitration.DADiskRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.DiskArbitration.DADiskRef /* = kotlinx.cinterop.CPointer<cnames.structs.__DADisk> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSCopyDiskIDForVolume(/*0*/ vRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ diskID: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFStringRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFStringRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSCopyObjectAsync(/*0*/ fileOp: platform.CoreServices.FSFileOperationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileOperation>? */, /*1*/ source: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*2*/ destDir: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*3*/ destName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*4*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */, /*5*/ callback: platform.CoreServices.FSFileOperationStatusProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSFileOperationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileOperation>? */, kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?, platform.CoreServices.FSFileOperationStage /* = kotlin.UInt */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*6*/ statusChangeInterval: platform.CoreFoundation.CFTimeInterval /* = kotlin.Double */, /*7*/ clientContext: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSFileOperationClientContext>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSCopyObjectSync(/*0*/ source: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ destDir: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*2*/ destName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ target: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*4*/ options: platform.darwin.OptionBits /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSCopyURLForVolume(/*0*/ vRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ url: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFURLRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFURLRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSCreateDirectoryUnicode(/*0*/ parentRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ nameLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*2*/ name: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*3*/ whichInfo: platform.CoreServices.FSCatalogInfoBitmap /* = kotlin.UInt */, /*4*/ catalogInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSCatalogInfo>?, /*5*/ newRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*6*/ newSpec: platform.CoreServices.FSSpecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSSpec>? */, /*7*/ newDirID: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSCreateFileAndOpenForkUnicode(/*0*/ parentRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ nameLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*2*/ name: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*3*/ whichInfo: platform.CoreServices.FSCatalogInfoBitmap /* = kotlin.UInt */, /*4*/ catalogInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSCatalogInfo>?, /*5*/ forkNameLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*6*/ forkName: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*7*/ permissions: platform.darwin.SInt8 /* = kotlin.Byte */, /*8*/ forkRefNum: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSIORefNumVar /* = kotlinx.cinterop.IntVarOf<platform.CoreServices.FSIORefNum /* = kotlin.Int */> */>?, /*9*/ newRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSCreateFileUnicode(/*0*/ parentRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ nameLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*2*/ name: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*3*/ whichInfo: platform.CoreServices.FSCatalogInfoBitmap /* = kotlin.UInt */, /*4*/ catalogInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSCatalogInfo>?, /*5*/ newRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*6*/ newSpec: platform.CoreServices.FSSpecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSSpec>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSCreateFork(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ forkNameLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*2*/ forkName: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSCreateResFile(/*0*/ parentRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ nameLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*2*/ name: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*3*/ whichInfo: platform.CoreServices.FSCatalogInfoBitmap /* = kotlin.UInt */, /*4*/ catalogInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSCatalogInfo>?, /*5*/ newRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*6*/ newSpec: platform.CoreServices.FSSpecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSSpec>? */) { TODO() }

fun FSCreateResourceFile(/*0*/ parentRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ nameLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*2*/ name: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*3*/ whichInfo: platform.CoreServices.FSCatalogInfoBitmap /* = kotlin.UInt */, /*4*/ catalogInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSCatalogInfo>?, /*5*/ forkNameLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*6*/ forkName: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*7*/ newRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*8*/ newSpec: platform.CoreServices.FSSpecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSSpec>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSCreateResourceFork(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ forkNameLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*2*/ forkName: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*3*/ flags: platform.darwin.UInt32 /* = kotlin.UInt */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSCreateStringFromHFSUniStr(/*0*/ alloc: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ uniStr: kotlinx.cinterop.CValuesRef<platform.osx.HFSUniStr255>?): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun FSCreateVolumeOperation(/*0*/ volumeOp: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSVolumeOperationVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSVolumeOperation /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSDeleteFork(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ forkNameLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*2*/ forkName: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSDeleteObject(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSDetermineIfRefIsEnclosedByFolder(/*0*/ domainOrVRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ folderType: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ inRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*3*/ outResult: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSDisposeVolumeOperation(/*0*/ volumeOp: platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSEjectVolumeAsync(/*0*/ vRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */, /*2*/ volumeOp: platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, /*3*/ clientData: kotlinx.cinterop.CValuesRef<*>?, /*4*/ callback: platform.CoreServices.FSVolumeEjectUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, platform.posix.pid_t /* = kotlin.Int */) -> kotlin.Unit>>? */, /*5*/ runloop: platform.CoreFoundation.CFRunLoopRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFRunLoop>? */, /*6*/ runloopMode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSEjectVolumeSync(/*0*/ vRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */, /*2*/ dissenter: kotlinx.cinterop.CValuesRef<platform.posix.pid_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.pid_t /* = kotlin.Int */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSEventStreamCopyDescription(/*0*/ streamRef: platform.CoreServices.ConstFSEventStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>? */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun FSEventStreamCopyPathsBeingWatched(/*0*/ streamRef: platform.CoreServices.ConstFSEventStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>? */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun FSEventStreamCreate(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ callback: platform.CoreServices.FSEventStreamCallback? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ConstFSEventStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.posix.size_t /* = kotlin.ULong */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.CoreServices.FSEventStreamEventFlagsVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FSEventStreamEventFlags /* = kotlin.UInt */> */>?, kotlinx.cinterop.CPointer<platform.CoreServices.FSEventStreamEventIdVar /* = kotlinx.cinterop.ULongVarOf<platform.CoreServices.FSEventStreamEventId /* = kotlin.ULong */> */>?) -> kotlin.Unit>>? */, /*2*/ context: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSEventStreamContext>?, /*3*/ pathsToWatch: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */, /*4*/ sinceWhen: platform.CoreServices.FSEventStreamEventId /* = kotlin.ULong */, /*5*/ latency: platform.CoreFoundation.CFTimeInterval /* = kotlin.Double */, /*6*/ flags: platform.CoreServices.FSEventStreamCreateFlags /* = kotlin.UInt */): platform.CoreServices.FSEventStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>? */ { TODO() }

fun FSEventStreamCreateRelativeToDevice(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ callback: platform.CoreServices.FSEventStreamCallback? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ConstFSEventStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.posix.size_t /* = kotlin.ULong */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.CoreServices.FSEventStreamEventFlagsVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FSEventStreamEventFlags /* = kotlin.UInt */> */>?, kotlinx.cinterop.CPointer<platform.CoreServices.FSEventStreamEventIdVar /* = kotlinx.cinterop.ULongVarOf<platform.CoreServices.FSEventStreamEventId /* = kotlin.ULong */> */>?) -> kotlin.Unit>>? */, /*2*/ context: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSEventStreamContext>?, /*3*/ deviceToWatch: platform.posix.dev_t /* = kotlin.Int */, /*4*/ pathsToWatchRelativeToDevice: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */, /*5*/ sinceWhen: platform.CoreServices.FSEventStreamEventId /* = kotlin.ULong */, /*6*/ latency: platform.CoreFoundation.CFTimeInterval /* = kotlin.Double */, /*7*/ flags: platform.CoreServices.FSEventStreamCreateFlags /* = kotlin.UInt */): platform.CoreServices.FSEventStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>? */ { TODO() }

fun FSEventStreamFlushAsync(/*0*/ streamRef: platform.CoreServices.FSEventStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>? */): platform.CoreServices.FSEventStreamEventId /* = kotlin.ULong */ { TODO() }

fun FSEventStreamFlushSync(/*0*/ streamRef: platform.CoreServices.FSEventStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>? */) { TODO() }

fun FSEventStreamGetDeviceBeingWatched(/*0*/ streamRef: platform.CoreServices.ConstFSEventStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>? */): platform.posix.dev_t /* = kotlin.Int */ { TODO() }

fun FSEventStreamGetLatestEventId(/*0*/ streamRef: platform.CoreServices.ConstFSEventStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>? */): platform.CoreServices.FSEventStreamEventId /* = kotlin.ULong */ { TODO() }

fun FSEventStreamInvalidate(/*0*/ streamRef: platform.CoreServices.FSEventStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>? */) { TODO() }

fun FSEventStreamRelease(/*0*/ streamRef: platform.CoreServices.FSEventStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>? */) { TODO() }

fun FSEventStreamRetain(/*0*/ streamRef: platform.CoreServices.FSEventStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>? */) { TODO() }

fun FSEventStreamScheduleWithRunLoop(/*0*/ streamRef: platform.CoreServices.FSEventStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>? */, /*1*/ runLoop: platform.CoreFoundation.CFRunLoopRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFRunLoop>? */, /*2*/ runLoopMode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) { TODO() }

fun FSEventStreamSetDispatchQueue(/*0*/ streamRef: platform.CoreServices.FSEventStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>? */, /*1*/ q: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */) { TODO() }

fun FSEventStreamSetExclusionPaths(/*0*/ streamRef: platform.CoreServices.FSEventStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>? */, /*1*/ pathsToExclude: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */): kotlin.Boolean { TODO() }

fun FSEventStreamShow(/*0*/ streamRef: platform.CoreServices.ConstFSEventStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>? */) { TODO() }

fun FSEventStreamStart(/*0*/ streamRef: platform.CoreServices.FSEventStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>? */): kotlin.Boolean { TODO() }

fun FSEventStreamStop(/*0*/ streamRef: platform.CoreServices.FSEventStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>? */) { TODO() }

fun FSEventStreamUnscheduleFromRunLoop(/*0*/ streamRef: platform.CoreServices.FSEventStreamRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSEventStream>? */, /*1*/ runLoop: platform.CoreFoundation.CFRunLoopRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFRunLoop>? */, /*2*/ runLoopMode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) { TODO() }

fun FSEventsCopyUUIDForDevice(/*0*/ dev: platform.posix.dev_t /* = kotlin.Int */): platform.CoreFoundation.CFUUIDRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFUUID>? */ { TODO() }

fun FSEventsGetCurrentEventId(): platform.CoreServices.FSEventStreamEventId /* = kotlin.ULong */ { TODO() }

fun FSEventsGetLastEventIdForDeviceBeforeTime(/*0*/ dev: platform.posix.dev_t /* = kotlin.Int */, /*1*/ time: platform.CoreFoundation.CFAbsoluteTime /* = kotlin.Double */): platform.CoreServices.FSEventStreamEventId /* = kotlin.ULong */ { TODO() }

fun FSEventsPurgeEventsForDeviceUpToEventId(/*0*/ dev: platform.posix.dev_t /* = kotlin.Int */, /*1*/ eventId: platform.CoreServices.FSEventStreamEventId /* = kotlin.ULong */): kotlin.Boolean { TODO() }

fun FSExchangeObjects(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ destRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSFileOperationCancel(/*0*/ fileOp: platform.CoreServices.FSFileOperationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileOperation>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSFileOperationCopyStatus(/*0*/ fileOp: platform.CoreServices.FSFileOperationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileOperation>? */, /*1*/ currentItem: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*2*/ stage: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSFileOperationStageVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FSFileOperationStage /* = kotlin.UInt */> */>?, /*3*/ error: kotlinx.cinterop.CValuesRef<platform.darwin.OSStatusVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.OSStatus /* = kotlin.Int */> */>?, /*4*/ statusDictionary: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFDictionaryRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFDictionaryRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary> */> */>?, /*5*/ info: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSFileOperationCreate(/*0*/ alloc: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */): platform.CoreServices.FSFileOperationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileOperation>? */ { TODO() }

fun FSFileOperationGetTypeID(): platform.CoreFoundation.CFTypeID /* = kotlin.ULong */ { TODO() }

fun FSFileOperationScheduleWithRunLoop(/*0*/ fileOp: platform.CoreServices.FSFileOperationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileOperation>? */, /*1*/ runLoop: platform.CoreFoundation.CFRunLoopRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFRunLoop>? */, /*2*/ runLoopMode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSFileOperationUnscheduleFromRunLoop(/*0*/ fileOp: platform.CoreServices.FSFileOperationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileOperation>? */, /*1*/ runLoop: platform.CoreFoundation.CFRunLoopRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFRunLoop>? */, /*2*/ runLoopMode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSFileSecurityCopyAccessControlList(/*0*/ fileSec: platform.CoreServices.FSFileSecurityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileSecurity>? */, /*1*/ accessControlList: kotlinx.cinterop.CValuesRef<platform.posix.acl_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.posix.acl_t /* = kotlinx.cinterop.CPointer<cnames.structs._acl> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSFileSecurityCreate(/*0*/ alloc: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */): platform.CoreServices.FSFileSecurityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileSecurity>? */ { TODO() }

fun FSFileSecurityCreateWithFSPermissionInfo(/*0*/ alloc: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ permissions: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSPermissionInfo>?): platform.CoreServices.FSFileSecurityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileSecurity>? */ { TODO() }

fun FSFileSecurityGetGroup(/*0*/ fileSec: platform.CoreServices.FSFileSecurityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileSecurity>? */, /*1*/ group: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSFileSecurityGetGroupUUID(/*0*/ fileSec: platform.CoreServices.FSFileSecurityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileSecurity>? */, /*1*/ group: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFUUIDBytes>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSFileSecurityGetMode(/*0*/ fileSec: platform.CoreServices.FSFileSecurityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileSecurity>? */, /*1*/ mode: kotlinx.cinterop.CValuesRef<platform.darwin.UInt16Var /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UInt16 /* = kotlin.UShort */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSFileSecurityGetOwner(/*0*/ fileSec: platform.CoreServices.FSFileSecurityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileSecurity>? */, /*1*/ owner: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSFileSecurityGetOwnerUUID(/*0*/ fileSec: platform.CoreServices.FSFileSecurityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileSecurity>? */, /*1*/ owner: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFUUIDBytes>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSFileSecurityGetTypeID(): platform.CoreFoundation.CFTypeID /* = kotlin.ULong */ { TODO() }

fun FSFileSecurityRefCreateCopy(/*0*/ alloc: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ fileSec: platform.CoreServices.FSFileSecurityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileSecurity>? */): platform.CoreServices.FSFileSecurityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileSecurity>? */ { TODO() }

fun FSFileSecuritySetAccessControlList(/*0*/ fileSec: platform.CoreServices.FSFileSecurityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileSecurity>? */, /*1*/ accessControlList: platform.posix.acl_t? /* = kotlinx.cinterop.CPointer<cnames.structs._acl>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSFileSecuritySetGroup(/*0*/ fileSec: platform.CoreServices.FSFileSecurityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileSecurity>? */, /*1*/ group: platform.darwin.UInt32 /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSFileSecuritySetGroupUUID(/*0*/ fileSec: platform.CoreServices.FSFileSecurityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileSecurity>? */, /*1*/ group: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFUUIDBytes>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSFileSecuritySetMode(/*0*/ fileSec: platform.CoreServices.FSFileSecurityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileSecurity>? */, /*1*/ mode: platform.darwin.UInt16 /* = kotlin.UShort */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSFileSecuritySetOwner(/*0*/ fileSec: platform.CoreServices.FSFileSecurityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileSecurity>? */, /*1*/ owner: platform.darwin.UInt32 /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSFileSecuritySetOwnerUUID(/*0*/ fileSec: platform.CoreServices.FSFileSecurityRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileSecurity>? */, /*1*/ owner: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFUUIDBytes>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSFindFolder(/*0*/ vRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ folderType: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ createFolder: kotlin.Boolean, /*3*/ foundRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSFlushFork(/*0*/ forkRefNum: platform.CoreServices.FSIORefNum /* = kotlin.Int */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSFlushVolume(/*0*/ vRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSFollowFinderAlias(/*0*/ fromFile: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ alias: platform.CoreServices.AliasHandle? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasPtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasPtr /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasRecord> */> */>? */, /*2*/ logon: kotlin.Boolean, /*3*/ target: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*4*/ wasChanged: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSGetAsyncEjectStatus(/*0*/ volumeOp: platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, /*1*/ status: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSEjectStatusVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FSEjectStatus /* = kotlin.UInt */> */>?, /*2*/ volumeOpStatus: kotlinx.cinterop.CValuesRef<platform.darwin.OSStatusVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.OSStatus /* = kotlin.Int */> */>?, /*3*/ volumeRefNum: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSVolumeRefNumVar /* = kotlinx.cinterop.ShortVarOf<platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */> */>?, /*4*/ dissenter: kotlinx.cinterop.CValuesRef<platform.posix.pid_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.pid_t /* = kotlin.Int */> */>?, /*5*/ clientData: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSGetAsyncMountStatus(/*0*/ volumeOp: platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, /*1*/ status: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSMountStatusVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FSMountStatus /* = kotlin.UInt */> */>?, /*2*/ volumeOpStatus: kotlinx.cinterop.CValuesRef<platform.darwin.OSStatusVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.OSStatus /* = kotlin.Int */> */>?, /*3*/ mountedVolumeRefNum: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSVolumeRefNumVar /* = kotlinx.cinterop.ShortVarOf<platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */> */>?, /*4*/ clientData: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSGetAsyncUnmountStatus(/*0*/ volumeOp: platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, /*1*/ status: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSUnmountStatusVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FSUnmountStatus /* = kotlin.UInt */> */>?, /*2*/ volumeOpStatus: kotlinx.cinterop.CValuesRef<platform.darwin.OSStatusVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.OSStatus /* = kotlin.Int */> */>?, /*3*/ volumeRefNum: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSVolumeRefNumVar /* = kotlinx.cinterop.ShortVarOf<platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */> */>?, /*4*/ dissenter: kotlinx.cinterop.CValuesRef<platform.posix.pid_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.pid_t /* = kotlin.Int */> */>?, /*5*/ clientData: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSGetCatalogInfo(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ whichInfo: platform.CoreServices.FSCatalogInfoBitmap /* = kotlin.UInt */, /*2*/ catalogInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSCatalogInfo>?, /*3*/ outName: kotlinx.cinterop.CValuesRef<platform.osx.HFSUniStr255>?, /*4*/ fsSpec: platform.CoreServices.FSSpecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSSpec>? */, /*5*/ parentRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSGetCatalogInfoBulk(/*0*/ iterator: platform.CoreServices.FSIterator? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSIterator>? */, /*1*/ maximumObjects: platform.darwin.ItemCount /* = kotlin.ULong */, /*2*/ actualObjects: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?, /*3*/ containerChanged: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?, /*4*/ whichInfo: platform.CoreServices.FSCatalogInfoBitmap /* = kotlin.UInt */, /*5*/ catalogInfos: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSCatalogInfo>?, /*6*/ refs: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*7*/ specs: platform.CoreServices.FSSpecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSSpec>? */, /*8*/ names: kotlinx.cinterop.CValuesRef<platform.osx.HFSUniStr255>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSGetDataForkName(/*0*/ dataForkName: kotlinx.cinterop.CValuesRef<platform.osx.HFSUniStr255>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSGetForkCBInfo(/*0*/ desiredRefNum: platform.CoreServices.FSIORefNum /* = kotlin.Int */, /*1*/ volume: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*2*/ iterator: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ShortVar /* = kotlinx.cinterop.ShortVarOf<kotlin.Short> */>?, /*3*/ actualRefNum: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSIORefNumVar /* = kotlinx.cinterop.IntVarOf<platform.CoreServices.FSIORefNum /* = kotlin.Int */> */>?, /*4*/ forkInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkInfo>?, /*5*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*6*/ outForkName: kotlinx.cinterop.CValuesRef<platform.osx.HFSUniStr255>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSGetForkPosition(/*0*/ forkRefNum: platform.CoreServices.FSIORefNum /* = kotlin.Int */, /*1*/ position: kotlinx.cinterop.CValuesRef<platform.darwin.SInt64Var /* = kotlinx.cinterop.LongVarOf<platform.darwin.SInt64 /* = kotlin.Long */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSGetForkSize(/*0*/ forkRefNum: platform.CoreServices.FSIORefNum /* = kotlin.Int */, /*1*/ forkSize: kotlinx.cinterop.CValuesRef<platform.darwin.SInt64Var /* = kotlinx.cinterop.LongVarOf<platform.darwin.SInt64 /* = kotlin.Long */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSGetHFSUniStrFromString(/*0*/ theString: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*1*/ uniStr: kotlinx.cinterop.CValuesRef<platform.osx.HFSUniStr255>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSGetResourceForkName(/*0*/ resourceForkName: kotlinx.cinterop.CValuesRef<platform.osx.HFSUniStr255>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSGetTemporaryDirectoryForReplaceObject(/*0*/ originalObject: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ temporaryDirectory: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*2*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSGetVolumeForDADisk(/*0*/ disk: platform.DiskArbitration.DADiskRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__DADisk>? */, /*1*/ vRefNum: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSVolumeRefNumVar /* = kotlinx.cinterop.ShortVarOf<platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSGetVolumeForDiskID(/*0*/ diskID: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*1*/ vRefNum: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSVolumeRefNumVar /* = kotlinx.cinterop.ShortVarOf<platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSGetVolumeInfo(/*0*/ volume: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ volumeIndex: platform.darwin.ItemCount /* = kotlin.ULong */, /*2*/ actualVolume: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSVolumeRefNumVar /* = kotlinx.cinterop.ShortVarOf<platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */> */>?, /*3*/ whichInfo: platform.CoreServices.FSVolumeInfoBitmap /* = kotlin.UInt */, /*4*/ info: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSVolumeInfo>?, /*5*/ volumeName: kotlinx.cinterop.CValuesRef<platform.osx.HFSUniStr255>?, /*6*/ rootDirectory: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSGetVolumeMountInfo(/*0*/ volume: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ buffer: platform.darwin.BytePtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */, /*2*/ bufferSize: platform.darwin.ByteCount /* = kotlin.ULong */, /*3*/ actualSize: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSGetVolumeMountInfoSize(/*0*/ volume: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ size: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSGetVolumeParms(/*0*/ volume: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ buffer: kotlinx.cinterop.CValuesRef<platform.CoreServices.GetVolParmsInfoBuffer>?, /*2*/ bufferSize: platform.darwin.ByteCount /* = kotlin.ULong */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSIsAliasFile(/*0*/ fileRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ aliasFileFlag: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?, /*2*/ folderFlag: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSIsFSRefValid(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?): kotlin.Boolean { TODO() }

fun FSIterateForks(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ forkIterator: kotlinx.cinterop.CValuesRef<platform.CoreServices.CatPositionRec>?, /*2*/ forkName: kotlinx.cinterop.CValuesRef<platform.osx.HFSUniStr255>?, /*3*/ forkSize: kotlinx.cinterop.CValuesRef<platform.darwin.SInt64Var /* = kotlinx.cinterop.LongVarOf<platform.darwin.SInt64 /* = kotlin.Long */> */>?, /*4*/ forkPhysicalSize: kotlinx.cinterop.CValuesRef<platform.darwin.UInt64Var /* = kotlinx.cinterop.ULongVarOf<platform.darwin.UInt64 /* = kotlin.ULong */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSLockRange(/*0*/ forkRefNum: platform.CoreServices.FSIORefNum /* = kotlin.Int */, /*1*/ positionMode: platform.darwin.UInt16 /* = kotlin.UShort */, /*2*/ positionOffset: platform.darwin.SInt64 /* = kotlin.Long */, /*3*/ requestCount: platform.darwin.UInt64 /* = kotlin.ULong */, /*4*/ rangeStart: kotlinx.cinterop.CValuesRef<platform.darwin.UInt64Var /* = kotlinx.cinterop.ULongVarOf<platform.darwin.UInt64 /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSMakeFSRefUnicode(/*0*/ parentRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ nameLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*2*/ name: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*3*/ textEncodingHint: platform.CoreServices.TextEncoding /* = kotlin.UInt */, /*4*/ newRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSMatchAliasBulk(/*0*/ fromFile: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ rulesMask: kotlin.ULong, /*2*/ inAlias: platform.CoreServices.AliasHandle? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasPtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasPtr /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasRecord> */> */>? */, /*3*/ aliasCount: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ShortVar /* = kotlinx.cinterop.ShortVarOf<kotlin.Short> */>?, /*4*/ aliasList: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*5*/ needsUpdate: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?, /*6*/ aliasFilter: platform.CoreServices.FSAliasFilterProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?, platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */) -> kotlin.Boolean>>? */, /*7*/ yourDataPtr: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSMountLocalVolumeAsync(/*0*/ diskID: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*1*/ mountDir: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*2*/ volumeOp: platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, /*3*/ clientData: kotlinx.cinterop.CValuesRef<*>?, /*4*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */, /*5*/ callback: platform.CoreServices.FSVolumeMountUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */) -> kotlin.Unit>>? */, /*6*/ runloop: platform.CoreFoundation.CFRunLoopRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFRunLoop>? */, /*7*/ runloopMode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSMountLocalVolumeSync(/*0*/ diskID: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*1*/ mountDir: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*2*/ mountedVolumeRefNum: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSVolumeRefNumVar /* = kotlinx.cinterop.ShortVarOf<platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */> */>?, /*3*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSMountServerVolumeAsync(/*0*/ url: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*1*/ mountDir: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*2*/ user: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ password: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*4*/ volumeOp: platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, /*5*/ clientData: kotlinx.cinterop.CValuesRef<*>?, /*6*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */, /*7*/ callback: platform.CoreServices.FSVolumeMountUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */) -> kotlin.Unit>>? */, /*8*/ runloop: platform.CoreFoundation.CFRunLoopRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFRunLoop>? */, /*9*/ runloopMode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSMountServerVolumeSync(/*0*/ url: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*1*/ mountDir: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*2*/ user: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ password: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*4*/ mountedVolumeRefNum: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSVolumeRefNumVar /* = kotlinx.cinterop.ShortVarOf<platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */> */>?, /*5*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSMoveObject(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ destDirectory: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*2*/ newRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSMoveObjectAsync(/*0*/ fileOp: platform.CoreServices.FSFileOperationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileOperation>? */, /*1*/ source: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*2*/ destDir: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*3*/ destName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*4*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */, /*5*/ callback: platform.CoreServices.FSFileOperationStatusProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSFileOperationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileOperation>? */, kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?, platform.CoreServices.FSFileOperationStage /* = kotlin.UInt */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*6*/ statusChangeInterval: platform.CoreFoundation.CFTimeInterval /* = kotlin.Double */, /*7*/ clientContext: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSFileOperationClientContext>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSMoveObjectSync(/*0*/ source: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ destDir: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*2*/ destName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ target: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*4*/ options: platform.darwin.OptionBits /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSMoveObjectToTrashAsync(/*0*/ fileOp: platform.CoreServices.FSFileOperationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileOperation>? */, /*1*/ source: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*2*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */, /*3*/ callback: platform.CoreServices.FSFileOperationStatusProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSFileOperationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileOperation>? */, kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>?, platform.CoreServices.FSFileOperationStage /* = kotlin.UInt */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*4*/ statusChangeInterval: platform.CoreFoundation.CFTimeInterval /* = kotlin.Double */, /*5*/ clientContext: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSFileOperationClientContext>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSMoveObjectToTrashSync(/*0*/ source: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ target: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*2*/ options: platform.darwin.OptionBits /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSNewAlias(/*0*/ fromFile: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ target: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*2*/ inAlias: kotlinx.cinterop.CValuesRef<platform.CoreServices.AliasHandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasHandle /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasPtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasPtr /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasRecord> */> */> */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSNewAliasFromPath(/*0*/ fromFilePath: kotlin.String?, /*1*/ targetPath: kotlin.String?, /*2*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */, /*3*/ inAlias: kotlinx.cinterop.CValuesRef<platform.CoreServices.AliasHandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasHandle /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasPtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasPtr /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasRecord> */> */> */> */>?, /*4*/ isDirectory: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSNewAliasMinimal(/*0*/ target: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ inAlias: kotlinx.cinterop.CValuesRef<platform.CoreServices.AliasHandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasHandle /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasPtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasPtr /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasRecord> */> */> */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSNewAliasMinimalUnicode(/*0*/ targetParentRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ targetNameLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*2*/ targetName: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*3*/ inAlias: kotlinx.cinterop.CValuesRef<platform.CoreServices.AliasHandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasHandle /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasPtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasPtr /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasRecord> */> */> */> */>?, /*4*/ isDirectory: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSNewAliasUnicode(/*0*/ fromFile: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ targetParentRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*2*/ targetNameLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*3*/ targetName: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*4*/ inAlias: kotlinx.cinterop.CValuesRef<platform.CoreServices.AliasHandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasHandle /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasPtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasPtr /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasRecord> */> */> */> */>?, /*5*/ isDirectory: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSOpenFork(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ forkNameLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*2*/ forkName: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*3*/ permissions: platform.darwin.SInt8 /* = kotlin.Byte */, /*4*/ forkRefNum: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSIORefNumVar /* = kotlinx.cinterop.IntVarOf<platform.CoreServices.FSIORefNum /* = kotlin.Int */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSOpenIterator(/*0*/ container: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ iteratorFlags: platform.CoreServices.FSIteratorFlags /* = kotlin.UInt */, /*2*/ iterator: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSIteratorVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.FSIterator /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSIterator> */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSOpenOrphanResFile(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ permission: platform.darwin.SignedByte /* = kotlin.Byte */, /*2*/ refNum: kotlinx.cinterop.CValuesRef<platform.CoreServices.ResFileRefNumVar /* = kotlinx.cinterop.IntVarOf<platform.CoreServices.ResFileRefNum /* = kotlin.Int */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSOpenResFile(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ permission: platform.darwin.SInt8 /* = kotlin.Byte */): platform.CoreServices.ResFileRefNum /* = kotlin.Int */ { TODO() }

fun FSOpenResourceFile(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ forkNameLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*2*/ forkName: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*3*/ permissions: platform.darwin.SInt8 /* = kotlin.Byte */, /*4*/ refNum: kotlinx.cinterop.CValuesRef<platform.CoreServices.ResFileRefNumVar /* = kotlinx.cinterop.IntVarOf<platform.CoreServices.ResFileRefNum /* = kotlin.Int */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSPathCopyObjectAsync(/*0*/ fileOp: platform.CoreServices.FSFileOperationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileOperation>? */, /*1*/ sourcePath: kotlin.String?, /*2*/ destDirPath: kotlin.String?, /*3*/ destName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*4*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */, /*5*/ callback: platform.CoreServices.FSPathFileOperationStatusProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSFileOperationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileOperation>? */, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, platform.CoreServices.FSFileOperationStage /* = kotlin.UInt */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*6*/ statusChangeInterval: platform.CoreFoundation.CFTimeInterval /* = kotlin.Double */, /*7*/ clientContext: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSFileOperationClientContext>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSPathCopyObjectSync(/*0*/ sourcePath: kotlin.String?, /*1*/ destDirPath: kotlin.String?, /*2*/ destName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ targetPath: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?, /*4*/ options: platform.darwin.OptionBits /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSPathFileOperationCopyStatus(/*0*/ fileOp: platform.CoreServices.FSFileOperationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileOperation>? */, /*1*/ currentItem: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?, /*2*/ stage: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSFileOperationStageVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FSFileOperationStage /* = kotlin.UInt */> */>?, /*3*/ error: kotlinx.cinterop.CValuesRef<platform.darwin.OSStatusVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.OSStatus /* = kotlin.Int */> */>?, /*4*/ statusDictionary: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFDictionaryRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFDictionaryRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary> */> */>?, /*5*/ info: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSPathGetTemporaryDirectoryForReplaceObject(/*0*/ originalObjectPath: kotlin.String?, /*1*/ temporaryDirectoryPath: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*2*/ maxPathSize: platform.darwin.UInt32 /* = kotlin.UInt */, /*3*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSPathMakeRef(/*0*/ path: kotlinx.cinterop.CValuesRef<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>?, /*1*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*2*/ isDirectory: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSPathMakeRefWithOptions(/*0*/ path: kotlinx.cinterop.CValuesRef<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>?, /*1*/ options: platform.darwin.OptionBits /* = kotlin.UInt */, /*2*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*3*/ isDirectory: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSPathMoveObjectAsync(/*0*/ fileOp: platform.CoreServices.FSFileOperationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileOperation>? */, /*1*/ sourcePath: kotlin.String?, /*2*/ destDirPath: kotlin.String?, /*3*/ destName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*4*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */, /*5*/ callback: platform.CoreServices.FSPathFileOperationStatusProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSFileOperationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileOperation>? */, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, platform.CoreServices.FSFileOperationStage /* = kotlin.UInt */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*6*/ statusChangeInterval: platform.CoreFoundation.CFTimeInterval /* = kotlin.Double */, /*7*/ clientContext: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSFileOperationClientContext>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSPathMoveObjectSync(/*0*/ sourcePath: kotlin.String?, /*1*/ destDirPath: kotlin.String?, /*2*/ destName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ targetPath: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?, /*4*/ options: platform.darwin.OptionBits /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSPathMoveObjectToTrashAsync(/*0*/ fileOp: platform.CoreServices.FSFileOperationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileOperation>? */, /*1*/ sourcePath: kotlin.String?, /*2*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */, /*3*/ callback: platform.CoreServices.FSPathFileOperationStatusProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSFileOperationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__FSFileOperation>? */, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, platform.CoreServices.FSFileOperationStage /* = kotlin.UInt */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*4*/ statusChangeInterval: platform.CoreFoundation.CFTimeInterval /* = kotlin.Double */, /*5*/ clientContext: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSFileOperationClientContext>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSPathMoveObjectToTrashSync(/*0*/ sourcePath: kotlin.String?, /*1*/ targetPath: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?, /*2*/ options: platform.darwin.OptionBits /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSPathReplaceObject(/*0*/ originalObjectPath: kotlin.String?, /*1*/ replacementObjectPath: kotlin.String?, /*2*/ newName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ temporaryName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*4*/ temporaryDirectoryPath: kotlin.String?, /*5*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSReadFork(/*0*/ forkRefNum: platform.CoreServices.FSIORefNum /* = kotlin.Int */, /*1*/ positionMode: platform.darwin.UInt16 /* = kotlin.UShort */, /*2*/ positionOffset: platform.darwin.SInt64 /* = kotlin.Long */, /*3*/ requestCount: platform.darwin.ByteCount /* = kotlin.ULong */, /*4*/ buffer: kotlinx.cinterop.CValuesRef<*>?, /*5*/ actualCount: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSRefMakePath(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ path: kotlinx.cinterop.CValuesRef<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>?, /*2*/ pathBufferSize: platform.darwin.UInt32 /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSRenameUnicode(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ nameLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*2*/ name: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*3*/ textEncodingHint: platform.CoreServices.TextEncoding /* = kotlin.UInt */, /*4*/ newRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSReplaceObject(/*0*/ originalObject: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ replacementObject: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*2*/ newName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ temporaryName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*4*/ temporaryDirectory: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*5*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */, /*6*/ resultObject: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSResolveAlias(/*0*/ fromFile: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ alias: platform.CoreServices.AliasHandle? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasPtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasPtr /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasRecord> */> */>? */, /*2*/ target: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*3*/ wasChanged: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSResolveAliasFile(/*0*/ theRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ resolveAliasChains: kotlin.Boolean, /*2*/ targetIsFolder: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?, /*3*/ wasAliased: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSResolveAliasFileWithMountFlags(/*0*/ theRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ resolveAliasChains: kotlin.Boolean, /*2*/ targetIsFolder: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?, /*3*/ wasAliased: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?, /*4*/ mountFlags: kotlin.ULong): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSResolveAliasWithMountFlags(/*0*/ fromFile: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ inAlias: platform.CoreServices.AliasHandle? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasPtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasPtr /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasRecord> */> */>? */, /*2*/ target: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*3*/ wasChanged: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?, /*4*/ mountFlags: kotlin.ULong): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSResolveNodeID(/*0*/ volume: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ nodeID: platform.darwin.UInt32 /* = kotlin.UInt */, /*2*/ newRef: platform.CoreServices.FSRefPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSRef>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSResourceFileAlreadyOpen(/*0*/ resourceFileRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ inChain: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?, /*2*/ refNum: kotlinx.cinterop.CValuesRef<platform.CoreServices.ResFileRefNumVar /* = kotlinx.cinterop.IntVarOf<platform.CoreServices.ResFileRefNum /* = kotlin.Int */> */>?): kotlin.Boolean { TODO() }

fun FSSetCatalogInfo(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ whichInfo: platform.CoreServices.FSCatalogInfoBitmap /* = kotlin.UInt */, /*2*/ catalogInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSCatalogInfo>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSSetForkPosition(/*0*/ forkRefNum: platform.CoreServices.FSIORefNum /* = kotlin.Int */, /*1*/ positionMode: platform.darwin.UInt16 /* = kotlin.UShort */, /*2*/ positionOffset: platform.darwin.SInt64 /* = kotlin.Long */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSSetForkSize(/*0*/ forkRefNum: platform.CoreServices.FSIORefNum /* = kotlin.Int */, /*1*/ positionMode: platform.darwin.UInt16 /* = kotlin.UShort */, /*2*/ positionOffset: platform.darwin.SInt64 /* = kotlin.Long */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSSetVolumeInfo(/*0*/ volume: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ whichInfo: platform.CoreServices.FSVolumeInfoBitmap /* = kotlin.UInt */, /*2*/ info: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSVolumeInfo>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSUnlinkObject(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSUnlockRange(/*0*/ forkRefNum: platform.CoreServices.FSIORefNum /* = kotlin.Int */, /*1*/ positionMode: platform.darwin.UInt16 /* = kotlin.UShort */, /*2*/ positionOffset: platform.darwin.SInt64 /* = kotlin.Long */, /*3*/ requestCount: platform.darwin.UInt64 /* = kotlin.ULong */, /*4*/ rangeStart: kotlinx.cinterop.CValuesRef<platform.darwin.UInt64Var /* = kotlinx.cinterop.ULongVarOf<platform.darwin.UInt64 /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSUnmountVolumeAsync(/*0*/ vRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */, /*2*/ volumeOp: platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, /*3*/ clientData: kotlinx.cinterop.CValuesRef<*>?, /*4*/ callback: platform.CoreServices.FSVolumeUnmountUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, platform.posix.pid_t /* = kotlin.Int */) -> kotlin.Unit>>? */, /*5*/ runloop: platform.CoreFoundation.CFRunLoopRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFRunLoop>? */, /*6*/ runloopMode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSUnmountVolumeSync(/*0*/ vRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */, /*2*/ dissenter: kotlinx.cinterop.CValuesRef<platform.posix.pid_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.pid_t /* = kotlin.Int */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSUpdateAlias(/*0*/ fromFile: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ target: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*2*/ alias: platform.CoreServices.AliasHandle? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasPtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasPtr /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasRecord> */> */>? */, /*3*/ wasChanged: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FSVolumeMount(/*0*/ buffer: platform.darwin.BytePtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */, /*1*/ mountedVolume: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSVolumeRefNumVar /* = kotlinx.cinterop.ShortVarOf<platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun FSWriteFork(/*0*/ forkRefNum: platform.CoreServices.FSIORefNum /* = kotlin.Int */, /*1*/ positionMode: platform.darwin.UInt16 /* = kotlin.UShort */, /*2*/ positionOffset: platform.darwin.SInt64 /* = kotlin.Long */, /*3*/ requestCount: platform.darwin.ByteCount /* = kotlin.ULong */, /*4*/ buffer: kotlinx.cinterop.CValuesRef<*>?, /*5*/ actualCount: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FindFolder(/*0*/ vRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ folderType: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ createFolder: kotlin.Boolean, /*3*/ foundVRefNum: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSVolumeRefNumVar /* = kotlinx.cinterop.ShortVarOf<platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */> */>?, /*4*/ foundDirID: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FindNextComponent(/*0*/ aComponent: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */, /*1*/ looking: kotlinx.cinterop.CValuesRef<platform.CoreServices.ComponentDescription>?): platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */ { TODO() }

fun Fix2Frac(/*0*/ x: platform.darwin.Fixed /* = kotlin.Int */): platform.darwin.Fract /* = kotlin.Int */ { TODO() }

fun Fix2Long(/*0*/ x: platform.darwin.Fixed /* = kotlin.Int */): platform.darwin.SInt32 /* = kotlin.Int */ { TODO() }

fun Fix2X(/*0*/ x: platform.darwin.Fixed /* = kotlin.Int */): kotlin.Double { TODO() }

fun FixATan2(/*0*/ x: platform.darwin.SInt32 /* = kotlin.Int */, /*1*/ y: platform.darwin.SInt32 /* = kotlin.Int */): platform.darwin.Fixed /* = kotlin.Int */ { TODO() }

fun FixDiv(/*0*/ x: platform.darwin.Fixed /* = kotlin.Int */, /*1*/ y: platform.darwin.Fixed /* = kotlin.Int */): platform.darwin.Fixed /* = kotlin.Int */ { TODO() }

fun FixMul(/*0*/ a: platform.darwin.Fixed /* = kotlin.Int */, /*1*/ b: platform.darwin.Fixed /* = kotlin.Int */): platform.darwin.Fixed /* = kotlin.Int */ { TODO() }

fun FixRatio(/*0*/ numer: kotlin.Short, /*1*/ denom: kotlin.Short): platform.darwin.Fixed /* = kotlin.Int */ { TODO() }

fun FixRound(/*0*/ x: platform.darwin.Fixed /* = kotlin.Int */): kotlin.Short { TODO() }

fun FlattenCollection(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ flattenProc: platform.CoreServices.CollectionFlattenUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.SInt32 /* = kotlin.Int */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */, /*2*/ refCon: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FlattenCollectionToHdl(/*0*/ aCollection: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ flattened: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun FlattenPartialCollection(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ flattenProc: platform.CoreServices.CollectionFlattenUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.SInt32 /* = kotlin.Int */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */, /*2*/ refCon: kotlinx.cinterop.CValuesRef<*>?, /*3*/ whichAttributes: platform.darwin.SInt32 /* = kotlin.Int */, /*4*/ matchingAttributes: platform.darwin.SInt32 /* = kotlin.Int */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun Frac2Fix(/*0*/ x: platform.darwin.Fract /* = kotlin.Int */): platform.darwin.Fixed /* = kotlin.Int */ { TODO() }

fun Frac2X(/*0*/ x: platform.darwin.Fract /* = kotlin.Int */): kotlin.Double { TODO() }

fun FracCos(/*0*/ x: platform.darwin.Fixed /* = kotlin.Int */): platform.darwin.Fract /* = kotlin.Int */ { TODO() }

fun FracDiv(/*0*/ x: platform.darwin.Fract /* = kotlin.Int */, /*1*/ y: platform.darwin.Fract /* = kotlin.Int */): platform.darwin.Fract /* = kotlin.Int */ { TODO() }

fun FracMul(/*0*/ x: platform.darwin.Fract /* = kotlin.Int */, /*1*/ y: platform.darwin.Fract /* = kotlin.Int */): platform.darwin.Fract /* = kotlin.Int */ { TODO() }

fun FracSin(/*0*/ x: platform.darwin.Fixed /* = kotlin.Int */): platform.darwin.Fract /* = kotlin.Int */ { TODO() }

fun FracSqrt(/*0*/ x: platform.darwin.Fract /* = kotlin.Int */): platform.darwin.Fract /* = kotlin.Int */ { TODO() }

fun Gestalt(/*0*/ selector: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ response: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun Get1IndResource(/*0*/ theType: platform.darwin.ResType /* = kotlin.UInt */, /*1*/ itemIndex: platform.CoreServices.ResourceIndex /* = kotlin.Short */): platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */ { TODO() }

fun Get1IndType(/*0*/ theType: kotlinx.cinterop.CValuesRef<platform.darwin.ResTypeVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.ResType /* = kotlin.UInt */> */>?, /*1*/ itemIndex: platform.CoreServices.ResourceIndex /* = kotlin.Short */) { TODO() }

fun Get1NamedResource(/*0*/ theType: platform.darwin.ResType /* = kotlin.UInt */, /*1*/ name: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */): platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */ { TODO() }

fun Get1Resource(/*0*/ theType: platform.darwin.ResType /* = kotlin.UInt */, /*1*/ theID: platform.CoreServices.ResID /* = kotlin.Short */): platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */ { TODO() }

fun GetAliasSize(/*0*/ alias: platform.CoreServices.AliasHandle? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasPtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasPtr /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasRecord> */> */>? */): platform.darwin.Size /* = kotlin.Long */ { TODO() }

fun GetAliasSizeFromPtr(/*0*/ alias: kotlinx.cinterop.CValuesRef<platform.CoreServices.AliasRecord>?): platform.darwin.Size /* = kotlin.Long */ { TODO() }

fun GetAliasUserType(/*0*/ alias: platform.CoreServices.AliasHandle? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasPtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasPtr /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasRecord> */> */>? */): platform.darwin.OSType /* = kotlin.UInt */ { TODO() }

fun GetAliasUserTypeFromPtr(/*0*/ alias: kotlinx.cinterop.CValuesRef<platform.CoreServices.AliasRecord>?): platform.darwin.OSType /* = kotlin.UInt */ { TODO() }

fun GetCPUSpeed(): kotlin.Long { TODO() }

fun GetCollectionDefaultAttributes(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */): platform.darwin.SInt32 /* = kotlin.Int */ { TODO() }

fun GetCollectionExceptionProc(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */): platform.CoreServices.CollectionExceptionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, platform.darwin.OSErr /* = kotlin.Short */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */ { TODO() }

fun GetCollectionItem(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ tag: platform.CoreServices.CollectionTag /* = kotlin.UInt */, /*2*/ id: platform.darwin.SInt32 /* = kotlin.Int */, /*3*/ itemSize: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?, /*4*/ itemData: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetCollectionItemHdl(/*0*/ aCollection: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ tag: platform.CoreServices.CollectionTag /* = kotlin.UInt */, /*2*/ id: platform.darwin.SInt32 /* = kotlin.Int */, /*3*/ itemData: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetCollectionItemInfo(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ tag: platform.CoreServices.CollectionTag /* = kotlin.UInt */, /*2*/ id: platform.darwin.SInt32 /* = kotlin.Int */, /*3*/ itemIndex: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?, /*4*/ itemSize: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?, /*5*/ attributes: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetCollectionRetainCount(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */): platform.darwin.ItemCount /* = kotlin.ULong */ { TODO() }

fun GetComponentIndString(/*0*/ aComponent: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */, /*1*/ theString: platform.darwin.Str255? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */, /*2*/ strListID: platform.darwin.SInt16 /* = kotlin.Short */, /*3*/ index: platform.darwin.SInt16 /* = kotlin.Short */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetComponentInfo(/*0*/ aComponent: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */, /*1*/ cd: kotlinx.cinterop.CValuesRef<platform.CoreServices.ComponentDescription>?, /*2*/ componentName: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*3*/ componentInfo: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*4*/ componentIcon: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetComponentInstanceError(/*0*/ aComponentInstance: platform.CoreServices.ComponentInstance? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetComponentInstanceStorage(/*0*/ aComponentInstance: platform.CoreServices.ComponentInstance? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>? */): platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */ { TODO() }

fun GetComponentListModSeed(): platform.darwin.SInt32 /* = kotlin.Int */ { TODO() }

fun GetComponentPublicIndString(/*0*/ aComponent: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */, /*1*/ theString: platform.darwin.Str255? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */, /*2*/ strListID: platform.darwin.SInt16 /* = kotlin.Short */, /*3*/ index: platform.darwin.SInt16 /* = kotlin.Short */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetComponentPublicResource(/*0*/ aComponent: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */, /*1*/ resourceType: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ resourceID: platform.darwin.SInt16 /* = kotlin.Short */, /*3*/ theResource: kotlinx.cinterop.CValuesRef<platform.darwin.HandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Handle /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */> */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetComponentPublicResourceList(/*0*/ resourceType: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ resourceID: platform.darwin.SInt16 /* = kotlin.Short */, /*2*/ flags: platform.darwin.SInt32 /* = kotlin.Int */, /*3*/ cd: kotlinx.cinterop.CValuesRef<platform.CoreServices.ComponentDescription>?, /*4*/ missingProc: platform.CoreServices.GetMissingComponentResourceUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */, platform.darwin.OSType /* = kotlin.UInt */, platform.darwin.SInt16 /* = kotlin.Short */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.darwin.HandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Handle /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */> */> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */, /*5*/ refCon: kotlinx.cinterop.CValuesRef<*>?, /*6*/ atomContainerPtr: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetComponentRefcon(/*0*/ aComponent: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */): kotlin.Long { TODO() }

fun GetComponentResource(/*0*/ aComponent: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */, /*1*/ resType: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ resID: platform.darwin.SInt16 /* = kotlin.Short */, /*3*/ theResource: kotlinx.cinterop.CValuesRef<platform.darwin.HandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Handle /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */> */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetComponentTypeModSeed(/*0*/ componentType: platform.darwin.OSType /* = kotlin.UInt */): platform.darwin.SInt32 /* = kotlin.Int */ { TODO() }

fun GetCurrentThread(/*0*/ currentThreadID: kotlinx.cinterop.CValuesRef<platform.CoreServices.ThreadIDVar /* = kotlinx.cinterop.ULongVarOf<platform.CoreServices.ThreadID /* = kotlin.ULong */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetCustomIconsEnabled(/*0*/ vRefNum: platform.darwin.SInt16 /* = kotlin.Short */, /*1*/ customIconsEnabled: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetDebugComponentInfo(/*0*/ itemIndex: platform.darwin.UInt32 /* = kotlin.UInt */, /*1*/ componentSignature: kotlinx.cinterop.CValuesRef<platform.darwin.OSTypeVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.OSType /* = kotlin.UInt */> */>?, /*2*/ componentName: platform.darwin.Str255? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun GetDebugOptionInfo(/*0*/ itemIndex: platform.darwin.UInt32 /* = kotlin.UInt */, /*1*/ componentSignature: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ optionSelectorNum: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?, /*3*/ optionName: platform.darwin.Str255? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */, /*4*/ optionSetting: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun GetDefaultThreadStackSize(/*0*/ threadStyle: platform.CoreServices.ThreadStyle /* = kotlin.UInt */, /*1*/ stackSize: kotlinx.cinterop.CValuesRef<platform.darwin.SizeVar /* = kotlinx.cinterop.LongVarOf<platform.darwin.Size /* = kotlin.Long */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetFolderNameUnicode(/*0*/ vRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ foldType: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ foundVRefNum: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSVolumeRefNumVar /* = kotlinx.cinterop.ShortVarOf<platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */> */>?, /*3*/ name: kotlinx.cinterop.CValuesRef<platform.osx.HFSUniStr255>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun GetFolderTypes(/*0*/ requestedTypeCount: platform.darwin.UInt32 /* = kotlin.UInt */, /*1*/ totalTypeCount: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?, /*2*/ theTypes: kotlinx.cinterop.CValuesRef<platform.CoreServices.FolderTypeVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FolderType /* = kotlin.UInt */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetHandleSize(/*0*/ h: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */): platform.darwin.Size /* = kotlin.Long */ { TODO() }

fun GetIconRef(/*0*/ vRefNum: platform.darwin.SInt16 /* = kotlin.Short */, /*1*/ creator: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ iconType: platform.darwin.OSType /* = kotlin.UInt */, /*3*/ theIconRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.IconRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IconRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef> */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetIconRefFromComponent(/*0*/ inComponent: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */, /*1*/ outIconRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.IconRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IconRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun GetIconRefFromFileInfo(/*0*/ inRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ inFileNameLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*2*/ inFileName: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*3*/ inWhichInfo: platform.CoreServices.FSCatalogInfoBitmap /* = kotlin.UInt */, /*4*/ inCatalogInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSCatalogInfo>?, /*5*/ inUsageFlags: platform.CoreServices.IconServicesUsageFlags /* = kotlin.UInt */, /*6*/ outIconRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.IconRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IconRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef> */> */>?, /*7*/ outLabel: kotlinx.cinterop.CValuesRef<platform.darwin.SInt16Var /* = kotlinx.cinterop.ShortVarOf<platform.darwin.SInt16 /* = kotlin.Short */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun GetIconRefFromFolder(/*0*/ vRefNum: platform.darwin.SInt16 /* = kotlin.Short */, /*1*/ parentFolderID: platform.darwin.SInt32 /* = kotlin.Int */, /*2*/ folderID: platform.darwin.SInt32 /* = kotlin.Int */, /*3*/ attributes: platform.darwin.SInt8 /* = kotlin.Byte */, /*4*/ accessPrivileges: platform.darwin.SInt8 /* = kotlin.Byte */, /*5*/ theIconRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.IconRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IconRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef> */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetIconRefFromIconFamilyPtr(/*0*/ inIconFamilyPtr: kotlinx.cinterop.CValuesRef<platform.CoreServices.IconFamilyResource>?, /*1*/ inSize: platform.darwin.Size /* = kotlin.Long */, /*2*/ outIconRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.IconRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IconRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun GetIconRefFromTypeInfo(/*0*/ inCreator: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ inType: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ inExtension: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ inMIMEType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*4*/ inUsageFlags: platform.CoreServices.IconServicesUsageFlags /* = kotlin.UInt */, /*5*/ outIconRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.IconRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IconRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef> */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetIconRefOwners(/*0*/ theIconRef: platform.CoreServices.IconRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef>? */, /*1*/ owners: kotlinx.cinterop.CValuesRef<platform.darwin.UInt16Var /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UInt16 /* = kotlin.UShort */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetIndResource(/*0*/ theType: platform.darwin.ResType /* = kotlin.UInt */, /*1*/ itemIndex: platform.CoreServices.ResourceIndex /* = kotlin.Short */): platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */ { TODO() }

fun GetIndType(/*0*/ theType: kotlinx.cinterop.CValuesRef<platform.darwin.ResTypeVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.ResType /* = kotlin.UInt */> */>?, /*1*/ itemIndex: platform.CoreServices.ResourceIndex /* = kotlin.Short */) { TODO() }

fun GetIndexedCollectionItem(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ itemIndex: platform.darwin.SInt32 /* = kotlin.Int */, /*2*/ itemSize: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?, /*3*/ itemData: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetIndexedCollectionItemHdl(/*0*/ aCollection: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ itemIndex: platform.darwin.SInt32 /* = kotlin.Int */, /*2*/ itemData: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetIndexedCollectionItemInfo(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ itemIndex: platform.darwin.SInt32 /* = kotlin.Int */, /*2*/ tag: kotlinx.cinterop.CValuesRef<platform.CoreServices.CollectionTagVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.CollectionTag /* = kotlin.UInt */> */>?, /*3*/ id: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?, /*4*/ itemSize: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?, /*5*/ attributes: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetIndexedCollectionTag(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ tagIndex: platform.darwin.SInt32 /* = kotlin.Int */, /*2*/ tag: kotlinx.cinterop.CValuesRef<platform.CoreServices.CollectionTagVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.CollectionTag /* = kotlin.UInt */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetMacOSStatusCommentString(/*0*/ err: platform.darwin.OSStatus /* = kotlin.Int */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun GetMacOSStatusErrorString(/*0*/ err: platform.darwin.OSStatus /* = kotlin.Int */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun GetMaxResourceSize(/*0*/ theResource: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */): kotlin.Long { TODO() }

fun GetNamedResource(/*0*/ theType: platform.darwin.ResType /* = kotlin.UInt */, /*1*/ name: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */): platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */ { TODO() }

fun GetNewCollection(/*0*/ collectionID: platform.darwin.SInt16 /* = kotlin.Short */): platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */ { TODO() }

fun GetNextFOND(/*0*/ fondHandle: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */): platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */ { TODO() }

fun GetNextResourceFile(/*0*/ curRefNum: platform.CoreServices.ResFileRefNum /* = kotlin.Int */, /*1*/ nextRefNum: kotlinx.cinterop.CValuesRef<platform.CoreServices.ResFileRefNumVar /* = kotlinx.cinterop.IntVarOf<platform.CoreServices.ResFileRefNum /* = kotlin.Int */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetPtrSize(/*0*/ p: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */): platform.darwin.Size /* = kotlin.Long */ { TODO() }

fun GetResAttrs(/*0*/ theResource: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */): platform.CoreServices.ResAttributes /* = kotlin.Short */ { TODO() }

fun GetResFileAttrs(/*0*/ refNum: platform.CoreServices.ResFileRefNum /* = kotlin.Int */): platform.CoreServices.ResFileAttributes /* = kotlin.Short */ { TODO() }

fun GetResInfo(/*0*/ theResource: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*1*/ theID: kotlinx.cinterop.CValuesRef<platform.CoreServices.ResIDVar /* = kotlinx.cinterop.ShortVarOf<platform.CoreServices.ResID /* = kotlin.Short */> */>?, /*2*/ theType: kotlinx.cinterop.CValuesRef<platform.darwin.ResTypeVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.ResType /* = kotlin.UInt */> */>?, /*3*/ name: platform.darwin.Str255? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */) { TODO() }

fun GetResource(/*0*/ theType: platform.darwin.ResType /* = kotlin.UInt */, /*1*/ theID: platform.CoreServices.ResID /* = kotlin.Short */): platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */ { TODO() }

fun GetResourceSizeOnDisk(/*0*/ theResource: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */): kotlin.Long { TODO() }

fun GetScriptInfoFromTextEncoding(/*0*/ iEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */, /*1*/ oTextScriptID: kotlinx.cinterop.CValuesRef<platform.darwin.ScriptCodeVar /* = kotlinx.cinterop.ShortVarOf<platform.darwin.ScriptCode /* = kotlin.Short */> */>?, /*2*/ oTextLanguageID: kotlinx.cinterop.CValuesRef<platform.darwin.LangCodeVar /* = kotlinx.cinterop.ShortVarOf<platform.darwin.LangCode /* = kotlin.Short */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun GetScriptManagerVariable(/*0*/ selector: kotlin.Short): kotlin.Long { TODO() }

fun GetTaggedCollectionItem(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ tag: platform.CoreServices.CollectionTag /* = kotlin.UInt */, /*2*/ whichItem: platform.darwin.SInt32 /* = kotlin.Int */, /*3*/ itemSize: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?, /*4*/ itemData: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetTaggedCollectionItemInfo(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ tag: platform.CoreServices.CollectionTag /* = kotlin.UInt */, /*2*/ whichItem: platform.darwin.SInt32 /* = kotlin.Int */, /*3*/ id: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?, /*4*/ itemIndex: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?, /*5*/ itemSize: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?, /*6*/ attributes: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetTextEncodingBase(/*0*/ encoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */): platform.CoreServices.TextEncodingBase /* = kotlin.UInt */ { TODO() }

fun GetTextEncodingFormat(/*0*/ encoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */): platform.CoreServices.TextEncodingFormat /* = kotlin.UInt */ { TODO() }

fun GetTextEncodingFromScriptInfo(/*0*/ iTextScriptID: platform.darwin.ScriptCode /* = kotlin.Short */, /*1*/ iTextLanguageID: platform.darwin.LangCode /* = kotlin.Short */, /*2*/ iTextRegionID: platform.darwin.RegionCode /* = kotlin.Short */, /*3*/ oEncoding: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun GetTextEncodingName(/*0*/ iEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */, /*1*/ iNamePartSelector: platform.CoreServices.TextEncodingNameSelector /* = kotlin.UInt */, /*2*/ iPreferredRegion: platform.darwin.RegionCode /* = kotlin.Short */, /*3*/ iPreferredEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */, /*4*/ iOutputBufLen: platform.darwin.ByteCount /* = kotlin.ULong */, /*5*/ oNameLength: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, /*6*/ oActualRegion: kotlinx.cinterop.CValuesRef<platform.darwin.RegionCodeVar /* = kotlinx.cinterop.ShortVarOf<platform.darwin.RegionCode /* = kotlin.Short */> */>?, /*7*/ oActualEncoding: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, /*8*/ oEncodingName: platform.CoreServices.TextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun GetTextEncodingVariant(/*0*/ encoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */): platform.CoreServices.TextEncodingVariant /* = kotlin.UInt */ { TODO() }

fun GetThreadCurrentTaskRef(/*0*/ threadTRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.ThreadTaskRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ThreadTaskRef /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetThreadState(/*0*/ threadToGet: platform.CoreServices.ThreadID /* = kotlin.ULong */, /*1*/ threadState: kotlinx.cinterop.CValuesRef<platform.CoreServices.ThreadStateVar /* = kotlinx.cinterop.UShortVarOf<platform.CoreServices.ThreadState /* = kotlin.UShort */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetThreadStateGivenTaskRef(/*0*/ threadTRef: platform.CoreServices.ThreadTaskRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*1*/ threadToGet: platform.CoreServices.ThreadID /* = kotlin.ULong */, /*2*/ threadState: kotlinx.cinterop.CValuesRef<platform.CoreServices.ThreadStateVar /* = kotlinx.cinterop.UShortVarOf<platform.CoreServices.ThreadState /* = kotlin.UShort */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun GetTopResourceFile(/*0*/ refNum: kotlinx.cinterop.CValuesRef<platform.CoreServices.ResFileRefNumVar /* = kotlinx.cinterop.IntVarOf<platform.CoreServices.ResFileRefNum /* = kotlin.Int */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun HClrRBit(/*0*/ h: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) { TODO() }

fun HGetState(/*0*/ h: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */): platform.darwin.SInt8 /* = kotlin.Byte */ { TODO() }

fun HLock(/*0*/ h: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) { TODO() }

fun HLockHi(/*0*/ h: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) { TODO() }

fun HSetRBit(/*0*/ h: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) { TODO() }

fun HSetState(/*0*/ h: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*1*/ flags: platform.darwin.SInt8 /* = kotlin.Byte */) { TODO() }

fun HUnlock(/*0*/ h: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) { TODO() }

fun HandAndHand(/*0*/ hand1: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*1*/ hand2: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun HandToHand(/*0*/ theHndl: kotlinx.cinterop.CValuesRef<platform.darwin.HandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Handle /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */> */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun HomeResFile(/*0*/ theResource: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */): platform.CoreServices.ResFileRefNum /* = kotlin.Int */ { TODO() }

fun IdentifyFolder(/*0*/ vRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ dirID: platform.darwin.SInt32 /* = kotlin.Int */, /*2*/ foldType: kotlinx.cinterop.CValuesRef<platform.CoreServices.FolderTypeVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.FolderType /* = kotlin.UInt */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun IncrementAtomic(/*0*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?): platform.darwin.SInt32 /* = kotlin.Int */ { TODO() }

fun IncrementAtomic16(/*0*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.SInt16Var /* = kotlinx.cinterop.ShortVarOf<platform.darwin.SInt16 /* = kotlin.Short */> */>?): platform.darwin.SInt16 /* = kotlin.Short */ { TODO() }

fun IncrementAtomic8(/*0*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.SInt8Var /* = kotlinx.cinterop.ByteVarOf<platform.darwin.SInt8 /* = kotlin.Byte */> */>?): platform.darwin.SInt8 /* = kotlin.Byte */ { TODO() }

fun InsTime(/*0*/ tmTaskPtr: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */) { TODO() }

fun InsXTime(/*0*/ tmTaskPtr: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */) { TODO() }

fun InsertResourceFile(/*0*/ refNum: platform.CoreServices.ResFileRefNum /* = kotlin.Int */, /*1*/ where: platform.CoreServices.RsrcChainLocation /* = kotlin.Short */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun InstallDebugAssertOutputHandler(/*0*/ handler: platform.CoreServices.DebugAssertOutputHandlerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSType /* = kotlin.UInt */, platform.darwin.UInt32 /* = kotlin.UInt */, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlin.Long, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */) -> kotlin.Unit>>? */) { TODO() }

fun InstallExceptionHandler(/*0*/ theHandler: platform.CoreServices.ExceptionHandlerTPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.ExceptionInformation>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */): platform.CoreServices.ExceptionHandlerTPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.ExceptionInformation>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */ { TODO() }

fun InstallTimeTask(/*0*/ tmTaskPtr: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun InstallXTimeTask(/*0*/ tmTaskPtr: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun InvalidateFolderDescriptorCache(/*0*/ vRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ dirID: platform.darwin.SInt32 /* = kotlin.Int */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

external fun InvokeAECoerceDescUPP(/*0*/ fromDesc: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*1*/ toType: platform.CoreServices.DescType /* = kotlin.UInt */, /*2*/ handlerRefcon: platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*3*/ toDesc: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*4*/ userUPP: platform.CoreServices.AECoerceDescUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType /* = kotlin.UInt */, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.darwin.OSErr /* = kotlin.Short */

external fun InvokeAECoercePtrUPP(/*0*/ typeCode: platform.CoreServices.DescType /* = kotlin.UInt */, /*1*/ dataPtr: kotlinx.cinterop.CValuesRef<*>?, /*2*/ dataSize: platform.darwin.Size /* = kotlin.Long */, /*3*/ toType: platform.CoreServices.DescType /* = kotlin.UInt */, /*4*/ handlerRefcon: platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*5*/ result: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*6*/ userUPP: platform.CoreServices.AECoercePtrUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.Size /* = kotlin.Long */, platform.CoreServices.DescType /* = kotlin.UInt */, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.darwin.OSErr /* = kotlin.Short */

external fun InvokeAEDisposeExternalUPP(/*0*/ dataPtr: kotlinx.cinterop.CValuesRef<*>?, /*1*/ dataLength: platform.darwin.Size /* = kotlin.Long */, /*2*/ refcon: platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*3*/ userUPP: platform.CoreServices.AEDisposeExternalUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.Size /* = kotlin.Long */, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */)

external fun InvokeAEEventHandlerUPP(/*0*/ theAppleEvent: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, /*1*/ reply: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, /*2*/ handlerRefcon: platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*3*/ userUPP: platform.CoreServices.AEEventHandlerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.darwin.OSErr /* = kotlin.Short */

external fun InvokeAVLCompareItemsUPP(/*0*/ tree: platform.CoreServices.AVLTreePtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>? */, /*1*/ i1: kotlinx.cinterop.CValuesRef<*>?, /*2*/ i2: kotlinx.cinterop.CValuesRef<*>?, /*3*/ nd_typ: platform.CoreServices.AVLNodeType /* = kotlin.UShort */, /*4*/ userUPP: platform.CoreServices.AVLCompareItemsUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AVLTreePtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.AVLNodeType /* = kotlin.UShort */) -> platform.darwin.SInt32 /* = kotlin.Int */>>? */): platform.darwin.SInt32 /* = kotlin.Int */

external fun InvokeAVLDisposeItemUPP(/*0*/ tree: platform.CoreServices.AVLTreePtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>? */, /*1*/ dataP: kotlinx.cinterop.CValuesRef<*>?, /*2*/ userUPP: platform.CoreServices.AVLDisposeItemUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AVLTreePtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */)

external fun InvokeAVLItemSizeUPP(/*0*/ tree: platform.CoreServices.AVLTreePtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>? */, /*1*/ itemPtr: kotlinx.cinterop.CValuesRef<*>?, /*2*/ userUPP: platform.CoreServices.AVLItemSizeUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AVLTreePtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.ByteCount /* = kotlin.ULong */>>? */): platform.darwin.ByteCount /* = kotlin.ULong */

external fun InvokeAVLWalkUPP(/*0*/ tree: platform.CoreServices.AVLTreePtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>? */, /*1*/ dataPtr: kotlinx.cinterop.CValuesRef<*>?, /*2*/ visitStage: platform.CoreServices.AVLVisitStage /* = kotlin.UShort */, /*3*/ node: platform.CoreServices.AVLNodeType /* = kotlin.UShort */, /*4*/ level: platform.darwin.UInt32 /* = kotlin.UInt */, /*5*/ balance: platform.darwin.SInt32 /* = kotlin.Int */, /*6*/ refCon: kotlinx.cinterop.CValuesRef<*>?, /*7*/ userUPP: platform.CoreServices.AVLWalkUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AVLTreePtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.AVLVisitStage /* = kotlin.UShort */, platform.CoreServices.AVLNodeType /* = kotlin.UShort */, platform.darwin.UInt32 /* = kotlin.UInt */, platform.darwin.SInt32 /* = kotlin.Int */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.darwin.OSErr /* = kotlin.Short */

external fun InvokeCollectionExceptionUPP(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ status: platform.darwin.OSErr /* = kotlin.Short */, /*2*/ userUPP: platform.CoreServices.CollectionExceptionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, platform.darwin.OSErr /* = kotlin.Short */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.darwin.OSErr /* = kotlin.Short */

external fun InvokeCollectionFlattenUPP(/*0*/ size: platform.darwin.SInt32 /* = kotlin.Int */, /*1*/ data: kotlinx.cinterop.CValuesRef<*>?, /*2*/ refCon: kotlinx.cinterop.CValuesRef<*>?, /*3*/ userUPP: platform.CoreServices.CollectionFlattenUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.SInt32 /* = kotlin.Int */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.darwin.OSErr /* = kotlin.Short */

external fun InvokeComponentMPWorkFunctionUPP(/*0*/ globalRefCon: kotlinx.cinterop.CValuesRef<*>?, /*1*/ header: platform.CoreServices.ComponentMPWorkFunctionHeaderRecordPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentMPWorkFunctionHeaderRecord>? */, /*2*/ userUPP: platform.CoreServices.ComponentMPWorkFunctionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.ComponentMPWorkFunctionHeaderRecordPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentMPWorkFunctionHeaderRecord>? */) -> platform.CoreServices.ComponentResult /* = kotlin.Int */>>? */): platform.CoreServices.ComponentResult /* = kotlin.Int */

external fun InvokeComponentRoutineUPP(/*0*/ cp: kotlinx.cinterop.CValuesRef<platform.CoreServices.ComponentParameters>?, /*1*/ componentStorage: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*2*/ userUPP: platform.CoreServices.ComponentRoutineUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.ComponentParameters>?, platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) -> platform.CoreServices.ComponentResult /* = kotlin.Int */>>? */): platform.CoreServices.ComponentResult /* = kotlin.Int */

external fun InvokeDebugAssertOutputHandlerUPP(/*0*/ componentSignature: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ options: platform.darwin.UInt32 /* = kotlin.UInt */, /*2*/ assertionString: kotlin.String?, /*3*/ exceptionLabelString: kotlin.String?, /*4*/ errorString: kotlin.String?, /*5*/ fileName: kotlin.String?, /*6*/ lineNumber: kotlin.Long, /*7*/ value: kotlinx.cinterop.CValuesRef<*>?, /*8*/ outputMsg: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*9*/ userUPP: platform.CoreServices.DebugAssertOutputHandlerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSType /* = kotlin.UInt */, platform.darwin.UInt32 /* = kotlin.UInt */, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlin.Long, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */) -> kotlin.Unit>>? */)

external fun InvokeDebugComponentCallbackUPP(/*0*/ optionSelectorNum: platform.darwin.SInt32 /* = kotlin.Int */, /*1*/ command: platform.darwin.UInt32 /* = kotlin.UInt */, /*2*/ optionSetting: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?, /*3*/ userUPP: platform.CoreServices.DebugComponentCallbackUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.SInt32 /* = kotlin.Int */, platform.darwin.UInt32 /* = kotlin.UInt */, kotlinx.cinterop.CPointer<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?) -> kotlin.Unit>>? */)

external fun InvokeDebuggerDisposeThreadUPP(/*0*/ threadDeleted: platform.CoreServices.ThreadID /* = kotlin.ULong */, /*1*/ userUPP: platform.CoreServices.DebuggerDisposeThreadUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID /* = kotlin.ULong */) -> kotlin.Unit>>? */)

external fun InvokeDebuggerNewThreadUPP(/*0*/ threadCreated: platform.CoreServices.ThreadID /* = kotlin.ULong */, /*1*/ userUPP: platform.CoreServices.DebuggerNewThreadUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID /* = kotlin.ULong */) -> kotlin.Unit>>? */)

external fun InvokeDebuggerThreadSchedulerUPP(/*0*/ schedulerInfo: platform.CoreServices.SchedulerInfoRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SchedulerInfoRec>? */, /*1*/ userUPP: platform.CoreServices.DebuggerThreadSchedulerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.SchedulerInfoRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SchedulerInfoRec>? */) -> platform.CoreServices.ThreadID /* = kotlin.ULong */>>? */): platform.CoreServices.ThreadID /* = kotlin.ULong */

external fun InvokeDeferredTaskUPP(/*0*/ dtParam: kotlin.Long, /*1*/ userUPP: platform.CoreServices.DeferredTaskUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Long) -> kotlin.Unit>>? */)

external fun InvokeExceptionHandlerUPP(/*0*/ theException: kotlinx.cinterop.CValuesRef<platform.CoreServices.ExceptionInformation>?, /*1*/ userUPP: platform.CoreServices.ExceptionHandlerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.ExceptionInformation>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */): platform.darwin.OSStatus /* = kotlin.Int */

external fun InvokeFNSubscriptionUPP(/*0*/ message: platform.CoreServices.FNMessage /* = kotlin.UInt */, /*1*/ flags: platform.darwin.OptionBits /* = kotlin.UInt */, /*2*/ refcon: kotlinx.cinterop.CValuesRef<*>?, /*3*/ subscription: platform.CoreServices.FNSubscriptionRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFNSubscriptionRef>? */, /*4*/ userUPP: platform.CoreServices.FNSubscriptionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FNMessage /* = kotlin.UInt */, platform.darwin.OptionBits /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.FNSubscriptionRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFNSubscriptionRef>? */) -> kotlin.Unit>>? */)

external fun InvokeFSVolumeEjectUPP(/*0*/ volumeOp: platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, /*1*/ clientData: kotlinx.cinterop.CValuesRef<*>?, /*2*/ err: platform.darwin.OSStatus /* = kotlin.Int */, /*3*/ volumeRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*4*/ dissenter: platform.posix.pid_t /* = kotlin.Int */, /*5*/ userUPP: platform.CoreServices.FSVolumeEjectUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, platform.posix.pid_t /* = kotlin.Int */) -> kotlin.Unit>>? */)

external fun InvokeFSVolumeMountUPP(/*0*/ volumeOp: platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, /*1*/ clientData: kotlinx.cinterop.CValuesRef<*>?, /*2*/ err: platform.darwin.OSStatus /* = kotlin.Int */, /*3*/ mountedVolumeRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*4*/ userUPP: platform.CoreServices.FSVolumeMountUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */) -> kotlin.Unit>>? */)

external fun InvokeFSVolumeUnmountUPP(/*0*/ volumeOp: platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, /*1*/ clientData: kotlinx.cinterop.CValuesRef<*>?, /*2*/ err: platform.darwin.OSStatus /* = kotlin.Int */, /*3*/ volumeRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*4*/ dissenter: platform.posix.pid_t /* = kotlin.Int */, /*5*/ userUPP: platform.CoreServices.FSVolumeUnmountUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, platform.posix.pid_t /* = kotlin.Int */) -> kotlin.Unit>>? */)

external fun InvokeFolderManagerNotificationUPP(/*0*/ message: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ arg: kotlinx.cinterop.CValuesRef<*>?, /*2*/ userRefCon: kotlinx.cinterop.CValuesRef<*>?, /*3*/ userUPP: platform.CoreServices.FolderManagerNotificationUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSType /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */): platform.darwin.OSStatus /* = kotlin.Int */

external fun InvokeGetMissingComponentResourceUPP(/*0*/ c: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */, /*1*/ resType: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ resID: platform.darwin.SInt16 /* = kotlin.Short */, /*3*/ refCon: kotlinx.cinterop.CValuesRef<*>?, /*4*/ resource: kotlinx.cinterop.CValuesRef<platform.darwin.HandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Handle /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */> */> */>?, /*5*/ userUPP: platform.CoreServices.GetMissingComponentResourceUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */, platform.darwin.OSType /* = kotlin.UInt */, platform.darwin.SInt16 /* = kotlin.Short */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.darwin.HandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Handle /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */> */> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.darwin.OSErr /* = kotlin.Short */

external fun InvokeIOCompletionUPP(/*0*/ paramBlock: platform.CoreServices.ParmBlkPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*1*/ userUPP: platform.CoreServices.IOCompletionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ParmBlkPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */)

external fun InvokeIndexToUCStringUPP(/*0*/ index: platform.darwin.UInt32 /* = kotlin.UInt */, /*1*/ listDataPtr: kotlinx.cinterop.CValuesRef<*>?, /*2*/ refcon: kotlinx.cinterop.CValuesRef<*>?, /*3*/ outString: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFStringRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFStringRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString> */> */>?, /*4*/ tsOptions: kotlinx.cinterop.CValuesRef<platform.CoreServices.UCTypeSelectOptionsVar /* = kotlinx.cinterop.UShortVarOf<platform.CoreServices.UCTypeSelectOptions /* = kotlin.UShort */> */>?, /*5*/ userUPP: platform.CoreServices.IndexToUCStringUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.UInt32 /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.CoreFoundation.CFStringRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFStringRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString> */> */>?, kotlinx.cinterop.CPointer<platform.CoreServices.UCTypeSelectOptionsVar /* = kotlinx.cinterop.UShortVarOf<platform.CoreServices.UCTypeSelectOptions /* = kotlin.UShort */> */>?) -> kotlin.Boolean>>? */): kotlin.Boolean

external fun InvokeKCCallbackUPP(/*0*/ keychainEvent: platform.CoreServices.KCEvent /* = kotlin.UShort */, /*1*/ info: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCCallbackInfo>?, /*2*/ userContext: kotlinx.cinterop.CValuesRef<*>?, /*3*/ userUPP: platform.CoreServices.KCCallbackUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.KCEvent /* = kotlin.UShort */, kotlinx.cinterop.CPointer<platform.CoreServices.KCCallbackInfo>?, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */): platform.darwin.OSStatus /* = kotlin.Int */

external fun InvokeOSLAccessorUPP(/*0*/ desiredClass: platform.CoreServices.DescType /* = kotlin.UInt */, /*1*/ container: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*2*/ containerClass: platform.CoreServices.DescType /* = kotlin.UInt */, /*3*/ form: platform.CoreServices.DescType /* = kotlin.UInt */, /*4*/ selectionData: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*5*/ value: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*6*/ accessorRefcon: platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*7*/ userUPP: platform.CoreServices.OSLAccessorUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType /* = kotlin.UInt */, platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.darwin.OSErr /* = kotlin.Short */

external fun InvokeOSLAdjustMarksUPP(/*0*/ newStart: kotlin.Long, /*1*/ newStop: kotlin.Long, /*2*/ markToken: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*3*/ userUPP: platform.CoreServices.OSLAdjustMarksUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Long, kotlin.Long, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.darwin.OSErr /* = kotlin.Short */

external fun InvokeOSLCompareUPP(/*0*/ oper: platform.CoreServices.DescType /* = kotlin.UInt */, /*1*/ obj1: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*2*/ obj2: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*3*/ result: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?, /*4*/ userUPP: platform.CoreServices.OSLCompareUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.darwin.OSErr /* = kotlin.Short */

external fun InvokeOSLCountUPP(/*0*/ desiredType: platform.CoreServices.DescType /* = kotlin.UInt */, /*1*/ containerClass: platform.CoreServices.DescType /* = kotlin.UInt */, /*2*/ container: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*3*/ result: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.LongVar /* = kotlinx.cinterop.LongVarOf<kotlin.Long> */>?, /*4*/ userUPP: platform.CoreServices.OSLCountUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVar /* = kotlinx.cinterop.LongVarOf<kotlin.Long> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.darwin.OSErr /* = kotlin.Short */

external fun InvokeOSLDisposeTokenUPP(/*0*/ unneededToken: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*1*/ userUPP: platform.CoreServices.OSLDisposeTokenUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.darwin.OSErr /* = kotlin.Short */

external fun InvokeOSLGetErrDescUPP(/*0*/ appDescPtr: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<platform.CoreServices.AEDesc> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>> */>?, /*1*/ userUPP: platform.CoreServices.OSLGetErrDescUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.CoreServices.AEDesc> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.darwin.OSErr /* = kotlin.Short */

external fun InvokeOSLGetMarkTokenUPP(/*0*/ dContainerToken: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*1*/ containerClass: platform.CoreServices.DescType /* = kotlin.UInt */, /*2*/ result: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*3*/ userUPP: platform.CoreServices.OSLGetMarkTokenUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.darwin.OSErr /* = kotlin.Short */

external fun InvokeOSLMarkUPP(/*0*/ dToken: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*1*/ markToken: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*2*/ index: kotlin.Long, /*3*/ userUPP: platform.CoreServices.OSLMarkUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlin.Long) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.darwin.OSErr /* = kotlin.Short */

external fun InvokeResErrUPP(/*0*/ thErr: platform.darwin.OSErr /* = kotlin.Short */, /*1*/ userUPP: platform.CoreServices.ResErrUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSErr /* = kotlin.Short */) -> kotlin.Unit>>? */)

external fun InvokeSelectorFunctionUPP(/*0*/ selector: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ response: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?, /*2*/ userUPP: platform.CoreServices.SelectorFunctionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.darwin.OSErr /* = kotlin.Short */

external fun InvokeSleepQUPP(/*0*/ message: kotlin.Long, /*1*/ qRecPtr: platform.CoreServices.SleepQRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SleepQRec>? */, /*2*/ userUPP: platform.CoreServices.SleepQUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Long, platform.CoreServices.SleepQRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SleepQRec>? */) -> kotlin.Long>>? */): kotlin.Long

external fun InvokeThreadEntryUPP(/*0*/ threadParam: kotlinx.cinterop.CValuesRef<*>?, /*1*/ userUPP: platform.CoreServices.ThreadEntryUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreServices.voidPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */): platform.CoreServices.voidPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */

external fun InvokeThreadSchedulerUPP(/*0*/ schedulerInfo: platform.CoreServices.SchedulerInfoRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SchedulerInfoRec>? */, /*1*/ userUPP: platform.CoreServices.ThreadSchedulerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.SchedulerInfoRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SchedulerInfoRec>? */) -> platform.CoreServices.ThreadID /* = kotlin.ULong */>>? */): platform.CoreServices.ThreadID /* = kotlin.ULong */

external fun InvokeThreadSwitchUPP(/*0*/ threadBeingSwitched: platform.CoreServices.ThreadID /* = kotlin.ULong */, /*1*/ switchProcParam: kotlinx.cinterop.CValuesRef<*>?, /*2*/ userUPP: platform.CoreServices.ThreadSwitchUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID /* = kotlin.ULong */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */)

external fun InvokeThreadTerminationUPP(/*0*/ threadTerminated: platform.CoreServices.ThreadID /* = kotlin.ULong */, /*1*/ terminationProcParam: kotlinx.cinterop.CValuesRef<*>?, /*2*/ userUPP: platform.CoreServices.ThreadTerminationUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID /* = kotlin.ULong */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */)

external fun InvokeTimerUPP(/*0*/ tmTaskPtr: platform.CoreServices.TMTaskPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.TMTask>? */, /*1*/ userUPP: platform.CoreServices.TimerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TMTaskPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.TMTask>? */) -> kotlin.Unit>>? */)

external fun InvokeUnicodeToTextFallbackUPP(/*0*/ iSrcUniStr: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*1*/ iSrcUniStrLen: platform.darwin.ByteCount /* = kotlin.ULong */, /*2*/ oSrcConvLen: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, /*3*/ oDestStr: platform.CoreServices.TextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */, /*4*/ iDestStrLen: platform.darwin.ByteCount /* = kotlin.ULong */, /*5*/ oDestConvLen: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, /*6*/ iInfoPtr: platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*7*/ iUnicodeMappingPtr: platform.CoreServices.ConstUnicodeMappingPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.UnicodeMapping>? */, /*8*/ userUPP: platform.CoreServices.UnicodeToTextFallbackUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, platform.darwin.ByteCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, platform.CoreServices.TextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */, platform.darwin.ByteCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.ConstUnicodeMappingPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.UnicodeMapping>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */): platform.darwin.OSStatus /* = kotlin.Int */

fun IsDataAvailableInIconRef(/*0*/ inIconKind: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ inIconRef: platform.CoreServices.IconRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef>? */): kotlin.Boolean { TODO() }

fun IsHandleValid(/*0*/ h: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */): kotlin.Boolean { TODO() }

fun IsHeapValid(): kotlin.Boolean { TODO() }

fun IsIconRefComposite(/*0*/ compositeIconRef: platform.CoreServices.IconRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef>? */, /*1*/ backgroundIconRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.IconRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IconRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef> */> */>?, /*2*/ foregroundIconRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.IconRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IconRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef> */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun IsMetric(): kotlin.Boolean { TODO() }

fun IsPointerValid(/*0*/ p: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */): kotlin.Boolean { TODO() }

fun IsValidIconRef(/*0*/ theIconRef: platform.CoreServices.IconRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef>? */): kotlin.Boolean { TODO() }

fun KCAddCallback(/*0*/ callbackProc: platform.CoreServices.KCCallbackUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.KCEvent /* = kotlin.UShort */, kotlinx.cinterop.CPointer<platform.CoreServices.KCCallbackInfo>?, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */, /*1*/ eventMask: platform.CoreServices.KCEventMask /* = kotlin.UShort */, /*2*/ userContext: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCCopyItem(/*0*/ item: platform.CoreServices.KCItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef>? */, /*1*/ destKeychain: platform.CoreServices.KCRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainRef>? */, /*2*/ copy: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCItemRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCItemRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCCountKeychains(): platform.darwin.UInt16 /* = kotlin.UShort */ { TODO() }

fun KCDeleteItem(/*0*/ item: platform.CoreServices.KCItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCFindAppleSharePassword(/*0*/ serverSignature: platform.CoreServices.AFPServerSignature? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */>>? */, /*1*/ serverAddress: platform.darwin.ConstStringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*2*/ serverName: platform.darwin.ConstStringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*3*/ volumeName: platform.darwin.ConstStringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*4*/ accountName: platform.darwin.ConstStringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*5*/ maxLength: platform.darwin.UInt32 /* = kotlin.UInt */, /*6*/ passwordData: kotlinx.cinterop.CValuesRef<*>?, /*7*/ actualLength: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?, /*8*/ item: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCItemRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCItemRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCFindFirstItem(/*0*/ keychain: platform.CoreServices.KCRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainRef>? */, /*1*/ attrList: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCAttributeList /* = platform.Security.SecKeychainAttributeList */>?, /*2*/ search: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCSearchRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCSearchRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainSearchRef> */> */>?, /*3*/ item: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCItemRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCItemRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCFindGenericPassword(/*0*/ serviceName: platform.darwin.ConstStringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*1*/ accountName: platform.darwin.ConstStringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*2*/ maxLength: platform.darwin.UInt32 /* = kotlin.UInt */, /*3*/ passwordData: kotlinx.cinterop.CValuesRef<*>?, /*4*/ actualLength: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?, /*5*/ item: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCItemRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCItemRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCFindInternetPassword(/*0*/ serverName: platform.darwin.ConstStringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*1*/ securityDomain: platform.darwin.ConstStringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*2*/ accountName: platform.darwin.ConstStringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*3*/ port: platform.darwin.UInt16 /* = kotlin.UShort */, /*4*/ protocol: platform.darwin.OSType /* = kotlin.UInt */, /*5*/ authType: platform.darwin.OSType /* = kotlin.UInt */, /*6*/ maxLength: platform.darwin.UInt32 /* = kotlin.UInt */, /*7*/ passwordData: kotlinx.cinterop.CValuesRef<*>?, /*8*/ actualLength: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?, /*9*/ item: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCItemRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCItemRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCFindInternetPasswordWithPath(/*0*/ serverName: platform.darwin.ConstStringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*1*/ securityDomain: platform.darwin.ConstStringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*2*/ accountName: platform.darwin.ConstStringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*3*/ path: platform.darwin.ConstStringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*4*/ port: platform.darwin.UInt16 /* = kotlin.UShort */, /*5*/ protocol: platform.darwin.OSType /* = kotlin.UInt */, /*6*/ authType: platform.darwin.OSType /* = kotlin.UInt */, /*7*/ maxLength: platform.darwin.UInt32 /* = kotlin.UInt */, /*8*/ passwordData: kotlinx.cinterop.CValuesRef<*>?, /*9*/ actualLength: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?, /*10*/ item: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCItemRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCItemRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCFindNextItem(/*0*/ search: platform.CoreServices.KCSearchRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainSearchRef>? */, /*1*/ item: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCItemRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCItemRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCGetAttribute(/*0*/ item: platform.CoreServices.KCItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef>? */, /*1*/ attr: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCAttribute /* = platform.Security.SecKeychainAttribute */>?, /*2*/ actualLength: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCGetData(/*0*/ item: platform.CoreServices.KCItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef>? */, /*1*/ maxLength: platform.darwin.UInt32 /* = kotlin.UInt */, /*2*/ data: kotlinx.cinterop.CValuesRef<*>?, /*3*/ actualLength: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCGetDefaultKeychain(/*0*/ keychain: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCGetIndKeychain(/*0*/ index: platform.darwin.UInt16 /* = kotlin.UShort */, /*1*/ keychain: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCGetKeychain(/*0*/ item: platform.CoreServices.KCItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef>? */, /*1*/ keychain: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCGetKeychainManagerVersion(/*0*/ returnVers: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCGetKeychainName(/*0*/ keychain: platform.CoreServices.KCRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainRef>? */, /*1*/ keychainName: platform.darwin.StringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCGetStatus(/*0*/ keychain: platform.CoreServices.KCRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainRef>? */, /*1*/ keychainStatus: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCIsInteractionAllowed(): kotlin.Boolean { TODO() }

fun KCLock(/*0*/ keychain: platform.CoreServices.KCRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainRef>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCMakeAliasFromKCRef(/*0*/ keychain: platform.CoreServices.KCRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainRef>? */, /*1*/ keychainAlias: kotlinx.cinterop.CValuesRef<platform.CoreServices.AliasHandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasHandle /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasPtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasPtr /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasRecord> */> */> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCMakeKCRefFromAlias(/*0*/ keychainAlias: platform.CoreServices.AliasHandle? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasPtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasPtr /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasRecord> */> */>? */, /*1*/ keychain: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCMakeKCRefFromFSRef(/*0*/ keychainFSRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ keychain: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCNewItem(/*0*/ itemClass: platform.CoreServices.KCItemClass /* = kotlin.UInt */, /*1*/ itemCreator: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ length: platform.darwin.UInt32 /* = kotlin.UInt */, /*3*/ data: kotlinx.cinterop.CValuesRef<*>?, /*4*/ item: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCItemRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCItemRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCReleaseItem(/*0*/ item: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCItemRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCItemRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCReleaseKeychain(/*0*/ keychain: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCReleaseSearch(/*0*/ search: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCSearchRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCSearchRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainSearchRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCRemoveCallback(/*0*/ callbackProc: platform.CoreServices.KCCallbackUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.KCEvent /* = kotlin.UShort */, kotlinx.cinterop.CPointer<platform.CoreServices.KCCallbackInfo>?, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCSetAttribute(/*0*/ item: platform.CoreServices.KCItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef>? */, /*1*/ attr: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCAttribute /* = platform.Security.SecKeychainAttribute */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCSetData(/*0*/ item: platform.CoreServices.KCItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef>? */, /*1*/ length: platform.darwin.UInt32 /* = kotlin.UInt */, /*2*/ data: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCSetDefaultKeychain(/*0*/ keychain: platform.CoreServices.KCRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainRef>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCSetInteractionAllowed(/*0*/ state: kotlin.Boolean): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun KCUpdateItem(/*0*/ item: platform.CoreServices.KCItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LMGetApFontID(): platform.darwin.SInt16 /* = kotlin.Short */ { TODO() }

fun LMGetBootDrive(): platform.darwin.SInt16 /* = kotlin.Short */ { TODO() }

fun LMGetIntlSpec(): platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */ { TODO() }

fun LMGetMemErr(): platform.darwin.SInt16 /* = kotlin.Short */ { TODO() }

fun LMGetResErr(): platform.darwin.SInt16 /* = kotlin.Short */ { TODO() }

fun LMGetResLoad(): platform.darwin.UInt8 /* = kotlin.UByte */ { TODO() }

fun LMGetSysFontSize(): platform.darwin.SInt16 /* = kotlin.Short */ { TODO() }

fun LMGetSysMap(): platform.darwin.SInt16 /* = kotlin.Short */ { TODO() }

fun LMGetTmpResLoad(): platform.darwin.UInt8 /* = kotlin.UByte */ { TODO() }

fun LMSetApFontID(/*0*/ value: platform.darwin.SInt16 /* = kotlin.Short */) { TODO() }

fun LMSetBootDrive(/*0*/ value: platform.darwin.SInt16 /* = kotlin.Short */) { TODO() }

fun LMSetIntlSpec(/*0*/ value: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */) { TODO() }

fun LMSetMemErr(/*0*/ value: platform.darwin.SInt16 /* = kotlin.Short */) { TODO() }

fun LMSetResErr(/*0*/ value: platform.darwin.SInt16 /* = kotlin.Short */) { TODO() }

fun LMSetResLoad(/*0*/ value: platform.darwin.UInt8 /* = kotlin.UByte */) { TODO() }

fun LMSetSysFontFam(/*0*/ value: platform.darwin.SInt16 /* = kotlin.Short */) { TODO() }

fun LMSetSysFontSize(/*0*/ value: platform.darwin.SInt16 /* = kotlin.Short */) { TODO() }

fun LMSetSysMap(/*0*/ value: platform.darwin.SInt16 /* = kotlin.Short */) { TODO() }

fun LMSetTmpResLoad(/*0*/ value: platform.darwin.UInt8 /* = kotlin.UByte */) { TODO() }

fun LSCanRefAcceptItem(/*0*/ inItemFSRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ inTargetRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*2*/ inRoleMask: platform.CoreServices.LSRolesMask /* = kotlin.UInt */, /*3*/ inFlags: platform.CoreServices.LSAcceptanceFlags /* = kotlin.UInt */, /*4*/ outAcceptsItem: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSCanURLAcceptURL(/*0*/ inItemURL: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*1*/ inTargetURL: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*2*/ inRoleMask: platform.CoreServices.LSRolesMask /* = kotlin.UInt */, /*3*/ inFlags: platform.CoreServices.LSAcceptanceFlags /* = kotlin.UInt */, /*4*/ outAcceptsItem: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSCopyAllHandlersForURLScheme(/*0*/ inURLScheme: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun LSCopyAllRoleHandlersForContentType(/*0*/ inContentType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*1*/ inRole: platform.CoreServices.LSRolesMask /* = kotlin.UInt */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun LSCopyApplicationForMIMEType(/*0*/ inMIMEType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*1*/ inRoleMask: platform.CoreServices.LSRolesMask /* = kotlin.UInt */, /*2*/ outAppURL: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFURLRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFURLRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSCopyApplicationURLsForBundleIdentifier(/*0*/ inBundleIdentifier: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*1*/ outError: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFErrorRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFErrorRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFError> */> */>?): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun LSCopyApplicationURLsForURL(/*0*/ inURL: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*1*/ inRoleMask: platform.CoreServices.LSRolesMask /* = kotlin.UInt */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun LSCopyDefaultApplicationURLForContentType(/*0*/ inContentType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*1*/ inRoleMask: platform.CoreServices.LSRolesMask /* = kotlin.UInt */, /*2*/ outError: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFErrorRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFErrorRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFError> */> */>?): platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */ { TODO() }

fun LSCopyDefaultApplicationURLForURL(/*0*/ inURL: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*1*/ inRoleMask: platform.CoreServices.LSRolesMask /* = kotlin.UInt */, /*2*/ outError: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFErrorRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFErrorRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFError> */> */>?): platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */ { TODO() }

fun LSCopyDefaultHandlerForURLScheme(/*0*/ inURLScheme: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun LSCopyDefaultRoleHandlerForContentType(/*0*/ inContentType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*1*/ inRole: platform.CoreServices.LSRolesMask /* = kotlin.UInt */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun LSCopyDisplayNameForRef(/*0*/ inRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ outDisplayName: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFStringRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFStringRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSCopyDisplayNameForURL(/*0*/ inURL: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*1*/ outDisplayName: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFStringRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFStringRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSCopyItemAttribute(/*0*/ inItem: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ inRoles: platform.CoreServices.LSRolesMask /* = kotlin.UInt */, /*2*/ inAttributeName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ outValue: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFTypeRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFTypeRef /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSCopyItemAttributes(/*0*/ inItem: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ inRoles: platform.CoreServices.LSRolesMask /* = kotlin.UInt */, /*2*/ inAttributeNames: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */, /*3*/ outValues: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFDictionaryRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFDictionaryRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSCopyItemInfoForRef(/*0*/ inItemRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ inWhichInfo: platform.CoreServices.LSRequestedInfo /* = kotlin.UInt */, /*2*/ outItemInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.LSItemInfoRecord>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSCopyItemInfoForURL(/*0*/ inURL: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*1*/ inWhichInfo: platform.CoreServices.LSRequestedInfo /* = kotlin.UInt */, /*2*/ outItemInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.LSItemInfoRecord>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSCopyKindStringForMIMEType(/*0*/ inMIMEType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*1*/ outKindString: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFStringRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFStringRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSCopyKindStringForRef(/*0*/ inFSRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ outKindString: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFStringRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFStringRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSCopyKindStringForTypeInfo(/*0*/ inType: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ inCreator: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ inExtension: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ outKindString: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFStringRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFStringRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSCopyKindStringForURL(/*0*/ inURL: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*1*/ outKindString: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFStringRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFStringRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSFindApplicationForInfo(/*0*/ inCreator: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ inBundleID: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ inName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ outAppRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*4*/ outAppURL: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFURLRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFURLRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSGetApplicationForInfo(/*0*/ inType: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ inCreator: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ inExtension: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ inRoleMask: platform.CoreServices.LSRolesMask /* = kotlin.UInt */, /*4*/ outAppRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*5*/ outAppURL: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFURLRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFURLRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSGetApplicationForItem(/*0*/ inItemRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ inRoleMask: platform.CoreServices.LSRolesMask /* = kotlin.UInt */, /*2*/ outAppRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*3*/ outAppURL: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFURLRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFURLRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSGetApplicationForURL(/*0*/ inURL: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*1*/ inRoleMask: platform.CoreServices.LSRolesMask /* = kotlin.UInt */, /*2*/ outAppRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*3*/ outAppURL: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFURLRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFURLRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSGetExtensionInfo(/*0*/ inNameLen: platform.darwin.UniCharCount /* = kotlin.ULong */, /*1*/ inNameBuffer: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*2*/ outExtStartIndex: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.UniCharCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSGetHandlerOptionsForContentType(/*0*/ inContentType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreServices.LSHandlerOptions /* = kotlin.UInt */ { TODO() }

fun LSOpenApplication(/*0*/ appParams: kotlinx.cinterop.CValuesRef<platform.CoreServices.LSApplicationParameters>?, /*1*/ outPSN: kotlinx.cinterop.CValuesRef<platform.darwin.ProcessSerialNumber>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSOpenCFURLRef(/*0*/ inURL: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*1*/ outLaunchedURL: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFURLRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFURLRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSOpenFSRef(/*0*/ inRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ outLaunchedRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSOpenFromRefSpec(/*0*/ inLaunchSpec: kotlinx.cinterop.CValuesRef<platform.CoreServices.LSLaunchFSRefSpec>?, /*1*/ outLaunchedRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSOpenFromURLSpec(/*0*/ inLaunchSpec: kotlinx.cinterop.CValuesRef<platform.CoreServices.LSLaunchURLSpec>?, /*1*/ outLaunchedURL: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFURLRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFURLRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSOpenItemsWithRole(/*0*/ inItems: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ inItemCount: platform.CoreFoundation.CFIndex /* = kotlin.Long */, /*2*/ inRole: platform.CoreServices.LSRolesMask /* = kotlin.UInt */, /*3*/ inAEParam: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEKeyDesc>?, /*4*/ inAppParams: kotlinx.cinterop.CValuesRef<platform.CoreServices.LSApplicationParameters>?, /*5*/ outPSNs: kotlinx.cinterop.CValuesRef<platform.darwin.ProcessSerialNumber>?, /*6*/ inMaxPSNCount: platform.CoreFoundation.CFIndex /* = kotlin.Long */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSOpenURLsWithRole(/*0*/ inURLs: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */, /*1*/ inRole: platform.CoreServices.LSRolesMask /* = kotlin.UInt */, /*2*/ inAEParam: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEKeyDesc>?, /*3*/ inAppParams: kotlinx.cinterop.CValuesRef<platform.CoreServices.LSApplicationParameters>?, /*4*/ outPSNs: kotlinx.cinterop.CValuesRef<platform.darwin.ProcessSerialNumber>?, /*5*/ inMaxPSNCount: platform.CoreFoundation.CFIndex /* = kotlin.Long */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSRegisterFSRef(/*0*/ inRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ inUpdate: kotlin.Boolean): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSRegisterURL(/*0*/ inURL: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*1*/ inUpdate: kotlin.Boolean): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSSetDefaultHandlerForURLScheme(/*0*/ inURLScheme: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*1*/ inHandlerBundleID: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSSetDefaultRoleHandlerForContentType(/*0*/ inContentType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*1*/ inRole: platform.CoreServices.LSRolesMask /* = kotlin.UInt */, /*2*/ inHandlerBundleID: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSSetExtensionHiddenForRef(/*0*/ inRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ inHide: kotlin.Boolean): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSSetExtensionHiddenForURL(/*0*/ inURL: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*1*/ inHide: kotlin.Boolean): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSSetHandlerOptionsForContentType(/*0*/ inContentType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*1*/ inOptions: platform.CoreServices.LSHandlerOptions /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSSetItemAttribute(/*0*/ inItem: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ inRoles: platform.CoreServices.LSRolesMask /* = kotlin.UInt */, /*2*/ inAttributeName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ inValue: platform.CoreFoundation.CFTypeRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSSharedFileListAddObserver(/*0*/ inList: platform.CoreServices.LSSharedFileListRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListRef>? */, /*1*/ inRunloop: platform.CoreFoundation.CFRunLoopRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFRunLoop>? */, /*2*/ inRunloopMode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ callback: platform.CoreServices.LSSharedFileListChangedProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.LSSharedFileListRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListRef>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*4*/ context: kotlinx.cinterop.CValuesRef<*>?) { TODO() }

fun LSSharedFileListCopyProperty(/*0*/ inList: platform.CoreServices.LSSharedFileListRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListRef>? */, /*1*/ inPropertyName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFTypeRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun LSSharedFileListCopySnapshot(/*0*/ inList: platform.CoreServices.LSSharedFileListRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListRef>? */, /*1*/ outSnapshotSeed: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun LSSharedFileListCreate(/*0*/ inAllocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ inListType: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ listOptions: platform.CoreFoundation.CFTypeRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.CoreServices.LSSharedFileListRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListRef>? */ { TODO() }

fun LSSharedFileListGetSeedValue(/*0*/ inList: platform.CoreServices.LSSharedFileListRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListRef>? */): platform.darwin.UInt32 /* = kotlin.UInt */ { TODO() }

fun LSSharedFileListGetTypeID(): platform.CoreFoundation.CFTypeID /* = kotlin.ULong */ { TODO() }

fun LSSharedFileListInsertItemFSRef(/*0*/ inList: platform.CoreServices.LSSharedFileListRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListRef>? */, /*1*/ insertAfterThisItem: platform.CoreServices.LSSharedFileListItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListItemRef>? */, /*2*/ inDisplayName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ inIconRef: platform.CoreServices.IconRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef>? */, /*4*/ inFSRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*5*/ inPropertiesToSet: platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */, /*6*/ inPropertiesToClear: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */): platform.CoreServices.LSSharedFileListItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListItemRef>? */ { TODO() }

fun LSSharedFileListInsertItemURL(/*0*/ inList: platform.CoreServices.LSSharedFileListRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListRef>? */, /*1*/ insertAfterThisItem: platform.CoreServices.LSSharedFileListItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListItemRef>? */, /*2*/ inDisplayName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ inIconRef: platform.CoreServices.IconRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef>? */, /*4*/ inURL: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*5*/ inPropertiesToSet: platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */, /*6*/ inPropertiesToClear: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */): platform.CoreServices.LSSharedFileListItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListItemRef>? */ { TODO() }

fun LSSharedFileListItemCopyDisplayName(/*0*/ inItem: platform.CoreServices.LSSharedFileListItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListItemRef>? */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun LSSharedFileListItemCopyIconRef(/*0*/ inItem: platform.CoreServices.LSSharedFileListItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListItemRef>? */): platform.CoreServices.IconRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef>? */ { TODO() }

fun LSSharedFileListItemCopyProperty(/*0*/ inItem: platform.CoreServices.LSSharedFileListItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListItemRef>? */, /*1*/ inPropertyName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFTypeRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun LSSharedFileListItemCopyResolvedURL(/*0*/ inItem: platform.CoreServices.LSSharedFileListItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListItemRef>? */, /*1*/ inFlags: platform.CoreServices.LSSharedFileListResolutionFlags /* = kotlin.UInt */, /*2*/ outError: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFErrorRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFErrorRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFError> */> */>?): platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */ { TODO() }

fun LSSharedFileListItemGetID(/*0*/ inItem: platform.CoreServices.LSSharedFileListItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListItemRef>? */): platform.darwin.UInt32 /* = kotlin.UInt */ { TODO() }

fun LSSharedFileListItemGetTypeID(): platform.CoreFoundation.CFTypeID /* = kotlin.ULong */ { TODO() }

fun LSSharedFileListItemMove(/*0*/ inList: platform.CoreServices.LSSharedFileListRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListRef>? */, /*1*/ inItem: platform.CoreServices.LSSharedFileListItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListItemRef>? */, /*2*/ inMoveAfterItem: platform.CoreServices.LSSharedFileListItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListItemRef>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSSharedFileListItemRemove(/*0*/ inList: platform.CoreServices.LSSharedFileListRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListRef>? */, /*1*/ inItem: platform.CoreServices.LSSharedFileListItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListItemRef>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSSharedFileListItemResolve(/*0*/ inItem: platform.CoreServices.LSSharedFileListItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListItemRef>? */, /*1*/ inFlags: platform.CoreServices.LSSharedFileListResolutionFlags /* = kotlin.UInt */, /*2*/ outURL: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFURLRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFURLRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL> */> */>?, /*3*/ outRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSSharedFileListItemSetProperty(/*0*/ inItem: platform.CoreServices.LSSharedFileListItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListItemRef>? */, /*1*/ inPropertyName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ inPropertyData: platform.CoreFoundation.CFTypeRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSSharedFileListRemoveAllItems(/*0*/ inList: platform.CoreServices.LSSharedFileListRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListRef>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSSharedFileListRemoveObserver(/*0*/ inList: platform.CoreServices.LSSharedFileListRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListRef>? */, /*1*/ inRunloop: platform.CoreFoundation.CFRunLoopRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFRunLoop>? */, /*2*/ inRunloopMode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ callback: platform.CoreServices.LSSharedFileListChangedProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.LSSharedFileListRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListRef>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*4*/ context: kotlinx.cinterop.CValuesRef<*>?) { TODO() }

fun LSSharedFileListSetAuthorization(/*0*/ inList: platform.CoreServices.LSSharedFileListRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListRef>? */, /*1*/ inAuthorization: platform.Security.AuthorizationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.AuthorizationOpaqueRef>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LSSharedFileListSetProperty(/*0*/ inList: platform.CoreServices.LSSharedFileListRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLSSharedFileListRef>? */, /*1*/ inPropertyName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ inPropertyData: platform.CoreFoundation.CFTypeRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LoadResource(/*0*/ theResource: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) { TODO() }

fun LocaleCountNames(/*0*/ locale: platform.CoreServices.LocaleRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLocaleRef>? */, /*1*/ opVariant: platform.CoreServices.LocaleOperationVariant /* = kotlin.UInt */, /*2*/ nameMask: platform.CoreServices.LocaleNameMask /* = kotlin.UInt */, /*3*/ nameCount: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LocaleGetIndName(/*0*/ locale: platform.CoreServices.LocaleRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLocaleRef>? */, /*1*/ opVariant: platform.CoreServices.LocaleOperationVariant /* = kotlin.UInt */, /*2*/ nameMask: platform.CoreServices.LocaleNameMask /* = kotlin.UInt */, /*3*/ nameIndex: platform.darwin.ItemCount /* = kotlin.ULong */, /*4*/ maxNameLen: platform.darwin.UniCharCount /* = kotlin.ULong */, /*5*/ actualNameLen: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.UniCharCount /* = kotlin.ULong */> */>?, /*6*/ displayName: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*7*/ displayLocale: kotlinx.cinterop.CValuesRef<platform.CoreServices.LocaleRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.LocaleRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLocaleRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LocaleGetName(/*0*/ locale: platform.CoreServices.LocaleRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLocaleRef>? */, /*1*/ opVariant: platform.CoreServices.LocaleOperationVariant /* = kotlin.UInt */, /*2*/ nameMask: platform.CoreServices.LocaleNameMask /* = kotlin.UInt */, /*3*/ displayLocale: platform.CoreServices.LocaleRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLocaleRef>? */, /*4*/ maxNameLen: platform.darwin.UniCharCount /* = kotlin.ULong */, /*5*/ actualNameLen: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.UniCharCount /* = kotlin.ULong */> */>?, /*6*/ displayName: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LocaleOperationCountLocales(/*0*/ opClass: platform.CoreServices.LocaleOperationClass /* = kotlin.UInt */, /*1*/ localeCount: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LocaleOperationCountNames(/*0*/ opClass: platform.CoreServices.LocaleOperationClass /* = kotlin.UInt */, /*1*/ nameCount: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LocaleOperationGetIndName(/*0*/ opClass: platform.CoreServices.LocaleOperationClass /* = kotlin.UInt */, /*1*/ nameIndex: platform.darwin.ItemCount /* = kotlin.ULong */, /*2*/ maxNameLen: platform.darwin.UniCharCount /* = kotlin.ULong */, /*3*/ actualNameLen: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.UniCharCount /* = kotlin.ULong */> */>?, /*4*/ displayName: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*5*/ displayLocale: kotlinx.cinterop.CValuesRef<platform.CoreServices.LocaleRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.LocaleRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLocaleRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LocaleOperationGetLocales(/*0*/ opClass: platform.CoreServices.LocaleOperationClass /* = kotlin.UInt */, /*1*/ maxLocaleCount: platform.darwin.ItemCount /* = kotlin.ULong */, /*2*/ actualLocaleCount: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?, /*3*/ localeVariantList: kotlinx.cinterop.CValuesRef<platform.CoreServices.LocaleAndVariant>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LocaleOperationGetName(/*0*/ opClass: platform.CoreServices.LocaleOperationClass /* = kotlin.UInt */, /*1*/ displayLocale: platform.CoreServices.LocaleRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLocaleRef>? */, /*2*/ maxNameLen: platform.darwin.UniCharCount /* = kotlin.ULong */, /*3*/ actualNameLen: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.UniCharCount /* = kotlin.ULong */> */>?, /*4*/ displayName: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LocaleRefFromLangOrRegionCode(/*0*/ lang: platform.darwin.LangCode /* = kotlin.Short */, /*1*/ region: platform.darwin.RegionCode /* = kotlin.Short */, /*2*/ locale: kotlinx.cinterop.CValuesRef<platform.CoreServices.LocaleRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.LocaleRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLocaleRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LocaleRefFromLocaleString(/*0*/ localeString: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ locale: kotlinx.cinterop.CValuesRef<platform.CoreServices.LocaleRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.LocaleRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLocaleRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LocaleRefGetPartString(/*0*/ locale: platform.CoreServices.LocaleRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLocaleRef>? */, /*1*/ partMask: platform.CoreServices.LocalePartMask /* = kotlin.UInt */, /*2*/ maxStringLen: platform.darwin.ByteCount /* = kotlin.ULong */, /*3*/ partString: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun LocaleStringToLangAndRegionCodes(/*0*/ localeString: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ lang: kotlinx.cinterop.CValuesRef<platform.darwin.LangCodeVar /* = kotlinx.cinterop.ShortVarOf<platform.darwin.LangCode /* = kotlin.Short */> */>?, /*2*/ region: kotlinx.cinterop.CValuesRef<platform.darwin.RegionCodeVar /* = kotlinx.cinterop.ShortVarOf<platform.darwin.RegionCode /* = kotlin.Short */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun Long2Fix(/*0*/ x: platform.darwin.SInt32 /* = kotlin.Int */): platform.darwin.Fixed /* = kotlin.Int */ { TODO() }

fun MDCopyLabelKinds(): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun MDCopyLabelWithUUID(/*0*/ labelUUID: platform.CoreFoundation.CFUUIDRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFUUID>? */): platform.CoreServices.MDLabelRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDLabel>? */ { TODO() }

fun MDCopyLabelsMatchingExpression(/*0*/ simpleQueryString: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun MDCopyLabelsWithKind(/*0*/ kind: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun MDItemCopyAttribute(/*0*/ item: platform.CoreServices.MDItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDItem>? */, /*1*/ name: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFTypeRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun MDItemCopyAttributeNames(/*0*/ item: platform.CoreServices.MDItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDItem>? */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun MDItemCopyAttributes(/*0*/ item: platform.CoreServices.MDItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDItem>? */, /*1*/ names: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */): platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */ { TODO() }

fun MDItemCopyLabels(/*0*/ item: platform.CoreServices.MDItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDItem>? */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun MDItemCreate(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ path: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreServices.MDItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDItem>? */ { TODO() }

fun MDItemCreateWithURL(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ url: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */): platform.CoreServices.MDItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDItem>? */ { TODO() }

fun MDItemGetTypeID(): platform.CoreFoundation.CFTypeID /* = kotlin.ULong */ { TODO() }

fun MDItemRemoveLabel(/*0*/ item: platform.CoreServices.MDItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDItem>? */, /*1*/ label: platform.CoreServices.MDLabelRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDLabel>? */): kotlin.Boolean { TODO() }

fun MDItemSetLabel(/*0*/ item: platform.CoreServices.MDItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDItem>? */, /*1*/ label: platform.CoreServices.MDLabelRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDLabel>? */): kotlin.Boolean { TODO() }

fun MDItemsCopyAttributes(/*0*/ items: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */, /*1*/ names: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun MDItemsCreateWithURLs(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ urls: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun MDLabelCopyAttribute(/*0*/ label: platform.CoreServices.MDLabelRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDLabel>? */, /*1*/ name: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFTypeRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun MDLabelCopyAttributeName(/*0*/ label: platform.CoreServices.MDLabelRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDLabel>? */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun MDLabelCreate(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ displayName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ kind: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ domain: platform.CoreServices.MDLabelDomain): platform.CoreServices.MDLabelRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDLabel>? */ { TODO() }

fun MDLabelDelete(/*0*/ label: platform.CoreServices.MDLabelRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDLabel>? */): kotlin.Boolean { TODO() }

fun MDLabelGetTypeID(): platform.CoreFoundation.CFTypeID /* = kotlin.ULong */ { TODO() }

fun MDLabelSetAttributes(/*0*/ label: platform.CoreServices.MDLabelRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDLabel>? */, /*1*/ attrs: platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */): kotlin.Boolean { TODO() }

fun MDQueryCopyQueryString(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun MDQueryCopySortingAttributes(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun MDQueryCopyValueListAttributes(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun MDQueryCopyValuesOfAttribute(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */, /*1*/ name: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun MDQueryCreate(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ queryString: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ valueListAttrs: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */, /*3*/ sortingAttrs: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */): platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */ { TODO() }

fun MDQueryCreateForItems(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ queryString: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ valueListAttrs: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */, /*3*/ sortingAttrs: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */, /*4*/ items: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */): platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */ { TODO() }

fun MDQueryCreateSubset(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */, /*2*/ queryString: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ valueListAttrs: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */, /*4*/ sortingAttrs: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */): platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */ { TODO() }

fun MDQueryDisableUpdates(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */) { TODO() }

fun MDQueryEnableUpdates(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */) { TODO() }

fun MDQueryExecute(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */, /*1*/ optionFlags: platform.CoreFoundation.CFOptionFlags /* = kotlin.ULong */): kotlin.Boolean { TODO() }

fun MDQueryGetAttributeValueOfResultAtIndex(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */, /*1*/ name: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ idx: platform.CoreFoundation.CFIndex /* = kotlin.Long */): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun MDQueryGetBatchingParameters(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */): kotlinx.cinterop.CValue<platform.CoreServices.MDQueryBatchingParams> { TODO() }

fun MDQueryGetCountOfResultsWithAttributeValue(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */, /*1*/ name: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ value: platform.CoreFoundation.CFTypeRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.CoreFoundation.CFIndex /* = kotlin.Long */ { TODO() }

fun MDQueryGetIndexOfResult(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */, /*1*/ result: kotlinx.cinterop.CValuesRef<*>?): platform.CoreFoundation.CFIndex /* = kotlin.Long */ { TODO() }

fun MDQueryGetResultAtIndex(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */, /*1*/ idx: platform.CoreFoundation.CFIndex /* = kotlin.Long */): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun MDQueryGetResultCount(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */): platform.CoreFoundation.CFIndex /* = kotlin.Long */ { TODO() }

fun MDQueryGetTypeID(): platform.CoreFoundation.CFTypeID /* = kotlin.ULong */ { TODO() }

fun MDQueryIsGatheringComplete(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */): kotlin.Boolean { TODO() }

fun MDQuerySetBatchingParameters(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */, /*1*/ params: kotlinx.cinterop.CValue<platform.CoreServices.MDQueryBatchingParams>) { TODO() }

fun MDQuerySetCreateResultFunction(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */, /*1*/ func: platform.CoreServices.MDQueryCreateResultFunction? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */, platform.CoreServices.MDItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDItem>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */, /*2*/ context: kotlinx.cinterop.CValuesRef<*>?, /*3*/ cb: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFArrayCallBacks>?) { TODO() }

fun MDQuerySetCreateValueFunction(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */, /*1*/ func: platform.CoreServices.MDQueryCreateValueFunction? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */, platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, platform.CoreFoundation.CFTypeRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */, /*2*/ context: kotlinx.cinterop.CValuesRef<*>?, /*3*/ cb: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFArrayCallBacks>?) { TODO() }

fun MDQuerySetDispatchQueue(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */, /*1*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */) { TODO() }

fun MDQuerySetMaxCount(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */, /*1*/ size: platform.CoreFoundation.CFIndex /* = kotlin.Long */) { TODO() }

fun MDQuerySetSearchScope(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */, /*1*/ scopeDirectories: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */, /*2*/ scopeOptions: platform.darwin.OptionBits /* = kotlin.UInt */) { TODO() }

fun MDQuerySetSortComparator(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */, /*1*/ comparator: platform.CoreServices.MDQuerySortComparatorFunction? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CArrayPointer<platform.CoreFoundation.CFTypeRefVar>? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFTypeRef /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */>>? */, kotlinx.cinterop.CArrayPointer<platform.CoreFoundation.CFTypeRefVar>? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFTypeRef /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */>>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreFoundation.CFComparisonResult /* = kotlin.Long */>>? */, /*2*/ context: kotlinx.cinterop.CValuesRef<*>?) { TODO() }

fun MDQuerySetSortComparatorBlock(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */, /*1*/ comparator: ((kotlinx.cinterop.CArrayPointer<platform.CoreFoundation.CFTypeRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFTypeRef /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFTypeRef /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */>>? */, kotlinx.cinterop.CArrayPointer<platform.CoreFoundation.CFTypeRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFTypeRef /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFTypeRef /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */>>? */) -> platform.CoreFoundation.CFComparisonResult /* = kotlin.Long */)?) { TODO() }

fun MDQuerySetSortOptionFlagsForAttribute(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */, /*1*/ fieldName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ flags: platform.posix.uint32_t /* = kotlin.UInt */): kotlin.Boolean { TODO() }

fun MDQuerySetSortOrder(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */, /*1*/ sortingAttrs: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */): kotlin.Boolean { TODO() }

fun MDQueryStop(/*0*/ query: platform.CoreServices.MDQueryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDQuery>? */) { TODO() }

fun MDSchemaCopyAllAttributes(): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun MDSchemaCopyAttributesForContentType(/*0*/ contentTypeUTI: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */ { TODO() }

fun MDSchemaCopyDisplayDescriptionForAttribute(/*0*/ name: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun MDSchemaCopyDisplayNameForAttribute(/*0*/ name: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun MDSchemaCopyMetaAttributesForAttribute(/*0*/ name: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */ { TODO() }

fun MPAllocate(/*0*/ size: platform.darwin.ByteCount /* = kotlin.ULong */): platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun MPAllocateAligned(/*0*/ size: platform.darwin.ByteCount /* = kotlin.ULong */, /*1*/ alignment: platform.darwin.UInt8 /* = kotlin.UByte */, /*2*/ options: platform.darwin.OptionBits /* = kotlin.UInt */): platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun MPAllocateTaskStorageIndex(/*0*/ taskIndex: kotlinx.cinterop.CValuesRef<platform.CoreServices.TaskStorageIndexVar /* = kotlinx.cinterop.ULongVarOf<platform.CoreServices.TaskStorageIndex /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPArmTimer(/*0*/ timerID: platform.CoreServices.MPTimerID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTimerID>? */, /*1*/ expirationTime: kotlinx.cinterop.CValuesRef<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */>?, /*2*/ options: platform.darwin.OptionBits /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPBlockClear(/*0*/ address: platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*1*/ size: platform.darwin.ByteCount /* = kotlin.ULong */) { TODO() }

fun MPBlockCopy(/*0*/ source: platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*1*/ destination: platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*2*/ size: platform.darwin.ByteCount /* = kotlin.ULong */) { TODO() }

fun MPCancelTimer(/*0*/ timerID: platform.CoreServices.MPTimerID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTimerID>? */, /*1*/ timeRemaining: kotlinx.cinterop.CValuesRef<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPCauseNotification(/*0*/ notificationID: platform.CoreServices.MPNotificationID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPNotificationID>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPCreateCriticalRegion(/*0*/ criticalRegion: kotlinx.cinterop.CValuesRef<platform.CoreServices.MPCriticalRegionIDVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPCriticalRegionID /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPCriticalRegionID> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPCreateEvent(/*0*/ event: kotlinx.cinterop.CValuesRef<platform.CoreServices.MPEventIDVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPEventID /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPEventID> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPCreateNotification(/*0*/ notificationID: kotlinx.cinterop.CValuesRef<platform.CoreServices.MPNotificationIDVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPNotificationID /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPNotificationID> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPCreateQueue(/*0*/ queue: kotlinx.cinterop.CValuesRef<platform.CoreServices.MPQueueIDVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPQueueID /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPQueueID> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPCreateSemaphore(/*0*/ maximumValue: platform.CoreServices.MPSemaphoreCount /* = kotlin.ULong */, /*1*/ initialValue: platform.CoreServices.MPSemaphoreCount /* = kotlin.ULong */, /*2*/ semaphore: kotlinx.cinterop.CValuesRef<platform.CoreServices.MPSemaphoreIDVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPSemaphoreID /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPSemaphoreID> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPCreateTask(/*0*/ entryPoint: platform.CoreServices.TaskProc? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */, /*1*/ parameter: kotlinx.cinterop.CValuesRef<*>?, /*2*/ stackSize: platform.darwin.ByteCount /* = kotlin.ULong */, /*3*/ notifyQueue: platform.CoreServices.MPQueueID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPQueueID>? */, /*4*/ terminationParameter1: kotlinx.cinterop.CValuesRef<*>?, /*5*/ terminationParameter2: kotlinx.cinterop.CValuesRef<*>?, /*6*/ options: platform.CoreServices.MPTaskOptions /* = kotlin.UInt */, /*7*/ task: kotlinx.cinterop.CValuesRef<platform.CoreServices.MPTaskIDVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPTaskID /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPCreateTimer(/*0*/ timerID: kotlinx.cinterop.CValuesRef<platform.CoreServices.MPTimerIDVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPTimerID /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTimerID> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPCurrentTaskID(): platform.CoreServices.MPTaskID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>? */ { TODO() }

fun MPDeallocateTaskStorageIndex(/*0*/ taskIndex: platform.CoreServices.TaskStorageIndex /* = kotlin.ULong */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPDelayUntil(/*0*/ expirationTime: kotlinx.cinterop.CValuesRef<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPDeleteCriticalRegion(/*0*/ criticalRegion: platform.CoreServices.MPCriticalRegionID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPCriticalRegionID>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPDeleteEvent(/*0*/ event: platform.CoreServices.MPEventID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPEventID>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPDeleteNotification(/*0*/ notificationID: platform.CoreServices.MPNotificationID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPNotificationID>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPDeleteQueue(/*0*/ queue: platform.CoreServices.MPQueueID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPQueueID>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPDeleteSemaphore(/*0*/ semaphore: platform.CoreServices.MPSemaphoreID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPSemaphoreID>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPDeleteTimer(/*0*/ timerID: platform.CoreServices.MPTimerID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTimerID>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPDisposeTaskException(/*0*/ task: platform.CoreServices.MPTaskID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>? */, /*1*/ action: platform.darwin.OptionBits /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPEnterCriticalRegion(/*0*/ criticalRegion: platform.CoreServices.MPCriticalRegionID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPCriticalRegionID>? */, /*1*/ timeout: platform.darwin.Duration /* = kotlin.Int */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPExit(/*0*/ status: platform.darwin.OSStatus /* = kotlin.Int */) { TODO() }

fun MPExitCriticalRegion(/*0*/ criticalRegion: platform.CoreServices.MPCriticalRegionID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPCriticalRegionID>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPExtractTaskState(/*0*/ task: platform.CoreServices.MPTaskID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>? */, /*1*/ kind: platform.CoreServices.MPTaskStateKind /* = kotlin.UInt */, /*2*/ info: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPFree(/*0*/ `object`: platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) { TODO() }

fun MPGetAllocatedBlockSize(/*0*/ `object`: platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.darwin.ByteCount /* = kotlin.ULong */ { TODO() }

fun MPGetNextCpuID(/*0*/ owningCoherenceID: platform.CoreServices.MPCoherenceID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPCoherenceID>? */, /*1*/ cpuID: kotlinx.cinterop.CValuesRef<platform.CoreServices.MPCpuIDVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPCpuID /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPCpuID> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPGetNextTaskID(/*0*/ owningProcessID: platform.CoreServices.MPProcessID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPProcessID>? */, /*1*/ taskID: kotlinx.cinterop.CValuesRef<platform.CoreServices.MPTaskIDVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.MPTaskID /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPGetTaskStorageValue(/*0*/ taskIndex: platform.CoreServices.TaskStorageIndex /* = kotlin.ULong */): platform.CoreServices.TaskStorageValue? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun MPModifyNotification(/*0*/ notificationID: platform.CoreServices.MPNotificationID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPNotificationID>? */, /*1*/ anID: platform.CoreServices.MPOpaqueID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPOpaqueID>? */, /*2*/ notifyParam1: kotlinx.cinterop.CValuesRef<*>?, /*3*/ notifyParam2: kotlinx.cinterop.CValuesRef<*>?, /*4*/ notifyParam3: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPModifyNotificationParameters(/*0*/ notificationID: platform.CoreServices.MPNotificationID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPNotificationID>? */, /*1*/ kind: platform.CoreServices.MPOpaqueIDClass /* = kotlin.UInt */, /*2*/ notifyParam1: kotlinx.cinterop.CValuesRef<*>?, /*3*/ notifyParam2: kotlinx.cinterop.CValuesRef<*>?, /*4*/ notifyParam3: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPNotifyQueue(/*0*/ queue: platform.CoreServices.MPQueueID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPQueueID>? */, /*1*/ param1: kotlinx.cinterop.CValuesRef<*>?, /*2*/ param2: kotlinx.cinterop.CValuesRef<*>?, /*3*/ param3: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPProcessors(): platform.darwin.ItemCount /* = kotlin.ULong */ { TODO() }

fun MPProcessorsScheduled(): platform.darwin.ItemCount /* = kotlin.ULong */ { TODO() }

fun MPRegisterDebugger(/*0*/ queue: platform.CoreServices.MPQueueID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPQueueID>? */, /*1*/ level: platform.CoreServices.MPDebuggerLevel /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPRemoteCall(/*0*/ remoteProc: platform.CoreServices.MPRemoteProcedure? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */, /*1*/ parameter: kotlinx.cinterop.CValuesRef<*>?, /*2*/ context: platform.CoreServices.MPRemoteContext /* = kotlin.UByte */): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun MPRemoteCallCFM(/*0*/ remoteProc: platform.CoreServices.MPRemoteProcedure? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */, /*1*/ parameter: kotlinx.cinterop.CValuesRef<*>?, /*2*/ context: platform.CoreServices.MPRemoteContext /* = kotlin.UByte */): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun MPSetEvent(/*0*/ event: platform.CoreServices.MPEventID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPEventID>? */, /*1*/ flags: platform.CoreServices.MPEventFlags /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPSetExceptionHandler(/*0*/ task: platform.CoreServices.MPTaskID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>? */, /*1*/ exceptionQ: platform.CoreServices.MPQueueID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPQueueID>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPSetQueueReserve(/*0*/ queue: platform.CoreServices.MPQueueID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPQueueID>? */, /*1*/ count: platform.darwin.ItemCount /* = kotlin.ULong */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPSetTaskState(/*0*/ task: platform.CoreServices.MPTaskID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>? */, /*1*/ kind: platform.CoreServices.MPTaskStateKind /* = kotlin.UInt */, /*2*/ info: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPSetTaskStorageValue(/*0*/ taskIndex: platform.CoreServices.TaskStorageIndex /* = kotlin.ULong */, /*1*/ value: platform.CoreServices.TaskStorageValue? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPSetTaskType(/*0*/ task: platform.CoreServices.MPTaskID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>? */, /*1*/ taskType: platform.darwin.OSType /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPSetTaskWeight(/*0*/ task: platform.CoreServices.MPTaskID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>? */, /*1*/ weight: platform.CoreServices.MPTaskWeight /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPSetTimerNotify(/*0*/ timerID: platform.CoreServices.MPTimerID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTimerID>? */, /*1*/ anID: platform.CoreServices.MPOpaqueID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPOpaqueID>? */, /*2*/ notifyParam1: kotlinx.cinterop.CValuesRef<*>?, /*3*/ notifyParam2: kotlinx.cinterop.CValuesRef<*>?, /*4*/ notifyParam3: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPSignalSemaphore(/*0*/ semaphore: platform.CoreServices.MPSemaphoreID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPSemaphoreID>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPTaskIsPreemptive(/*0*/ taskID: platform.CoreServices.MPTaskID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>? */): kotlin.Boolean { TODO() }

fun MPTerminateTask(/*0*/ task: platform.CoreServices.MPTaskID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>? */, /*1*/ terminationStatus: platform.darwin.OSStatus /* = kotlin.Int */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPThrowException(/*0*/ task: platform.CoreServices.MPTaskID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPTaskID>? */, /*1*/ kind: platform.CoreServices.MPExceptionKind /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPUnregisterDebugger(/*0*/ queue: platform.CoreServices.MPQueueID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPQueueID>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPWaitForEvent(/*0*/ event: platform.CoreServices.MPEventID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPEventID>? */, /*1*/ flags: kotlinx.cinterop.CValuesRef<platform.CoreServices.MPEventFlagsVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.MPEventFlags /* = kotlin.UInt */> */>?, /*2*/ timeout: platform.darwin.Duration /* = kotlin.Int */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPWaitOnQueue(/*0*/ queue: platform.CoreServices.MPQueueID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPQueueID>? */, /*1*/ param1: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?, /*2*/ param2: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?, /*3*/ param3: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?, /*4*/ timeout: platform.darwin.Duration /* = kotlin.Int */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPWaitOnSemaphore(/*0*/ semaphore: platform.CoreServices.MPSemaphoreID? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueMPSemaphoreID>? */, /*1*/ timeout: platform.darwin.Duration /* = kotlin.Int */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun MPYield() { TODO() }

fun MaximumProcessorSpeed(): kotlin.Short { TODO() }

fun MemError(): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun Microseconds(/*0*/ microTickCount: kotlinx.cinterop.CValuesRef<platform.darwin.UnsignedWide>?) { TODO() }

fun MinimumProcessorSpeed(): kotlin.Short { TODO() }

fun Munger(/*0*/ h: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*1*/ offset: kotlin.Long, /*2*/ ptr1: kotlinx.cinterop.CValuesRef<*>?, /*3*/ len1: kotlin.Long, /*4*/ ptr2: kotlinx.cinterop.CValuesRef<*>?, /*5*/ len2: kotlin.Long): kotlin.Long { TODO() }

fun NanosecondsToAbsolute(/*0*/ nanoseconds: kotlinx.cinterop.CValue<platform.CoreServices.Nanoseconds /* = platform.darwin.UnsignedWide */>): kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */> { TODO() }

fun NanosecondsToDuration(/*0*/ theNanoseconds: kotlinx.cinterop.CValue<platform.CoreServices.Nanoseconds /* = platform.darwin.UnsignedWide */>): platform.darwin.Duration /* = kotlin.Int */ { TODO() }

fun NearestMacTextEncodings(/*0*/ generalEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */, /*1*/ bestMacEncoding: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, /*2*/ alternateMacEncoding: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun NewAECoerceDescUPP(/*0*/ userRoutine: platform.CoreServices.AECoerceDescProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType /* = kotlin.UInt */, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.CoreServices.AECoerceDescUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType /* = kotlin.UInt */, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */ { TODO() }

fun NewAECoercePtrUPP(/*0*/ userRoutine: platform.CoreServices.AECoercePtrProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.Size /* = kotlin.Long */, platform.CoreServices.DescType /* = kotlin.UInt */, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.CoreServices.AECoercePtrUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.Size /* = kotlin.Long */, platform.CoreServices.DescType /* = kotlin.UInt */, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */ { TODO() }

fun NewAEDisposeExternalUPP(/*0*/ userRoutine: platform.CoreServices.AEDisposeExternalProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.Size /* = kotlin.Long */, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */): platform.CoreServices.AEDisposeExternalUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.Size /* = kotlin.Long */, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */ { TODO() }

fun NewAEEventHandlerUPP(/*0*/ userRoutine: platform.CoreServices.AEEventHandlerProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.CoreServices.AEEventHandlerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, kotlinx.cinterop.CPointer<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */ { TODO() }

fun NewAVLCompareItemsUPP(/*0*/ userRoutine: platform.CoreServices.AVLCompareItemsProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AVLTreePtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.AVLNodeType /* = kotlin.UShort */) -> platform.darwin.SInt32 /* = kotlin.Int */>>? */): platform.CoreServices.AVLCompareItemsUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AVLTreePtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.AVLNodeType /* = kotlin.UShort */) -> platform.darwin.SInt32 /* = kotlin.Int */>>? */ { TODO() }

fun NewAVLDisposeItemUPP(/*0*/ userRoutine: platform.CoreServices.AVLDisposeItemProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AVLTreePtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */): platform.CoreServices.AVLDisposeItemUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AVLTreePtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */ { TODO() }

fun NewAVLItemSizeUPP(/*0*/ userRoutine: platform.CoreServices.AVLItemSizeProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AVLTreePtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.ByteCount /* = kotlin.ULong */>>? */): platform.CoreServices.AVLItemSizeUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AVLTreePtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.ByteCount /* = kotlin.ULong */>>? */ { TODO() }

fun NewAVLWalkUPP(/*0*/ userRoutine: platform.CoreServices.AVLWalkProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AVLTreePtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.AVLVisitStage /* = kotlin.UShort */, platform.CoreServices.AVLNodeType /* = kotlin.UShort */, platform.darwin.UInt32 /* = kotlin.UInt */, platform.darwin.SInt32 /* = kotlin.Int */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.CoreServices.AVLWalkUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.AVLTreePtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AVLTreeStruct>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.AVLVisitStage /* = kotlin.UShort */, platform.CoreServices.AVLNodeType /* = kotlin.UShort */, platform.darwin.UInt32 /* = kotlin.UInt */, platform.darwin.SInt32 /* = kotlin.Int */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */ { TODO() }

fun NewCollection(): platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */ { TODO() }

fun NewCollectionExceptionUPP(/*0*/ userRoutine: platform.CoreServices.CollectionExceptionProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, platform.darwin.OSErr /* = kotlin.Short */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.CoreServices.CollectionExceptionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, platform.darwin.OSErr /* = kotlin.Short */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */ { TODO() }

fun NewCollectionFlattenUPP(/*0*/ userRoutine: platform.CoreServices.CollectionFlattenProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.SInt32 /* = kotlin.Int */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.CoreServices.CollectionFlattenUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.SInt32 /* = kotlin.Int */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */ { TODO() }

fun NewComponentFunctionUPP(/*0*/ userRoutine: platform.darwin.ProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Long>>? */, /*1*/ procInfo: platform.CoreServices.ProcInfoType /* = kotlin.ULong */): platform.CoreServices.ComponentFunctionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Long>>? */ { TODO() }

fun NewComponentMPWorkFunctionUPP(/*0*/ userRoutine: platform.CoreServices.ComponentMPWorkFunctionProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.ComponentMPWorkFunctionHeaderRecordPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentMPWorkFunctionHeaderRecord>? */) -> platform.CoreServices.ComponentResult /* = kotlin.Int */>>? */): platform.CoreServices.ComponentMPWorkFunctionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.ComponentMPWorkFunctionHeaderRecordPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentMPWorkFunctionHeaderRecord>? */) -> platform.CoreServices.ComponentResult /* = kotlin.Int */>>? */ { TODO() }

fun NewComponentRoutineUPP(/*0*/ userRoutine: platform.CoreServices.ComponentRoutineProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.ComponentParameters>?, platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) -> platform.CoreServices.ComponentResult /* = kotlin.Int */>>? */): platform.CoreServices.ComponentRoutineUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.ComponentParameters>?, platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) -> platform.CoreServices.ComponentResult /* = kotlin.Int */>>? */ { TODO() }

fun NewDebugAssertOutputHandlerUPP(/*0*/ userRoutine: platform.CoreServices.DebugAssertOutputHandlerProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSType /* = kotlin.UInt */, platform.darwin.UInt32 /* = kotlin.UInt */, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlin.Long, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */) -> kotlin.Unit>>? */): platform.CoreServices.DebugAssertOutputHandlerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSType /* = kotlin.UInt */, platform.darwin.UInt32 /* = kotlin.UInt */, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlin.Long, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */) -> kotlin.Unit>>? */ { TODO() }

fun NewDebugComponent(/*0*/ componentSignature: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ componentName: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*2*/ componentCallback: platform.CoreServices.DebugComponentCallbackUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.SInt32 /* = kotlin.Int */, platform.darwin.UInt32 /* = kotlin.UInt */, kotlinx.cinterop.CPointer<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?) -> kotlin.Unit>>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun NewDebugComponentCallbackUPP(/*0*/ userRoutine: platform.CoreServices.DebugComponentCallbackProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.SInt32 /* = kotlin.Int */, platform.darwin.UInt32 /* = kotlin.UInt */, kotlinx.cinterop.CPointer<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?) -> kotlin.Unit>>? */): platform.CoreServices.DebugComponentCallbackUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.SInt32 /* = kotlin.Int */, platform.darwin.UInt32 /* = kotlin.UInt */, kotlinx.cinterop.CPointer<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?) -> kotlin.Unit>>? */ { TODO() }

fun NewDebugOption(/*0*/ componentSignature: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ optionSelectorNum: platform.darwin.SInt32 /* = kotlin.Int */, /*2*/ optionName: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun NewDebuggerDisposeThreadUPP(/*0*/ userRoutine: platform.CoreServices.DebuggerDisposeThreadProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID /* = kotlin.ULong */) -> kotlin.Unit>>? */): platform.CoreServices.DebuggerDisposeThreadUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID /* = kotlin.ULong */) -> kotlin.Unit>>? */ { TODO() }

fun NewDebuggerNewThreadUPP(/*0*/ userRoutine: platform.CoreServices.DebuggerNewThreadProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID /* = kotlin.ULong */) -> kotlin.Unit>>? */): platform.CoreServices.DebuggerNewThreadUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID /* = kotlin.ULong */) -> kotlin.Unit>>? */ { TODO() }

fun NewDebuggerThreadSchedulerUPP(/*0*/ userRoutine: platform.CoreServices.DebuggerThreadSchedulerProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.SchedulerInfoRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SchedulerInfoRec>? */) -> platform.CoreServices.ThreadID /* = kotlin.ULong */>>? */): platform.CoreServices.DebuggerThreadSchedulerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.SchedulerInfoRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SchedulerInfoRec>? */) -> platform.CoreServices.ThreadID /* = kotlin.ULong */>>? */ { TODO() }

fun NewDeferredTaskUPP(/*0*/ userRoutine: platform.CoreServices.DeferredTaskProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Long) -> kotlin.Unit>>? */): platform.CoreServices.DeferredTaskUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Long) -> kotlin.Unit>>? */ { TODO() }

fun NewEmptyHandle(): platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */ { TODO() }

fun NewExceptionHandlerUPP(/*0*/ userRoutine: platform.CoreServices.ExceptionHandlerProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.ExceptionInformation>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */): platform.CoreServices.ExceptionHandlerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.ExceptionInformation>?) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */ { TODO() }

fun NewFNSubscriptionUPP(/*0*/ userRoutine: platform.CoreServices.FNSubscriptionProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FNMessage /* = kotlin.UInt */, platform.darwin.OptionBits /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.FNSubscriptionRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFNSubscriptionRef>? */) -> kotlin.Unit>>? */): platform.CoreServices.FNSubscriptionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FNMessage /* = kotlin.UInt */, platform.darwin.OptionBits /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.FNSubscriptionRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFNSubscriptionRef>? */) -> kotlin.Unit>>? */ { TODO() }

fun NewFSVolumeEjectUPP(/*0*/ userRoutine: platform.CoreServices.FSVolumeEjectProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, platform.posix.pid_t /* = kotlin.Int */) -> kotlin.Unit>>? */): platform.CoreServices.FSVolumeEjectUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, platform.posix.pid_t /* = kotlin.Int */) -> kotlin.Unit>>? */ { TODO() }

fun NewFSVolumeMountUPP(/*0*/ userRoutine: platform.CoreServices.FSVolumeMountProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */) -> kotlin.Unit>>? */): platform.CoreServices.FSVolumeMountUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */) -> kotlin.Unit>>? */ { TODO() }

fun NewFSVolumeUnmountUPP(/*0*/ userRoutine: platform.CoreServices.FSVolumeUnmountProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, platform.posix.pid_t /* = kotlin.Int */) -> kotlin.Unit>>? */): platform.CoreServices.FSVolumeUnmountUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.FSVolumeOperation? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueFSVolumeOperation>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.OSStatus /* = kotlin.Int */, platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, platform.posix.pid_t /* = kotlin.Int */) -> kotlin.Unit>>? */ { TODO() }

fun NewFolderManagerNotificationUPP(/*0*/ userRoutine: platform.CoreServices.FolderManagerNotificationProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSType /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */): platform.CoreServices.FolderManagerNotificationUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSType /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */ { TODO() }

fun NewGestaltValue(/*0*/ selector: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ newValue: platform.darwin.SInt32 /* = kotlin.Int */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun NewGetMissingComponentResourceUPP(/*0*/ userRoutine: platform.CoreServices.GetMissingComponentResourceProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */, platform.darwin.OSType /* = kotlin.UInt */, platform.darwin.SInt16 /* = kotlin.Short */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.darwin.HandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Handle /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */> */> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.CoreServices.GetMissingComponentResourceUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */, platform.darwin.OSType /* = kotlin.UInt */, platform.darwin.SInt16 /* = kotlin.Short */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.darwin.HandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Handle /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */> */> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */ { TODO() }

fun NewHandle(/*0*/ byteCount: platform.darwin.Size /* = kotlin.Long */): platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */ { TODO() }

fun NewHandleClear(/*0*/ byteCount: platform.darwin.Size /* = kotlin.Long */): platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */ { TODO() }

fun NewIOCompletionUPP(/*0*/ userRoutine: platform.CoreServices.IOCompletionProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ParmBlkPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */): platform.CoreServices.IOCompletionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ParmBlkPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */ { TODO() }

fun NewIndexToUCStringUPP(/*0*/ userRoutine: platform.CoreServices.IndexToUCStringProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.UInt32 /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.CoreFoundation.CFStringRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFStringRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString> */> */>?, kotlinx.cinterop.CPointer<platform.CoreServices.UCTypeSelectOptionsVar /* = kotlinx.cinterop.UShortVarOf<platform.CoreServices.UCTypeSelectOptions /* = kotlin.UShort */> */>?) -> kotlin.Boolean>>? */): platform.CoreServices.IndexToUCStringUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.UInt32 /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.CoreFoundation.CFStringRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFStringRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString> */> */>?, kotlinx.cinterop.CPointer<platform.CoreServices.UCTypeSelectOptionsVar /* = kotlinx.cinterop.UShortVarOf<platform.CoreServices.UCTypeSelectOptions /* = kotlin.UShort */> */>?) -> kotlin.Boolean>>? */ { TODO() }

fun NewKCCallbackUPP(/*0*/ userRoutine: platform.CoreServices.KCCallbackProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.KCEvent /* = kotlin.UShort */, kotlinx.cinterop.CPointer<platform.CoreServices.KCCallbackInfo>?, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */): platform.CoreServices.KCCallbackUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.KCEvent /* = kotlin.UShort */, kotlinx.cinterop.CPointer<platform.CoreServices.KCCallbackInfo>?, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */ { TODO() }

fun NewOSLAccessorUPP(/*0*/ userRoutine: platform.CoreServices.OSLAccessorProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType /* = kotlin.UInt */, platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.CoreServices.OSLAccessorUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType /* = kotlin.UInt */, platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.darwin.SRefCon? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */ { TODO() }

fun NewOSLAdjustMarksUPP(/*0*/ userRoutine: platform.CoreServices.OSLAdjustMarksProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Long, kotlin.Long, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.CoreServices.OSLAdjustMarksUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Long, kotlin.Long, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */ { TODO() }

fun NewOSLCompareUPP(/*0*/ userRoutine: platform.CoreServices.OSLCompareProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.CoreServices.OSLCompareUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */ { TODO() }

fun NewOSLCountUPP(/*0*/ userRoutine: platform.CoreServices.OSLCountProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVar /* = kotlinx.cinterop.LongVarOf<kotlin.Long> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.CoreServices.OSLCountUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.DescType /* = kotlin.UInt */, platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.LongVar /* = kotlinx.cinterop.LongVarOf<kotlin.Long> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */ { TODO() }

fun NewOSLDisposeTokenUPP(/*0*/ userRoutine: platform.CoreServices.OSLDisposeTokenProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.CoreServices.OSLDisposeTokenUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */ { TODO() }

fun NewOSLGetErrDescUPP(/*0*/ userRoutine: platform.CoreServices.OSLGetErrDescProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.CoreServices.AEDesc> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.CoreServices.OSLGetErrDescUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.CoreServices.AEDesc> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */ { TODO() }

fun NewOSLGetMarkTokenUPP(/*0*/ userRoutine: platform.CoreServices.OSLGetMarkTokenProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.CoreServices.OSLGetMarkTokenUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, platform.CoreServices.DescType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */ { TODO() }

fun NewOSLMarkUPP(/*0*/ userRoutine: platform.CoreServices.OSLMarkProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlin.Long) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.CoreServices.OSLMarkUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlinx.cinterop.CPointer<platform.CoreServices.AEDesc>?, kotlin.Long) -> platform.darwin.OSErr /* = kotlin.Short */>>? */ { TODO() }

fun NewPtr(/*0*/ byteCount: platform.darwin.Size /* = kotlin.Long */): platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */ { TODO() }

fun NewPtrClear(/*0*/ byteCount: platform.darwin.Size /* = kotlin.Long */): platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */ { TODO() }

fun NewResErrUPP(/*0*/ userRoutine: platform.CoreServices.ResErrProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSErr /* = kotlin.Short */) -> kotlin.Unit>>? */): platform.CoreServices.ResErrUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSErr /* = kotlin.Short */) -> kotlin.Unit>>? */ { TODO() }

fun NewSelectorFunctionUPP(/*0*/ userRoutine: platform.CoreServices.SelectorFunctionProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */): platform.CoreServices.SelectorFunctionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.OSType /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?) -> platform.darwin.OSErr /* = kotlin.Short */>>? */ { TODO() }

fun NewSleepQUPP(/*0*/ userRoutine: platform.CoreServices.SleepQProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Long, platform.CoreServices.SleepQRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SleepQRec>? */) -> kotlin.Long>>? */): platform.CoreServices.SleepQUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Long, platform.CoreServices.SleepQRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SleepQRec>? */) -> kotlin.Long>>? */ { TODO() }

fun NewThread(/*0*/ threadStyle: platform.CoreServices.ThreadStyle /* = kotlin.UInt */, /*1*/ threadEntry: platform.CoreServices.ThreadEntryTPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreServices.voidPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */, /*2*/ threadParam: kotlinx.cinterop.CValuesRef<*>?, /*3*/ stackSize: platform.darwin.Size /* = kotlin.Long */, /*4*/ options: platform.CoreServices.ThreadOptions /* = kotlin.UInt */, /*5*/ threadResult: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?, /*6*/ threadMade: kotlinx.cinterop.CValuesRef<platform.CoreServices.ThreadIDVar /* = kotlinx.cinterop.ULongVarOf<platform.CoreServices.ThreadID /* = kotlin.ULong */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun NewThreadEntryUPP(/*0*/ userRoutine: platform.CoreServices.ThreadEntryProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreServices.voidPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */): platform.CoreServices.ThreadEntryUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreServices.voidPtr? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */ { TODO() }

fun NewThreadSchedulerUPP(/*0*/ userRoutine: platform.CoreServices.ThreadSchedulerProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.SchedulerInfoRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SchedulerInfoRec>? */) -> platform.CoreServices.ThreadID /* = kotlin.ULong */>>? */): platform.CoreServices.ThreadSchedulerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.SchedulerInfoRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SchedulerInfoRec>? */) -> platform.CoreServices.ThreadID /* = kotlin.ULong */>>? */ { TODO() }

fun NewThreadSwitchUPP(/*0*/ userRoutine: platform.CoreServices.ThreadSwitchProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID /* = kotlin.ULong */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */): platform.CoreServices.ThreadSwitchUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID /* = kotlin.ULong */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */ { TODO() }

fun NewThreadTerminationUPP(/*0*/ userRoutine: platform.CoreServices.ThreadTerminationProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID /* = kotlin.ULong */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */): platform.CoreServices.ThreadTerminationUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID /* = kotlin.ULong */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */ { TODO() }

fun NewTimerUPP(/*0*/ userRoutine: platform.CoreServices.TimerProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TMTaskPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.TMTask>? */) -> kotlin.Unit>>? */): platform.CoreServices.TimerUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.TMTaskPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.TMTask>? */) -> kotlin.Unit>>? */ { TODO() }

fun NewUnicodeToTextFallbackUPP(/*0*/ userRoutine: platform.CoreServices.UnicodeToTextFallbackProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, platform.darwin.ByteCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, platform.CoreServices.TextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */, platform.darwin.ByteCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.ConstUnicodeMappingPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.UnicodeMapping>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */): platform.CoreServices.UnicodeToTextFallbackUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, platform.darwin.ByteCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, platform.CoreServices.TextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */, platform.darwin.ByteCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.ConstUnicodeMappingPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.UnicodeMapping>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */ { TODO() }

fun OpenAComponent(/*0*/ aComponent: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */, /*1*/ ci: kotlinx.cinterop.CValuesRef<platform.CoreServices.ComponentInstanceVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ComponentInstance /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord> */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun OpenAComponentResFile(/*0*/ aComponent: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */, /*1*/ resRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.ResFileRefNumVar /* = kotlinx.cinterop.IntVarOf<platform.CoreServices.ResFileRefNum /* = kotlin.Int */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun OpenADefaultComponent(/*0*/ componentType: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ componentSubType: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ ci: kotlinx.cinterop.CValuesRef<platform.CoreServices.ComponentInstanceVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ComponentInstance /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord> */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun OpenComponent(/*0*/ aComponent: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */): platform.CoreServices.ComponentInstance? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>? */ { TODO() }

fun OpenComponentResFile(/*0*/ aComponent: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */): platform.CoreServices.ResFileRefNum /* = kotlin.Int */ { TODO() }

fun OpenDefaultComponent(/*0*/ componentType: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ componentSubType: platform.darwin.OSType /* = kotlin.UInt */): platform.CoreServices.ComponentInstance? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>? */ { TODO() }

fun OverrideIconRef(/*0*/ oldIconRef: platform.CoreServices.IconRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef>? */, /*1*/ newIconRef: platform.CoreServices.IconRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBAllocateForkAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?) { TODO() }

fun PBAllocateForkSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBCatalogSearchAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSCatalogBulkParam>?) { TODO() }

fun PBCatalogSearchSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSCatalogBulkParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBCloseForkAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?) { TODO() }

fun PBCloseForkSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBCloseIteratorAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSCatalogBulkParam>?) { TODO() }

fun PBCloseIteratorSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSCatalogBulkParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBCompareFSRefsAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?) { TODO() }

fun PBCompareFSRefsSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBCreateDirectoryUnicodeAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?) { TODO() }

fun PBCreateDirectoryUnicodeSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBCreateFileAndOpenForkUnicodeAsync(/*0*/ paramBlock: platform.CoreServices.FSRefForkIOParamPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSRefForkIOParam>? */) { TODO() }

fun PBCreateFileAndOpenForkUnicodeSync(/*0*/ paramBlock: platform.CoreServices.FSRefForkIOParamPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSRefForkIOParam>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun PBCreateFileUnicodeAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?) { TODO() }

fun PBCreateFileUnicodeSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBCreateForkAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?) { TODO() }

fun PBCreateForkSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBDeleteForkAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?) { TODO() }

fun PBDeleteForkSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBDeleteObjectAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?) { TODO() }

fun PBDeleteObjectSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBExchangeObjectsAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?) { TODO() }

fun PBExchangeObjectsSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBFSCopyFileAsync(/*0*/ paramBlock: platform.CoreServices.FSRefParamPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSRefParam>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun PBFSCopyFileSync(/*0*/ paramBlock: platform.CoreServices.FSRefParamPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSRefParam>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun PBFSResolveNodeIDAsync(/*0*/ paramBlock: platform.CoreServices.FSRefParamPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSRefParam>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun PBFSResolveNodeIDSync(/*0*/ paramBlock: platform.CoreServices.FSRefParamPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSRefParam>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun PBFlushForkAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?) { TODO() }

fun PBFlushForkSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBFlushVolumeAsync(/*0*/ paramBlock: platform.CoreServices.FSRefParamPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSRefParam>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun PBFlushVolumeSync(/*0*/ paramBlock: platform.CoreServices.FSRefParamPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSRefParam>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun PBGetCatalogInfoAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?) { TODO() }

fun PBGetCatalogInfoBulkAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSCatalogBulkParam>?) { TODO() }

fun PBGetCatalogInfoBulkSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSCatalogBulkParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBGetCatalogInfoSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBGetForkCBInfoAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkCBInfoParam>?) { TODO() }

fun PBGetForkCBInfoSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkCBInfoParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBGetForkPositionAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?) { TODO() }

fun PBGetForkPositionSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBGetForkSizeAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?) { TODO() }

fun PBGetForkSizeSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBGetVolumeInfoAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSVolumeInfoParam>?) { TODO() }

fun PBGetVolumeInfoSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSVolumeInfoParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBIterateForksAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?) { TODO() }

fun PBIterateForksSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBMakeFSRefUnicodeAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?) { TODO() }

fun PBMakeFSRefUnicodeSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBMoveObjectAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?) { TODO() }

fun PBMoveObjectSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBOpenForkAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?) { TODO() }

fun PBOpenForkSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBOpenIteratorAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSCatalogBulkParam>?) { TODO() }

fun PBOpenIteratorSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSCatalogBulkParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBReadForkAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?) { TODO() }

fun PBReadForkSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBRenameUnicodeAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?) { TODO() }

fun PBRenameUnicodeSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBSetCatalogInfoAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?) { TODO() }

fun PBSetCatalogInfoSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBSetForkPositionAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?) { TODO() }

fun PBSetForkPositionSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBSetForkSizeAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?) { TODO() }

fun PBSetForkSizeSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBSetVolumeInfoAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSVolumeInfoParam>?) { TODO() }

fun PBSetVolumeInfoSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSVolumeInfoParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBUnlinkObjectAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?) { TODO() }

fun PBUnlinkObjectSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRefParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBWriteForkAsync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?) { TODO() }

fun PBWriteForkSync(/*0*/ paramBlock: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSForkIOParam>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PBXLockRangeAsync(/*0*/ paramBlock: platform.CoreServices.FSRangeLockParamPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSRangeLockParam>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun PBXLockRangeSync(/*0*/ paramBlock: platform.CoreServices.FSRangeLockParamPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSRangeLockParam>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun PBXUnlockRangeAsync(/*0*/ paramBlock: platform.CoreServices.FSRangeLockParamPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSRangeLockParam>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun PBXUnlockRangeSync(/*0*/ paramBlock: platform.CoreServices.FSRangeLockParamPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.FSRangeLockParam>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun PLpos(/*0*/ str1: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*1*/ searchStr: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */): kotlin.Short { TODO() }

fun PLstrcat(/*0*/ str: platform.darwin.StringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*1*/ append: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */): platform.darwin.StringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */ { TODO() }

fun PLstrchr(/*0*/ str1: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*1*/ ch1: kotlin.Short): platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */ { TODO() }

fun PLstrcmp(/*0*/ str1: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*1*/ str2: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */): kotlin.Short { TODO() }

fun PLstrcpy(/*0*/ dest: platform.darwin.StringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*1*/ source: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */): platform.darwin.StringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */ { TODO() }

fun PLstrlen(/*0*/ str: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */): kotlin.Short { TODO() }

fun PLstrncat(/*0*/ str1: platform.darwin.StringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*1*/ append: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*2*/ num: kotlin.Short): platform.darwin.StringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */ { TODO() }

fun PLstrncmp(/*0*/ str1: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*1*/ str2: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*2*/ num: kotlin.Short): kotlin.Short { TODO() }

fun PLstrncpy(/*0*/ dest: platform.darwin.StringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*1*/ source: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*2*/ num: kotlin.Short): platform.darwin.StringPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */ { TODO() }

fun PLstrpbrk(/*0*/ str1: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*1*/ charSet: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */): platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */ { TODO() }

fun PLstrrchr(/*0*/ str1: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*1*/ ch1: kotlin.Short): platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */ { TODO() }

fun PLstrspn(/*0*/ str1: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*1*/ charSet: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */): kotlin.Short { TODO() }

fun PLstrstr(/*0*/ str1: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*1*/ searchStr: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */): platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */ { TODO() }

fun PrimeTime(/*0*/ tmTaskPtr: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */, /*1*/ count: kotlin.Long) { TODO() }

fun PrimeTimeTask(/*0*/ tmTaskPtr: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */, /*1*/ count: kotlin.Long): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PtrAndHand(/*0*/ ptr1: kotlinx.cinterop.CValuesRef<*>?, /*1*/ hand2: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*2*/ size: kotlin.Long): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PtrToHand(/*0*/ srcPtr: kotlinx.cinterop.CValuesRef<*>?, /*1*/ dstHndl: kotlinx.cinterop.CValuesRef<platform.darwin.HandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Handle /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */> */> */>?, /*2*/ size: kotlin.Long): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PtrToXHand(/*0*/ srcPtr: kotlinx.cinterop.CValuesRef<*>?, /*1*/ dstHndl: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*2*/ size: kotlin.Long): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun PurgeCollection(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ whichAttributes: platform.darwin.SInt32 /* = kotlin.Int */, /*2*/ matchingAttributes: platform.darwin.SInt32 /* = kotlin.Int */) { TODO() }

fun PurgeCollectionTag(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ tag: platform.CoreServices.CollectionTag /* = kotlin.UInt */) { TODO() }

fun QueryUnicodeMappings(/*0*/ iFilter: platform.darwin.OptionBits /* = kotlin.UInt */, /*1*/ iFindMapping: platform.CoreServices.ConstUnicodeMappingPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.UnicodeMapping>? */, /*2*/ iMaxCount: platform.darwin.ItemCount /* = kotlin.ULong */, /*3*/ oActualCount: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?, /*4*/ oReturnedMappings: kotlinx.cinterop.CValuesRef<platform.CoreServices.UnicodeMapping>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun ReadIconFromFSRef(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ iconFamily: kotlinx.cinterop.CValuesRef<platform.CoreServices.IconFamilyHandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IconFamilyHandle /* = kotlinx.cinterop.CPointer<platform.CoreServices.IconFamilyPtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IconFamilyPtr /* = kotlinx.cinterop.CPointer<platform.CoreServices.IconFamilyResource> */> */> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun ReadLocation(/*0*/ loc: kotlinx.cinterop.CValuesRef<platform.CoreServices.MachineLocation>?) { TODO() }

fun ReadPartialResource(/*0*/ theResource: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*1*/ offset: kotlin.Long, /*2*/ buffer: kotlinx.cinterop.CValuesRef<*>?, /*3*/ count: kotlin.Long) { TODO() }

fun ReallocateHandle(/*0*/ h: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*1*/ byteCount: platform.darwin.Size /* = kotlin.Long */) { TODO() }

fun RecoverHandle(/*0*/ p: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */): platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */ { TODO() }

fun RegisterComponent(/*0*/ cd: kotlinx.cinterop.CValuesRef<platform.CoreServices.ComponentDescription>?, /*1*/ componentEntryPoint: platform.CoreServices.ComponentRoutineUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.CoreServices.ComponentParameters>?, platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) -> platform.CoreServices.ComponentResult /* = kotlin.Int */>>? */, /*2*/ global: platform.darwin.SInt16 /* = kotlin.Short */, /*3*/ componentName: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*4*/ componentInfo: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*5*/ componentIcon: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */): platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */ { TODO() }

fun RegisterComponentFileRef(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ global: platform.darwin.SInt16 /* = kotlin.Short */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun RegisterComponentFileRefEntries(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*1*/ global: platform.darwin.SInt16 /* = kotlin.Short */, /*2*/ toRegister: kotlinx.cinterop.CValuesRef<platform.CoreServices.ComponentDescription>?, /*3*/ registerCount: platform.darwin.UInt32 /* = kotlin.UInt */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun RegisterComponentResource(/*0*/ cr: platform.CoreServices.ComponentResourceHandle? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentResourcePtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.ComponentResourcePtr /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentResource> */> */>? */, /*1*/ global: platform.darwin.SInt16 /* = kotlin.Short */): platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */ { TODO() }

fun RegisterComponentResourceFile(/*0*/ resRefNum: platform.darwin.SInt16 /* = kotlin.Short */, /*1*/ global: platform.darwin.SInt16 /* = kotlin.Short */): platform.darwin.SInt32 /* = kotlin.Int */ { TODO() }

fun RegisterIconRefFromFSRef(/*0*/ creator: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ iconType: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ iconFile: kotlinx.cinterop.CValuesRef<platform.CoreServices.FSRef>?, /*3*/ theIconRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.IconRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IconRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun RegisterIconRefFromIconFamily(/*0*/ creator: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ iconType: platform.darwin.OSType /* = kotlin.UInt */, /*2*/ iconFamily: platform.CoreServices.IconFamilyHandle? /* = kotlinx.cinterop.CPointer<platform.CoreServices.IconFamilyPtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IconFamilyPtr /* = kotlinx.cinterop.CPointer<platform.CoreServices.IconFamilyResource> */> */>? */, /*3*/ theIconRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.IconRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.IconRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef> */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun ReleaseCollection(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun ReleaseFolder(/*0*/ vRefNum: platform.CoreServices.FSVolumeRefNum /* = kotlin.Short */, /*1*/ folderType: platform.darwin.OSType /* = kotlin.UInt */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun ReleaseIconRef(/*0*/ theIconRef: platform.CoreServices.IconRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun ReleaseResource(/*0*/ theResource: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) { TODO() }

fun RemoveCollectionItem(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ tag: platform.CoreServices.CollectionTag /* = kotlin.UInt */, /*2*/ id: platform.darwin.SInt32 /* = kotlin.Int */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun RemoveFolderDescriptor(/*0*/ foldType: platform.CoreServices.FolderType /* = kotlin.UInt */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun RemoveIconRefOverride(/*0*/ theIconRef: platform.CoreServices.IconRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun RemoveIndexedCollectionItem(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ itemIndex: platform.darwin.SInt32 /* = kotlin.Int */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun RemoveResource(/*0*/ theResource: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) { TODO() }

fun RemoveTimeTask(/*0*/ tmTaskPtr: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun ReplaceGestaltValue(/*0*/ selector: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ replacementValue: platform.darwin.SInt32 /* = kotlin.Int */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun ReplaceIndexedCollectionItem(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ itemIndex: platform.darwin.SInt32 /* = kotlin.Int */, /*2*/ itemSize: platform.darwin.SInt32 /* = kotlin.Int */, /*3*/ itemData: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun ReplaceIndexedCollectionItemHdl(/*0*/ aCollection: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ itemIndex: platform.darwin.SInt32 /* = kotlin.Int */, /*2*/ itemData: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun ResError(): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun ResetTextToUnicodeInfo(/*0*/ ioTextToUnicodeInfo: platform.CoreServices.TextToUnicodeInfo? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTextToUnicodeInfo>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun ResetUnicodeToTextInfo(/*0*/ ioUnicodeToTextInfo: platform.CoreServices.UnicodeToTextInfo? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUnicodeToTextInfo>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun ResetUnicodeToTextRunInfo(/*0*/ ioUnicodeToTextRunInfo: platform.CoreServices.UnicodeToTextRunInfo? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUnicodeToTextRunInfo>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun ResolveComponentAlias(/*0*/ aComponent: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */): platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */ { TODO() }

fun ResolveDefaultTextEncoding(/*0*/ encoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */): platform.CoreServices.TextEncoding /* = kotlin.UInt */ { TODO() }

fun RetainCollection(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun RevertTextEncodingToScriptInfo(/*0*/ iEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */, /*1*/ oTextScriptID: kotlinx.cinterop.CValuesRef<platform.darwin.ScriptCodeVar /* = kotlinx.cinterop.ShortVarOf<platform.darwin.ScriptCode /* = kotlin.Short */> */>?, /*2*/ oTextLanguageID: kotlinx.cinterop.CValuesRef<platform.darwin.LangCodeVar /* = kotlinx.cinterop.ShortVarOf<platform.darwin.LangCode /* = kotlin.Short */> */>?, /*3*/ oTextFontname: platform.darwin.Str255? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun RmvTime(/*0*/ tmTaskPtr: platform.CoreServices.QElemPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.QElem>? */) { TODO() }

fun S32Set(/*0*/ value: platform.darwin.SInt64 /* = kotlin.Long */): platform.darwin.SInt32 /* = kotlin.Int */ { TODO() }

fun S64Add(/*0*/ left: platform.darwin.SInt64 /* = kotlin.Long */, /*1*/ right: platform.darwin.SInt64 /* = kotlin.Long */): platform.darwin.SInt64 /* = kotlin.Long */ { TODO() }

fun S64And(/*0*/ left: platform.darwin.SInt64 /* = kotlin.Long */, /*1*/ right: platform.darwin.SInt64 /* = kotlin.Long */): kotlin.Boolean { TODO() }

fun S64BitwiseAnd(/*0*/ left: platform.darwin.SInt64 /* = kotlin.Long */, /*1*/ right: platform.darwin.SInt64 /* = kotlin.Long */): platform.darwin.SInt64 /* = kotlin.Long */ { TODO() }

fun S64BitwiseEor(/*0*/ left: platform.darwin.SInt64 /* = kotlin.Long */, /*1*/ right: platform.darwin.SInt64 /* = kotlin.Long */): platform.darwin.SInt64 /* = kotlin.Long */ { TODO() }

fun S64BitwiseNot(/*0*/ value: platform.darwin.SInt64 /* = kotlin.Long */): platform.darwin.SInt64 /* = kotlin.Long */ { TODO() }

fun S64BitwiseOr(/*0*/ left: platform.darwin.SInt64 /* = kotlin.Long */, /*1*/ right: platform.darwin.SInt64 /* = kotlin.Long */): platform.darwin.SInt64 /* = kotlin.Long */ { TODO() }

fun S64Compare(/*0*/ left: platform.darwin.SInt64 /* = kotlin.Long */, /*1*/ right: platform.darwin.SInt64 /* = kotlin.Long */): platform.darwin.SInt32 /* = kotlin.Int */ { TODO() }

fun S64Div(/*0*/ dividend: platform.darwin.SInt64 /* = kotlin.Long */, /*1*/ divisor: platform.darwin.SInt64 /* = kotlin.Long */): platform.darwin.SInt64 /* = kotlin.Long */ { TODO() }

fun S64Divide(/*0*/ dividend: platform.darwin.SInt64 /* = kotlin.Long */, /*1*/ divisor: platform.darwin.SInt64 /* = kotlin.Long */, /*2*/ remainder: kotlinx.cinterop.CValuesRef<platform.darwin.SInt64Var /* = kotlinx.cinterop.LongVarOf<platform.darwin.SInt64 /* = kotlin.Long */> */>?): platform.darwin.SInt64 /* = kotlin.Long */ { TODO() }

fun S64Eor(/*0*/ left: platform.darwin.SInt64 /* = kotlin.Long */, /*1*/ right: platform.darwin.SInt64 /* = kotlin.Long */): kotlin.Boolean { TODO() }

fun S64Max(): platform.darwin.SInt64 /* = kotlin.Long */ { TODO() }

fun S64Min(): platform.darwin.SInt64 /* = kotlin.Long */ { TODO() }

fun S64Mod(/*0*/ dividend: platform.darwin.SInt64 /* = kotlin.Long */, /*1*/ divisor: platform.darwin.SInt64 /* = kotlin.Long */): platform.darwin.SInt64 /* = kotlin.Long */ { TODO() }

fun S64Multiply(/*0*/ left: platform.darwin.SInt64 /* = kotlin.Long */, /*1*/ right: platform.darwin.SInt64 /* = kotlin.Long */): platform.darwin.SInt64 /* = kotlin.Long */ { TODO() }

fun S64Negate(/*0*/ value: platform.darwin.SInt64 /* = kotlin.Long */): platform.darwin.SInt64 /* = kotlin.Long */ { TODO() }

fun S64Not(/*0*/ value: platform.darwin.SInt64 /* = kotlin.Long */): kotlin.Boolean { TODO() }

fun S64Or(/*0*/ left: platform.darwin.SInt64 /* = kotlin.Long */, /*1*/ right: platform.darwin.SInt64 /* = kotlin.Long */): kotlin.Boolean { TODO() }

fun S64Set(/*0*/ value: platform.darwin.SInt32 /* = kotlin.Int */): platform.darwin.SInt64 /* = kotlin.Long */ { TODO() }

fun S64SetU(/*0*/ value: platform.darwin.UInt32 /* = kotlin.UInt */): platform.darwin.SInt64 /* = kotlin.Long */ { TODO() }

fun S64ShiftLeft(/*0*/ value: platform.darwin.SInt64 /* = kotlin.Long */, /*1*/ shift: platform.darwin.UInt32 /* = kotlin.UInt */): platform.darwin.SInt64 /* = kotlin.Long */ { TODO() }

fun S64ShiftRight(/*0*/ value: platform.darwin.SInt64 /* = kotlin.Long */, /*1*/ shift: platform.darwin.UInt32 /* = kotlin.UInt */): platform.darwin.SInt64 /* = kotlin.Long */ { TODO() }

fun S64Subtract(/*0*/ left: platform.darwin.SInt64 /* = kotlin.Long */, /*1*/ right: platform.darwin.SInt64 /* = kotlin.Long */): platform.darwin.SInt64 /* = kotlin.Long */ { TODO() }

fun SInt64ToUInt64(/*0*/ value: platform.darwin.SInt64 /* = kotlin.Long */): platform.darwin.UInt64 /* = kotlin.ULong */ { TODO() }

fun SInt64ToWide(/*0*/ s: platform.darwin.SInt64 /* = kotlin.Long */): kotlinx.cinterop.CValue<platform.darwin.wide> { TODO() }

fun SKDocumentCopyURL(/*0*/ inDocument: platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */ { TODO() }

fun SKDocumentCreate(/*0*/ inScheme: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*1*/ inParent: platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*2*/ inName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun SKDocumentCreateWithURL(/*0*/ inURL: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */): platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun SKDocumentGetName(/*0*/ inDocument: platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun SKDocumentGetParent(/*0*/ inDocument: platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun SKDocumentGetSchemeName(/*0*/ inDocument: platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun SKDocumentGetTypeID(): platform.CoreFoundation.CFTypeID /* = kotlin.ULong */ { TODO() }

fun SKIndexAddDocument(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inDocument: platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*2*/ inMIMETypeHint: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ inCanReplace: kotlin.Boolean): kotlin.Boolean { TODO() }

fun SKIndexAddDocumentWithText(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inDocument: platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*2*/ inDocumentText: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ inCanReplace: kotlin.Boolean): kotlin.Boolean { TODO() }

fun SKIndexClose(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */) { TODO() }

fun SKIndexCompact(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */): kotlin.Boolean { TODO() }

fun SKIndexCopyDocumentForDocumentID(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inDocumentID: platform.CoreServices.SKDocumentID /* = kotlin.Long */): platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun SKIndexCopyDocumentIDArrayForTermID(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inTermID: platform.CoreFoundation.CFIndex /* = kotlin.Long */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun SKIndexCopyDocumentProperties(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inDocument: platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */ { TODO() }

fun SKIndexCopyDocumentRefsForDocumentIDs(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inCount: platform.CoreFoundation.CFIndex /* = kotlin.Long */, /*2*/ inDocumentIDsArray: kotlinx.cinterop.CValuesRef<platform.CoreServices.SKDocumentIDVar /* = kotlinx.cinterop.LongVarOf<platform.CoreServices.SKDocumentID /* = kotlin.Long */> */>?, /*3*/ outDocumentRefsArray: kotlinx.cinterop.CValuesRef<platform.CoreServices.SKDocumentRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.SKDocumentRef /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?) { TODO() }

fun SKIndexCopyDocumentURLsForDocumentIDs(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inCount: platform.CoreFoundation.CFIndex /* = kotlin.Long */, /*2*/ inDocumentIDsArray: kotlinx.cinterop.CValuesRef<platform.CoreServices.SKDocumentIDVar /* = kotlinx.cinterop.LongVarOf<platform.CoreServices.SKDocumentID /* = kotlin.Long */> */>?, /*3*/ outDocumentURLsArray: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFURLRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFURLRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL> */> */>?) { TODO() }

fun SKIndexCopyInfoForDocumentIDs(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inCount: platform.CoreFoundation.CFIndex /* = kotlin.Long */, /*2*/ inDocumentIDsArray: kotlinx.cinterop.CValuesRef<platform.CoreServices.SKDocumentIDVar /* = kotlinx.cinterop.LongVarOf<platform.CoreServices.SKDocumentID /* = kotlin.Long */> */>?, /*3*/ outNamesArray: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFStringRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFStringRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString> */> */>?, /*4*/ outParentIDsArray: kotlinx.cinterop.CValuesRef<platform.CoreServices.SKDocumentIDVar /* = kotlinx.cinterop.LongVarOf<platform.CoreServices.SKDocumentID /* = kotlin.Long */> */>?) { TODO() }

fun SKIndexCopyTermIDArrayForDocumentID(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inDocumentID: platform.CoreServices.SKDocumentID /* = kotlin.Long */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun SKIndexCopyTermStringForTermID(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inTermID: platform.CoreFoundation.CFIndex /* = kotlin.Long */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun SKIndexCreateWithMutableData(/*0*/ inData: platform.CoreFoundation.CFMutableDataRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFData>? */, /*1*/ inIndexName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ inIndexType: platform.CoreServices.SKIndexType /* = kotlin.UInt */, /*3*/ inAnalysisProperties: platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */): platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */ { TODO() }

fun SKIndexCreateWithURL(/*0*/ inURL: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*1*/ inIndexName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ inIndexType: platform.CoreServices.SKIndexType /* = kotlin.UInt */, /*3*/ inAnalysisProperties: platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */): platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */ { TODO() }

fun SKIndexDocumentIteratorCopyNext(/*0*/ inIterator: platform.CoreServices.SKIndexDocumentIteratorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndexDocumentIterator>? */): platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun SKIndexDocumentIteratorCreate(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inParentDocument: platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.CoreServices.SKIndexDocumentIteratorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndexDocumentIterator>? */ { TODO() }

fun SKIndexDocumentIteratorGetTypeID(): platform.CoreFoundation.CFTypeID /* = kotlin.ULong */ { TODO() }

fun SKIndexFlush(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */): kotlin.Boolean { TODO() }

fun SKIndexGetAnalysisProperties(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */): platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */ { TODO() }

fun SKIndexGetDocumentCount(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */): platform.CoreFoundation.CFIndex /* = kotlin.Long */ { TODO() }

fun SKIndexGetDocumentID(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inDocument: platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.CoreServices.SKDocumentID /* = kotlin.Long */ { TODO() }

fun SKIndexGetDocumentState(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inDocument: platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.CoreServices.SKDocumentIndexState /* = kotlin.UInt */ { TODO() }

fun SKIndexGetDocumentTermCount(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inDocumentID: platform.CoreServices.SKDocumentID /* = kotlin.Long */): platform.CoreFoundation.CFIndex /* = kotlin.Long */ { TODO() }

fun SKIndexGetDocumentTermFrequency(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inDocumentID: platform.CoreServices.SKDocumentID /* = kotlin.Long */, /*2*/ inTermID: platform.CoreFoundation.CFIndex /* = kotlin.Long */): platform.CoreFoundation.CFIndex /* = kotlin.Long */ { TODO() }

fun SKIndexGetIndexType(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */): platform.CoreServices.SKIndexType /* = kotlin.UInt */ { TODO() }

fun SKIndexGetMaximumBytesBeforeFlush(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */): platform.CoreFoundation.CFIndex /* = kotlin.Long */ { TODO() }

fun SKIndexGetMaximumDocumentID(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */): platform.CoreServices.SKDocumentID /* = kotlin.Long */ { TODO() }

fun SKIndexGetMaximumTermID(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */): platform.CoreFoundation.CFIndex /* = kotlin.Long */ { TODO() }

fun SKIndexGetTermDocumentCount(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inTermID: platform.CoreFoundation.CFIndex /* = kotlin.Long */): platform.CoreFoundation.CFIndex /* = kotlin.Long */ { TODO() }

fun SKIndexGetTermIDForTermString(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inTermString: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFIndex /* = kotlin.Long */ { TODO() }

fun SKIndexGetTypeID(): platform.CoreFoundation.CFTypeID /* = kotlin.ULong */ { TODO() }

fun SKIndexMoveDocument(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inDocument: platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*2*/ inNewParent: platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): kotlin.Boolean { TODO() }

fun SKIndexOpenWithData(/*0*/ inData: platform.CoreFoundation.CFDataRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFData>? */, /*1*/ inIndexName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */ { TODO() }

fun SKIndexOpenWithMutableData(/*0*/ inData: platform.CoreFoundation.CFMutableDataRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFData>? */, /*1*/ inIndexName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */ { TODO() }

fun SKIndexOpenWithURL(/*0*/ inURL: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*1*/ inIndexName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ inWriteAccess: kotlin.Boolean): platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */ { TODO() }

fun SKIndexRemoveDocument(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inDocument: platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): kotlin.Boolean { TODO() }

fun SKIndexRenameDocument(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inDocument: platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*2*/ inNewName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): kotlin.Boolean { TODO() }

fun SKIndexSetDocumentProperties(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inDocument: platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*2*/ inProperties: platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */) { TODO() }

fun SKIndexSetMaximumBytesBeforeFlush(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inBytesForUpdate: platform.CoreFoundation.CFIndex /* = kotlin.Long */) { TODO() }

fun SKLoadDefaultExtractorPlugIns() { TODO() }

fun SKSearchCancel(/*0*/ inSearch: platform.CoreServices.SKSearchRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSearch>? */) { TODO() }

fun SKSearchCreate(/*0*/ inIndex: platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, /*1*/ inQuery: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ inSearchOptions: platform.CoreServices.SKSearchOptions /* = kotlin.UInt */): platform.CoreServices.SKSearchRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSearch>? */ { TODO() }

fun SKSearchFindMatches(/*0*/ inSearch: platform.CoreServices.SKSearchRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSearch>? */, /*1*/ inMaximumCount: platform.CoreFoundation.CFIndex /* = kotlin.Long */, /*2*/ outDocumentIDsArray: kotlinx.cinterop.CValuesRef<platform.CoreServices.SKDocumentIDVar /* = kotlinx.cinterop.LongVarOf<platform.CoreServices.SKDocumentID /* = kotlin.Long */> */>?, /*3*/ outScoresArray: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVar /* = kotlinx.cinterop.FloatVarOf<kotlin.Float> */>?, /*4*/ maximumTime: platform.CoreFoundation.CFTimeInterval /* = kotlin.Double */, /*5*/ outFoundCount: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFIndexVar /* = kotlinx.cinterop.LongVarOf<platform.CoreFoundation.CFIndex /* = kotlin.Long */> */>?): kotlin.Boolean { TODO() }

fun SKSearchGetTypeID(): platform.CoreFoundation.CFTypeID /* = kotlin.ULong */ { TODO() }

fun SKSearchGroupCopyIndexes(/*0*/ inSearchGroup: platform.CoreServices.SKSearchGroupRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSearchGroup>? */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun SKSearchGroupCreate(/*0*/ inArrayOfInIndexes: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */): platform.CoreServices.SKSearchGroupRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSearchGroup>? */ { TODO() }

fun SKSearchGroupGetTypeID(): platform.CoreFoundation.CFTypeID /* = kotlin.ULong */ { TODO() }

fun SKSearchResultsCopyMatchingTerms(/*0*/ inSearchResults: platform.CoreServices.SKSearchResultsRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSearchResults>? */, /*1*/ inItem: platform.CoreFoundation.CFIndex /* = kotlin.Long */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun SKSearchResultsCreateWithDocuments(/*0*/ inSearchGroup: platform.CoreServices.SKSearchGroupRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSearchGroup>? */, /*1*/ inExampleDocuments: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */, /*2*/ inMaxFoundDocuments: platform.CoreFoundation.CFIndex /* = kotlin.Long */, /*3*/ inContext: kotlinx.cinterop.CValuesRef<*>?, /*4*/ inFilterCallBack: platform.CoreServices.SKSearchResultsFilterCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Boolean>>? */): platform.CoreServices.SKSearchResultsRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSearchResults>? */ { TODO() }

fun SKSearchResultsCreateWithQuery(/*0*/ inSearchGroup: platform.CoreServices.SKSearchGroupRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSearchGroup>? */, /*1*/ inQuery: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ inSearchType: platform.CoreServices.SKSearchType /* = kotlin.UInt */, /*3*/ inMaxFoundDocuments: platform.CoreFoundation.CFIndex /* = kotlin.Long */, /*4*/ inContext: kotlinx.cinterop.CValuesRef<*>?, /*5*/ inFilterCallBack: platform.CoreServices.SKSearchResultsFilterCallBack? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.SKIndexRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex>? */, platform.CoreServices.SKDocumentRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Boolean>>? */): platform.CoreServices.SKSearchResultsRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSearchResults>? */ { TODO() }

fun SKSearchResultsGetCount(/*0*/ inSearchResults: platform.CoreServices.SKSearchResultsRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSearchResults>? */): platform.CoreFoundation.CFIndex /* = kotlin.Long */ { TODO() }

fun SKSearchResultsGetInfoInRange(/*0*/ inSearchResults: platform.CoreServices.SKSearchResultsRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSearchResults>? */, /*1*/ inRange: kotlinx.cinterop.CValue<platform.CoreFoundation.CFRange>, /*2*/ outDocumentsArray: kotlinx.cinterop.CValuesRef<platform.CoreServices.SKDocumentRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.SKDocumentRef /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?, /*3*/ outIndexesArray: kotlinx.cinterop.CValuesRef<platform.CoreServices.SKIndexRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.SKIndexRef /* = kotlinx.cinterop.CPointer<cnames.structs.__SKIndex> */> */>?, /*4*/ outScoresArray: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVar /* = kotlinx.cinterop.FloatVarOf<kotlin.Float> */>?): platform.CoreFoundation.CFIndex /* = kotlin.Long */ { TODO() }

fun SKSearchResultsGetTypeID(): platform.CoreFoundation.CFTypeID /* = kotlin.ULong */ { TODO() }

fun SKSummaryCopyParagraphAtIndex(/*0*/ summary: platform.CoreServices.SKSummaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSummary>? */, /*1*/ i: platform.CoreFoundation.CFIndex /* = kotlin.Long */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun SKSummaryCopyParagraphSummaryString(/*0*/ summary: platform.CoreServices.SKSummaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSummary>? */, /*1*/ numParagraphs: platform.CoreFoundation.CFIndex /* = kotlin.Long */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun SKSummaryCopySentenceAtIndex(/*0*/ summary: platform.CoreServices.SKSummaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSummary>? */, /*1*/ i: platform.CoreFoundation.CFIndex /* = kotlin.Long */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun SKSummaryCopySentenceSummaryString(/*0*/ summary: platform.CoreServices.SKSummaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSummary>? */, /*1*/ numSentences: platform.CoreFoundation.CFIndex /* = kotlin.Long */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun SKSummaryCreateWithString(/*0*/ inString: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreServices.SKSummaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSummary>? */ { TODO() }

fun SKSummaryGetParagraphCount(/*0*/ summary: platform.CoreServices.SKSummaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSummary>? */): platform.CoreFoundation.CFIndex /* = kotlin.Long */ { TODO() }

fun SKSummaryGetParagraphSummaryInfo(/*0*/ summary: platform.CoreServices.SKSummaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSummary>? */, /*1*/ numParagraphsInSummary: platform.CoreFoundation.CFIndex /* = kotlin.Long */, /*2*/ outRankOrderOfParagraphs: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFIndexVar /* = kotlinx.cinterop.LongVarOf<platform.CoreFoundation.CFIndex /* = kotlin.Long */> */>?, /*3*/ outParagraphIndexOfParagraphs: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFIndexVar /* = kotlinx.cinterop.LongVarOf<platform.CoreFoundation.CFIndex /* = kotlin.Long */> */>?): platform.CoreFoundation.CFIndex /* = kotlin.Long */ { TODO() }

fun SKSummaryGetSentenceCount(/*0*/ summary: platform.CoreServices.SKSummaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSummary>? */): platform.CoreFoundation.CFIndex /* = kotlin.Long */ { TODO() }

fun SKSummaryGetSentenceSummaryInfo(/*0*/ summary: platform.CoreServices.SKSummaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__SKSummary>? */, /*1*/ numSentencesInSummary: platform.CoreFoundation.CFIndex /* = kotlin.Long */, /*2*/ outRankOrderOfSentences: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFIndexVar /* = kotlinx.cinterop.LongVarOf<platform.CoreFoundation.CFIndex /* = kotlin.Long */> */>?, /*3*/ outSentenceIndexOfSentences: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFIndexVar /* = kotlinx.cinterop.LongVarOf<platform.CoreFoundation.CFIndex /* = kotlin.Long */> */>?, /*4*/ outParagraphIndexOfSentences: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFIndexVar /* = kotlinx.cinterop.LongVarOf<platform.CoreFoundation.CFIndex /* = kotlin.Long */> */>?): platform.CoreFoundation.CFIndex /* = kotlin.Long */ { TODO() }

fun SKSummaryGetTypeID(): platform.CoreFoundation.CFTypeID /* = kotlin.ULong */ { TODO() }

fun SetAliasUserType(/*0*/ alias: platform.CoreServices.AliasHandle? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasPtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.AliasPtr /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasRecord> */> */>? */, /*1*/ userType: platform.darwin.OSType /* = kotlin.UInt */) { TODO() }

fun SetAliasUserTypeWithPtr(/*0*/ alias: platform.CoreServices.AliasPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.AliasRecord>? */, /*1*/ userType: platform.darwin.OSType /* = kotlin.UInt */) { TODO() }

fun SetCollectionDefaultAttributes(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ whichAttributes: platform.darwin.SInt32 /* = kotlin.Int */, /*2*/ newAttributes: platform.darwin.SInt32 /* = kotlin.Int */) { TODO() }

fun SetCollectionExceptionProc(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ exceptionProc: platform.CoreServices.CollectionExceptionUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, platform.darwin.OSErr /* = kotlin.Short */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */) { TODO() }

fun SetCollectionItemInfo(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ tag: platform.CoreServices.CollectionTag /* = kotlin.UInt */, /*2*/ id: platform.darwin.SInt32 /* = kotlin.Int */, /*3*/ whichAttributes: platform.darwin.SInt32 /* = kotlin.Int */, /*4*/ newAttributes: platform.darwin.SInt32 /* = kotlin.Int */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun SetComponentInstanceError(/*0*/ aComponentInstance: platform.CoreServices.ComponentInstance? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>? */, /*1*/ theError: platform.darwin.OSErr /* = kotlin.Short */) { TODO() }

fun SetComponentInstanceStorage(/*0*/ aComponentInstance: platform.CoreServices.ComponentInstance? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentInstanceRecord>? */, /*1*/ theStorage: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) { TODO() }

fun SetComponentRefcon(/*0*/ aComponent: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */, /*1*/ theRefcon: kotlin.Long) { TODO() }

fun SetCustomIconsEnabled(/*0*/ vRefNum: platform.darwin.SInt16 /* = kotlin.Short */, /*1*/ enableCustomIcons: kotlin.Boolean): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun SetDebugOptionValue(/*0*/ componentSignature: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ optionSelectorNum: platform.darwin.SInt32 /* = kotlin.Int */, /*2*/ newOptionSetting: kotlin.Boolean): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun SetDebuggerNotificationProcs(/*0*/ notifyNewThread: platform.CoreServices.DebuggerNewThreadTPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID /* = kotlin.ULong */) -> kotlin.Unit>>? */, /*1*/ notifyDisposeThread: platform.CoreServices.DebuggerDisposeThreadTPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID /* = kotlin.ULong */) -> kotlin.Unit>>? */, /*2*/ notifyThreadScheduler: platform.CoreServices.DebuggerThreadSchedulerTPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.SchedulerInfoRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SchedulerInfoRec>? */) -> platform.CoreServices.ThreadID /* = kotlin.ULong */>>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun SetDefaultComponent(/*0*/ aComponent: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */, /*1*/ flags: platform.darwin.SInt16 /* = kotlin.Short */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun SetFallbackUnicodeToText(/*0*/ iUnicodeToTextInfo: platform.CoreServices.UnicodeToTextInfo? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUnicodeToTextInfo>? */, /*1*/ iFallback: platform.CoreServices.UnicodeToTextFallbackUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, platform.darwin.ByteCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, platform.CoreServices.TextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */, platform.darwin.ByteCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.ConstUnicodeMappingPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.UnicodeMapping>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */, /*2*/ iControlFlags: platform.darwin.OptionBits /* = kotlin.UInt */, /*3*/ iInfoPtr: platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun SetFallbackUnicodeToTextRun(/*0*/ iUnicodeToTextRunInfo: platform.CoreServices.UnicodeToTextRunInfo? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUnicodeToTextRunInfo>? */, /*1*/ iFallback: platform.CoreServices.UnicodeToTextFallbackUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, platform.darwin.ByteCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, platform.CoreServices.TextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */, platform.darwin.ByteCount /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreServices.ConstUnicodeMappingPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.UnicodeMapping>? */) -> platform.darwin.OSStatus /* = kotlin.Int */>>? */, /*2*/ iControlFlags: platform.darwin.OptionBits /* = kotlin.UInt */, /*3*/ iInfoPtr: platform.darwin.LogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun SetGestaltValue(/*0*/ selector: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ newValue: platform.darwin.SInt32 /* = kotlin.Int */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun SetHandleSize(/*0*/ h: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*1*/ newSize: platform.darwin.Size /* = kotlin.Long */) { TODO() }

fun SetIndexedCollectionItemInfo(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ itemIndex: platform.darwin.SInt32 /* = kotlin.Int */, /*2*/ whichAttributes: platform.darwin.SInt32 /* = kotlin.Int */, /*3*/ newAttributes: platform.darwin.SInt32 /* = kotlin.Int */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun SetPtrSize(/*0*/ p: platform.darwin.Ptr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */, /*1*/ newSize: platform.darwin.Size /* = kotlin.Long */) { TODO() }

fun SetResAttrs(/*0*/ theResource: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*1*/ attrs: platform.CoreServices.ResAttributes /* = kotlin.Short */) { TODO() }

fun SetResFileAttrs(/*0*/ refNum: platform.CoreServices.ResFileRefNum /* = kotlin.Int */, /*1*/ attrs: platform.CoreServices.ResFileAttributes /* = kotlin.Short */) { TODO() }

fun SetResInfo(/*0*/ theResource: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*1*/ theID: platform.CoreServices.ResID /* = kotlin.Short */, /*2*/ name: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */) { TODO() }

fun SetResLoad(/*0*/ load: kotlin.Boolean) { TODO() }

fun SetResPurge(/*0*/ install: kotlin.Boolean) { TODO() }

fun SetResourceSize(/*0*/ theResource: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*1*/ newSize: kotlin.Long) { TODO() }

fun SetScriptManagerVariable(/*0*/ selector: kotlin.Short, /*1*/ param: kotlin.Long): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun SetThreadReadyGivenTaskRef(/*0*/ threadTRef: platform.CoreServices.ThreadTaskRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*1*/ threadToSet: platform.CoreServices.ThreadID /* = kotlin.ULong */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun SetThreadScheduler(/*0*/ threadScheduler: platform.CoreServices.ThreadSchedulerTPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.SchedulerInfoRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SchedulerInfoRec>? */) -> platform.CoreServices.ThreadID /* = kotlin.ULong */>>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun SetThreadState(/*0*/ threadToSet: platform.CoreServices.ThreadID /* = kotlin.ULong */, /*1*/ newState: platform.CoreServices.ThreadState /* = kotlin.UShort */, /*2*/ suggestedThread: platform.CoreServices.ThreadID /* = kotlin.ULong */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun SetThreadStateEndCritical(/*0*/ threadToSet: platform.CoreServices.ThreadID /* = kotlin.ULong */, /*1*/ newState: platform.CoreServices.ThreadState /* = kotlin.UShort */, /*2*/ suggestedThread: platform.CoreServices.ThreadID /* = kotlin.ULong */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun SetThreadSwitcher(/*0*/ thread: platform.CoreServices.ThreadID /* = kotlin.ULong */, /*1*/ threadSwitcher: platform.CoreServices.ThreadSwitchTPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID /* = kotlin.ULong */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*2*/ switchProcParam: kotlinx.cinterop.CValuesRef<*>?, /*3*/ inOrOut: kotlin.Boolean): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun SetThreadTerminator(/*0*/ thread: platform.CoreServices.ThreadID /* = kotlin.ULong */, /*1*/ threadTerminator: platform.CoreServices.ThreadTerminationTPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.ThreadID /* = kotlin.ULong */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*2*/ terminationProcParam: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun SleepQInstall(/*0*/ qRecPtr: platform.CoreServices.SleepQRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SleepQRec>? */) { TODO() }

fun SleepQRemove(/*0*/ qRecPtr: platform.CoreServices.SleepQRecPtr? /* = kotlinx.cinterop.CPointer<platform.CoreServices.SleepQRec>? */) { TODO() }

fun SubAbsoluteFromAbsolute(/*0*/ leftAbsoluteTime: kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */>, /*1*/ rightAbsoluteTime: kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */>): kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */> { TODO() }

fun SubDurationFromAbsolute(/*0*/ duration: platform.darwin.Duration /* = kotlin.Int */, /*1*/ absoluteTime: kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */>): kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */> { TODO() }

fun SubNanosecondsFromAbsolute(/*0*/ nanoseconds: kotlinx.cinterop.CValue<platform.CoreServices.Nanoseconds /* = platform.darwin.UnsignedWide */>, /*1*/ absoluteTime: kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */>): kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */> { TODO() }

fun SysError(/*0*/ errorCode: kotlin.Short) { TODO() }

fun TECClearConverterContextInfo(/*0*/ encodingConverter: platform.CoreServices.TECObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECClearSnifferContextInfo(/*0*/ encodingSniffer: platform.CoreServices.TECSnifferObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECSnifferObjectRef>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECConvertText(/*0*/ encodingConverter: platform.CoreServices.TECObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef>? */, /*1*/ inputBuffer: platform.CoreServices.ConstTextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */, /*2*/ inputBufferLength: platform.darwin.ByteCount /* = kotlin.ULong */, /*3*/ actualInputLength: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, /*4*/ outputBuffer: platform.CoreServices.TextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */, /*5*/ outputBufferLength: platform.darwin.ByteCount /* = kotlin.ULong */, /*6*/ actualOutputLength: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECConvertTextToMultipleEncodings(/*0*/ encodingConverter: platform.CoreServices.TECObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef>? */, /*1*/ inputBuffer: platform.CoreServices.ConstTextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */, /*2*/ inputBufferLength: platform.darwin.ByteCount /* = kotlin.ULong */, /*3*/ actualInputLength: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, /*4*/ outputBuffer: platform.CoreServices.TextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */, /*5*/ outputBufferLength: platform.darwin.ByteCount /* = kotlin.ULong */, /*6*/ actualOutputLength: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, /*7*/ outEncodingsBuffer: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingRun>?, /*8*/ maxOutEncodingRuns: platform.darwin.ItemCount /* = kotlin.ULong */, /*9*/ actualOutEncodingRuns: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECCopyTextEncodingInternetNameAndMIB(/*0*/ textEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */, /*1*/ usage: platform.CoreServices.TECInternetNameUsageMask /* = kotlin.UInt */, /*2*/ encodingNamePtr: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFStringRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFStringRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString> */> */>?, /*3*/ mibEnumPtr: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECCountAvailableSniffers(/*0*/ numberOfEncodings: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECCountAvailableTextEncodings(/*0*/ numberEncodings: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECCountDestinationTextEncodings(/*0*/ inputEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */, /*1*/ numberOfEncodings: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECCountDirectTextEncodingConversions(/*0*/ numberOfEncodings: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECCountMailTextEncodings(/*0*/ locale: platform.darwin.RegionCode /* = kotlin.Short */, /*1*/ numberEncodings: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECCountSubTextEncodings(/*0*/ inputEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */, /*1*/ numberOfEncodings: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECCountWebTextEncodings(/*0*/ locale: platform.darwin.RegionCode /* = kotlin.Short */, /*1*/ numberEncodings: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECCreateConverter(/*0*/ newEncodingConverter: kotlinx.cinterop.CValuesRef<platform.CoreServices.TECObjectRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECObjectRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef> */> */>?, /*1*/ inputEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */, /*2*/ outputEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECCreateConverterFromPath(/*0*/ newEncodingConverter: kotlinx.cinterop.CValuesRef<platform.CoreServices.TECObjectRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECObjectRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef> */> */>?, /*1*/ inPath: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, /*2*/ inEncodings: platform.darwin.ItemCount /* = kotlin.ULong */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECCreateOneToManyConverter(/*0*/ newEncodingConverter: kotlinx.cinterop.CValuesRef<platform.CoreServices.TECObjectRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECObjectRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef> */> */>?, /*1*/ inputEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */, /*2*/ numOutputEncodings: platform.darwin.ItemCount /* = kotlin.ULong */, /*3*/ outputEncodings: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECCreateSniffer(/*0*/ encodingSniffer: kotlinx.cinterop.CValuesRef<platform.CoreServices.TECSnifferObjectRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECSnifferObjectRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECSnifferObjectRef> */> */>?, /*1*/ testEncodings: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, /*2*/ numTextEncodings: platform.darwin.ItemCount /* = kotlin.ULong */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECDisposeConverter(/*0*/ newEncodingConverter: platform.CoreServices.TECObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECDisposeSniffer(/*0*/ encodingSniffer: platform.CoreServices.TECSnifferObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECSnifferObjectRef>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECFlushMultipleEncodings(/*0*/ encodingConverter: platform.CoreServices.TECObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef>? */, /*1*/ outputBuffer: platform.CoreServices.TextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */, /*2*/ outputBufferLength: platform.darwin.ByteCount /* = kotlin.ULong */, /*3*/ actualOutputLength: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?, /*4*/ outEncodingsBuffer: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingRun>?, /*5*/ maxOutEncodingRuns: platform.darwin.ItemCount /* = kotlin.ULong */, /*6*/ actualOutEncodingRuns: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECFlushText(/*0*/ encodingConverter: platform.CoreServices.TECObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef>? */, /*1*/ outputBuffer: platform.CoreServices.TextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */, /*2*/ outputBufferLength: platform.darwin.ByteCount /* = kotlin.ULong */, /*3*/ actualOutputLength: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECGetAvailableSniffers(/*0*/ availableSniffers: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, /*1*/ maxAvailableSniffers: platform.darwin.ItemCount /* = kotlin.ULong */, /*2*/ actualAvailableSniffers: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECGetAvailableTextEncodings(/*0*/ availableEncodings: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, /*1*/ maxAvailableEncodings: platform.darwin.ItemCount /* = kotlin.ULong */, /*2*/ actualAvailableEncodings: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECGetDestinationTextEncodings(/*0*/ inputEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */, /*1*/ destinationEncodings: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, /*2*/ maxDestinationEncodings: platform.darwin.ItemCount /* = kotlin.ULong */, /*3*/ actualDestinationEncodings: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECGetDirectTextEncodingConversions(/*0*/ availableConversions: kotlinx.cinterop.CValuesRef<platform.CoreServices.TECConversionInfo>?, /*1*/ maxAvailableConversions: platform.darwin.ItemCount /* = kotlin.ULong */, /*2*/ actualAvailableConversions: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECGetEncodingList(/*0*/ encodingConverter: platform.CoreServices.TECObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef>? */, /*1*/ numEncodings: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?, /*2*/ encodingList: kotlinx.cinterop.CValuesRef<platform.darwin.HandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Handle /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECGetInfo(/*0*/ tecInfo: kotlinx.cinterop.CValuesRef<platform.CoreServices.TECInfoHandleVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECInfoHandle /* = kotlinx.cinterop.CPointer<platform.CoreServices.TECInfoPtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TECInfoPtr /* = kotlinx.cinterop.CPointer<platform.CoreServices.TECInfo> */> */> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECGetMailTextEncodings(/*0*/ locale: platform.darwin.RegionCode /* = kotlin.Short */, /*1*/ availableEncodings: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, /*2*/ maxAvailableEncodings: platform.darwin.ItemCount /* = kotlin.ULong */, /*3*/ actualAvailableEncodings: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECGetSubTextEncodings(/*0*/ inputEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */, /*1*/ subEncodings: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, /*2*/ maxSubEncodings: platform.darwin.ItemCount /* = kotlin.ULong */, /*3*/ actualSubEncodings: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECGetTextEncodingFromInternetName(/*0*/ textEncoding: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, /*1*/ encodingName: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECGetTextEncodingFromInternetNameOrMIB(/*0*/ textEncodingPtr: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, /*1*/ usage: platform.CoreServices.TECInternetNameUsageMask /* = kotlin.UInt */, /*2*/ encodingName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ mibEnum: platform.darwin.SInt32 /* = kotlin.Int */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECGetTextEncodingInternetName(/*0*/ textEncoding: platform.CoreServices.TextEncoding /* = kotlin.UInt */, /*1*/ encodingName: platform.darwin.Str255? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECGetWebTextEncodings(/*0*/ locale: platform.darwin.RegionCode /* = kotlin.Short */, /*1*/ availableEncodings: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, /*2*/ maxAvailableEncodings: platform.darwin.ItemCount /* = kotlin.ULong */, /*3*/ actualAvailableEncodings: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECSetBasicOptions(/*0*/ encodingConverter: platform.CoreServices.TECObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECObjectRef>? */, /*1*/ controlFlags: platform.darwin.OptionBits /* = kotlin.UInt */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TECSniffTextEncoding(/*0*/ encodingSniffer: platform.CoreServices.TECSnifferObjectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTECSnifferObjectRef>? */, /*1*/ inputBuffer: platform.CoreServices.ConstTextPtr? /* = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>? */, /*2*/ inputBufferLength: platform.darwin.ByteCount /* = kotlin.ULong */, /*3*/ testEncodings: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?, /*4*/ numTextEncodings: platform.darwin.ItemCount /* = kotlin.ULong */, /*5*/ numErrsArray: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?, /*6*/ maxErrs: platform.darwin.ItemCount /* = kotlin.ULong */, /*7*/ numFeaturesArray: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?, /*8*/ maxFeatures: platform.darwin.ItemCount /* = kotlin.ULong */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TaskLevel(): platform.darwin.UInt32 /* = kotlin.UInt */ { TODO() }

fun TempNewHandle(/*0*/ logicalSize: platform.darwin.Size /* = kotlin.Long */, /*1*/ resultCode: kotlinx.cinterop.CValuesRef<platform.darwin.OSErrVar /* = kotlinx.cinterop.ShortVarOf<platform.darwin.OSErr /* = kotlin.Short */> */>?): platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */ { TODO() }

fun TestAndClear(/*0*/ bit: platform.darwin.UInt32 /* = kotlin.UInt */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>?): kotlin.Boolean { TODO() }

fun TestAndSet(/*0*/ bit: platform.darwin.UInt32 /* = kotlin.UInt */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.UInt8Var /* = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */> */>?): kotlin.Boolean { TODO() }

fun ThreadBeginCritical(): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun ThreadCurrentStackSpace(/*0*/ thread: platform.CoreServices.ThreadID /* = kotlin.ULong */, /*1*/ freeStack: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun ThreadEndCritical(): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun TickCount(): platform.darwin.UInt32 /* = kotlin.UInt */ { TODO() }

fun TruncateForTextToUnicode(/*0*/ iTextToUnicodeInfo: platform.CoreServices.ConstTextToUnicodeInfo? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTextToUnicodeInfo>? */, /*1*/ iSourceLen: platform.darwin.ByteCount /* = kotlin.ULong */, /*2*/ iSourceStr: platform.darwin.ConstLogicalAddress? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*3*/ iMaxLen: platform.darwin.ByteCount /* = kotlin.ULong */, /*4*/ oTruncatedLen: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun TruncateForUnicodeToText(/*0*/ iUnicodeToTextInfo: platform.CoreServices.ConstUnicodeToTextInfo? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUnicodeToTextInfo>? */, /*1*/ iSourceLen: platform.darwin.ByteCount /* = kotlin.ULong */, /*2*/ iSourceStr: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*3*/ iControlFlags: platform.darwin.OptionBits /* = kotlin.UInt */, /*4*/ iMaxLen: platform.darwin.ByteCount /* = kotlin.ULong */, /*5*/ oTruncatedLen: kotlinx.cinterop.CValuesRef<platform.darwin.ByteCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun U32SetU(/*0*/ value: platform.darwin.UInt64 /* = kotlin.ULong */): platform.darwin.UInt32 /* = kotlin.UInt */ { TODO() }

fun U64Add(/*0*/ left: platform.darwin.UInt64 /* = kotlin.ULong */, /*1*/ right: platform.darwin.UInt64 /* = kotlin.ULong */): platform.darwin.UInt64 /* = kotlin.ULong */ { TODO() }

fun U64And(/*0*/ left: platform.darwin.UInt64 /* = kotlin.ULong */, /*1*/ right: platform.darwin.UInt64 /* = kotlin.ULong */): kotlin.Boolean { TODO() }

fun U64BitwiseAnd(/*0*/ left: platform.darwin.UInt64 /* = kotlin.ULong */, /*1*/ right: platform.darwin.UInt64 /* = kotlin.ULong */): platform.darwin.UInt64 /* = kotlin.ULong */ { TODO() }

fun U64BitwiseEor(/*0*/ left: platform.darwin.UInt64 /* = kotlin.ULong */, /*1*/ right: platform.darwin.UInt64 /* = kotlin.ULong */): platform.darwin.UInt64 /* = kotlin.ULong */ { TODO() }

fun U64BitwiseNot(/*0*/ value: platform.darwin.UInt64 /* = kotlin.ULong */): platform.darwin.UInt64 /* = kotlin.ULong */ { TODO() }

fun U64BitwiseOr(/*0*/ left: platform.darwin.UInt64 /* = kotlin.ULong */, /*1*/ right: platform.darwin.UInt64 /* = kotlin.ULong */): platform.darwin.UInt64 /* = kotlin.ULong */ { TODO() }

fun U64Compare(/*0*/ left: platform.darwin.UInt64 /* = kotlin.ULong */, /*1*/ right: platform.darwin.UInt64 /* = kotlin.ULong */): platform.darwin.SInt32 /* = kotlin.Int */ { TODO() }

fun U64Div(/*0*/ dividend: platform.darwin.UInt64 /* = kotlin.ULong */, /*1*/ divisor: platform.darwin.UInt64 /* = kotlin.ULong */): platform.darwin.UInt64 /* = kotlin.ULong */ { TODO() }

fun U64Divide(/*0*/ dividend: platform.darwin.UInt64 /* = kotlin.ULong */, /*1*/ divisor: platform.darwin.UInt64 /* = kotlin.ULong */, /*2*/ remainder: kotlinx.cinterop.CValuesRef<platform.darwin.UInt64Var /* = kotlinx.cinterop.ULongVarOf<platform.darwin.UInt64 /* = kotlin.ULong */> */>?): platform.darwin.UInt64 /* = kotlin.ULong */ { TODO() }

fun U64Eor(/*0*/ left: platform.darwin.UInt64 /* = kotlin.ULong */, /*1*/ right: platform.darwin.UInt64 /* = kotlin.ULong */): kotlin.Boolean { TODO() }

fun U64Max(): platform.darwin.UInt64 /* = kotlin.ULong */ { TODO() }

fun U64Mod(/*0*/ dividend: platform.darwin.UInt64 /* = kotlin.ULong */, /*1*/ divisor: platform.darwin.UInt64 /* = kotlin.ULong */): platform.darwin.UInt64 /* = kotlin.ULong */ { TODO() }

fun U64Multiply(/*0*/ left: platform.darwin.UInt64 /* = kotlin.ULong */, /*1*/ right: platform.darwin.UInt64 /* = kotlin.ULong */): platform.darwin.UInt64 /* = kotlin.ULong */ { TODO() }

fun U64Not(/*0*/ value: platform.darwin.UInt64 /* = kotlin.ULong */): kotlin.Boolean { TODO() }

fun U64Or(/*0*/ left: platform.darwin.UInt64 /* = kotlin.ULong */, /*1*/ right: platform.darwin.UInt64 /* = kotlin.ULong */): kotlin.Boolean { TODO() }

fun U64Set(/*0*/ value: platform.darwin.SInt32 /* = kotlin.Int */): platform.darwin.UInt64 /* = kotlin.ULong */ { TODO() }

fun U64SetU(/*0*/ value: platform.darwin.UInt32 /* = kotlin.UInt */): platform.darwin.UInt64 /* = kotlin.ULong */ { TODO() }

fun U64ShiftLeft(/*0*/ value: platform.darwin.UInt64 /* = kotlin.ULong */, /*1*/ shift: platform.darwin.UInt32 /* = kotlin.UInt */): platform.darwin.UInt64 /* = kotlin.ULong */ { TODO() }

fun U64ShiftRight(/*0*/ value: platform.darwin.UInt64 /* = kotlin.ULong */, /*1*/ shift: platform.darwin.UInt32 /* = kotlin.UInt */): platform.darwin.UInt64 /* = kotlin.ULong */ { TODO() }

fun U64Subtract(/*0*/ left: platform.darwin.UInt64 /* = kotlin.ULong */, /*1*/ right: platform.darwin.UInt64 /* = kotlin.ULong */): platform.darwin.UInt64 /* = kotlin.ULong */ { TODO() }

fun UCCompareCollationKeys(/*0*/ key1Ptr: kotlinx.cinterop.CValuesRef<platform.CoreServices.UCCollationValueVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.UCCollationValue /* = kotlin.UInt */> */>?, /*1*/ key1Length: platform.darwin.ItemCount /* = kotlin.ULong */, /*2*/ key2Ptr: kotlinx.cinterop.CValuesRef<platform.CoreServices.UCCollationValueVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.UCCollationValue /* = kotlin.UInt */> */>?, /*3*/ key2Length: platform.darwin.ItemCount /* = kotlin.ULong */, /*4*/ equivalent: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?, /*5*/ order: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCCompareText(/*0*/ collatorRef: platform.CoreServices.CollatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollatorRef>? */, /*1*/ text1Ptr: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*2*/ text1Length: platform.darwin.UniCharCount /* = kotlin.ULong */, /*3*/ text2Ptr: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*4*/ text2Length: platform.darwin.UniCharCount /* = kotlin.ULong */, /*5*/ equivalent: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?, /*6*/ order: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCCompareTextDefault(/*0*/ options: platform.CoreServices.UCCollateOptions /* = kotlin.UInt */, /*1*/ text1Ptr: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*2*/ text1Length: platform.darwin.UniCharCount /* = kotlin.ULong */, /*3*/ text2Ptr: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*4*/ text2Length: platform.darwin.UniCharCount /* = kotlin.ULong */, /*5*/ equivalent: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?, /*6*/ order: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCCompareTextNoLocale(/*0*/ options: platform.CoreServices.UCCollateOptions /* = kotlin.UInt */, /*1*/ text1Ptr: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*2*/ text1Length: platform.darwin.UniCharCount /* = kotlin.ULong */, /*3*/ text2Ptr: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*4*/ text2Length: platform.darwin.UniCharCount /* = kotlin.ULong */, /*5*/ equivalent: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?, /*6*/ order: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCConvertCFAbsoluteTimeToLongDateTime(/*0*/ iCFTime: platform.CoreFoundation.CFAbsoluteTime /* = kotlin.Double */, /*1*/ oLongDate: kotlinx.cinterop.CValuesRef<platform.CoreServices.LongDateTimeVar /* = kotlinx.cinterop.LongVarOf<platform.CoreServices.LongDateTime /* = kotlin.Long */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCConvertCFAbsoluteTimeToSeconds(/*0*/ iCFTime: platform.CoreFoundation.CFAbsoluteTime /* = kotlin.Double */, /*1*/ oSeconds: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCConvertCFAbsoluteTimeToUTCDateTime(/*0*/ iCFTime: platform.CoreFoundation.CFAbsoluteTime /* = kotlin.Double */, /*1*/ oUTCDate: kotlinx.cinterop.CValuesRef<platform.CoreServices.UTCDateTime>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCConvertLongDateTimeToCFAbsoluteTime(/*0*/ iLongTime: platform.CoreServices.LongDateTime /* = kotlin.Long */, /*1*/ oCFTime: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFAbsoluteTimeVar /* = kotlinx.cinterop.DoubleVarOf<platform.CoreFoundation.CFAbsoluteTime /* = kotlin.Double */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCConvertSecondsToCFAbsoluteTime(/*0*/ iSeconds: platform.darwin.UInt32 /* = kotlin.UInt */, /*1*/ oCFTime: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFAbsoluteTimeVar /* = kotlinx.cinterop.DoubleVarOf<platform.CoreFoundation.CFAbsoluteTime /* = kotlin.Double */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCConvertUTCDateTimeToCFAbsoluteTime(/*0*/ iUTCDate: kotlinx.cinterop.CValuesRef<platform.CoreServices.UTCDateTime>?, /*1*/ oCFTime: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFAbsoluteTimeVar /* = kotlinx.cinterop.DoubleVarOf<platform.CoreFoundation.CFAbsoluteTime /* = kotlin.Double */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCCreateCollator(/*0*/ locale: platform.CoreServices.LocaleRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLocaleRef>? */, /*1*/ opVariant: platform.CoreServices.LocaleOperationVariant /* = kotlin.UInt */, /*2*/ options: platform.CoreServices.UCCollateOptions /* = kotlin.UInt */, /*3*/ collatorRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.CollatorRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.CollatorRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollatorRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCCreateTextBreakLocator(/*0*/ locale: platform.CoreServices.LocaleRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLocaleRef>? */, /*1*/ opVariant: platform.CoreServices.LocaleOperationVariant /* = kotlin.UInt */, /*2*/ breakTypes: platform.CoreServices.UCTextBreakType /* = kotlin.UInt */, /*3*/ breakRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextBreakLocatorRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TextBreakLocatorRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTextBreakLocatorRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCDisposeCollator(/*0*/ collatorRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.CollatorRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.CollatorRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollatorRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCDisposeTextBreakLocator(/*0*/ breakRef: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextBreakLocatorRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.TextBreakLocatorRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTextBreakLocatorRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCFindTextBreak(/*0*/ breakRef: platform.CoreServices.TextBreakLocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueTextBreakLocatorRef>? */, /*1*/ breakType: platform.CoreServices.UCTextBreakType /* = kotlin.UInt */, /*2*/ options: platform.CoreServices.UCTextBreakOptions /* = kotlin.UInt */, /*3*/ textPtr: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*4*/ textLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*5*/ startOffset: platform.CoreServices.UniCharArrayOffset /* = kotlin.ULong */, /*6*/ breakOffset: kotlinx.cinterop.CValuesRef<platform.CoreServices.UniCharArrayOffsetVar /* = kotlinx.cinterop.ULongVarOf<platform.CoreServices.UniCharArrayOffset /* = kotlin.ULong */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCGetCharProperty(/*0*/ charPtr: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*1*/ textLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*2*/ propType: platform.CoreServices.UCCharPropertyType /* = kotlin.Int */, /*3*/ propValue: kotlinx.cinterop.CValuesRef<platform.CoreServices.UCCharPropertyValueVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.UCCharPropertyValue /* = kotlin.UInt */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCGetCollationKey(/*0*/ collatorRef: platform.CoreServices.CollatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollatorRef>? */, /*1*/ textPtr: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?, /*2*/ textLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*3*/ maxKeySize: platform.darwin.ItemCount /* = kotlin.ULong */, /*4*/ actualKeySize: kotlinx.cinterop.CValuesRef<platform.darwin.ItemCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount /* = kotlin.ULong */> */>?, /*5*/ collationKey: kotlinx.cinterop.CValuesRef<platform.CoreServices.UCCollationValueVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.UCCollationValue /* = kotlin.UInt */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCGetUnicodeScalarValueForSurrogatePair(/*0*/ surrogateHigh: platform.darwin.UniChar /* = kotlin.UShort */, /*1*/ surrogateLow: platform.darwin.UniChar /* = kotlin.UShort */): platform.darwin.UnicodeScalarValue /* = kotlin.UInt */ { TODO() }

fun UCIsSurrogateHighCharacter(/*0*/ character: platform.darwin.UniChar /* = kotlin.UShort */): kotlin.Boolean { TODO() }

fun UCIsSurrogateLowCharacter(/*0*/ character: platform.darwin.UniChar /* = kotlin.UShort */): kotlin.Boolean { TODO() }

fun UCKeyTranslate(/*0*/ keyLayoutPtr: kotlinx.cinterop.CValuesRef<platform.CoreServices.UCKeyboardLayout>?, /*1*/ virtualKeyCode: platform.darwin.UInt16 /* = kotlin.UShort */, /*2*/ keyAction: platform.darwin.UInt16 /* = kotlin.UShort */, /*3*/ modifierKeyState: platform.darwin.UInt32 /* = kotlin.UInt */, /*4*/ keyboardType: platform.darwin.UInt32 /* = kotlin.UInt */, /*5*/ keyTranslateOptions: platform.darwin.OptionBits /* = kotlin.UInt */, /*6*/ deadKeyState: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?, /*7*/ maxStringLength: platform.darwin.UniCharCount /* = kotlin.ULong */, /*8*/ actualStringLength: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharCountVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.UniCharCount /* = kotlin.ULong */> */>?, /*9*/ unicodeString: kotlinx.cinterop.CValuesRef<platform.darwin.UniCharVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar /* = kotlin.UShort */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCTypeSelectAddKeyToSelector(/*0*/ inRef: platform.CoreServices.UCTypeSelectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUCTypeSelectRef>? */, /*1*/ inText: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ inEventTime: kotlin.Double, /*3*/ updateFlag: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.BooleanVar /* = kotlinx.cinterop.BooleanVarOf<kotlin.Boolean> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCTypeSelectCompare(/*0*/ ref: platform.CoreServices.UCTypeSelectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUCTypeSelectRef>? */, /*1*/ inText: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ result: kotlinx.cinterop.CValuesRef<platform.CoreServices.UCTypeSelectCompareResultVar /* = kotlinx.cinterop.IntVarOf<platform.CoreServices.UCTypeSelectCompareResult /* = kotlin.Int */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCTypeSelectCreateSelector(/*0*/ locale: platform.CoreServices.LocaleRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueLocaleRef>? */, /*1*/ opVariant: platform.CoreServices.LocaleOperationVariant /* = kotlin.UInt */, /*2*/ options: platform.CoreServices.UCCollateOptions /* = kotlin.UInt */, /*3*/ newSelector: kotlinx.cinterop.CValuesRef<platform.CoreServices.UCTypeSelectRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UCTypeSelectRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUCTypeSelectRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCTypeSelectFindItem(/*0*/ ref: platform.CoreServices.UCTypeSelectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUCTypeSelectRef>? */, /*1*/ listSize: platform.darwin.UInt32 /* = kotlin.UInt */, /*2*/ listDataPtr: kotlinx.cinterop.CValuesRef<*>?, /*3*/ refcon: kotlinx.cinterop.CValuesRef<*>?, /*4*/ userUPP: platform.CoreServices.IndexToUCStringUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.UInt32 /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.CoreFoundation.CFStringRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFStringRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString> */> */>?, kotlinx.cinterop.CPointer<platform.CoreServices.UCTypeSelectOptionsVar /* = kotlinx.cinterop.UShortVarOf<platform.CoreServices.UCTypeSelectOptions /* = kotlin.UShort */> */>?) -> kotlin.Boolean>>? */, /*5*/ closestItem: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCTypeSelectFlushSelectorData(/*0*/ ref: platform.CoreServices.UCTypeSelectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUCTypeSelectRef>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCTypeSelectReleaseSelector(/*0*/ ref: kotlinx.cinterop.CValuesRef<platform.CoreServices.UCTypeSelectRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.UCTypeSelectRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUCTypeSelectRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCTypeSelectWalkList(/*0*/ ref: platform.CoreServices.UCTypeSelectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUCTypeSelectRef>? */, /*1*/ currSelect: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ direction: platform.CoreServices.UCTSWalkDirection /* = kotlin.UShort */, /*3*/ listSize: platform.darwin.UInt32 /* = kotlin.UInt */, /*4*/ listDataPtr: kotlinx.cinterop.CValuesRef<*>?, /*5*/ refcon: kotlinx.cinterop.CValuesRef<*>?, /*6*/ userUPP: platform.CoreServices.IndexToUCStringUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.UInt32 /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<platform.CoreFoundation.CFStringRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFStringRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString> */> */>?, kotlinx.cinterop.CPointer<platform.CoreServices.UCTypeSelectOptionsVar /* = kotlinx.cinterop.UShortVarOf<platform.CoreServices.UCTypeSelectOptions /* = kotlin.UShort */> */>?) -> kotlin.Boolean>>? */, /*7*/ closestItem: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UCTypeSelectWouldResetBuffer(/*0*/ inRef: platform.CoreServices.UCTypeSelectRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueUCTypeSelectRef>? */, /*1*/ inText: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ inEventTime: kotlin.Double): kotlin.Boolean { TODO() }

fun UInt64ToSInt64(/*0*/ value: platform.darwin.UInt64 /* = kotlin.ULong */): platform.darwin.SInt64 /* = kotlin.Long */ { TODO() }

fun UInt64ToUnsignedWide(/*0*/ u: platform.darwin.UInt64 /* = kotlin.ULong */): kotlinx.cinterop.CValue<platform.darwin.UnsignedWide> { TODO() }

fun UTCreateStringForOSType(/*0*/ inOSType: platform.darwin.OSType /* = kotlin.UInt */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun UTGetOSTypeFromString(/*0*/ inString: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.darwin.OSType /* = kotlin.UInt */ { TODO() }

fun UTTypeConformsTo(/*0*/ inUTI: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*1*/ inConformsToUTI: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): kotlin.Boolean { TODO() }

fun UTTypeCopyAllTagsWithClass(/*0*/ inUTI: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*1*/ inTagClass: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun UTTypeCopyDeclaration(/*0*/ inUTI: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */ { TODO() }

fun UTTypeCopyDeclaringBundleURL(/*0*/ inUTI: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */ { TODO() }

fun UTTypeCopyDescription(/*0*/ inUTI: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun UTTypeCopyPreferredTagWithClass(/*0*/ inUTI: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*1*/ inTagClass: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun UTTypeCreateAllIdentifiersForTag(/*0*/ inTagClass: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*1*/ inTag: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ inConformingToUTI: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */ { TODO() }

fun UTTypeCreatePreferredIdentifierForTag(/*0*/ inTagClass: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*1*/ inTag: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ inConformingToUTI: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */ { TODO() }

fun UTTypeEqual(/*0*/ inUTI1: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*1*/ inUTI2: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): kotlin.Boolean { TODO() }

fun UTTypeIsDeclared(/*0*/ inUTI: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): kotlin.Boolean { TODO() }

fun UTTypeIsDynamic(/*0*/ inUTI: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): kotlin.Boolean { TODO() }

fun UncaptureComponent(/*0*/ aComponent: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun UnflattenCollection(/*0*/ c: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ flattenProc: platform.CoreServices.CollectionFlattenUPP? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.SInt32 /* = kotlin.Int */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.OSErr /* = kotlin.Short */>>? */, /*2*/ refCon: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun UnflattenCollectionFromHdl(/*0*/ aCollection: platform.CoreServices.Collection? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueCollection>? */, /*1*/ flattened: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun Unique1ID(/*0*/ theType: platform.darwin.ResType /* = kotlin.UInt */): platform.CoreServices.ResID /* = kotlin.Short */ { TODO() }

fun UniqueID(/*0*/ theType: platform.darwin.ResType /* = kotlin.UInt */): platform.CoreServices.ResID /* = kotlin.Short */ { TODO() }

fun UnregisterComponent(/*0*/ aComponent: platform.CoreServices.Component? /* = kotlinx.cinterop.CPointer<platform.CoreServices.ComponentRecord>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun UnregisterIconRef(/*0*/ creator: platform.darwin.OSType /* = kotlin.UInt */, /*1*/ iconType: platform.darwin.OSType /* = kotlin.UInt */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun UnsignedFixedMulDiv(/*0*/ value: platform.darwin.UnsignedFixed /* = kotlin.UInt */, /*1*/ multiplier: platform.darwin.UnsignedFixed /* = kotlin.UInt */, /*2*/ divisor: platform.darwin.UnsignedFixed /* = kotlin.UInt */): platform.darwin.UnsignedFixed /* = kotlin.UInt */ { TODO() }

fun UnsignedWideToUInt64(/*0*/ uw: kotlinx.cinterop.CValue<platform.darwin.UnsignedWide>): platform.darwin.UInt64 /* = kotlin.ULong */ { TODO() }

fun UpTime(): kotlinx.cinterop.CValue<platform.darwin.AbsoluteTime /* = platform.darwin.UnsignedWide */> { TODO() }

fun UpdateIconRef(/*0*/ theIconRef: platform.CoreServices.IconRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueIconRef>? */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun UpdateResFile(/*0*/ refNum: platform.CoreServices.ResFileRefNum /* = kotlin.Int */) { TODO() }

fun UpdateSystemActivity(/*0*/ activity: platform.darwin.UInt8 /* = kotlin.UByte */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun UpgradeScriptInfoToTextEncoding(/*0*/ iTextScriptID: platform.darwin.ScriptCode /* = kotlin.Short */, /*1*/ iTextLanguageID: platform.darwin.LangCode /* = kotlin.Short */, /*2*/ iRegionID: platform.darwin.RegionCode /* = kotlin.Short */, /*3*/ iTextFontname: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */, /*4*/ oEncoding: kotlinx.cinterop.CValuesRef<platform.CoreServices.TextEncodingVar /* = kotlinx.cinterop.UIntVarOf<platform.CoreServices.TextEncoding /* = kotlin.UInt */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun UseResFile(/*0*/ refNum: platform.CoreServices.ResFileRefNum /* = kotlin.Int */) { TODO() }

fun WSGetCFTypeIDFromWSTypeID(/*0*/ typeID: platform.CoreServices.WSTypeID /* = kotlin.UInt */): platform.CoreFoundation.CFTypeID /* = kotlin.ULong */ { TODO() }

fun WSGetWSTypeIDFromCFType(/*0*/ ref: platform.CoreFoundation.CFTypeRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.CoreServices.WSTypeID /* = kotlin.UInt */ { TODO() }

fun WSMethodInvocationAddDeserializationOverride(/*0*/ invocation: platform.CoreServices.WSMethodInvocationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSMethodInvocationRef>? */, /*1*/ typeNamespace: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ typeName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ deserializationProc: platform.CoreServices.WSMethodInvocationDeserializationProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.WSMethodInvocationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSMethodInvocationRef>? */, platform.CoreFoundation.CFXMLTreeRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFTree>? */, platform.CoreFoundation.CFXMLTreeRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFTree>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreFoundation.CFTypeRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */, /*4*/ context: kotlinx.cinterop.CValuesRef<platform.CoreServices.WSClientContext>?) { TODO() }

fun WSMethodInvocationAddSerializationOverride(/*0*/ invocation: platform.CoreServices.WSMethodInvocationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSMethodInvocationRef>? */, /*1*/ objType: platform.CoreFoundation.CFTypeID /* = kotlin.ULong */, /*2*/ serializationProc: platform.CoreServices.WSMethodInvocationSerializationProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.WSMethodInvocationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSMethodInvocationRef>? */, platform.CoreFoundation.CFTypeRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */>>? */, /*3*/ context: kotlinx.cinterop.CValuesRef<platform.CoreServices.WSClientContext>?) { TODO() }

fun WSMethodInvocationCopyParameters(/*0*/ invocation: platform.CoreServices.WSMethodInvocationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSMethodInvocationRef>? */, /*1*/ parameterOrder: kotlinx.cinterop.CValuesRef<platform.CoreFoundation.CFArrayRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreFoundation.CFArrayRef /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray> */> */>?): platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */ { TODO() }

fun WSMethodInvocationCopyProperty(/*0*/ invocation: platform.CoreServices.WSMethodInvocationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSMethodInvocationRef>? */, /*1*/ propertyName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFTypeRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun WSMethodInvocationCopySerialization(/*0*/ invocation: platform.CoreServices.WSMethodInvocationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSMethodInvocationRef>? */): platform.CoreFoundation.CFDataRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFData>? */ { TODO() }

fun WSMethodInvocationCreate(/*0*/ url: platform.CoreFoundation.CFURLRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFURL>? */, /*1*/ methodName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ protocol: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreServices.WSMethodInvocationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSMethodInvocationRef>? */ { TODO() }

fun WSMethodInvocationCreateFromSerialization(/*0*/ contract: platform.CoreFoundation.CFDataRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFData>? */): platform.CoreServices.WSMethodInvocationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSMethodInvocationRef>? */ { TODO() }

fun WSMethodInvocationGetTypeID(): platform.CoreFoundation.CFTypeID /* = kotlin.ULong */ { TODO() }

fun WSMethodInvocationInvoke(/*0*/ invocation: platform.CoreServices.WSMethodInvocationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSMethodInvocationRef>? */): platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */ { TODO() }

fun WSMethodInvocationScheduleWithRunLoop(/*0*/ invocation: platform.CoreServices.WSMethodInvocationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSMethodInvocationRef>? */, /*1*/ runLoop: platform.CoreFoundation.CFRunLoopRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFRunLoop>? */, /*2*/ runLoopMode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) { TODO() }

fun WSMethodInvocationSetCallBack(/*0*/ invocation: platform.CoreServices.WSMethodInvocationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSMethodInvocationRef>? */, /*1*/ clientCB: platform.CoreServices.WSMethodInvocationCallBackProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.WSMethodInvocationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSMethodInvocationRef>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */) -> kotlin.Unit>>? */, /*2*/ context: kotlinx.cinterop.CValuesRef<platform.CoreServices.WSClientContext>?) { TODO() }

fun WSMethodInvocationSetParameters(/*0*/ invocation: platform.CoreServices.WSMethodInvocationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSMethodInvocationRef>? */, /*1*/ parameters: platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */, /*2*/ parameterOrder: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */) { TODO() }

fun WSMethodInvocationSetProperty(/*0*/ invocation: platform.CoreServices.WSMethodInvocationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSMethodInvocationRef>? */, /*1*/ propertyName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ propertyValue: platform.CoreFoundation.CFTypeRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) { TODO() }

fun WSMethodInvocationUnscheduleFromRunLoop(/*0*/ invocation: platform.CoreServices.WSMethodInvocationRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSMethodInvocationRef>? */, /*1*/ runLoop: platform.CoreFoundation.CFRunLoopRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFRunLoop>? */, /*2*/ runLoopMode: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */) { TODO() }

fun WSMethodResultIsFault(/*0*/ methodResult: platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */): kotlin.Boolean { TODO() }

fun WSProtocolHandlerCopyFaultDocument(/*0*/ ref: platform.CoreServices.WSProtocolHandlerRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSProtocolHandlerRef>? */, /*1*/ methodContext: platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */, /*2*/ faultDict: platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */): platform.CoreFoundation.CFDataRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFData>? */ { TODO() }

fun WSProtocolHandlerCopyProperty(/*0*/ ref: platform.CoreServices.WSProtocolHandlerRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSProtocolHandlerRef>? */, /*1*/ propertyName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreFoundation.CFTypeRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun WSProtocolHandlerCopyReplyDictionary(/*0*/ ref: platform.CoreServices.WSProtocolHandlerRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSProtocolHandlerRef>? */, /*1*/ methodName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ data: platform.CoreFoundation.CFDataRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFData>? */): platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */ { TODO() }

fun WSProtocolHandlerCopyReplyDocument(/*0*/ ref: platform.CoreServices.WSProtocolHandlerRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSProtocolHandlerRef>? */, /*1*/ methodContext: platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */, /*2*/ resultValue: platform.CoreFoundation.CFTypeRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.CoreFoundation.CFDataRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFData>? */ { TODO() }

fun WSProtocolHandlerCopyRequestDictionary(/*0*/ ref: platform.CoreServices.WSProtocolHandlerRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSProtocolHandlerRef>? */, /*1*/ data: platform.CoreFoundation.CFDataRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFData>? */): platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */ { TODO() }

fun WSProtocolHandlerCopyRequestDocument(/*0*/ ref: platform.CoreServices.WSProtocolHandlerRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSProtocolHandlerRef>? */, /*1*/ methodName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ methodParams: platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */, /*3*/ methodParamOrder: platform.CoreFoundation.CFArrayRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFArray>? */, /*4*/ methodExtras: platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */): platform.CoreFoundation.CFDataRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFData>? */ { TODO() }

fun WSProtocolHandlerCreate(/*0*/ allocator: platform.CoreFoundation.CFAllocatorRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFAllocator>? */, /*1*/ protocol: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */): platform.CoreServices.WSProtocolHandlerRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSProtocolHandlerRef>? */ { TODO() }

fun WSProtocolHandlerGetTypeID(): platform.CoreFoundation.CFTypeID /* = kotlin.ULong */ { TODO() }

fun WSProtocolHandlerSetDeserializationOverride(/*0*/ protocol: platform.CoreServices.WSProtocolHandlerRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSProtocolHandlerRef>? */, /*1*/ typeNamespace: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ typeName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*3*/ deserializationProc: platform.CoreServices.WSProtocolHandlerDeserializationProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.WSProtocolHandlerRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSProtocolHandlerRef>? */, platform.CoreFoundation.CFXMLTreeRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFTree>? */, platform.CoreFoundation.CFXMLTreeRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFTree>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreFoundation.CFTypeRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>? */, /*4*/ context: kotlinx.cinterop.CValuesRef<platform.CoreServices.WSClientContext>?) { TODO() }

fun WSProtocolHandlerSetProperty(/*0*/ ref: platform.CoreServices.WSProtocolHandlerRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSProtocolHandlerRef>? */, /*1*/ propertyName: platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */, /*2*/ propertyValue: platform.CoreFoundation.CFTypeRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) { TODO() }

fun WSProtocolHandlerSetSerializationOverride(/*0*/ protocol: platform.CoreServices.WSProtocolHandlerRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSProtocolHandlerRef>? */, /*1*/ objType: platform.CoreFoundation.CFTypeID /* = kotlin.ULong */, /*2*/ serializationProc: platform.CoreServices.WSProtocolHandlerSerializationProcPtr? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.CoreServices.WSProtocolHandlerRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueWSProtocolHandlerRef>? */, platform.CoreFoundation.CFTypeRef? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.CoreFoundation.CFStringRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFString>? */>>? */, /*3*/ context: kotlinx.cinterop.CValuesRef<platform.CoreServices.WSClientContext>?) { TODO() }

fun WideAdd(/*0*/ target: kotlinx.cinterop.CValuesRef<platform.darwin.wide>?, /*1*/ source: kotlinx.cinterop.CValuesRef<platform.darwin.wide>?): kotlinx.cinterop.CPointer<platform.darwin.wide>? { TODO() }

fun WideBitShift(/*0*/ target: kotlinx.cinterop.CValuesRef<platform.darwin.wide>?, /*1*/ shift: platform.darwin.SInt32 /* = kotlin.Int */): kotlinx.cinterop.CPointer<platform.darwin.wide>? { TODO() }

fun WideCompare(/*0*/ target: kotlinx.cinterop.CValuesRef<platform.darwin.wide>?, /*1*/ source: kotlinx.cinterop.CValuesRef<platform.darwin.wide>?): kotlin.Short { TODO() }

fun WideDivide(/*0*/ dividend: kotlinx.cinterop.CValuesRef<platform.darwin.wide>?, /*1*/ divisor: platform.darwin.SInt32 /* = kotlin.Int */, /*2*/ remainder: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?): platform.darwin.SInt32 /* = kotlin.Int */ { TODO() }

fun WideMultiply(/*0*/ multiplicand: platform.darwin.SInt32 /* = kotlin.Int */, /*1*/ multiplier: platform.darwin.SInt32 /* = kotlin.Int */, /*2*/ target: kotlinx.cinterop.CValuesRef<platform.darwin.wide>?): kotlinx.cinterop.CPointer<platform.darwin.wide>? { TODO() }

fun WideNegate(/*0*/ target: kotlinx.cinterop.CValuesRef<platform.darwin.wide>?): kotlinx.cinterop.CPointer<platform.darwin.wide>? { TODO() }

fun WideShift(/*0*/ target: kotlinx.cinterop.CValuesRef<platform.darwin.wide>?, /*1*/ shift: platform.darwin.SInt32 /* = kotlin.Int */): kotlinx.cinterop.CPointer<platform.darwin.wide>? { TODO() }

fun WideSquareRoot(/*0*/ source: kotlinx.cinterop.CValuesRef<platform.darwin.wide>?): platform.darwin.UInt32 /* = kotlin.UInt */ { TODO() }

fun WideSubtract(/*0*/ target: kotlinx.cinterop.CValuesRef<platform.darwin.wide>?, /*1*/ source: kotlinx.cinterop.CValuesRef<platform.darwin.wide>?): kotlinx.cinterop.CPointer<platform.darwin.wide>? { TODO() }

fun WideToSInt64(/*0*/ w: kotlinx.cinterop.CValue<platform.darwin.wide>): platform.darwin.SInt64 /* = kotlin.Long */ { TODO() }

fun WideWideDivide(/*0*/ dividend: kotlinx.cinterop.CValuesRef<platform.darwin.wide>?, /*1*/ divisor: platform.darwin.SInt32 /* = kotlin.Int */, /*2*/ remainder: kotlinx.cinterop.CValuesRef<platform.darwin.SInt32Var /* = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32 /* = kotlin.Int */> */>?): kotlinx.cinterop.CPointer<platform.darwin.wide>? { TODO() }

fun WritePartialResource(/*0*/ theResource: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */, /*1*/ offset: kotlin.Long, /*2*/ buffer: kotlinx.cinterop.CValuesRef<*>?, /*3*/ count: kotlin.Long) { TODO() }

fun WriteResource(/*0*/ theResource: platform.darwin.Handle? /* = kotlinx.cinterop.CPointer<platform.darwin.PtrVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> */> */>? */) { TODO() }

fun X2Fix(/*0*/ x: kotlin.Double): platform.darwin.Fixed /* = kotlin.Int */ { TODO() }

fun X2Frac(/*0*/ x: kotlin.Double): platform.darwin.Fract /* = kotlin.Int */ { TODO() }

fun YieldToAnyThread(): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun YieldToThread(/*0*/ suggestedThread: platform.CoreServices.ThreadID /* = kotlin.ULong */): platform.darwin.OSErr /* = kotlin.Short */ { TODO() }

fun _MPIsFullyInitialized(): kotlin.Boolean { TODO() }

fun _MPLibraryIsCompatible(/*0*/ versionCString: kotlin.String?, /*1*/ major: platform.darwin.UInt32 /* = kotlin.UInt */, /*2*/ minor: platform.darwin.UInt32 /* = kotlin.UInt */, /*3*/ release: platform.darwin.UInt32 /* = kotlin.UInt */, /*4*/ revision: platform.darwin.UInt32 /* = kotlin.UInt */): kotlin.Boolean { TODO() }

fun _MPLibraryVersion(/*0*/ versionCString: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?, /*1*/ major: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?, /*2*/ minor: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?, /*3*/ release: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?, /*4*/ revision: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?) { TODO() }

fun __MDItemCopyAttributesEllipsis1(/*0*/ item: platform.CoreServices.MDItemRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__MDItem>? */, /*1*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): platform.CoreFoundation.CFDictionaryRef? /* = kotlinx.cinterop.CPointer<cnames.structs.__CFDictionary>? */ { TODO() }

fun annuity(/*0*/ rate: kotlin.Double, /*1*/ periods: kotlin.Double): kotlin.Double { TODO() }

fun compound(/*0*/ rate: kotlin.Double, /*1*/ periods: kotlin.Double): kotlin.Double { TODO() }

fun dec2f(/*0*/ d: kotlinx.cinterop.CValuesRef<platform.CoreServices.decimal>?): kotlin.Float { TODO() }

fun dec2l(/*0*/ d: kotlinx.cinterop.CValuesRef<platform.CoreServices.decimal>?): kotlin.Long { TODO() }

fun dec2num(/*0*/ d: kotlinx.cinterop.CValuesRef<platform.CoreServices.decimal>?): platform.posix.double_t /* = kotlin.Double */ { TODO() }

fun dec2s(/*0*/ d: kotlinx.cinterop.CValuesRef<platform.CoreServices.decimal>?): kotlin.Short { TODO() }

fun dec2str(/*0*/ f: kotlinx.cinterop.CValuesRef<platform.CoreServices.decform>?, /*1*/ d: kotlinx.cinterop.CValuesRef<platform.CoreServices.decimal>?, /*2*/ s: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) { TODO() }

fun dtox80(/*0*/ x: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVar /* = kotlinx.cinterop.DoubleVarOf<kotlin.Double> */>?, /*1*/ x80: kotlinx.cinterop.CValuesRef<platform.darwin.extended80 /* = platform.darwin.Float80 */>?) { TODO() }

fun kcfindapplesharepassword(/*0*/ serverSignature: platform.CoreServices.AFPServerSignature? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8 /* = kotlin.UByte */>>? */, /*1*/ serverAddress: kotlin.String?, /*2*/ serverName: kotlin.String?, /*3*/ volumeName: kotlin.String?, /*4*/ accountName: kotlin.String?, /*5*/ maxLength: platform.darwin.UInt32 /* = kotlin.UInt */, /*6*/ passwordData: kotlinx.cinterop.CValuesRef<*>?, /*7*/ actualLength: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?, /*8*/ item: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCItemRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCItemRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun kcfindgenericpassword(/*0*/ serviceName: kotlin.String?, /*1*/ accountName: kotlin.String?, /*2*/ maxLength: platform.darwin.UInt32 /* = kotlin.UInt */, /*3*/ passwordData: kotlinx.cinterop.CValuesRef<*>?, /*4*/ actualLength: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?, /*5*/ item: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCItemRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCItemRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun kcfindinternetpassword(/*0*/ serverName: kotlin.String?, /*1*/ securityDomain: kotlin.String?, /*2*/ accountName: kotlin.String?, /*3*/ port: platform.darwin.UInt16 /* = kotlin.UShort */, /*4*/ protocol: platform.darwin.OSType /* = kotlin.UInt */, /*5*/ authType: platform.darwin.OSType /* = kotlin.UInt */, /*6*/ maxLength: platform.darwin.UInt32 /* = kotlin.UInt */, /*7*/ passwordData: kotlinx.cinterop.CValuesRef<*>?, /*8*/ actualLength: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?, /*9*/ item: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCItemRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCItemRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun kcfindinternetpasswordwithpath(/*0*/ serverName: kotlin.String?, /*1*/ securityDomain: kotlin.String?, /*2*/ accountName: kotlin.String?, /*3*/ path: kotlin.String?, /*4*/ port: platform.darwin.UInt16 /* = kotlin.UShort */, /*5*/ protocol: platform.darwin.OSType /* = kotlin.UInt */, /*6*/ authType: platform.darwin.OSType /* = kotlin.UInt */, /*7*/ maxLength: platform.darwin.UInt32 /* = kotlin.UInt */, /*8*/ passwordData: kotlinx.cinterop.CValuesRef<*>?, /*9*/ actualLength: kotlinx.cinterop.CValuesRef<platform.darwin.UInt32Var /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32 /* = kotlin.UInt */> */>?, /*10*/ item: kotlinx.cinterop.CValuesRef<platform.CoreServices.KCItemRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.CoreServices.KCItemRef /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainItemRef> */> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun kcgetkeychainname(/*0*/ keychain: platform.CoreServices.KCRef? /* = kotlinx.cinterop.CPointer<cnames.structs.OpaqueSecKeychainRef>? */, /*1*/ keychainName: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge0")private external fun kniBridge0(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.Short): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1")private external fun kniBridge1(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge10")private external fun kniBridge10(/*0*/ p0: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge100")private external fun kniBridge100(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1000")private external fun kniBridge1000(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Byte): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1001")private external fun kniBridge1001(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Byte): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1002")private external fun kniBridge1002(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1003")private external fun kniBridge1003(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1004")private external fun kniBridge1004(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1005")private external fun kniBridge1005(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1006")private external fun kniBridge1006(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1007")private external fun kniBridge1007(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1008")private external fun kniBridge1008(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1009")private external fun kniBridge1009(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Long, /*5*/ p5: kotlin.Short, /*6*/ p6: kotlin.Int, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*10*/ p10: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge101")private external fun kniBridge101(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1010")private external fun kniBridge1010(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1011")private external fun kniBridge1011(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1012")private external fun kniBridge1012(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1013")private external fun kniBridge1013(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1014")private external fun kniBridge1014(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Long): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1015")private external fun kniBridge1015(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1016")private external fun kniBridge1016(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Long): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1017")private external fun kniBridge1017(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1018")private external fun kniBridge1018(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1019")private external fun kniBridge1019(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge102")private external fun kniBridge102(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1020")private external fun kniBridge1020(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1021")private external fun kniBridge1021(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1022")private external fun kniBridge1022(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1023")private external fun kniBridge1023(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Long): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1024")private external fun kniBridge1024(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1025")private external fun kniBridge1025(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1026")private external fun kniBridge1026(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Long, /*5*/ p5: kotlin.Short, /*6*/ p6: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1027")private external fun kniBridge1027(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1028")private external fun kniBridge1028(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1029")private external fun kniBridge1029(): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge103")private external fun kniBridge103(/*0*/ p0: kotlin.UInt): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1030")private external fun kniBridge1030(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1031")private external fun kniBridge1031(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1032")private external fun kniBridge1032(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Long): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1033")private external fun kniBridge1033(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Long, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1034")private external fun kniBridge1034(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1035")private external fun kniBridge1035(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1036")private external fun kniBridge1036(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1037")private external fun kniBridge1037(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1038")private external fun kniBridge1038(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1039")private external fun kniBridge1039(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge104")private external fun kniBridge104(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1040")private external fun kniBridge1040(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1041")private external fun kniBridge1041(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.ULong, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1042")private external fun kniBridge1042(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1043")private external fun kniBridge1043(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1044")private external fun kniBridge1044(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1045")private external fun kniBridge1045(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1046")private external fun kniBridge1046(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1047")private external fun kniBridge1047(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1048")private external fun kniBridge1048(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1049")private external fun kniBridge1049(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge105")private external fun kniBridge105(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1050")private external fun kniBridge1050(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1051")private external fun kniBridge1051(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1052")private external fun kniBridge1052(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1053")private external fun kniBridge1053(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1054")private external fun kniBridge1054(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1055")private external fun kniBridge1055(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1056")private external fun kniBridge1056(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1057")private external fun kniBridge1057(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1058")private external fun kniBridge1058(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1059")private external fun kniBridge1059(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1060")private external fun kniBridge1060(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1061")private external fun kniBridge1061(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1062")private external fun kniBridge1062(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1063")private external fun kniBridge1063(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1064")private external fun kniBridge1064(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1065")private external fun kniBridge1065(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1066")private external fun kniBridge1066(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1067")private external fun kniBridge1067(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1068")private external fun kniBridge1068(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1069")private external fun kniBridge1069(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Byte)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge107")private external fun kniBridge107(): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1070")private external fun kniBridge1070(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1071")private external fun kniBridge1071(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1072")private external fun kniBridge1072(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1073")private external fun kniBridge1073(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1074")private external fun kniBridge1074(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1075")private external fun kniBridge1075(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1076")private external fun kniBridge1076(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1077")private external fun kniBridge1077(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1078")private external fun kniBridge1078(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1079")private external fun kniBridge1079(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Long, /*3*/ p3: kotlin.Long, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge108")private external fun kniBridge108(): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1080")private external fun kniBridge1080(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1081")private external fun kniBridge1081(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Long, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1082")private external fun kniBridge1082(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1083")private external fun kniBridge1083(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1084")private external fun kniBridge1084(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1085")private external fun kniBridge1085(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1086")private external fun kniBridge1086(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1087")private external fun kniBridge1087(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1088")private external fun kniBridge1088(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1089")private external fun kniBridge1089(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge109")private external fun kniBridge109(/*0*/ p0: kotlin.Short)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1091")private external fun kniBridge1091(): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1092")private external fun kniBridge1092(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1093")private external fun kniBridge1093(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1094")private external fun kniBridge1094(): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1095")private external fun kniBridge1095(): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1096")private external fun kniBridge1096(): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1097")private external fun kniBridge1097(): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1098")private external fun kniBridge1098(/*0*/ p0: kotlin.UByte): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1099")private external fun kniBridge1099(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge11")private external fun kniBridge11(/*0*/ p0: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge110")private external fun kniBridge110(/*0*/ p0: kotlin.Long): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1100")private external fun kniBridge1100(/*0*/ p0: kotlin.Byte): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1101")private external fun kniBridge1101(): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1102")private external fun kniBridge1102(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1103")private external fun kniBridge1103(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1104")private external fun kniBridge1104(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1105")private external fun kniBridge1105(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1106")private external fun kniBridge1106(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1107")private external fun kniBridge1107(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1108")private external fun kniBridge1108(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1109")private external fun kniBridge1109(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge111")private external fun kniBridge111(/*0*/ p0: kotlin.Long): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1110")private external fun kniBridge1110(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1111")private external fun kniBridge1111(): kotlin.UShort

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1112")private external fun kniBridge1112(/*0*/ p0: kotlin.UShort, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1113")private external fun kniBridge1113(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1114")private external fun kniBridge1114(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1116")private external fun kniBridge1116(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1117")private external fun kniBridge1117(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UShort, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlin.UInt, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1118")private external fun kniBridge1118(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.UShort, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlin.UInt, /*7*/ p7: kotlin.UInt, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*10*/ p10: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1119")private external fun kniBridge1119(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge112")private external fun kniBridge112(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1120")private external fun kniBridge1120(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1121")private external fun kniBridge1121(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1122")private external fun kniBridge1122(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1123")private external fun kniBridge1123(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1124")private external fun kniBridge1124(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1125")private external fun kniBridge1125(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1126")private external fun kniBridge1126(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1127")private external fun kniBridge1127(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1128")private external fun kniBridge1128(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1129")private external fun kniBridge1129(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge113")private external fun kniBridge113(/*0*/ p0: kotlin.Long): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1130")private external fun kniBridge1130(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1131")private external fun kniBridge1131(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1132")private external fun kniBridge1132(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1133")private external fun kniBridge1133(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1134")private external fun kniBridge1134(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1135")private external fun kniBridge1135(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1136")private external fun kniBridge1136(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1137")private external fun kniBridge1137(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UShort, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlin.UInt, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1138")private external fun kniBridge1138(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.UShort, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlin.UInt, /*7*/ p7: kotlin.UInt, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*10*/ p10: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1139")private external fun kniBridge1139(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge114")private external fun kniBridge114(/*0*/ p0: kotlin.Long): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1140")private external fun kniBridge1140(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1141")private external fun kniBridge1141(/*0*/ p0: kotlin.UInt): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1142")private external fun kniBridge1142(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1143")private external fun kniBridge1143(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1144")private external fun kniBridge1144(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1145")private external fun kniBridge1145(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1146")private external fun kniBridge1146(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1147")private external fun kniBridge1147(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1148")private external fun kniBridge1148(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1149")private external fun kniBridge1149(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge115")private external fun kniBridge115(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1150")private external fun kniBridge1150(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1151")private external fun kniBridge1151(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1152")private external fun kniBridge1152(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1153")private external fun kniBridge1153(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1154")private external fun kniBridge1154(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1155")private external fun kniBridge1155(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1156")private external fun kniBridge1156(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1157")private external fun kniBridge1157(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1158")private external fun kniBridge1158(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1159")private external fun kniBridge1159(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge116")private external fun kniBridge116(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1160")private external fun kniBridge1160(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1161")private external fun kniBridge1161(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1162")private external fun kniBridge1162(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1163")private external fun kniBridge1163(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1164")private external fun kniBridge1164(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1165")private external fun kniBridge1165(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1166")private external fun kniBridge1166(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1167")private external fun kniBridge1167(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1168")private external fun kniBridge1168(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1169")private external fun kniBridge1169(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge117")private external fun kniBridge117(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1170")private external fun kniBridge1170(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1171")private external fun kniBridge1171(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1172")private external fun kniBridge1172(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Byte, /*4*/ p4: kotlin.Byte, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1173")private external fun kniBridge1173(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1174")private external fun kniBridge1174(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1175")private external fun kniBridge1175(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1176")private external fun kniBridge1176(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1177")private external fun kniBridge1177(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1178")private external fun kniBridge1178(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1179")private external fun kniBridge1179(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge118")private external fun kniBridge118(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1180")private external fun kniBridge1180(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1181")private external fun kniBridge1181(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1182")private external fun kniBridge1182(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1183")private external fun kniBridge1183(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1184")private external fun kniBridge1184(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1185")private external fun kniBridge1185(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1186")private external fun kniBridge1186(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1187")private external fun kniBridge1187(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.Byte): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1188")private external fun kniBridge1188(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1189")private external fun kniBridge1189(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge119")private external fun kniBridge119(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1190")private external fun kniBridge1190(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1191")private external fun kniBridge1191(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1192")private external fun kniBridge1192(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1193")private external fun kniBridge1193(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1194")private external fun kniBridge1194(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1195")private external fun kniBridge1195(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Byte): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1196")private external fun kniBridge1196(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1197")private external fun kniBridge1197(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1198")private external fun kniBridge1198(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1199")private external fun kniBridge1199(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge12")private external fun kniBridge12(/*0*/ p0: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge120")private external fun kniBridge120(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1200")private external fun kniBridge1200(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1201")private external fun kniBridge1201(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1202")private external fun kniBridge1202(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1203")private external fun kniBridge1203(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1204")private external fun kniBridge1204(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1205")private external fun kniBridge1205(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1206")private external fun kniBridge1206(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1207")private external fun kniBridge1207(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Byte): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1208")private external fun kniBridge1208(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Byte): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1209")private external fun kniBridge1209(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge121")private external fun kniBridge121(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1210")private external fun kniBridge1210(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1211")private external fun kniBridge1211(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1212")private external fun kniBridge1212(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1213")private external fun kniBridge1213(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1214")private external fun kniBridge1214(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1215")private external fun kniBridge1215(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1216")private external fun kniBridge1216(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1217")private external fun kniBridge1217(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1218")private external fun kniBridge1218(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1219")private external fun kniBridge1219(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Byte): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge122")private external fun kniBridge122(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1220")private external fun kniBridge1220(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1221")private external fun kniBridge1221(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1222")private external fun kniBridge1222(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1223")private external fun kniBridge1223(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1224")private external fun kniBridge1224(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1225")private external fun kniBridge1225(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1226")private external fun kniBridge1226(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1227")private external fun kniBridge1227(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1228")private external fun kniBridge1228(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1229")private external fun kniBridge1229(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge123")private external fun kniBridge123(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1230")private external fun kniBridge1230(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlin.Long): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1231")private external fun kniBridge1231(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.Long): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1232")private external fun kniBridge1232(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1233")private external fun kniBridge1233(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1234")private external fun kniBridge1234(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1235")private external fun kniBridge1235(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1236")private external fun kniBridge1236(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1237")private external fun kniBridge1237(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1238")private external fun kniBridge1238(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1239")private external fun kniBridge1239(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge124")private external fun kniBridge124(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1240")private external fun kniBridge1240(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1241")private external fun kniBridge1241(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1242")private external fun kniBridge1242(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1243")private external fun kniBridge1243(/*0*/ p0: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1244")private external fun kniBridge1244(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1245")private external fun kniBridge1245(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1246")private external fun kniBridge1246(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1247")private external fun kniBridge1247(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1248")private external fun kniBridge1248(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1249")private external fun kniBridge1249(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge125")private external fun kniBridge125(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1250")private external fun kniBridge1250(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1251")private external fun kniBridge1251(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1252")private external fun kniBridge1252(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1253")private external fun kniBridge1253(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1254")private external fun kniBridge1254(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1255")private external fun kniBridge1255(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1256")private external fun kniBridge1256(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1257")private external fun kniBridge1257(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1258")private external fun kniBridge1258(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1259")private external fun kniBridge1259(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge126")private external fun kniBridge126(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1260")private external fun kniBridge1260(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1261")private external fun kniBridge1261(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1262")private external fun kniBridge1262(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1263")private external fun kniBridge1263(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1264")private external fun kniBridge1264(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1265")private external fun kniBridge1265(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1266")private external fun kniBridge1266(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1267")private external fun kniBridge1267(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1268")private external fun kniBridge1268(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1269")private external fun kniBridge1269(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge127")private external fun kniBridge127(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1270")private external fun kniBridge1270(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1271")private external fun kniBridge1271(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1272")private external fun kniBridge1272(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1273")private external fun kniBridge1273(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1274")private external fun kniBridge1274(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Long): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1275")private external fun kniBridge1275(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1276")private external fun kniBridge1276(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1277")private external fun kniBridge1277(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1278")private external fun kniBridge1278(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1279")private external fun kniBridge1279(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge128")private external fun kniBridge128(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1280")private external fun kniBridge1280(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_CoreServices_kniBridge1281")private fun kniBridge1281(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long { TODO() }

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1282")private external fun kniBridge1282(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1283")private external fun kniBridge1283(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1284")private external fun kniBridge1284(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1285")private external fun kniBridge1285(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1286")private external fun kniBridge1286(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1287")private external fun kniBridge1287(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1288")private external fun kniBridge1288(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1289")private external fun kniBridge1289(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge129")private external fun kniBridge129(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1290")private external fun kniBridge1290(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1291")private external fun kniBridge1291(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1292")private external fun kniBridge1292(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1293")private external fun kniBridge1293(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1294")private external fun kniBridge1294(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1295")private external fun kniBridge1295(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1296")private external fun kniBridge1296(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1297")private external fun kniBridge1297(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1298")private external fun kniBridge1298(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1299")private external fun kniBridge1299(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge13")private external fun kniBridge13(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge130")private external fun kniBridge130(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1300")private external fun kniBridge1300(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1301")private external fun kniBridge1301(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1302")private external fun kniBridge1302(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1303")private external fun kniBridge1303(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1304")private external fun kniBridge1304(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1305")private external fun kniBridge1305(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1306")private external fun kniBridge1306(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1307")private external fun kniBridge1307(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1308")private external fun kniBridge1308(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1309")private external fun kniBridge1309(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge131")private external fun kniBridge131(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Byte)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1310")private external fun kniBridge1310(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1311")private external fun kniBridge1311(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1312")private external fun kniBridge1312(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Byte): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1313")private external fun kniBridge1313(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1314")private external fun kniBridge1314(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1315")private external fun kniBridge1315(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1316")private external fun kniBridge1316(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1317")private external fun kniBridge1317(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1318")private external fun kniBridge1318(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1319")private external fun kniBridge1319(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge132")private external fun kniBridge132(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1320")private external fun kniBridge1320(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1321")private external fun kniBridge1321(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1322")private external fun kniBridge1322(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1323")private external fun kniBridge1323(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1324")private external fun kniBridge1324(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Byte): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1325")private external fun kniBridge1325(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Byte): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1326")private external fun kniBridge1326(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1327")private external fun kniBridge1327(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1328")private external fun kniBridge1328(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1329")private external fun kniBridge1329(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge133")private external fun kniBridge133(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Long): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1330")private external fun kniBridge1330(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1331")private external fun kniBridge1331(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1332")private external fun kniBridge1332(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1333")private external fun kniBridge1333(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1334")private external fun kniBridge1334(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1335")private external fun kniBridge1335(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1336")private external fun kniBridge1336(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1337")private external fun kniBridge1337(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1338")private external fun kniBridge1338(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1339")private external fun kniBridge1339(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.Long): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge134")private external fun kniBridge134(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Long): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1340")private external fun kniBridge1340(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1341")private external fun kniBridge1341(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1342")private external fun kniBridge1342(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1343")private external fun kniBridge1343(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1344")private external fun kniBridge1344(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1345")private external fun kniBridge1345()

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1346")private external fun kniBridge1346(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1347")private external fun kniBridge1347(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1348")private external fun kniBridge1348(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1349")private external fun kniBridge1349(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Double, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge135")private external fun kniBridge135(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1350")private external fun kniBridge1350(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1351")private external fun kniBridge1351(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1352")private external fun kniBridge1352(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1353")private external fun kniBridge1353(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1354")private external fun kniBridge1354(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1355")private external fun kniBridge1355(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1356")private external fun kniBridge1356(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1357")private external fun kniBridge1357(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.Long, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1358")private external fun kniBridge1358(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Long, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1359")private external fun kniBridge1359(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge136")private external fun kniBridge136(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Long): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1360")private external fun kniBridge1360(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1361")private external fun kniBridge1361(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1362")private external fun kniBridge1362(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1363")private external fun kniBridge1363(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1364")private external fun kniBridge1364(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1365")private external fun kniBridge1365(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1366")private external fun kniBridge1366(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1367")private external fun kniBridge1367(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1368")private external fun kniBridge1368(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1369")private external fun kniBridge1369(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge137")private external fun kniBridge137(): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1370")private external fun kniBridge1370(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1371")private external fun kniBridge1371(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1372")private external fun kniBridge1372(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.ULong, /*5*/ p5: kotlin.Double, /*6*/ p6: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1373")private external fun kniBridge1373(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.ULong, /*6*/ p6: kotlin.Double, /*7*/ p7: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1374")private external fun kniBridge1374(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1375")private external fun kniBridge1375(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1376")private external fun kniBridge1376(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1377")private external fun kniBridge1377(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1378")private external fun kniBridge1378(/*0*/ p0: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1379")private external fun kniBridge1379(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Double): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge138")private external fun kniBridge138(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1380")private external fun kniBridge1380(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.ULong): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1381")private external fun kniBridge1381(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1382")private external fun kniBridge1382(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1383")private external fun kniBridge1383(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1384")private external fun kniBridge1384(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1385")private external fun kniBridge1385(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1386")private external fun kniBridge1386(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1387")private external fun kniBridge1387(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1388")private external fun kniBridge1388(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1389")private external fun kniBridge1389(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge139")private external fun kniBridge139(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1390")private external fun kniBridge1390(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1391")private external fun kniBridge1391(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1392")private external fun kniBridge1392(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1393")private external fun kniBridge1393(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1394")private external fun kniBridge1394(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1395")private external fun kniBridge1395(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1396")private external fun kniBridge1396(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1397")private external fun kniBridge1397(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1398")private external fun kniBridge1398(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1399")private external fun kniBridge1399(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge14")private external fun kniBridge14(/*0*/ p0: kotlin.Int): kotlin.Double

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge140")private external fun kniBridge140(): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1400")private external fun kniBridge1400(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1401")private external fun kniBridge1401(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1402")private external fun kniBridge1402(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1403")private external fun kniBridge1403(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1404")private external fun kniBridge1404(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1405")private external fun kniBridge1405(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1406")private external fun kniBridge1406(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1407")private external fun kniBridge1407(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1408")private external fun kniBridge1408(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1409")private external fun kniBridge1409(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge141")private external fun kniBridge141(): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1410")private external fun kniBridge1410(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1411")private external fun kniBridge1411(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1412")private external fun kniBridge1412(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1413")private external fun kniBridge1413(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1414")private external fun kniBridge1414(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1415")private external fun kniBridge1415(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1416")private external fun kniBridge1416(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1417")private external fun kniBridge1417(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1418")private external fun kniBridge1418(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1419")private external fun kniBridge1419(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge142")private external fun kniBridge142(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1420")private external fun kniBridge1420(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1421")private external fun kniBridge1421(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1422")private external fun kniBridge1422(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1423")private external fun kniBridge1423(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1424")private external fun kniBridge1424(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1425")private external fun kniBridge1425(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1426")private external fun kniBridge1426(): kotlin.Double

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1427")private external fun kniBridge1427(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1428")private external fun kniBridge1428(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1429")private external fun kniBridge1429(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge143")private external fun kniBridge143(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1430")private external fun kniBridge1430(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1431")private external fun kniBridge1431(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1432")private external fun kniBridge1432(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1433")private external fun kniBridge1433(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1434")private external fun kniBridge1434(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1435")private external fun kniBridge1435(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1436")private external fun kniBridge1436(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1437")private external fun kniBridge1437(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1438")private external fun kniBridge1438(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1439")private external fun kniBridge1439(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge144")private external fun kniBridge144(/*0*/ p0: kotlin.Long): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1440")private external fun kniBridge1440(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1441")private external fun kniBridge1441(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1442")private external fun kniBridge1442(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1443")private external fun kniBridge1443(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1444")private external fun kniBridge1444(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1445")private external fun kniBridge1445(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1446")private external fun kniBridge1446(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1447")private external fun kniBridge1447(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1448")private external fun kniBridge1448(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1449")private external fun kniBridge1449(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge145")private external fun kniBridge145(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1450")private external fun kniBridge1450(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1451")private external fun kniBridge1451(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1452")private external fun kniBridge1452(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1453")private external fun kniBridge1453(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1454")private external fun kniBridge1454(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1455")private external fun kniBridge1455(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1456")private external fun kniBridge1456(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1457")private external fun kniBridge1457(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1458")private external fun kniBridge1458(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1459")private external fun kniBridge1459(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge146")private external fun kniBridge146(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1460")private external fun kniBridge1460(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1461")private external fun kniBridge1461(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1462")private external fun kniBridge1462(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1463")private external fun kniBridge1463(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1464")private external fun kniBridge1464(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1465")private external fun kniBridge1465(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1466")private external fun kniBridge1466(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1467")private external fun kniBridge1467(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1468")private external fun kniBridge1468(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1469")private external fun kniBridge1469(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge147")private external fun kniBridge147(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1470")private external fun kniBridge1470(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1471")private external fun kniBridge1471(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1472")private external fun kniBridge1472(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1473")private external fun kniBridge1473(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1474")private external fun kniBridge1474(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1475")private external fun kniBridge1475(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1476")private external fun kniBridge1476(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1477")private external fun kniBridge1477(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1478")private external fun kniBridge1478(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1479")private external fun kniBridge1479(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge148")private external fun kniBridge148(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1480")private external fun kniBridge1480(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1481")private external fun kniBridge1481(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1482")private external fun kniBridge1482(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1483")private external fun kniBridge1483(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1484")private external fun kniBridge1484(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1485")private external fun kniBridge1485(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1486")private external fun kniBridge1486(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1487")private external fun kniBridge1487(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1488")private external fun kniBridge1488(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1489")private external fun kniBridge1489(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge149")private external fun kniBridge149(/*0*/ p0: kotlin.Int): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1490")private external fun kniBridge1490(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1491")private external fun kniBridge1491(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1492")private external fun kniBridge1492(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1493")private external fun kniBridge1493(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1494")private external fun kniBridge1494(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1495")private external fun kniBridge1495(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1496")private external fun kniBridge1496(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1497")private external fun kniBridge1497(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1498")private external fun kniBridge1498(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1499")private external fun kniBridge1499(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge15")private external fun kniBridge15(/*0*/ p0: kotlin.Int): kotlin.Double

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge150")private external fun kniBridge150(/*0*/ p0: kotlin.UInt): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1500")private external fun kniBridge1500(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1501")private external fun kniBridge1501(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1502")private external fun kniBridge1502(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1503")private external fun kniBridge1503(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1504")private external fun kniBridge1504(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1505")private external fun kniBridge1505(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1506")private external fun kniBridge1506(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1507")private external fun kniBridge1507(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1508")private external fun kniBridge1508(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1509")private external fun kniBridge1509(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge151")private external fun kniBridge151(/*0*/ p0: kotlin.Long): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1510")private external fun kniBridge1510(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1511")private external fun kniBridge1511(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1512")private external fun kniBridge1512(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1513")private external fun kniBridge1513(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1514")private external fun kniBridge1514(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1515")private external fun kniBridge1515(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1516")private external fun kniBridge1516(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1517")private external fun kniBridge1517(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1518")private external fun kniBridge1518(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1519")private external fun kniBridge1519(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge152")private external fun kniBridge152(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1520")private external fun kniBridge1520(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1521")private external fun kniBridge1521(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1522")private external fun kniBridge1522(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1523")private external fun kniBridge1523(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1524")private external fun kniBridge1524(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1525")private external fun kniBridge1525(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1526")private external fun kniBridge1526(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1527")private external fun kniBridge1527(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1528")private external fun kniBridge1528(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1529")private external fun kniBridge1529(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge153")private external fun kniBridge153(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1530")private external fun kniBridge1530(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1531")private external fun kniBridge1531(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1532")private external fun kniBridge1532(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1533")private external fun kniBridge1533(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1534")private external fun kniBridge1534(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1535")private external fun kniBridge1535(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1536")private external fun kniBridge1536(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1537")private external fun kniBridge1537(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1538")private external fun kniBridge1538(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1539")private external fun kniBridge1539(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge154")private external fun kniBridge154(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1540")private external fun kniBridge1540(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1541")private external fun kniBridge1541(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1542")private external fun kniBridge1542(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1543")private external fun kniBridge1543(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1544")private external fun kniBridge1544(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1545")private external fun kniBridge1545(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1546")private external fun kniBridge1546(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1547")private external fun kniBridge1547(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1548")private external fun kniBridge1548(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1549")private external fun kniBridge1549(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge155")private external fun kniBridge155(/*0*/ p0: kotlin.Long): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1550")private external fun kniBridge1550(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1551")private external fun kniBridge1551(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1552")private external fun kniBridge1552(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1553")private external fun kniBridge1553(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1554")private external fun kniBridge1554(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1555")private external fun kniBridge1555(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1556")private external fun kniBridge1556(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1557")private external fun kniBridge1557(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1558")private external fun kniBridge1558(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1559")private external fun kniBridge1559(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge156")private external fun kniBridge156(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1560")private external fun kniBridge1560(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1561")private external fun kniBridge1561(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1562")private external fun kniBridge1562(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1563")private external fun kniBridge1563(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1564")private external fun kniBridge1564(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1565")private external fun kniBridge1565(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1566")private external fun kniBridge1566(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1567")private external fun kniBridge1567(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1568")private external fun kniBridge1568(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1569")private external fun kniBridge1569(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge157")private external fun kniBridge157(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1570")private external fun kniBridge1570(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1571")private external fun kniBridge1571(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1572")private external fun kniBridge1572(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1573")private external fun kniBridge1573(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1574")private external fun kniBridge1574(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1575")private external fun kniBridge1575(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1576")private external fun kniBridge1576(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1577")private external fun kniBridge1577(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1578")private external fun kniBridge1578(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1579")private external fun kniBridge1579(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge158")private external fun kniBridge158(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1580")private external fun kniBridge1580(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1581")private external fun kniBridge1581(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1582")private external fun kniBridge1582(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1583")private external fun kniBridge1583(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1584")private external fun kniBridge1584(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1585")private external fun kniBridge1585(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1586")private external fun kniBridge1586(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1587")private external fun kniBridge1587(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1588")private external fun kniBridge1588(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1589")private external fun kniBridge1589(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge159")private external fun kniBridge159(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1590")private external fun kniBridge1590(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1591")private external fun kniBridge1591(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1592")private external fun kniBridge1592(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1593")private external fun kniBridge1593(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1594")private external fun kniBridge1594(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1595")private external fun kniBridge1595(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1596")private external fun kniBridge1596(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1597")private external fun kniBridge1597(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1598")private external fun kniBridge1598(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1599")private external fun kniBridge1599(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge16")private external fun kniBridge16(/*0*/ p0: kotlin.Double): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge160")private external fun kniBridge160(/*0*/ p0: kotlin.Long): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1600")private external fun kniBridge1600(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1601")private external fun kniBridge1601(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1602")private external fun kniBridge1602(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1603")private external fun kniBridge1603(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1604")private external fun kniBridge1604(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1605")private external fun kniBridge1605(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1606")private external fun kniBridge1606(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1607")private external fun kniBridge1607(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1608")private external fun kniBridge1608(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1609")private external fun kniBridge1609(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge161")private external fun kniBridge161(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.UInt): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1610")private external fun kniBridge1610(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1611")private external fun kniBridge1611(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1612")private external fun kniBridge1612(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1613")private external fun kniBridge1613(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1614")private external fun kniBridge1614(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1615")private external fun kniBridge1615(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1616")private external fun kniBridge1616(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1617")private external fun kniBridge1617(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1618")private external fun kniBridge1618(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1619")private external fun kniBridge1619(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge162")private external fun kniBridge162(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.UInt): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1620")private external fun kniBridge1620(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1621")private external fun kniBridge1621(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1622")private external fun kniBridge1622(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1623")private external fun kniBridge1623(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1624")private external fun kniBridge1624(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1625")private external fun kniBridge1625(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1626")private external fun kniBridge1626(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1627")private external fun kniBridge1627(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1628")private external fun kniBridge1628(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1629")private external fun kniBridge1629(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge163")private external fun kniBridge163(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1630")private external fun kniBridge1630(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1631")private external fun kniBridge1631(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1632")private external fun kniBridge1632(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1633")private external fun kniBridge1633(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1634")private external fun kniBridge1634(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1635")private external fun kniBridge1635(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1636")private external fun kniBridge1636(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1637")private external fun kniBridge1637(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1638")private external fun kniBridge1638(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1639")private external fun kniBridge1639(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge164")private external fun kniBridge164(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1640")private external fun kniBridge1640(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1641")private external fun kniBridge1641(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1642")private external fun kniBridge1642(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1643")private external fun kniBridge1643(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1644")private external fun kniBridge1644(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1645")private external fun kniBridge1645(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1646")private external fun kniBridge1646(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1647")private external fun kniBridge1647(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1648")private external fun kniBridge1648(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1649")private external fun kniBridge1649(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge165")private external fun kniBridge165(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1650")private external fun kniBridge1650(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1651")private external fun kniBridge1651(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1652")private external fun kniBridge1652(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1653")private external fun kniBridge1653(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1654")private external fun kniBridge1654(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1655")private external fun kniBridge1655(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1656")private external fun kniBridge1656(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1657")private external fun kniBridge1657(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1658")private external fun kniBridge1658(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1659")private external fun kniBridge1659(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge166")private external fun kniBridge166(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1660")private external fun kniBridge1660(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1661")private external fun kniBridge1661(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1662")private external fun kniBridge1662(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1663")private external fun kniBridge1663(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1664")private external fun kniBridge1664(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1665")private external fun kniBridge1665(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1666")private external fun kniBridge1666(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1667")private external fun kniBridge1667(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1668")private external fun kniBridge1668(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1669")private external fun kniBridge1669(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge167")private external fun kniBridge167(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1670")private external fun kniBridge1670(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1671")private external fun kniBridge1671(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1672")private external fun kniBridge1672(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1673")private external fun kniBridge1673(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1674")private external fun kniBridge1674(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1675")private external fun kniBridge1675(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1676")private external fun kniBridge1676(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1677")private external fun kniBridge1677(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1678")private external fun kniBridge1678(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1679")private external fun kniBridge1679(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge168")private external fun kniBridge168(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1680")private external fun kniBridge1680(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1681")private external fun kniBridge1681(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1682")private external fun kniBridge1682(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1683")private external fun kniBridge1683(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1684")private external fun kniBridge1684(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1685")private external fun kniBridge1685(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1686")private external fun kniBridge1686(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1687")private external fun kniBridge1687(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1688")private external fun kniBridge1688(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1689")private external fun kniBridge1689(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge169")private external fun kniBridge169(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1690")private external fun kniBridge1690(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1691")private external fun kniBridge1691(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1692")private external fun kniBridge1692(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1693")private external fun kniBridge1693(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1694")private external fun kniBridge1694(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1695")private external fun kniBridge1695(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1696")private external fun kniBridge1696(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1697")private external fun kniBridge1697(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1698")private external fun kniBridge1698(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1699")private external fun kniBridge1699(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge17")private external fun kniBridge17(/*0*/ p0: kotlin.Double): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge170")private external fun kniBridge170(/*0*/ p0: kotlin.Int): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1700")private external fun kniBridge1700(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1701")private external fun kniBridge1701(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1702")private external fun kniBridge1702(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1703")private external fun kniBridge1703(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1704")private external fun kniBridge1704(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1705")private external fun kniBridge1705(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1706")private external fun kniBridge1706(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1707")private external fun kniBridge1707(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1708")private external fun kniBridge1708(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1709")private external fun kniBridge1709(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge171")private external fun kniBridge171(/*0*/ p0: kotlin.UInt): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1710")private external fun kniBridge1710(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1711")private external fun kniBridge1711(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1712")private external fun kniBridge1712(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1713")private external fun kniBridge1713(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1714")private external fun kniBridge1714(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1715")private external fun kniBridge1715(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1716")private external fun kniBridge1716(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1717")private external fun kniBridge1717(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1718")private external fun kniBridge1718(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1719")private external fun kniBridge1719(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge172")private external fun kniBridge172(/*0*/ p0: kotlin.ULong): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1720")private external fun kniBridge1720(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1721")private external fun kniBridge1721(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1722")private external fun kniBridge1722(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1723")private external fun kniBridge1723(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1724")private external fun kniBridge1724(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1725")private external fun kniBridge1725(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1726")private external fun kniBridge1726(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1727")private external fun kniBridge1727(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1728")private external fun kniBridge1728(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1729")private external fun kniBridge1729(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge173")private external fun kniBridge173(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1730")private external fun kniBridge1730(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1731")private external fun kniBridge1731(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1732")private external fun kniBridge1732(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1733")private external fun kniBridge1733(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1734")private external fun kniBridge1734(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1735")private external fun kniBridge1735(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1736")private external fun kniBridge1736(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1737")private external fun kniBridge1737(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1738")private external fun kniBridge1738(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1739")private external fun kniBridge1739(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge174")private external fun kniBridge174(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1740")private external fun kniBridge1740(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1741")private external fun kniBridge1741(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1742")private external fun kniBridge1742(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1743")private external fun kniBridge1743(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1744")private external fun kniBridge1744(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1745")private external fun kniBridge1745(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1746")private external fun kniBridge1746(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1747")private external fun kniBridge1747(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1748")private external fun kniBridge1748(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1749")private external fun kniBridge1749(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge175")private external fun kniBridge175(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1750")private external fun kniBridge1750(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1751")private external fun kniBridge1751(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1752")private external fun kniBridge1752(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1753")private external fun kniBridge1753(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1754")private external fun kniBridge1754(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1755")private external fun kniBridge1755(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1756")private external fun kniBridge1756(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1757")private external fun kniBridge1757(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1758")private external fun kniBridge1758(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1759")private external fun kniBridge1759(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge176")private external fun kniBridge176(/*0*/ p0: kotlin.ULong): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1760")private external fun kniBridge1760(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1761")private external fun kniBridge1761(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1762")private external fun kniBridge1762(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1763")private external fun kniBridge1763(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1764")private external fun kniBridge1764(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1765")private external fun kniBridge1765(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1766")private external fun kniBridge1766(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1767")private external fun kniBridge1767(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1768")private external fun kniBridge1768(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1769")private external fun kniBridge1769(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge177")private external fun kniBridge177(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1770")private external fun kniBridge1770(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1771")private external fun kniBridge1771(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1772")private external fun kniBridge1772(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1773")private external fun kniBridge1773(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1774")private external fun kniBridge1774(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1775")private external fun kniBridge1775(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1776")private external fun kniBridge1776(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1777")private external fun kniBridge1777(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1778")private external fun kniBridge1778(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1779")private external fun kniBridge1779(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge178")private external fun kniBridge178(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1780")private external fun kniBridge1780(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1781")private external fun kniBridge1781(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1782")private external fun kniBridge1782(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1783")private external fun kniBridge1783(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1784")private external fun kniBridge1784(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1785")private external fun kniBridge1785(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1786")private external fun kniBridge1786(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1787")private external fun kniBridge1787(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1788")private external fun kniBridge1788(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1789")private external fun kniBridge1789(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge179")private external fun kniBridge179(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1790")private external fun kniBridge1790(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1791")private external fun kniBridge1791(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1792")private external fun kniBridge1792(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1793")private external fun kniBridge1793(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1794")private external fun kniBridge1794(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1795")private external fun kniBridge1795(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1796")private external fun kniBridge1796(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1797")private external fun kniBridge1797(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1798")private external fun kniBridge1798(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1799")private external fun kniBridge1799(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge18")private external fun kniBridge18(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge180")private external fun kniBridge180(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1800")private external fun kniBridge1800(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1801")private external fun kniBridge1801(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1802")private external fun kniBridge1802(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1803")private external fun kniBridge1803(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1804")private external fun kniBridge1804(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1805")private external fun kniBridge1805(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1806")private external fun kniBridge1806(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1807")private external fun kniBridge1807(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1808")private external fun kniBridge1808(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1809")private external fun kniBridge1809(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge181")private external fun kniBridge181(/*0*/ p0: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1810")private external fun kniBridge1810(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1811")private external fun kniBridge1811(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1812")private external fun kniBridge1812(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1813")private external fun kniBridge1813(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1814")private external fun kniBridge1814(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1815")private external fun kniBridge1815(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1816")private external fun kniBridge1816(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1817")private external fun kniBridge1817(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1818")private external fun kniBridge1818(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1819")private external fun kniBridge1819(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge182")private external fun kniBridge182(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.UInt): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1820")private external fun kniBridge1820(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1821")private external fun kniBridge1821(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1822")private external fun kniBridge1822(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1823")private external fun kniBridge1823(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1824")private external fun kniBridge1824(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1825")private external fun kniBridge1825(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1826")private external fun kniBridge1826(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1827")private external fun kniBridge1827(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1828")private external fun kniBridge1828(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1829")private external fun kniBridge1829(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge183")private external fun kniBridge183(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.UInt): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1830")private external fun kniBridge1830(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1831")private external fun kniBridge1831(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1832")private external fun kniBridge1832(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1833")private external fun kniBridge1833(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1834")private external fun kniBridge1834(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1835")private external fun kniBridge1835(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1836")private external fun kniBridge1836(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1837")private external fun kniBridge1837(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1838")private external fun kniBridge1838(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1839")private external fun kniBridge1839(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge184")private external fun kniBridge184(/*0*/ p0: kotlin.ULong): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1840")private external fun kniBridge1840(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1841")private external fun kniBridge1841(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1842")private external fun kniBridge1842(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1843")private external fun kniBridge1843(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1844")private external fun kniBridge1844(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1845")private external fun kniBridge1845(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1846")private external fun kniBridge1846(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1847")private external fun kniBridge1847(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1848")private external fun kniBridge1848(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1849")private external fun kniBridge1849(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge185")private external fun kniBridge185(/*0*/ p0: kotlin.Long): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1850")private external fun kniBridge1850(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1851")private external fun kniBridge1851(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1852")private external fun kniBridge1852(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1853")private external fun kniBridge1853(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1854")private external fun kniBridge1854(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1855")private external fun kniBridge1855(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1856")private external fun kniBridge1856(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1857")private external fun kniBridge1857(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1858")private external fun kniBridge1858(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1859")private external fun kniBridge1859(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge186")private external fun kniBridge186(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1860")private external fun kniBridge1860(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1861")private external fun kniBridge1861(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1862")private external fun kniBridge1862(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1863")private external fun kniBridge1863(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1864")private external fun kniBridge1864(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1865")private external fun kniBridge1865(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1866")private external fun kniBridge1866(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1867")private external fun kniBridge1867(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1868")private external fun kniBridge1868(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1869")private external fun kniBridge1869(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge187")private external fun kniBridge187(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1870")private external fun kniBridge1870(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1871")private external fun kniBridge1871(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1872")private external fun kniBridge1872(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1873")private external fun kniBridge1873(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1874")private external fun kniBridge1874(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1875")private external fun kniBridge1875(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1876")private external fun kniBridge1876(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1877")private external fun kniBridge1877(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1878")private external fun kniBridge1878(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1879")private external fun kniBridge1879(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge188")private external fun kniBridge188(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1880")private external fun kniBridge1880(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1881")private external fun kniBridge1881(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1882")private external fun kniBridge1882(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1883")private external fun kniBridge1883(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1884")private external fun kniBridge1884(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1885")private external fun kniBridge1885(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1886")private external fun kniBridge1886(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1887")private external fun kniBridge1887(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1888")private external fun kniBridge1888(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1889")private external fun kniBridge1889(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge189")private external fun kniBridge189(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1890")private external fun kniBridge1890(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1891")private external fun kniBridge1891(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1892")private external fun kniBridge1892(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1893")private external fun kniBridge1893(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1894")private external fun kniBridge1894(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1895")private external fun kniBridge1895(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1896")private external fun kniBridge1896(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1897")private external fun kniBridge1897(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1898")private external fun kniBridge1898(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1899")private external fun kniBridge1899(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge19")private external fun kniBridge19(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge190")private external fun kniBridge190(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Byte, /*2*/ p2: kotlin.Byte): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1900")private external fun kniBridge1900(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1901")private external fun kniBridge1901(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1902")private external fun kniBridge1902(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1903")private external fun kniBridge1903(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1904")private external fun kniBridge1904(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1905")private external fun kniBridge1905(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1906")private external fun kniBridge1906(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1907")private external fun kniBridge1907(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1908")private external fun kniBridge1908(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1909")private external fun kniBridge1909(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge191")private external fun kniBridge191(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1910")private external fun kniBridge1910(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1911")private external fun kniBridge1911(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1912")private external fun kniBridge1912(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1913")private external fun kniBridge1913(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1914")private external fun kniBridge1914(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1915")private external fun kniBridge1915(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1916")private external fun kniBridge1916(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1917")private external fun kniBridge1917(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge1918")private external fun kniBridge1918(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge192")private external fun kniBridge192(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_CoreServices_kniBridge193")private fun kniBridge193(/*0*/ p0: kotlin.Byte, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge194")private external fun kniBridge194(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge195")private external fun kniBridge195(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge196")private external fun kniBridge196(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge197")private external fun kniBridge197(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge198")private external fun kniBridge198(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge199")private external fun kniBridge199(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge2")private external fun kniBridge2(/*0*/ p0: kotlin.Int): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge20")private external fun kniBridge20(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge200")private external fun kniBridge200(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge201")private external fun kniBridge201(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge202")private external fun kniBridge202(): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge203")private external fun kniBridge203(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge204")private external fun kniBridge204(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge205")private external fun kniBridge205(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge206")private external fun kniBridge206(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge207")private external fun kniBridge207(): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge208")private external fun kniBridge208(/*0*/ p0: kotlin.Byte): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge209")private external fun kniBridge209(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge21")private external fun kniBridge21(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge210")private external fun kniBridge210(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge211")private external fun kniBridge211(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge213")private external fun kniBridge213(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge214")private external fun kniBridge214(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge216")private external fun kniBridge216(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge217")private external fun kniBridge217(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge218")private external fun kniBridge218(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge219")private external fun kniBridge219(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge22")private external fun kniBridge22(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge220")private external fun kniBridge220(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge221")private external fun kniBridge221(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge222")private external fun kniBridge222(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge223")private external fun kniBridge223(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge224")private external fun kniBridge224(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge225")private external fun kniBridge225(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge226")private external fun kniBridge226(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge227")private external fun kniBridge227(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge228")private external fun kniBridge228(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge229")private external fun kniBridge229(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge23")private external fun kniBridge23(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge230")private external fun kniBridge230(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge231")private external fun kniBridge231(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge232")private external fun kniBridge232(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge233")private external fun kniBridge233(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge234")private external fun kniBridge234(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge235")private external fun kniBridge235(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge236")private external fun kniBridge236(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge237")private external fun kniBridge237(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge238")private external fun kniBridge238(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge239")private external fun kniBridge239(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge24")private external fun kniBridge24(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge240")private external fun kniBridge240(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge241")private external fun kniBridge241(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge242")private external fun kniBridge242(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge243")private external fun kniBridge243(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge244")private external fun kniBridge244(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge245")private external fun kniBridge245(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge246")private external fun kniBridge246(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge247")private external fun kniBridge247(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge248")private external fun kniBridge248(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge249")private external fun kniBridge249(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge25")private external fun kniBridge25(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge250")private external fun kniBridge250(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge251")private external fun kniBridge251(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge252")private external fun kniBridge252(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge253")private external fun kniBridge253(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge254")private external fun kniBridge254(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge255")private external fun kniBridge255(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge256")private external fun kniBridge256(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge257")private external fun kniBridge257(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge258")private external fun kniBridge258(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge259")private external fun kniBridge259(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge26")private external fun kniBridge26(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge260")private external fun kniBridge260(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge261")private external fun kniBridge261(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge262")private external fun kniBridge262(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge263")private external fun kniBridge263(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge264")private external fun kniBridge264(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge265")private external fun kniBridge265(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.ULong, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlin.Byte, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge266")private external fun kniBridge266(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge267")private external fun kniBridge267(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge268")private external fun kniBridge268(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge269")private external fun kniBridge269(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge27")private external fun kniBridge27(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge270")private external fun kniBridge270(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge271")private external fun kniBridge271(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge272")private external fun kniBridge272(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge273")private external fun kniBridge273(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge274")private external fun kniBridge274(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge275")private external fun kniBridge275(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge276")private external fun kniBridge276(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge277")private external fun kniBridge277(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Byte, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge278")private external fun kniBridge278(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge279")private external fun kniBridge279(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge28")private external fun kniBridge28(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge280")private external fun kniBridge280(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlin.Long, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge281")private external fun kniBridge281(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge282")private external fun kniBridge282(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge283")private external fun kniBridge283(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlin.Long, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge284")private external fun kniBridge284(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge285")private external fun kniBridge285(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge286")private external fun kniBridge286(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge287")private external fun kniBridge287(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge288")private external fun kniBridge288(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge289")private external fun kniBridge289(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlin.Long): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge29")private external fun kniBridge29(/*0*/ p0: kotlin.Short): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge290")private external fun kniBridge290(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge291")private external fun kniBridge291(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge292")private external fun kniBridge292(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge293")private external fun kniBridge293(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge294")private external fun kniBridge294(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge295")private external fun kniBridge295(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlin.Long): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge296")private external fun kniBridge296(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge297")private external fun kniBridge297(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge298")private external fun kniBridge298(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlin.UShort, /*3*/ p3: kotlin.Long, /*4*/ p4: kotlin.ULong, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge299")private external fun kniBridge299(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge3")private external fun kniBridge3(/*0*/ p0: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge30")private external fun kniBridge30(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.Long): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge300")private external fun kniBridge300(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge301")private external fun kniBridge301(/*0*/ p0: kotlin.Int): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge302")private external fun kniBridge302(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge303")private external fun kniBridge303(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge304")private external fun kniBridge304(/*0*/ p0: kotlin.Int): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge305")private external fun kniBridge305(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge306")private external fun kniBridge306(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge307")private external fun kniBridge307(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Short, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge308")private external fun kniBridge308(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge309")private external fun kniBridge309(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge31")private external fun kniBridge31(/*0*/ p0: kotlin.Short)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge310")private external fun kniBridge310(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlin.Long, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge311")private external fun kniBridge311(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge312")private external fun kniBridge312(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge313")private external fun kniBridge313(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlin.Long, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge314")private external fun kniBridge314(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge315")private external fun kniBridge315(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge316")private external fun kniBridge316(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge317")private external fun kniBridge317(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge318")private external fun kniBridge318(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge319")private external fun kniBridge319(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge32")private external fun kniBridge32(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge320")private external fun kniBridge320(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge321")private external fun kniBridge321(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge322")private external fun kniBridge322(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge323")private external fun kniBridge323(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge324")private external fun kniBridge324(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge325")private external fun kniBridge325(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge326")private external fun kniBridge326(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge327")private external fun kniBridge327(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge328")private external fun kniBridge328(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge329")private external fun kniBridge329(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge33")private external fun kniBridge33(/*0*/ p0: kotlin.UInt): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge330")private external fun kniBridge330(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge331")private external fun kniBridge331(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge332")private external fun kniBridge332(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge334")private external fun kniBridge334(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge335")private external fun kniBridge335(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge336")private external fun kniBridge336(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge337")private external fun kniBridge337(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge338")private external fun kniBridge338(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge339")private external fun kniBridge339(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge34")private external fun kniBridge34(/*0*/ p0: kotlin.UInt): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge340")private external fun kniBridge340(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge341")private external fun kniBridge341(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge342")private external fun kniBridge342(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge343")private external fun kniBridge343(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge347")private external fun kniBridge347(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge348")private external fun kniBridge348(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge349")private external fun kniBridge349(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge35")private external fun kniBridge35(/*0*/ p0: kotlin.UInt): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge350")private external fun kniBridge350(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge351")private external fun kniBridge351(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge352")private external fun kniBridge352(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlin.UInt, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge353")private external fun kniBridge353(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge354")private external fun kniBridge354(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge355")private external fun kniBridge355(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge356")private external fun kniBridge356(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge357")private external fun kniBridge357(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge358")private external fun kniBridge358(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge359")private external fun kniBridge359(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge36")private external fun kniBridge36(/*0*/ p0: kotlin.UInt): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge360")private external fun kniBridge360(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge361")private external fun kniBridge361(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge362")private external fun kniBridge362(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge363")private external fun kniBridge363(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge364")private external fun kniBridge364(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge365")private external fun kniBridge365(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge366")private external fun kniBridge366(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge367")private external fun kniBridge367(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge368")private external fun kniBridge368(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge369")private external fun kniBridge369(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge37")private external fun kniBridge37(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Short, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.ULong, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge370")private external fun kniBridge370(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge371")private external fun kniBridge371(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge372")private external fun kniBridge372(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge373")private external fun kniBridge373(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge374")private external fun kniBridge374(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge375")private external fun kniBridge375(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge376")private external fun kniBridge376(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlin.Double, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge377")private external fun kniBridge377(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlin.Double, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge378")private external fun kniBridge378(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Double, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge379")private external fun kniBridge379(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlin.Double, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge38")private external fun kniBridge38(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge380")private external fun kniBridge380(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlin.Double, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge381")private external fun kniBridge381(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Double, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge382")private external fun kniBridge382(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge383")private external fun kniBridge383(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge384")private external fun kniBridge384(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge385")private external fun kniBridge385(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge386")private external fun kniBridge386(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge387")private external fun kniBridge387(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge388")private external fun kniBridge388(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge389")private external fun kniBridge389(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge39")private external fun kniBridge39(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.Short, /*2*/ p2: kotlin.Short, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge390")private external fun kniBridge390(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge391")private external fun kniBridge391(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge392")private external fun kniBridge392(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge393")private external fun kniBridge393(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge394")private external fun kniBridge394(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge395")private external fun kniBridge395(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge396")private external fun kniBridge396(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge397")private external fun kniBridge397(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge398")private external fun kniBridge398(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge399")private external fun kniBridge399(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge4")private external fun kniBridge4(/*0*/ p0: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge40")private external fun kniBridge40(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge400")private external fun kniBridge400(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge401")private external fun kniBridge401(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge402")private external fun kniBridge402(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UShort): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge403")private external fun kniBridge403(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge404")private external fun kniBridge404(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge405")private external fun kniBridge405(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge406")private external fun kniBridge406(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge407")private external fun kniBridge407(/*0*/ p0: kotlin.Short): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge408")private external fun kniBridge408(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge409")private external fun kniBridge409(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge41")private external fun kniBridge41(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.Short, /*2*/ p2: kotlin.Short, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge410")private external fun kniBridge410(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge411")private external fun kniBridge411(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge412")private external fun kniBridge412(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge413")private external fun kniBridge413(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge414")private external fun kniBridge414(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge415")private external fun kniBridge415(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge416")private external fun kniBridge416(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge418")private external fun kniBridge418(/*0*/ p0: kotlin.Int)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge419")private external fun kniBridge419(): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge42")private external fun kniBridge42(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge420")private external fun kniBridge420(): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge421")private external fun kniBridge421(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge422")private external fun kniBridge422(/*0*/ p0: kotlin.Int)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge423")private external fun kniBridge423(): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge424")private external fun kniBridge424(): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge425")private external fun kniBridge425(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Short)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge426")private external fun kniBridge426(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Short)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge427")private external fun kniBridge427(/*0*/ p0: kotlin.Byte)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge428")private external fun kniBridge428(/*0*/ p0: kotlin.UInt): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge429")private external fun kniBridge429(/*0*/ p0: kotlin.UInt): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge43")private external fun kniBridge43(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge430")private external fun kniBridge430(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Short): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge431")private external fun kniBridge431(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Short): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge432")private external fun kniBridge432(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Short): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge433")private external fun kniBridge433(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Short): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge434")private external fun kniBridge434(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge435")private external fun kniBridge435(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge436")private external fun kniBridge436(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge437")private external fun kniBridge437(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge438")private external fun kniBridge438(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge439")private external fun kniBridge439(/*0*/ p0: kotlin.UInt): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge44")private external fun kniBridge44(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge440")private external fun kniBridge440(/*0*/ p0: kotlin.UInt): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge441")private external fun kniBridge441(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge442")private external fun kniBridge442(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge443")private external fun kniBridge443(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Short, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge444")private external fun kniBridge444(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Short, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge445")private external fun kniBridge445(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge446")private external fun kniBridge446(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge447")private external fun kniBridge447(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Short)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge448")private external fun kniBridge448(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge449")private external fun kniBridge449(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge45")private external fun kniBridge45(/*0*/ p0: kotlin.UShort): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge450")private external fun kniBridge450(/*0*/ p0: kotlin.Int)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge451")private external fun kniBridge451(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge452")private external fun kniBridge452(/*0*/ p0: kotlin.Byte)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge453")private external fun kniBridge453(/*0*/ p0: kotlin.Int): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge454")private external fun kniBridge454(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Short)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge455")private external fun kniBridge455(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Long)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge456")private external fun kniBridge456(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Long)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge457")private external fun kniBridge457(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge458")private external fun kniBridge458(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge459")private external fun kniBridge459(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Short): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge46")private external fun kniBridge46(/*0*/ p0: kotlin.UShort): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge460")private external fun kniBridge460(/*0*/ p0: kotlin.Int): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge461")private external fun kniBridge461(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge462")private external fun kniBridge462(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge463")private external fun kniBridge463(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Byte): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge464")private external fun kniBridge464(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge465")private external fun kniBridge465(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge466")private external fun kniBridge466(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Byte, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge467")private external fun kniBridge467(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.ULong, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge468")private external fun kniBridge468(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge469")private external fun kniBridge469(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Byte, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge47")private external fun kniBridge47(/*0*/ p0: kotlin.UShort, /*1*/ p1: kotlin.UShort): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge470")private external fun kniBridge470(/*0*/ p0: kotlin.UInt)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge471")private external fun kniBridge471(): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge472")private external fun kniBridge472(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge473")private external fun kniBridge473(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge474")private external fun kniBridge474(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Short, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge475")private external fun kniBridge475(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Short): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge476")private external fun kniBridge476(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge477")private external fun kniBridge477(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge478")private external fun kniBridge478(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge479")private external fun kniBridge479(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge48")private external fun kniBridge48(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge480")private external fun kniBridge480(): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge481")private external fun kniBridge481(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge482")private external fun kniBridge482(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge483")private external fun kniBridge483(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge484")private external fun kniBridge484(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge485")private external fun kniBridge485(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge486")private external fun kniBridge486(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge487")private external fun kniBridge487(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Short, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge488")private external fun kniBridge488(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Short, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge489")private external fun kniBridge489(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Short, /*3*/ p3: kotlin.Short): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge49")private external fun kniBridge49(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge490")private external fun kniBridge490(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Short)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge491")private external fun kniBridge491(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge492")private external fun kniBridge492(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge493")private external fun kniBridge493(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge494")private external fun kniBridge494(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge495")private external fun kniBridge495(/*0*/ p0: kotlin.Int): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge496")private external fun kniBridge496(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Short, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge497")private external fun kniBridge497(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Short, /*3*/ p3: kotlin.Short): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge498")private external fun kniBridge498(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge499")private external fun kniBridge499(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge5")private external fun kniBridge5(/*0*/ p0: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge50")private external fun kniBridge50(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge500")private external fun kniBridge500(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge501")private external fun kniBridge501(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge502")private external fun kniBridge502(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge503")private external fun kniBridge503(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge504")private external fun kniBridge504(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge505")private external fun kniBridge505(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Short): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge506")private external fun kniBridge506(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge507")private external fun kniBridge507(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge508")private external fun kniBridge508(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge509")private external fun kniBridge509(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge51")private external fun kniBridge51(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge510")private external fun kniBridge510(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.Short): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge511")private external fun kniBridge511(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Short): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge512")private external fun kniBridge512(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Short, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge513")private external fun kniBridge513(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge514")private external fun kniBridge514(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge515")private external fun kniBridge515(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Short): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge516")private external fun kniBridge516(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge517")private external fun kniBridge517(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge518")private external fun kniBridge518(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge519")private external fun kniBridge519(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge520")private external fun kniBridge520(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge521")private external fun kniBridge521(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Short, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge522")private external fun kniBridge522(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge523")private external fun kniBridge523(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge524")private external fun kniBridge524(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge525")private external fun kniBridge525(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge526")private external fun kniBridge526(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge527")private external fun kniBridge527(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge528")private external fun kniBridge528(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge532")private external fun kniBridge532(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge533")private external fun kniBridge533(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge534")private external fun kniBridge534(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlin.UInt, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge535")private external fun kniBridge535(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge536")private external fun kniBridge536(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge537")private external fun kniBridge537(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge538")private external fun kniBridge538(/*0*/ p0: kotlin.Int)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge539")private external fun kniBridge539()

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge54")private external fun kniBridge54(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge540")private external fun kniBridge540(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge541")private external fun kniBridge541(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge542")private external fun kniBridge542(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge543")private external fun kniBridge543(/*0*/ p0: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge544")private external fun kniBridge544(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge545")private external fun kniBridge545(/*0*/ p0: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge546")private external fun kniBridge546(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge547")private external fun kniBridge547(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge548")private external fun kniBridge548(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge549")private external fun kniBridge549(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge55")private external fun kniBridge55(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge550")private external fun kniBridge550(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge551")private external fun kniBridge551(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge552")private external fun kniBridge552(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge553")private external fun kniBridge553(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge554")private external fun kniBridge554(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge555")private external fun kniBridge555(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge556")private external fun kniBridge556(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge557")private external fun kniBridge557(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge558")private external fun kniBridge558(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge559")private external fun kniBridge559(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge56")private external fun kniBridge56(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge560")private external fun kniBridge560(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge561")private external fun kniBridge561(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge562")private external fun kniBridge562(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge563")private external fun kniBridge563(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge564")private external fun kniBridge564(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge565")private external fun kniBridge565(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge566")private external fun kniBridge566(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge567")private external fun kniBridge567(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge568")private external fun kniBridge568(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge569")private external fun kniBridge569(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge57")private external fun kniBridge57(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge570")private external fun kniBridge570(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge571")private external fun kniBridge571(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge572")private external fun kniBridge572(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge573")private external fun kniBridge573(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge574")private external fun kniBridge574(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.UByte, /*2*/ p2: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge575")private external fun kniBridge575(/*0*/ p0: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge576")private external fun kniBridge576(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge577")private external fun kniBridge577(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge578")private external fun kniBridge578(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge579")private external fun kniBridge579(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge58")private external fun kniBridge58(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge580")private external fun kniBridge580(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge581")private external fun kniBridge581(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge582")private external fun kniBridge582(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge583")private external fun kniBridge583(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge584")private external fun kniBridge584(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge585")private external fun kniBridge585(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge586")private external fun kniBridge586(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge587")private external fun kniBridge587(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UByte): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge588")private external fun kniBridge588(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UByte): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge589")private external fun kniBridge589(): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge59")private external fun kniBridge59(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge590")private external fun kniBridge590(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge591")private external fun kniBridge591(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge592")private external fun kniBridge592(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge593")private external fun kniBridge593(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge594")private external fun kniBridge594(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge595")private external fun kniBridge595(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.ULong): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge596")private external fun kniBridge596(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge597")private external fun kniBridge597(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Byte, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.ULong): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge598")private external fun kniBridge598(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Byte, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge599")private external fun kniBridge599(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Byte, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge6")private external fun kniBridge6(/*0*/ p0: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge60")private external fun kniBridge60(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge600")private external fun kniBridge600(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge601")private external fun kniBridge601(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge602")private external fun kniBridge602(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge603")private external fun kniBridge603(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge604")private external fun kniBridge604(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge605")private external fun kniBridge605(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge606")private external fun kniBridge606(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge607")private external fun kniBridge607(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge608")private external fun kniBridge608(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge609")private external fun kniBridge609(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge61")private external fun kniBridge61(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge610")private external fun kniBridge610(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge611")private external fun kniBridge611(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge612")private external fun kniBridge612(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.Short, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge613")private external fun kniBridge613(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge614")private external fun kniBridge614(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge615")private external fun kniBridge615(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge616")private external fun kniBridge616(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge617")private external fun kniBridge617(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge618")private external fun kniBridge618(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.ULong, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge619")private external fun kniBridge619(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge62")private external fun kniBridge62(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge620")private external fun kniBridge620(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlin.ULong, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge621")private external fun kniBridge621(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge622")private external fun kniBridge622(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge623")private external fun kniBridge623(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge624")private external fun kniBridge624(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlin.Long, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge625")private external fun kniBridge625(): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge626")private external fun kniBridge626(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge627")private external fun kniBridge627(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge628")private external fun kniBridge628(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge629")private external fun kniBridge629(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge63")private external fun kniBridge63(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge630")private external fun kniBridge630(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge631")private external fun kniBridge631(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Byte): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge632")private external fun kniBridge632(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge633")private external fun kniBridge633(/*0*/ p0: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge634")private external fun kniBridge634(/*0*/ p0: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge635")private external fun kniBridge635(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge636")private external fun kniBridge636(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge637")private external fun kniBridge637(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge638")private external fun kniBridge638(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge64")private external fun kniBridge64(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge641")private external fun kniBridge641(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge642")private external fun kniBridge642(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Short): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge643")private external fun kniBridge643(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge644")private external fun kniBridge644(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Short): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge645")private external fun kniBridge645(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge646")private external fun kniBridge646(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Short): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge647")private external fun kniBridge647(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Short): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge648")private external fun kniBridge648(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Short): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge649")private external fun kniBridge649(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge65")private external fun kniBridge65(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge650")private external fun kniBridge650(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge651")private external fun kniBridge651(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge652")private external fun kniBridge652(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge653")private external fun kniBridge653(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge654")private external fun kniBridge654(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge655")private external fun kniBridge655(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge656")private external fun kniBridge656(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge657")private external fun kniBridge657(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge658")private external fun kniBridge658(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge659")private external fun kniBridge659(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge66")private external fun kniBridge66(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge660")private external fun kniBridge660(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UByte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge661")private external fun kniBridge661(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UByte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge662")private external fun kniBridge662(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UByte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge663")private external fun kniBridge663(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge664")private external fun kniBridge664(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge665")private external fun kniBridge665(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge666")private external fun kniBridge666(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UShort

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge667")private external fun kniBridge667(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UShort

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge668")private external fun kniBridge668(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UShort

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge669")private external fun kniBridge669(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge67")private external fun kniBridge67(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Int): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge670")private external fun kniBridge670(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge671")private external fun kniBridge671(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge672")private external fun kniBridge672(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge673")private external fun kniBridge673(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge674")private external fun kniBridge674(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge675")private external fun kniBridge675(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge676")private external fun kniBridge676(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge678")private external fun kniBridge678(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge679")private external fun kniBridge679(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge68")private external fun kniBridge68(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge680")private external fun kniBridge680(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge681")private external fun kniBridge681(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge682")private external fun kniBridge682(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge683")private external fun kniBridge683(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge684")private external fun kniBridge684(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge685")private external fun kniBridge685(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge686")private external fun kniBridge686(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge687")private external fun kniBridge687(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge688")private external fun kniBridge688(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge689")private external fun kniBridge689(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge69")private external fun kniBridge69(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge690")private external fun kniBridge690(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge691")private external fun kniBridge691(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge692")private external fun kniBridge692(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge693")private external fun kniBridge693(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge694")private external fun kniBridge694(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge695")private external fun kniBridge695(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Long, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.Long): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge696")private external fun kniBridge696(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge697")private external fun kniBridge697(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge698")private external fun kniBridge698(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge699")private external fun kniBridge699(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge7")private external fun kniBridge7(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge70")private external fun kniBridge70(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge700")private external fun kniBridge700(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge701")private external fun kniBridge701(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge702")private external fun kniBridge702(/*0*/ p0: kotlin.Long): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge703")private external fun kniBridge703(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Short): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge704")private external fun kniBridge704(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge705")private external fun kniBridge705(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge707")private external fun kniBridge707(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlin.UShort, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlin.ULong, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge708")private external fun kniBridge708(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge709")private external fun kniBridge709(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge71")private external fun kniBridge71(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge710")private external fun kniBridge710(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge711")private external fun kniBridge711(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.ULong, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge712")private external fun kniBridge712(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge713")private external fun kniBridge713(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.ULong, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge714")private external fun kniBridge714(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.ULong, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge715")private external fun kniBridge715(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge716")private external fun kniBridge716(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.ULong, /*5*/ p5: kotlin.ULong, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge717")private external fun kniBridge717(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge718")private external fun kniBridge718(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge719")private external fun kniBridge719(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge72")private external fun kniBridge72(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge720")private external fun kniBridge720(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge721")private external fun kniBridge721(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge722")private external fun kniBridge722(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge723")private external fun kniBridge723(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge724")private external fun kniBridge724(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge725")private external fun kniBridge725(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UShort, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge726")private external fun kniBridge726(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge727")private external fun kniBridge727(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge728")private external fun kniBridge728(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Double

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge729")private external fun kniBridge729(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge73")private external fun kniBridge73(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge730")private external fun kniBridge730(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Double, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge731")private external fun kniBridge731(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Double

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge732")private external fun kniBridge732(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge733")private external fun kniBridge733(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge734")private external fun kniBridge734(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Float

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge735")private external fun kniBridge735(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge736")private external fun kniBridge736(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge737")private external fun kniBridge737(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Double

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge738")private external fun kniBridge738(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge739")private external fun kniBridge739(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge74")private external fun kniBridge74(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge740")private external fun kniBridge740(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge741")private external fun kniBridge741(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge742")private external fun kniBridge742(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge743")private external fun kniBridge743(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge744")private external fun kniBridge744(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge745")private external fun kniBridge745(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge746")private external fun kniBridge746(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge747")private external fun kniBridge747(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge748")private external fun kniBridge748(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge749")private external fun kniBridge749(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge75")private external fun kniBridge75(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge750")private external fun kniBridge750(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge751")private external fun kniBridge751(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge752")private external fun kniBridge752(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge753")private external fun kniBridge753(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.ULong, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge754")private external fun kniBridge754(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge755")private external fun kniBridge755(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge756")private external fun kniBridge756(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge757")private external fun kniBridge757(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge758")private external fun kniBridge758(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge759")private external fun kniBridge759(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.ULong, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlin.ULong, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge76")private external fun kniBridge76(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge760")private external fun kniBridge760(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.ULong, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge761")private external fun kniBridge761(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge762")private external fun kniBridge762(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge763")private external fun kniBridge763(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge764")private external fun kniBridge764(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge765")private external fun kniBridge765(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge766")private external fun kniBridge766(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge767")private external fun kniBridge767(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge768")private external fun kniBridge768(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.ULong, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlin.ULong, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge769")private external fun kniBridge769(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge77")private external fun kniBridge77(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge770")private external fun kniBridge770(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge771")private external fun kniBridge771(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge772")private external fun kniBridge772(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge773")private external fun kniBridge773(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge774")private external fun kniBridge774(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge775")private external fun kniBridge775(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge777")private external fun kniBridge777(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge778")private external fun kniBridge778(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge779")private external fun kniBridge779(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge78")private external fun kniBridge78(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge780")private external fun kniBridge780(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge781")private external fun kniBridge781(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge782")private external fun kniBridge782(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge783")private external fun kniBridge783(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge784")private external fun kniBridge784(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge785")private external fun kniBridge785(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge786")private external fun kniBridge786(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge787")private external fun kniBridge787(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge788")private external fun kniBridge788(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge789")private external fun kniBridge789(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.ULong, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlin.ULong, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*10*/ p10: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*11*/ p11: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge79")private external fun kniBridge79(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge790")private external fun kniBridge790(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.ULong, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlin.ULong, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*10*/ p10: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*11*/ p11: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge791")private external fun kniBridge791(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.ULong, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlin.ULong, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*10*/ p10: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*11*/ p11: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*12*/ p12: kotlin.ULong, /*13*/ p13: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*14*/ p14: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge792")private external fun kniBridge792(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.ULong, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlin.ULong, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*10*/ p10: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*11*/ p11: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*12*/ p12: kotlin.ULong, /*13*/ p13: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*14*/ p14: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge793")private external fun kniBridge793(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge794")private external fun kniBridge794(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.ULong, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge795")private external fun kniBridge795(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge796")private external fun kniBridge796(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge797")private external fun kniBridge797(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge798")private external fun kniBridge798(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge799")private external fun kniBridge799(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge8")private external fun kniBridge8(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge80")private external fun kniBridge80(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge800")private external fun kniBridge800(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge801")private external fun kniBridge801(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge802")private external fun kniBridge802(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge803")private external fun kniBridge803(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge804")private external fun kniBridge804(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge805")private external fun kniBridge805(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge806")private external fun kniBridge806(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge807")private external fun kniBridge807(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge808")private external fun kniBridge808(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge809")private external fun kniBridge809(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge81")private external fun kniBridge81(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge810")private external fun kniBridge810(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge811")private external fun kniBridge811(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge812")private external fun kniBridge812(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge813")private external fun kniBridge813(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge814")private external fun kniBridge814(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge815")private external fun kniBridge815(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge816")private external fun kniBridge816(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge817")private external fun kniBridge817(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge82")private external fun kniBridge82(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge825")private external fun kniBridge825(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Long, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge826")private external fun kniBridge826(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge827")private external fun kniBridge827(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Byte): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge828")private external fun kniBridge828(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge829")private external fun kniBridge829(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge83")private external fun kniBridge83(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge830")private external fun kniBridge830(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Short, /*2*/ p2: kotlin.Long): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge831")private external fun kniBridge831(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge832")private external fun kniBridge832(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge833")private external fun kniBridge833(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Byte): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge834")private external fun kniBridge834(/*0*/ p0: kotlin.ULong): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge835")private external fun kniBridge835(): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge836")private external fun kniBridge836(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge837")private external fun kniBridge837(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge838")private external fun kniBridge838(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlin.ULong): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge839")private external fun kniBridge839(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlin.ULong): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge84")private external fun kniBridge84(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge840")private external fun kniBridge840(): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge841")private external fun kniBridge841(): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge842")private external fun kniBridge842(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge843")private external fun kniBridge843(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge844")private external fun kniBridge844(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge845")private external fun kniBridge845(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Byte, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge846")private external fun kniBridge846(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.UInt): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge847")private external fun kniBridge847(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Byte, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge848")private external fun kniBridge848(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlin.Byte): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge849")private external fun kniBridge849(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge85")private external fun kniBridge85(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge850")private external fun kniBridge850(/*0*/ p0: kotlin.UInt): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge851")private external fun kniBridge851(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge852")private external fun kniBridge852(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.Int): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge853")private external fun kniBridge853(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge854")private external fun kniBridge854(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge855")private external fun kniBridge855(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Byte, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge856")private external fun kniBridge856(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge857")private external fun kniBridge857(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge859")private external fun kniBridge859(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge86")private external fun kniBridge86(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge860")private external fun kniBridge860(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge861")private external fun kniBridge861(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge862")private external fun kniBridge862(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge863")private external fun kniBridge863(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge864")private external fun kniBridge864(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge865")private external fun kniBridge865(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge866")private external fun kniBridge866(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge867")private external fun kniBridge867(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge868")private external fun kniBridge868(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge869")private external fun kniBridge869(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge87")private external fun kniBridge87(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge871")private external fun kniBridge871(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge872")private external fun kniBridge872(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge873")private external fun kniBridge873(): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge874")private external fun kniBridge874(/*0*/ p0: kotlin.Short)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge875")private external fun kniBridge875(): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge876")private external fun kniBridge876(/*0*/ p0: kotlin.Short)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge877")private external fun kniBridge877(): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge878")private external fun kniBridge878(/*0*/ p0: kotlin.Short)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge879")private external fun kniBridge879(): kotlin.UByte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge88")private external fun kniBridge88(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge880")private external fun kniBridge880(/*0*/ p0: kotlin.UByte)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge881")private external fun kniBridge881(): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge882")private external fun kniBridge882(/*0*/ p0: kotlin.Short)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge883")private external fun kniBridge883(): kotlin.UByte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge884")private external fun kniBridge884(/*0*/ p0: kotlin.UByte)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge885")private external fun kniBridge885(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge886")private external fun kniBridge886(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge887")private external fun kniBridge887(/*0*/ p0: kotlin.Short)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge888")private external fun kniBridge888(): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge889")private external fun kniBridge889(/*0*/ p0: kotlin.Short)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge89")private external fun kniBridge89(/*0*/ p0: kotlin.Short): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge890")private external fun kniBridge890(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge891")private external fun kniBridge891(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge892")private external fun kniBridge892(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge893")private external fun kniBridge893(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge894")private external fun kniBridge894(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge895")private external fun kniBridge895(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge896")private external fun kniBridge896(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge897")private external fun kniBridge897(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge9")private external fun kniBridge9(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge90")private external fun kniBridge90(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge902")private external fun kniBridge902(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge903")private external fun kniBridge903(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge904")private external fun kniBridge904(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge905")private external fun kniBridge905(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge908")private external fun kniBridge908(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Byte, /*5*/ p5: kotlin.Byte): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge909")private external fun kniBridge909(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Byte): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge91")private external fun kniBridge91(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge910")private external fun kniBridge910(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.Byte): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge911")private external fun kniBridge911(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Long, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge912")private external fun kniBridge912(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge913")private external fun kniBridge913(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge914")private external fun kniBridge914(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Long, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge915")private external fun kniBridge915(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge916")private external fun kniBridge916(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge917")private external fun kniBridge917(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Long, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge918")private external fun kniBridge918(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge919")private external fun kniBridge919(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.Byte, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge92")private external fun kniBridge92(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge920")private external fun kniBridge920(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge921")private external fun kniBridge921(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Long): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge922")private external fun kniBridge922(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge923")private external fun kniBridge923(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlin.Long, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge924")private external fun kniBridge924(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge925")private external fun kniBridge925(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge926")private external fun kniBridge926(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Byte, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Long, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge927")private external fun kniBridge927(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Byte, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.Long, /*5*/ p5: kotlin.Long): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge928")private external fun kniBridge928(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge929")private external fun kniBridge929(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge93")private external fun kniBridge93(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge930")private external fun kniBridge930(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Short, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge931")private external fun kniBridge931(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Long): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge932")private external fun kniBridge932(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge933")private external fun kniBridge933(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.Long, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge934")private external fun kniBridge934(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge935")private external fun kniBridge935(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge936")private external fun kniBridge936(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge937")private external fun kniBridge937(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.Long, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge938")private external fun kniBridge938(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge939")private external fun kniBridge939(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge94")private external fun kniBridge94(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge940")private external fun kniBridge940(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Long): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge941")private external fun kniBridge941(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge942")private external fun kniBridge942(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge943")private external fun kniBridge943(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Long, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge944")private external fun kniBridge944(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge945")private external fun kniBridge945(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Long): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge946")private external fun kniBridge946(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge947")private external fun kniBridge947(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Long, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge948")private external fun kniBridge948(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Long, /*3*/ p3: kotlin.Long): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge949")private external fun kniBridge949(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge95")private external fun kniBridge95(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge950")private external fun kniBridge950(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge951")private external fun kniBridge951(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge952")private external fun kniBridge952(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge955")private external fun kniBridge955(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Byte): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge956")private external fun kniBridge956(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Byte): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge957")private external fun kniBridge957(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Byte): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge958")private external fun kniBridge958(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Byte): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge959")private external fun kniBridge959(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Byte): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge96")private external fun kniBridge96(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge960")private external fun kniBridge960(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Byte): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge961")private external fun kniBridge961(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge962")private external fun kniBridge962(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge963")private external fun kniBridge963(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge964")private external fun kniBridge964(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge965")private external fun kniBridge965(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge966")private external fun kniBridge966(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.Byte): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge967")private external fun kniBridge967(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge968")private external fun kniBridge968(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Byte, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge969")private external fun kniBridge969(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Byte, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge97")private external fun kniBridge97(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge970")private external fun kniBridge970(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Byte, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge971")private external fun kniBridge971(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Byte, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge972")private external fun kniBridge972(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge973")private external fun kniBridge973(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge974")private external fun kniBridge974(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge975")private external fun kniBridge975(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge976")private external fun kniBridge976(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge977")private external fun kniBridge977(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge978")private external fun kniBridge978(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge979")private external fun kniBridge979(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge98")private external fun kniBridge98(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Short, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.ULong, /*5*/ p5: kotlin.Byte): kotlin.Int

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge980")private external fun kniBridge980(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge981")private external fun kniBridge981(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge982")private external fun kniBridge982(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge983")private external fun kniBridge983(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge984")private external fun kniBridge984(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge985")private external fun kniBridge985(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge986")private external fun kniBridge986(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge987")private external fun kniBridge987(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge99")private external fun kniBridge99(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge996")private external fun kniBridge996(): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge997")private external fun kniBridge997(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge998")private external fun kniBridge998(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Short, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Short

@kotlin.native.SymbolName(name = "platform_CoreServices_kniBridge999")private external fun kniBridge999(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Byte): kotlin.Short

fun ldtox80(/*0*/ x: kotlinx.cinterop.CValuesRef<*>?, /*1*/ x80: kotlinx.cinterop.CValuesRef<platform.darwin.extended80 /* = platform.darwin.Float80 */>?) { TODO() }

fun num2dec(/*0*/ f: kotlinx.cinterop.CValuesRef<platform.CoreServices.decform>?, /*1*/ x: platform.posix.double_t /* = kotlin.Double */, /*2*/ d: kotlinx.cinterop.CValuesRef<platform.CoreServices.decimal>?) { TODO() }

fun numtostring(/*0*/ theNum: kotlin.Long, /*1*/ theString: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) { TODO() }

fun randomx(/*0*/ x: kotlinx.cinterop.CValuesRef<platform.posix.double_tVar /* = kotlinx.cinterop.DoubleVarOf<platform.posix.double_t /* = kotlin.Double */> */>?): platform.posix.double_t /* = kotlin.Double */ { TODO() }

fun relation(/*0*/ x: platform.posix.double_t /* = kotlin.Double */, /*1*/ y: platform.posix.double_t /* = kotlin.Double */): platform.CoreServices.relop /* = kotlin.Short */ { TODO() }

fun str2dec(/*0*/ s: kotlin.String?, /*1*/ ix: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ShortVar /* = kotlinx.cinterop.ShortVarOf<kotlin.Short> */>?, /*2*/ d: kotlinx.cinterop.CValuesRef<platform.CoreServices.decimal>?, /*3*/ vp: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ShortVar /* = kotlinx.cinterop.ShortVarOf<kotlin.Short> */>?) { TODO() }

fun vAEBuildAppleEvent(/*0*/ theClass: platform.CoreServices.AEEventClass /* = kotlin.UInt */, /*1*/ theID: platform.CoreServices.AEEventID /* = kotlin.UInt */, /*2*/ addressType: platform.CoreServices.DescType /* = kotlin.UInt */, /*3*/ addressData: kotlinx.cinterop.CValuesRef<*>?, /*4*/ addressLength: platform.darwin.Size /* = kotlin.Long */, /*5*/ returnID: platform.darwin.SInt16 /* = kotlin.Short */, /*6*/ transactionID: platform.darwin.SInt32 /* = kotlin.Int */, /*7*/ resultEvt: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, /*8*/ error: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEBuildError>?, /*9*/ paramsFmt: kotlin.String?, /*10*/ args: platform.posix.va_list? /* = kotlinx.cinterop.CPointer<platform.posix.__va_list_tag>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun vAEBuildDesc(/*0*/ dst: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEDesc>?, /*1*/ error: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEBuildError>?, /*2*/ src: kotlin.String?, /*3*/ args: platform.posix.va_list? /* = kotlinx.cinterop.CPointer<platform.posix.__va_list_tag>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun vAEBuildParameters(/*0*/ event: kotlinx.cinterop.CValuesRef<platform.CoreServices.AppleEvent /* = platform.CoreServices.AEDesc */>?, /*1*/ error: kotlinx.cinterop.CValuesRef<platform.CoreServices.AEBuildError>?, /*2*/ format: kotlin.String?, /*3*/ args: platform.posix.va_list? /* = kotlinx.cinterop.CPointer<platform.posix.__va_list_tag>? */): platform.darwin.OSStatus /* = kotlin.Int */ { TODO() }

fun x80tod(/*0*/ x80: kotlinx.cinterop.CValuesRef<platform.darwin.extended80 /* = platform.darwin.Float80 */>?): kotlin.Double { TODO() }

fun x80told(/*0*/ x80: kotlinx.cinterop.CValuesRef<platform.darwin.extended80 /* = platform.darwin.Float80 */>?, /*1*/ x: kotlinx.cinterop.CValuesRef<*>?) { TODO() }


