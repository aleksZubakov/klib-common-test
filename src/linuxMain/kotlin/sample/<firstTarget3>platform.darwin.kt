@file:Suppress("UNUSED_VARIABLE", "UNUSED_EXPRESSION", "UNUSED_PARAMETER", "REDUNDANT_NULLABLE")

package platform.darwin

import kotlinx.cinterop.* 

final actual class BTREEINFO public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var cachesize: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var compare: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.DBT>?, kotlinx.cinterop.CPointer<platform.darwin.DBT>?) -> kotlin.Int>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.DBT>?, kotlinx.cinterop.CPointer<platform.darwin.DBT>?) -> kotlin.Int>>?) = TODO()

    actual final var flags: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    actual final var lorder: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var maxkeypage: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var minkeypage: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var psize: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var prefix: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.DBT>?, kotlinx.cinterop.CPointer<platform.darwin.DBT>?) -> platform.posix.size_t /* = kotlin.ULong */>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.DBT>?, kotlinx.cinterop.CPointer<platform.darwin.DBT>?) -> platform.posix.size_t /* = kotlin.ULong */>>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class CompileTimeAssertionChecks_DNS_SD public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val assert0: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class DBM public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val __opaque: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class DBT public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var data: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var size: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual enum class DBTYPE private constructor(/*0*/ value: kotlin.UInt): kotlinx.cinterop.CEnum {
    DB_BTREE(TODO()),

    DB_HASH(TODO()),

    DB_RECNO(TODO());

    actual open override /*1*/ val value: kotlin.UInt
        get() = TODO()

    actual companion object Companion {
        final actual fun byValue(/*0*/ value: kotlin.UInt): platform.darwin.DBTYPE { TODO() }
    }

    final actual class Var public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CEnumVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
        actual final var value: platform.darwin.DBTYPE
            get() = TODO()
            set(value: platform.darwin.DBTYPE) = TODO()

        actual companion object Companion: kotlinx.cinterop.CPrimitiveVar.Type(TODO() as kotlin.Int) {
        }
    }
}

final actual class FixedPoint public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var x: platform.darwin.Fixed /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.Fixed /* = kotlin.Int */) = TODO()

    final var y: platform.darwin.Fixed /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.Fixed /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class FixedRect public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var bottom: platform.darwin.Fixed /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.Fixed /* = kotlin.Int */) = TODO()

    final var left: platform.darwin.Fixed /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.Fixed /* = kotlin.Int */) = TODO()

    final var right: platform.darwin.Fixed /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.Fixed /* = kotlin.Int */) = TODO()

    final var top: platform.darwin.Fixed /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.Fixed /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class Float32Point public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var x: platform.darwin.Float32 /* = kotlin.Float */
        get() = TODO()
        set(value: platform.darwin.Float32 /* = kotlin.Float */) = TODO()

    final var y: platform.darwin.Float32 /* = kotlin.Float */
        get() = TODO()
        set(value: platform.darwin.Float32 /* = kotlin.Float */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class Float80 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var exp: platform.darwin.SInt16 /* = kotlin.Short */
        get() = TODO()
        set(value: platform.darwin.SInt16 /* = kotlin.Short */) = TODO()

    final val man: kotlinx.cinterop.CArrayPointer<platform.darwin.UInt16Var /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UInt16 /* = kotlin.UShort */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UShortVarOf<platform.darwin.UInt16 /* = kotlin.UShort */>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class Float96 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val exp: kotlinx.cinterop.CArrayPointer<platform.darwin.SInt16Var /* = kotlinx.cinterop.ShortVarOf<platform.darwin.SInt16 /* = kotlin.Short */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ShortVarOf<platform.darwin.SInt16 /* = kotlin.Short */>> */
        get() = TODO()

    final val man: kotlinx.cinterop.CArrayPointer<platform.darwin.UInt16Var /* = kotlinx.cinterop.UShortVarOf<platform.darwin.UInt16 /* = kotlin.UShort */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UShortVarOf<platform.darwin.UInt16 /* = kotlin.UShort */>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class HASHINFO public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var bsize: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var cachesize: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var ffactor: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var lorder: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var nelem: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var hash: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.posix.size_t /* = kotlin.ULong */) -> platform.posix.u_int32_t /* = kotlin.UInt */>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.posix.size_t /* = kotlin.ULong */) -> platform.posix.u_int32_t /* = kotlin.UInt */>>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class MPOOL public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var fd: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final val lqh: platform.darwin._lqh
        get() = TODO()

    actual final var pagesize: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var curcache: platform.darwin.pgno_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.pgno_t /* = kotlin.UInt */) = TODO()

    final val hqh: kotlinx.cinterop.CArrayPointer<platform.darwin._hqh> /* = kotlinx.cinterop.CPointer<platform.darwin._hqh> */
        get() = TODO()

    final var maxcache: platform.darwin.pgno_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.pgno_t /* = kotlin.UInt */) = TODO()

    final var npages: platform.darwin.pgno_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.pgno_t /* = kotlin.UInt */) = TODO()

    final var pgcookie: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var pgin: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.pgno_t /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.pgno_t /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>?) = TODO()

    final var pgout: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.pgno_t /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.pgno_t /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

open actual class NSObject: kotlinx.cinterop.ObjCObjectBase, platform.darwin.NSObjectProtocol {
constructor(): super(){ TODO() } 
    @kotlinx.cinterop.ObjCMethod(selector = "class", bridge = "objcKniBridge99")open external actual override /*1*/ fun `class`(): kotlinx.cinterop.ObjCClass?

    @kotlinx.cinterop.ObjCMethod(selector = "conformsToProtocol:", bridge = "objcKniBridge113")open external actual override /*1*/ fun conformsToProtocol(/*0*/ aProtocol: objcnames.classes.Protocol?): kotlin.Boolean

    @kotlinx.cinterop.ObjCMethod(selector = "copy", bridge = "objcKniBridge83")open external actual fun copy(): kotlin.Any?

    @kotlinx.cinterop.ObjCMethod(selector = "description", bridge = "objcKniBridge121")open external actual override /*1*/ fun description(): kotlin.String?

    @kotlinx.cinterop.ObjCMethod(selector = "finalize", bridge = "objcKniBridge81")open external actual fun finalize()

    @kotlinx.cinterop.ObjCMethod(selector = "forwardInvocation:", bridge = "objcKniBridge93")open external actual fun forwardInvocation(/*0*/ anInvocation: platform.Foundation.NSInvocation?)

    @kotlinx.cinterop.ObjCMethod(selector = "init", bridge = "objcKniBridge79")open external actual fun init(): platform.darwin.NSObject?

    @kotlinx.cinterop.ObjCMethod(selector = "isEqual:", bridge = "objcKniBridge97")open external actual override /*1*/ fun isEqual(/*0*/ `object`: kotlin.Any?): kotlin.Boolean

    @kotlinx.cinterop.ObjCMethod(selector = "isKindOfClass:", bridge = "objcKniBridge109")open external actual override /*1*/ fun isKindOfClass(/*0*/ aClass: kotlinx.cinterop.ObjCClass?): kotlin.Boolean

    @kotlinx.cinterop.ObjCMethod(selector = "isMemberOfClass:", bridge = "objcKniBridge111")open external actual override /*1*/ fun isMemberOfClass(/*0*/ aClass: kotlinx.cinterop.ObjCClass?): kotlin.Boolean

    @kotlinx.cinterop.ObjCMethod(selector = "isProxy", bridge = "objcKniBridge107")open external actual override /*1*/ fun isProxy(): kotlin.Boolean

    @kotlinx.cinterop.ObjCMethod(selector = "mutableCopy", bridge = "objcKniBridge85")open external actual fun mutableCopy(): kotlin.Any?

    @kotlinx.cinterop.ObjCMethod(selector = "superclass", bridge = "objcKniBridge119")open external actual override /*1*/ fun superclass(): kotlinx.cinterop.ObjCClass?

    @kotlinx.cinterop.ObjCMethod(selector = "doesNotRecognizeSelector:", bridge = "objcKniBridge89")open external fun doesNotRecognizeSelector(/*0*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */)

    @kotlinx.cinterop.ObjCMethod(selector = "forwardingTargetForSelector:", bridge = "objcKniBridge91")open external fun forwardingTargetForSelector(/*0*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): kotlin.Any?

    @kotlinx.cinterop.ObjCMethod(selector = "hash", bridge = "objcKniBridge117")open external override /*1*/ fun hash(): platform.darwin.NSUInteger /* = kotlin.ULong */

    @kotlinx.cinterop.ObjCMethod(selector = "methodForSelector:", bridge = "objcKniBridge87")open external fun methodForSelector(/*0*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.darwin.IMP? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */

    @kotlinx.cinterop.ObjCMethod(selector = "methodSignatureForSelector:", bridge = "objcKniBridge95")open external fun methodSignatureForSelector(/*0*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.Foundation.NSMethodSignature?

    @kotlinx.cinterop.ObjCMethod(selector = "performSelector:", bridge = "objcKniBridge101")open external override /*1*/ fun performSelector(/*0*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): kotlin.Any?

    @kotlinx.cinterop.ObjCMethod(selector = "performSelector:withObject:", bridge = "objcKniBridge103")open external override /*1*/ fun performSelector(/*0*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*1*/ withObject: kotlin.Any?): kotlin.Any?

    @kotlinx.cinterop.ObjCMethod(selector = "performSelector:withObject:withObject:", bridge = "objcKniBridge105")open external override /*1*/ fun performSelector(/*0*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*1*/ withObject: kotlin.Any?, /*2*/ _withObject: kotlin.Any?): kotlin.Any?

    @kotlinx.cinterop.ObjCMethod(selector = "respondsToSelector:", bridge = "objcKniBridge115")open external override /*1*/ fun respondsToSelector(/*0*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): kotlin.Boolean

    actual companion object Companion: kotlinx.cinterop.ObjCClassOf<platform.darwin.NSObject>, platform.darwin.NSObjectMeta() {
    }
}

open actual class NSObjectMeta: kotlinx.cinterop.ObjCObjectBaseMeta, platform.darwin.NSObjectProtocolMeta {
protected constructor(): super(){ TODO() } 
    @kotlinx.cinterop.ObjCMethod(selector = "alloc", bridge = "objcKniBridge53")open external actual fun alloc(): platform.darwin.NSObject?

    @kotlinx.cinterop.ObjCMethod(selector = "allocWithZone:", bridge = "objcKniBridge51")open external actual fun allocWithZone(/*0*/ zone: kotlinx.cinterop.CPointer<cnames.structs._NSZone>?): platform.darwin.NSObject?

    @kotlinx.cinterop.ObjCMethod(selector = "class", bridge = "objcKniBridge73")open external actual fun `class`(): kotlinx.cinterop.ObjCClass?

    @kotlinx.cinterop.ObjCMethod(selector = "conformsToProtocol:", bridge = "objcKniBridge57")open external actual fun conformsToProtocol(/*0*/ protocol: objcnames.classes.Protocol?): kotlin.Boolean

    @kotlinx.cinterop.ObjCMethod(selector = "debugDescription", bridge = "objcKniBridge77")open external actual fun debugDescription(): kotlin.String?

    @kotlinx.cinterop.ObjCMethod(selector = "description", bridge = "objcKniBridge75")open external actual fun description(): kotlin.String?

    @kotlinx.cinterop.ObjCMethod(selector = "initialize", bridge = "objcKniBridge47")open external actual fun initialize()

    @kotlinx.cinterop.ObjCMethod(selector = "isSubclassOfClass:", bridge = "objcKniBridge63")open external actual fun isSubclassOfClass(/*0*/ aClass: kotlinx.cinterop.ObjCClass?): kotlin.Boolean

    @kotlinx.cinterop.ObjCMethod(selector = "load", bridge = "objcKniBridge45")open external actual fun load()

    @kotlinx.cinterop.ObjCMethod(selector = "new", bridge = "objcKniBridge49")open external actual fun new(): platform.darwin.NSObject?

    @kotlinx.cinterop.ObjCMethod(selector = "superclass", bridge = "objcKniBridge71")open external actual fun superclass(): kotlinx.cinterop.ObjCClass?

    @kotlinx.cinterop.ObjCMethod(selector = "hash", bridge = "objcKniBridge69")open external fun hash(): platform.darwin.NSUInteger /* = kotlin.ULong */

    @kotlinx.cinterop.ObjCMethod(selector = "instanceMethodForSelector:", bridge = "objcKniBridge59")open external fun instanceMethodForSelector(/*0*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.darwin.IMP? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */

    @kotlinx.cinterop.ObjCMethod(selector = "instanceMethodSignatureForSelector:", bridge = "objcKniBridge61")open external fun instanceMethodSignatureForSelector(/*0*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.Foundation.NSMethodSignature?

    @kotlinx.cinterop.ObjCMethod(selector = "instancesRespondToSelector:", bridge = "objcKniBridge55")open external fun instancesRespondToSelector(/*0*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): kotlin.Boolean

    @kotlinx.cinterop.ObjCMethod(selector = "resolveClassMethod:", bridge = "objcKniBridge65")open external fun resolveClassMethod(/*0*/ sel: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): kotlin.Boolean

    @kotlinx.cinterop.ObjCMethod(selector = "resolveInstanceMethod:", bridge = "objcKniBridge67")open external fun resolveInstanceMethod(/*0*/ sel: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): kotlin.Boolean
}

actual interface NSObjectProtocol: kotlinx.cinterop.ObjCObject {
    @kotlinx.cinterop.ObjCMethod(selector = "class", bridge = "objcKniBridge4")actual fun `class`(): kotlinx.cinterop.ObjCClass?

    @kotlinx.cinterop.ObjCMethod(selector = "conformsToProtocol:", bridge = "objcKniBridge18")actual fun conformsToProtocol(/*0*/ aProtocol: objcnames.classes.Protocol?): kotlin.Boolean

    @kotlinx.cinterop.ObjCMethod(selector = "description", bridge = "objcKniBridge26")actual fun description(): kotlin.String?

    @kotlinx.cinterop.ObjCMethod(selector = "isEqual:", bridge = "objcKniBridge2")actual fun isEqual(/*0*/ `object`: kotlin.Any?): kotlin.Boolean

    @kotlinx.cinterop.ObjCMethod(selector = "isKindOfClass:", bridge = "objcKniBridge14")actual fun isKindOfClass(/*0*/ aClass: kotlinx.cinterop.ObjCClass?): kotlin.Boolean

    @kotlinx.cinterop.ObjCMethod(selector = "isMemberOfClass:", bridge = "objcKniBridge16")actual fun isMemberOfClass(/*0*/ aClass: kotlinx.cinterop.ObjCClass?): kotlin.Boolean

    @kotlinx.cinterop.ObjCMethod(selector = "isProxy", bridge = "objcKniBridge12")actual fun isProxy(): kotlin.Boolean

    @kotlinx.cinterop.ObjCMethod(selector = "superclass", bridge = "objcKniBridge24")actual fun superclass(): kotlinx.cinterop.ObjCClass?

    @kotlinx.cinterop.ObjCMethod(selector = "debugDescription", bridge = "objcKniBridge28")fun debugDescription(): kotlin.String? { TODO() }

    @kotlinx.cinterop.ObjCMethod(selector = "hash", bridge = "objcKniBridge22")fun hash(): platform.darwin.NSUInteger /* = kotlin.ULong */

    @kotlinx.cinterop.ObjCMethod(selector = "performSelector:", bridge = "objcKniBridge6")fun performSelector(/*0*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): kotlin.Any?

    @kotlinx.cinterop.ObjCMethod(selector = "performSelector:withObject:", bridge = "objcKniBridge8")fun performSelector(/*0*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*1*/ withObject: kotlin.Any?): kotlin.Any?

    @kotlinx.cinterop.ObjCMethod(selector = "performSelector:withObject:withObject:", bridge = "objcKniBridge10")fun performSelector(/*0*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*1*/ withObject: kotlin.Any?, /*2*/ _withObject: kotlin.Any?): kotlin.Any?

    @kotlinx.cinterop.ObjCMethod(selector = "respondsToSelector:", bridge = "objcKniBridge20")fun respondsToSelector(/*0*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): kotlin.Boolean

    val debugDescription: kotlin.String?
        get() = TODO()

    val description: kotlin.String?
        get() = TODO()

    val hash: platform.darwin.NSUInteger /* = kotlin.ULong */
        get() = TODO()

    val superclass: kotlinx.cinterop.ObjCClass?
        get() = TODO()
}

actual interface NSObjectProtocolMeta: kotlinx.cinterop.ObjCObjectMeta /* = kotlinx.cinterop.ObjCClass */ {
}

final actual enum class NXByteOrder private constructor(/*0*/ value: kotlin.UInt): kotlinx.cinterop.CEnum {
    NX_UnknownByteOrder(TODO()),

    NX_LittleEndian(TODO()),

    NX_BigEndian(TODO());

    actual open override /*1*/ val value: kotlin.UInt
        get() = TODO()

    actual companion object Companion {
        final actual fun byValue(/*0*/ value: kotlin.UInt): platform.darwin.NXByteOrder { TODO() }
    }

    final actual class Var public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CEnumVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
        actual final var value: platform.darwin.NXByteOrder
            get() = TODO()
            set(value: platform.darwin.NXByteOrder) = TODO()

        actual companion object Companion: kotlinx.cinterop.CPrimitiveVar.Type(TODO() as kotlin.Int) {
        }
    }
}

final actual class NumVersion public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var majorRev: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var minorAndBugRev: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var nonRelRev: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    final var stage: platform.darwin.UInt8 /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.darwin.UInt8 /* = kotlin.UByte */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class NumVersionVariant public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val parts: platform.darwin.NumVersion
        get() = TODO()

    final var whole: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

actual interface OS_at_encoderProtocol: platform.darwin.NSObjectProtocol {
}

actual interface OS_at_encoderProtocolMeta: platform.darwin.NSObjectProtocolMeta {
}

actual interface OS_dispatch_dataProtocol: platform.darwin.OS_dispatch_objectProtocol {
}

actual interface OS_dispatch_dataProtocolMeta: platform.darwin.OS_dispatch_objectProtocolMeta {
}

actual interface OS_dispatch_groupProtocol: platform.darwin.OS_dispatch_objectProtocol {
}

actual interface OS_dispatch_groupProtocolMeta: platform.darwin.OS_dispatch_objectProtocolMeta {
}

actual interface OS_dispatch_ioProtocol: platform.darwin.OS_dispatch_objectProtocol {
}

actual interface OS_dispatch_ioProtocolMeta: platform.darwin.OS_dispatch_objectProtocolMeta {
}

actual interface OS_dispatch_objectProtocol: platform.darwin.NSObjectProtocol {
}

actual interface OS_dispatch_objectProtocolMeta: platform.darwin.NSObjectProtocolMeta {
}

actual interface OS_dispatch_queueProtocol: platform.darwin.OS_dispatch_objectProtocol {
}

actual interface OS_dispatch_queueProtocolMeta: platform.darwin.OS_dispatch_objectProtocolMeta {
}

actual interface OS_dispatch_queue_attrProtocol: platform.darwin.OS_dispatch_objectProtocol {
}

actual interface OS_dispatch_queue_attrProtocolMeta: platform.darwin.OS_dispatch_objectProtocolMeta {
}

actual interface OS_dispatch_queue_concurrentProtocol: platform.darwin.OS_dispatch_queueProtocol {
}

actual interface OS_dispatch_queue_concurrentProtocolMeta: platform.darwin.OS_dispatch_queueProtocolMeta {
}

actual interface OS_dispatch_queue_globalProtocol: platform.darwin.OS_dispatch_queueProtocol {
}

actual interface OS_dispatch_queue_globalProtocolMeta: platform.darwin.OS_dispatch_queueProtocolMeta {
}

actual interface OS_dispatch_queue_mainProtocol: platform.darwin.OS_dispatch_queue_serialProtocol {
}

actual interface OS_dispatch_queue_mainProtocolMeta: platform.darwin.OS_dispatch_queue_serialProtocolMeta {
}

actual interface OS_dispatch_queue_serialProtocol: platform.darwin.OS_dispatch_queueProtocol {
}

actual interface OS_dispatch_queue_serialProtocolMeta: platform.darwin.OS_dispatch_queueProtocolMeta {
}

actual interface OS_dispatch_semaphoreProtocol: platform.darwin.OS_dispatch_objectProtocol {
}

actual interface OS_dispatch_semaphoreProtocolMeta: platform.darwin.OS_dispatch_objectProtocolMeta {
}

actual interface OS_dispatch_sourceProtocol: platform.darwin.OS_dispatch_objectProtocol {
}

actual interface OS_dispatch_sourceProtocolMeta: platform.darwin.OS_dispatch_objectProtocolMeta {
}

actual interface OS_os_logProtocol: platform.darwin.NSObjectProtocol {
}

actual interface OS_os_logProtocolMeta: platform.darwin.NSObjectProtocolMeta {
}

final actual class Point public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var h: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    actual final var v: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class ProcessSerialNumber public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var highLongOfPSN: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var lowLongOfPSN: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class RECNOINFO public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var bval: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    actual final var cachesize: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var flags: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    actual final var lorder: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var psize: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var bfname: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var reclen: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class Rect public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var bottom: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    actual final var left: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    actual final var right: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    actual final var top: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class TimeRecord public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val value: platform.darwin.CompTimeValue /* = platform.darwin.wide */
        get() = TODO()

    final var base: platform.darwin.TimeBase? /* = kotlinx.cinterop.CPointer<cnames.structs.TimeBaseRecord>? */
        get() = TODO()
        set(value: platform.darwin.TimeBase? /* = kotlinx.cinterop.CPointer<cnames.structs.TimeBaseRecord>? */) = TODO()

    final var scale: platform.darwin.TimeScale /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.TimeScale /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class UnsignedWide public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var hi: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    final var lo: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class VersRec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var countryCode: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    actual final val numericVersion: platform.darwin.NumVersion
        get() = TODO()

    final val reserved: platform.darwin.Str255 /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>> */
        get() = TODO()

    final val shortVersion: platform.darwin.Str255 /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual enum class _MM_CMPINT_ENUM private constructor(/*0*/ value: kotlin.UInt): kotlinx.cinterop.CEnum {
    _MM_CMPINT_EQ(TODO()),

    _MM_CMPINT_LT(TODO()),

    _MM_CMPINT_LE(TODO()),

    _MM_CMPINT_UNUSED(TODO()),

    _MM_CMPINT_NE(TODO()),

    _MM_CMPINT_NLT(TODO()),

    _MM_CMPINT_NLE(TODO());

    actual open override /*1*/ val value: kotlin.UInt
        get() = TODO()

    actual companion object Companion {
        final actual fun byValue(/*0*/ value: kotlin.UInt): platform.darwin._MM_CMPINT_ENUM { TODO() }
    }

    final actual class Var public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CEnumVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
        actual final var value: platform.darwin._MM_CMPINT_ENUM
            get() = TODO()
            set(value: platform.darwin._MM_CMPINT_ENUM) = TODO()

        actual companion object Companion: kotlinx.cinterop.CPrimitiveVar.Type(TODO() as kotlin.Int) {
        }
    }
}

final actual enum class _MM_MANTISSA_NORM_ENUM private constructor(/*0*/ value: kotlin.UInt): kotlinx.cinterop.CEnum {
    _MM_MANT_NORM_1_2(TODO()),

    _MM_MANT_NORM_p5_2(TODO()),

    _MM_MANT_NORM_p5_1(TODO()),

    _MM_MANT_NORM_p75_1p5(TODO());

    actual open override /*1*/ val value: kotlin.UInt
        get() = TODO()

    actual companion object Companion {
        final actual fun byValue(/*0*/ value: kotlin.UInt): platform.darwin._MM_MANTISSA_NORM_ENUM { TODO() }
    }

    final actual class Var public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CEnumVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
        actual final var value: platform.darwin._MM_MANTISSA_NORM_ENUM
            get() = TODO()
            set(value: platform.darwin._MM_MANTISSA_NORM_ENUM) = TODO()

        actual companion object Companion: kotlinx.cinterop.CPrimitiveVar.Type(TODO() as kotlin.Int) {
        }
    }
}

final actual enum class _MM_MANTISSA_SIGN_ENUM private constructor(/*0*/ value: kotlin.UInt): kotlinx.cinterop.CEnum {
    _MM_MANT_SIGN_src(TODO()),

    _MM_MANT_SIGN_zero(TODO()),

    _MM_MANT_SIGN_nan(TODO());

    actual open override /*1*/ val value: kotlin.UInt
        get() = TODO()

    actual companion object Companion {
        final actual fun byValue(/*0*/ value: kotlin.UInt): platform.darwin._MM_MANTISSA_SIGN_ENUM { TODO() }
    }

    final actual class Var public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CEnumVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
        actual final var value: platform.darwin._MM_MANTISSA_SIGN_ENUM
            get() = TODO()
            set(value: platform.darwin._MM_MANTISSA_SIGN_ENUM) = TODO()

        actual companion object Companion: kotlinx.cinterop.CPrimitiveVar.Type(TODO() as kotlin.Int) {
        }
    }
}

final actual class _TXTRecordRef_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var ForceNaturalAlignment: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final val PrivateData: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class _Unwind_Exception public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var exception_class: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var exception_cleanup: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin._Unwind_Reason_Code /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.darwin._Unwind_Exception>?) -> kotlin.Unit>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin._Unwind_Reason_Code /* = kotlin.UInt */, kotlinx.cinterop.CPointer<platform.darwin._Unwind_Exception>?) -> kotlin.Unit>>?) = TODO()

    final var private_1: platform.posix.uintptr_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uintptr_t /* = kotlin.ULong */) = TODO()

    final var private_2: platform.posix.uintptr_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uintptr_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class __db public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var close: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.__db>?) -> kotlin.Int>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.__db>?) -> kotlin.Int>>?) = TODO()

    actual final var del: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.__db>?, kotlinx.cinterop.CPointer<platform.darwin.DBT>?, kotlin.UInt) -> kotlin.Int>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.__db>?, kotlinx.cinterop.CPointer<platform.darwin.DBT>?, kotlin.UInt) -> kotlin.Int>>?) = TODO()

    actual final var fd: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.__db>?) -> kotlin.Int>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.__db>?) -> kotlin.Int>>?) = TODO()

    actual final var get: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.__db>?, kotlinx.cinterop.CPointer<platform.darwin.DBT>?, kotlinx.cinterop.CPointer<platform.darwin.DBT>?, kotlin.UInt) -> kotlin.Int>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.__db>?, kotlinx.cinterop.CPointer<platform.darwin.DBT>?, kotlinx.cinterop.CPointer<platform.darwin.DBT>?, kotlin.UInt) -> kotlin.Int>>?) = TODO()

    actual final var put: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.__db>?, kotlinx.cinterop.CPointer<platform.darwin.DBT>?, kotlinx.cinterop.CPointer<platform.darwin.DBT>?, kotlin.UInt) -> kotlin.Int>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.__db>?, kotlinx.cinterop.CPointer<platform.darwin.DBT>?, kotlinx.cinterop.CPointer<platform.darwin.DBT>?, kotlin.UInt) -> kotlin.Int>>?) = TODO()

    actual final var seq: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.__db>?, kotlinx.cinterop.CPointer<platform.darwin.DBT>?, kotlinx.cinterop.CPointer<platform.darwin.DBT>?, kotlin.UInt) -> kotlin.Int>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.__db>?, kotlinx.cinterop.CPointer<platform.darwin.DBT>?, kotlinx.cinterop.CPointer<platform.darwin.DBT>?, kotlin.UInt) -> kotlin.Int>>?) = TODO()

    actual final var sync: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.__db>?, kotlin.UInt) -> kotlin.Int>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.__db>?, kotlin.UInt) -> kotlin.Int>>?) = TODO()

    actual final var type: platform.darwin.DBTYPE
        get() = TODO()
        set(value: platform.darwin.DBTYPE) = TODO()

    final var internal: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class __nl_cat_d public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var __size: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    final var __data: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class _bkt public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var flags: platform.posix.u_int8_t /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_int8_t /* = kotlin.UByte */) = TODO()

    final val hq: platform.darwin.anonymousStruct8
        get() = TODO()

    final var page: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var pgno: platform.darwin.pgno_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.pgno_t /* = kotlin.UInt */) = TODO()

    final val q: platform.darwin.anonymousStruct9
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class _hqh public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var tqh_first: kotlinx.cinterop.CPointer<platform.darwin._bkt>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin._bkt>?) = TODO()

    final var tqh_last: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.darwin._bkt> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin._bkt>> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.darwin._bkt> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin._bkt>> */>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class _lqh public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var tqh_first: kotlinx.cinterop.CPointer<platform.darwin._bkt>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin._bkt>?) = TODO()

    final var tqh_last: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.darwin._bkt> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin._bkt>> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.darwin._bkt> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin._bkt>> */>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class _stringlist public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var sl_cur: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    final var sl_max: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    final var sl_str: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class aiocb public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var aio_fildes: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var aio_lio_opcode: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var aio_reqprio: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final val aio_sigevent: platform.posix.sigevent
        get() = TODO()

    final var aio_buf: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var aio_nbytes: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    final var aio_offset: platform.posix.off_t /* = kotlin.Long */
        get() = TODO()
        set(value: platform.posix.off_t /* = kotlin.Long */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class anonymousStruct1 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var A: kotlinx.cinterop.CPointer<platform.darwin.dns_address_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_address_record_t>?) = TODO()

    actual final var AAAA: kotlinx.cinterop.CPointer<platform.darwin.dns_in6_address_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_in6_address_record_t>?) = TODO()

    actual final var AFSDB: kotlinx.cinterop.CPointer<platform.darwin.dns_AFSDB_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_AFSDB_record_t>?) = TODO()

    actual final var CNAME: kotlinx.cinterop.CPointer<platform.darwin.dns_domain_name_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_domain_name_record_t>?) = TODO()

    actual final var DNSNULL: kotlinx.cinterop.CPointer<platform.darwin.dns_raw_resource_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_raw_resource_record_t>?) = TODO()

    actual final var HINFO: kotlinx.cinterop.CPointer<platform.darwin.dns_HINFO_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_HINFO_record_t>?) = TODO()

    actual final var ISDN: kotlinx.cinterop.CPointer<platform.darwin.dns_ISDN_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_ISDN_record_t>?) = TODO()

    actual final var LOC: kotlinx.cinterop.CPointer<platform.darwin.dns_LOC_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_LOC_record_t>?) = TODO()

    actual final var MB: kotlinx.cinterop.CPointer<platform.darwin.dns_domain_name_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_domain_name_record_t>?) = TODO()

    actual final var MD: kotlinx.cinterop.CPointer<platform.darwin.dns_domain_name_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_domain_name_record_t>?) = TODO()

    actual final var MF: kotlinx.cinterop.CPointer<platform.darwin.dns_domain_name_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_domain_name_record_t>?) = TODO()

    actual final var MG: kotlinx.cinterop.CPointer<platform.darwin.dns_domain_name_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_domain_name_record_t>?) = TODO()

    actual final var MINFO: kotlinx.cinterop.CPointer<platform.darwin.dns_MINFO_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_MINFO_record_t>?) = TODO()

    actual final var MR: kotlinx.cinterop.CPointer<platform.darwin.dns_domain_name_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_domain_name_record_t>?) = TODO()

    actual final var MX: kotlinx.cinterop.CPointer<platform.darwin.dns_MX_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_MX_record_t>?) = TODO()

    actual final var NS: kotlinx.cinterop.CPointer<platform.darwin.dns_domain_name_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_domain_name_record_t>?) = TODO()

    actual final var PTR: kotlinx.cinterop.CPointer<platform.darwin.dns_domain_name_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_domain_name_record_t>?) = TODO()

    actual final var RP: kotlinx.cinterop.CPointer<platform.darwin.dns_RP_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_RP_record_t>?) = TODO()

    actual final var RT: kotlinx.cinterop.CPointer<platform.darwin.dns_RT_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_RT_record_t>?) = TODO()

    actual final var SOA: kotlinx.cinterop.CPointer<platform.darwin.dns_SOA_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_SOA_record_t>?) = TODO()

    actual final var SRV: kotlinx.cinterop.CPointer<platform.darwin.dns_SRV_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_SRV_record_t>?) = TODO()

    actual final var TXT: kotlinx.cinterop.CPointer<platform.darwin.dns_TXT_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_TXT_record_t>?) = TODO()

    actual final var WKS: kotlinx.cinterop.CPointer<platform.darwin.dns_WKS_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_WKS_record_t>?) = TODO()

    actual final var X25: kotlinx.cinterop.CPointer<platform.darwin.dns_X25_record_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_X25_record_t>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class anonymousStruct2 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val ts32: platform.darwin.x86_thread_state32_t /* = platform.posix.__darwin_i386_thread_state */
        get() = TODO()

    final val ts64: platform.darwin.x86_thread_state64_t /* = platform.posix.__darwin_x86_thread_state64 */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class anonymousStruct3 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val fs32: platform.darwin.x86_float_state32_t /* = platform.posix.__darwin_i386_float_state */
        get() = TODO()

    final val fs64: platform.darwin.x86_float_state64_t /* = platform.posix.__darwin_x86_float_state64 */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class anonymousStruct4 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val es32: platform.darwin.x86_exception_state32_t /* = platform.posix.__darwin_i386_exception_state */
        get() = TODO()

    final val es64: platform.darwin.x86_exception_state64_t /* = platform.posix.__darwin_x86_exception_state64 */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class anonymousStruct5 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val ds32: platform.darwin.x86_debug_state32_t /* = platform.posix.__darwin_x86_debug_state32 */
        get() = TODO()

    final val ds64: platform.darwin.x86_debug_state64_t /* = platform.posix.__darwin_x86_debug_state64 */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class anonymousStruct6 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val as32: platform.darwin.x86_avx_state32_t /* = platform.posix.__darwin_i386_avx_state */
        get() = TODO()

    final val as64: platform.darwin.x86_avx_state64_t /* = platform.posix.__darwin_x86_avx_state64 */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class anonymousStruct7 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val as32: platform.darwin.x86_avx512_state32_t /* = platform.posix.__darwin_i386_avx512_state */
        get() = TODO()

    final val as64: platform.darwin.x86_avx512_state64_t /* = platform.posix.__darwin_x86_avx512_state64 */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class anonymousStruct8 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var tqe_next: kotlinx.cinterop.CPointer<platform.darwin._bkt>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin._bkt>?) = TODO()

    final var tqe_prev: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.darwin._bkt> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin._bkt>> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.darwin._bkt> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin._bkt>> */>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class anonymousStruct9 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var tqe_next: kotlinx.cinterop.CPointer<platform.darwin._bkt>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin._bkt>?) = TODO()

    final var tqe_prev: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.darwin._bkt> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin._bkt>> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.darwin._bkt> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin._bkt>> */>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class at_block_buffer_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var blocks: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var rowBytes: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    final var sliceBytes: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class at_size_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var x: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var y: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var z: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class at_texel_region_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val validSize: platform.darwin.at_size_t
        get() = TODO()

    final var rowBytes: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    final var sliceBytes: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    final var texels: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class au_evclass_map public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var ec_class: platform.darwin.au_class_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.au_class_t /* = kotlin.UInt */) = TODO()

    final var ec_number: platform.darwin.au_event_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.au_event_t /* = kotlin.UShort */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class au_expire_after public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var op_type: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    final var age: platform.posix.time_t /* = kotlin.Long */
        get() = TODO()
        set(value: platform.posix.time_t /* = kotlin.Long */) = TODO()

    final var size: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class au_mask public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var am_failure: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var am_success: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class au_qctrl public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var aq_bufsz: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var aq_delay: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var aq_hiwater: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var aq_lowater: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var aq_minfree: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class au_session public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var as_aia_p: kotlinx.cinterop.CPointer<platform.darwin.auditinfo_addr_t /* = platform.darwin.auditinfo_addr */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.auditinfo_addr_t /* = platform.darwin.auditinfo_addr */>?) = TODO()

    actual final val as_mask: platform.darwin.au_mask_t /* = platform.darwin.au_mask */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class au_tid public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var machine: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var port: platform.posix.dev_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.dev_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class au_tid_addr public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val at_addr: kotlinx.cinterop.CArrayPointer<platform.posix.u_int32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var at_port: platform.posix.dev_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.dev_t /* = kotlin.Int */) = TODO()

    final var at_type: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class audit_fstat public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var af_currsz: platform.posix.u_int64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.u_int64_t /* = kotlin.ULong */) = TODO()

    final var af_filesz: platform.posix.u_int64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.u_int64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class audit_stat public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var as_audit: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var as_auditctl: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var as_dropped: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var as_enqueue: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var as_generated: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var as_kernel: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var as_memused: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var as_nonattrib: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var as_numevent: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var as_rblocked: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var as_totalsize: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var as_version: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var as_wblocked: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var as_written: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class audit_token_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val `val`: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.UIntVar /* = kotlinx.cinterop.UIntVarOf<kotlin.UInt> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<kotlin.UInt>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class auditinfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val ai_mask: platform.darwin.au_mask_t /* = platform.darwin.au_mask */
        get() = TODO()

    actual final val ai_termid: platform.darwin.au_tid_t /* = platform.darwin.au_tid */
        get() = TODO()

    final var ai_asid: platform.darwin.au_asid_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.au_asid_t /* = kotlin.Int */) = TODO()

    final var ai_auid: platform.darwin.au_id_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.au_id_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class auditinfo_addr public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val ai_mask: platform.darwin.au_mask_t /* = platform.darwin.au_mask */
        get() = TODO()

    actual final val ai_termid: platform.darwin.au_tid_addr_t /* = platform.darwin.au_tid_addr */
        get() = TODO()

    final var ai_asid: platform.darwin.au_asid_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.au_asid_t /* = kotlin.Int */) = TODO()

    final var ai_auid: platform.darwin.au_id_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.au_id_t /* = kotlin.UInt */) = TODO()

    final var ai_flags: platform.darwin.au_asflgs_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.au_asflgs_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class auditpinfo public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val ap_mask: platform.darwin.au_mask_t /* = platform.darwin.au_mask */
        get() = TODO()

    actual final val ap_termid: platform.darwin.au_tid_t /* = platform.darwin.au_tid */
        get() = TODO()

    final var ap_asid: platform.darwin.au_asid_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.au_asid_t /* = kotlin.Int */) = TODO()

    final var ap_auid: platform.darwin.au_id_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.au_id_t /* = kotlin.UInt */) = TODO()

    final var ap_pid: platform.posix.pid_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.pid_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class auditpinfo_addr public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val ap_mask: platform.darwin.au_mask_t /* = platform.darwin.au_mask */
        get() = TODO()

    actual final val ap_termid: platform.darwin.au_tid_addr_t /* = platform.darwin.au_tid_addr */
        get() = TODO()

    final var ap_asid: platform.darwin.au_asid_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.au_asid_t /* = kotlin.Int */) = TODO()

    final var ap_auid: platform.darwin.au_id_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.au_id_t /* = kotlin.UInt */) = TODO()

    final var ap_flags: platform.darwin.au_asflgs_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.au_asflgs_t /* = kotlin.ULong */) = TODO()

    final var ap_pid: platform.posix.pid_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.pid_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class build_tool_version public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var tool: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var version: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class build_version_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var minos: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var ntools: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var platform: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var sdk: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class bz_stream public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var avail_in: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var avail_out: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var total_in_hi32: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var total_in_lo32: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var total_out_hi32: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var total_out_lo32: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var bzalloc: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlin.Int, kotlin.Int) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlin.Int, kotlin.Int) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>?) = TODO()

    final var bzfree: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>?) = TODO()

    final var next_in: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var next_out: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var opaque: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var state: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class cache_attributes_s public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var key_hash_cb: platform.darwin.cache_key_hash_cb_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.posix.uintptr_t /* = kotlin.ULong */>>? */
        get() = TODO()
        set(value: platform.darwin.cache_key_hash_cb_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.posix.uintptr_t /* = kotlin.ULong */>>? */) = TODO()

    final var key_is_equal_cb: platform.darwin.cache_key_is_equal_cb_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Boolean>>? */
        get() = TODO()
        set(value: platform.darwin.cache_key_is_equal_cb_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Boolean>>? */) = TODO()

    final var key_release_cb: platform.darwin.cache_release_cb_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.darwin.cache_release_cb_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) = TODO()

    final var key_retain_cb: platform.darwin.cache_key_retain_cb_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.darwin.cache_key_retain_cb_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.CPointer<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) = TODO()

    final var user_data: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var value_make_nonpurgeable_cb: platform.darwin.cache_value_make_nonpurgeable_cb_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Boolean>>? */
        get() = TODO()
        set(value: platform.darwin.cache_value_make_nonpurgeable_cb_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Boolean>>? */) = TODO()

    final var value_make_purgeable_cb: platform.darwin.cache_value_make_purgeable_cb_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.darwin.cache_value_make_purgeable_cb_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) = TODO()

    final var value_release_cb: platform.darwin.cache_release_cb_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.darwin.cache_release_cb_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) = TODO()

    final var value_retain_cb: platform.darwin.cache_value_retain_cb_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.darwin.cache_value_retain_cb_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) = TODO()

    final var version: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class compression_stream public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var dst_ptr: kotlinx.cinterop.CPointer<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>?) = TODO()

    final var dst_size: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    final var src_ptr: kotlinx.cinterop.CPointer<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>?) = TODO()

    final var src_size: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    final var state: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class data_in_code_entry public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var kind: platform.posix.uint16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.uint16_t /* = kotlin.UShort */) = TODO()

    final var length: platform.posix.uint16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.uint16_t /* = kotlin.UShort */) = TODO()

    final var offset: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class datum public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var dptr: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var dsize: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_AFSDB_record_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var hostname: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var subtype: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_HINFO_record_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cpu: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var os: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_ISDN_record_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var isdn_address: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var subaddress: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_LOC_record_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var altitude: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var horizontal_precision: platform.posix.uint8_t /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.uint8_t /* = kotlin.UByte */) = TODO()

    final var latitude: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var longitude: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var size: platform.posix.uint8_t /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.uint8_t /* = kotlin.UByte */) = TODO()

    final var version: platform.posix.uint8_t /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.uint8_t /* = kotlin.UByte */) = TODO()

    final var vertical_precision: platform.posix.uint8_t /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.uint8_t /* = kotlin.UByte */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_MINFO_record_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var emailbx: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var rmailbx: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_MX_record_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var name: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var preference: platform.posix.uint16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.uint16_t /* = kotlin.UShort */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_RP_record_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var mailbox: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var txtdname: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_RT_record_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var intermediate: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var preference: platform.posix.uint16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.uint16_t /* = kotlin.UShort */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_SOA_record_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var expire: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var minimum: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var mname: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var refresh: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var retry: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var rname: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var serial: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_SRV_record_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var port: platform.posix.uint16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.uint16_t /* = kotlin.UShort */) = TODO()

    final var priority: platform.posix.uint16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.uint16_t /* = kotlin.UShort */) = TODO()

    final var target: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var weight: platform.posix.uint16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.uint16_t /* = kotlin.UShort */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_TXT_record_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var string_count: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var strings: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_WKS_record_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val addr: platform.posix.in_addr
        get() = TODO()

    final var map: kotlinx.cinterop.CPointer<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>?) = TODO()

    final var maplength: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var protocol: platform.posix.uint8_t /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.uint8_t /* = kotlin.UByte */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_X25_record_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var psdn_address: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_address_record_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val addr: platform.posix.in_addr
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_domain_name_record_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var name: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_header_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var ancount: platform.posix.uint16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.uint16_t /* = kotlin.UShort */) = TODO()

    final var arcount: platform.posix.uint16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.uint16_t /* = kotlin.UShort */) = TODO()

    final var flags: platform.posix.uint16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.uint16_t /* = kotlin.UShort */) = TODO()

    final var nscount: platform.posix.uint16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.uint16_t /* = kotlin.UShort */) = TODO()

    final var qdcount: platform.posix.uint16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.uint16_t /* = kotlin.UShort */) = TODO()

    final var xid: platform.posix.uint16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.uint16_t /* = kotlin.UShort */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_in6_address_record_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val addr: platform.posix.in6_addr
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_question_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var dnsclass: platform.posix.uint16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.uint16_t /* = kotlin.UShort */) = TODO()

    final var dnstype: platform.posix.uint16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.uint16_t /* = kotlin.UShort */) = TODO()

    final var name: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_raw_resource_record_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var data: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var length: platform.posix.uint16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.uint16_t /* = kotlin.UShort */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_reply_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var header: kotlinx.cinterop.CPointer<platform.darwin.dns_header_t>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.dns_header_t>?) = TODO()

    actual final var server: kotlinx.cinterop.CPointer<platform.posix.sockaddr>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.posix.sockaddr>?) = TODO()

    final var additional: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.darwin.dns_resource_record_t> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin.dns_resource_record_t>> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.darwin.dns_resource_record_t> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin.dns_resource_record_t>> */>?) = TODO()

    final var answer: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.darwin.dns_resource_record_t> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin.dns_resource_record_t>> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.darwin.dns_resource_record_t> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin.dns_resource_record_t>> */>?) = TODO()

    final var authority: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.darwin.dns_resource_record_t> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin.dns_resource_record_t>> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.darwin.dns_resource_record_t> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin.dns_resource_record_t>> */>?) = TODO()

    final var question: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.darwin.dns_question_t> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin.dns_question_t>> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<platform.darwin.dns_question_t> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin.dns_question_t>> */>?) = TODO()

    final var status: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dns_resource_record_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val data: platform.darwin.anonymousStruct1
        get() = TODO()

    final var dnsclass: platform.posix.uint16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.uint16_t /* = kotlin.UShort */) = TODO()

    final var dnstype: platform.posix.uint16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.uint16_t /* = kotlin.UShort */) = TODO()

    final var name: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var ttl: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dwarf_eh_bases public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var dbase: platform.posix.uintptr_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uintptr_t /* = kotlin.ULong */) = TODO()

    final var func: platform.posix.uintptr_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uintptr_t /* = kotlin.ULong */) = TODO()

    final var tbase: platform.posix.uintptr_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uintptr_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dyld_info_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var bind_off: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var bind_size: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var export_off: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var export_size: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var lazy_bind_off: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var lazy_bind_size: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var rebase_off: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var rebase_size: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var weak_bind_off: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var weak_bind_size: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dyld_kernel_image_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val fsid: platform.darwin.fsid_t /* = platform.darwin.fsid */
        get() = TODO()

    actual final val fsobjid: platform.darwin.fsobj_id_t /* = platform.darwin.fsobj_id */
        get() = TODO()

    final var load_addr: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final val uuid: platform.posix.uuid_t /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dyld_kernel_process_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val cache_image_info: platform.darwin.dyld_kernel_image_info
        get() = TODO()

    final var dyldState: platform.posix.uint8_t /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.uint8_t /* = kotlin.UByte */) = TODO()

    final var imageCount: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var initialImageCount: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var no_cache: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var private_cache: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var timestamp: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dylib public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val name: platform.darwin.lc_str
        get() = TODO()

    final var compatibility_version: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var current_version: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var timestamp: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dylib_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val dylib: platform.darwin.dylib
        get() = TODO()

    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dylib_module public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var iextdefsym: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var iextrel: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var iinit_iterm: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var ilocalsym: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var irefsym: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var module_name: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nextdefsym: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nextrel: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var ninit_nterm: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nlocalsym: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nrefsym: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var objc_module_info_addr: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var objc_module_info_size: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dylib_module_64 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var iextdefsym: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var iextrel: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var iinit_iterm: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var ilocalsym: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var irefsym: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var module_name: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nextdefsym: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nextrel: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var ninit_nterm: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nlocalsym: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nrefsym: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var objc_module_info_addr: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var objc_module_info_size: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dylib_reference public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var flags: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var isym: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dylib_table_of_contents public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var module_index: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var symbol_index: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dylinker_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val name: platform.darwin.lc_str
        get() = TODO()

    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class dysymtab_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var extrefsymoff: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var extreloff: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var iextdefsym: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var ilocalsym: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var indirectsymoff: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var iundefsym: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var locreloff: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var modtaboff: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nextdefsym: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nextrefsyms: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nextrel: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nindirectsyms: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nlocalsym: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nlocrel: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nmodtab: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var ntoc: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nundefsym: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var tocoff: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class encryption_info_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cryptid: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cryptoff: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cryptsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class encryption_info_command_64 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cryptid: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cryptoff: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cryptsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var pad: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class entry_point_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var entryoff: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var stacksize: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class fsid public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val `val`: kotlinx.cinterop.CArrayPointer<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class fsobj_id public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var fid_generation: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var fid_objno: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class fstab public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var fs_freq: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var fs_passno: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    final var fs_file: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var fs_mntops: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var fs_spec: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var fs_type: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var fs_vfstype: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class fvmfile_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val name: platform.darwin.lc_str
        get() = TODO()

    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var header_addr: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class fvmlib public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val name: platform.darwin.lc_str
        get() = TODO()

    final var header_addr: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var minor_version: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class fvmlib_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val fvmlib: platform.darwin.fvmlib
        get() = TODO()

    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class glob_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var gl_flags: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var gl_matchc: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    final var gl_closedir: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>?) = TODO()

    final var gl_errblk: ((kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlin.Int) -> kotlin.Int)?
        get() = TODO()
        set(value: ((kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlin.Int) -> kotlin.Int)?) = TODO()

    final var gl_errfunc: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlin.Int) -> kotlin.Int>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlin.Int) -> kotlin.Int>>?) = TODO()

    final var gl_lstat: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<platform.posix.stat>?) -> kotlin.Int>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<platform.posix.stat>?) -> kotlin.Int>>?) = TODO()

    final var gl_offs: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    final var gl_opendir: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>?) = TODO()

    final var gl_pathc: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    final var gl_pathv: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?) = TODO()

    final var gl_readdir: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlinx.cinterop.CPointer<platform.posix.dirent>?>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlinx.cinterop.CPointer<platform.posix.dirent>?>>?) = TODO()

    final var gl_stat: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<platform.posix.stat>?) -> kotlin.Int>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<platform.posix.stat>?) -> kotlin.Int>>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class gpu_energy_data public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var task_gpu_stat_reserved0: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var task_gpu_stat_reserved1: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var task_gpu_stat_reserved2: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var task_gpu_utilisation: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class host_basic_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var avail_cpus: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var cpu_subtype: platform.darwin.cpu_subtype_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.cpu_subtype_t /* = kotlin.Int */) = TODO()

    final var cpu_threadtype: platform.darwin.cpu_threadtype_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.cpu_threadtype_t /* = kotlin.Int */) = TODO()

    final var cpu_type: platform.darwin.cpu_type_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.cpu_type_t /* = kotlin.Int */) = TODO()

    final var logical_cpu: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var logical_cpu_max: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var max_cpus: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var max_mem: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var memory_size: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var physical_cpu: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var physical_cpu_max: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class host_can_has_debugger_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var can_has_debugger: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class host_cpu_load_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val cpu_ticks: kotlinx.cinterop.CArrayPointer<platform.darwin.natural_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class host_load_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val avenrun: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final val mach_factor: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class host_preferred_user_arch public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cpu_subtype: platform.darwin.cpu_subtype_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.cpu_subtype_t /* = kotlin.Int */) = TODO()

    final var cpu_type: platform.darwin.cpu_type_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.cpu_type_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class host_priority_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var depress_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var idle_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var kernel_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var maximum_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var minimum_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var server_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var system_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var user_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class host_sched_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var min_quantum: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var min_timeout: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class ident_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class ifaddrs public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var ifa_addr: kotlinx.cinterop.CPointer<platform.posix.sockaddr>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.posix.sockaddr>?) = TODO()

    actual final var ifa_dstaddr: kotlinx.cinterop.CPointer<platform.posix.sockaddr>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.posix.sockaddr>?) = TODO()

    actual final var ifa_flags: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var ifa_netmask: kotlinx.cinterop.CPointer<platform.posix.sockaddr>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.posix.sockaddr>?) = TODO()

    actual final var ifa_next: kotlinx.cinterop.CPointer<platform.darwin.ifaddrs>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.ifaddrs>?) = TODO()

    final var ifa_data: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var ifa_name: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class ifmaddrs public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var ifma_addr: kotlinx.cinterop.CPointer<platform.posix.sockaddr>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.posix.sockaddr>?) = TODO()

    actual final var ifma_lladdr: kotlinx.cinterop.CPointer<platform.posix.sockaddr>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.posix.sockaddr>?) = TODO()

    actual final var ifma_name: kotlinx.cinterop.CPointer<platform.posix.sockaddr>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.posix.sockaddr>?) = TODO()

    actual final var ifma_next: kotlinx.cinterop.CPointer<platform.darwin.ifmaddrs>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.ifmaddrs>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class image_offset public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var offset: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final val uuid: platform.posix.uuid_t /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class io_stat_entry public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var count: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var size: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class io_stat_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val disk_reads: platform.darwin.io_stat_entry
        get() = TODO()

    actual final val metadata: platform.darwin.io_stat_entry
        get() = TODO()

    actual final val paging: platform.darwin.io_stat_entry
        get() = TODO()

    actual final val total_io: platform.darwin.io_stat_entry
        get() = TODO()

    final val io_priority: kotlinx.cinterop.CArrayPointer<platform.darwin.io_stat_entry> /* = kotlinx.cinterop.CPointer<platform.darwin.io_stat_entry> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class iovec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var iov_base: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var iov_len: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class kernel_resource_sizes public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var memory_object: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var memory_region: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var port: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var task: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var thread: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class kmod_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var next: kotlinx.cinterop.CPointer<platform.darwin.kmod_info>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.kmod_info>?) = TODO()

    actual final var reference_list: kotlinx.cinterop.CPointer<platform.darwin.kmod_reference_t /* = platform.darwin.kmod_reference */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.kmod_reference_t /* = platform.darwin.kmod_reference */>?) = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var hdr_size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    final var id: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var info_version: platform.posix.int32_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.int32_t /* = kotlin.Int */) = TODO()

    final val name: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var reference_count: platform.posix.int32_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.int32_t /* = kotlin.Int */) = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    final var start: kotlinx.cinterop.CPointer<platform.darwin.kmod_start_func_t /* = kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.kmod_info>?, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.kern_return_t /* = kotlin.Int */> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.kmod_start_func_t /* = kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.kmod_info>?, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.kern_return_t /* = kotlin.Int */> */>?) = TODO()

    final var stop: kotlinx.cinterop.CPointer<platform.darwin.kmod_stop_func_t /* = kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.kmod_info>?, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.kern_return_t /* = kotlin.Int */> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.kmod_stop_func_t /* = kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.kmod_info>?, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin.kern_return_t /* = kotlin.Int */> */>?) = TODO()

    final val version: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class kmod_info_32_v1 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var address: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var hdr_size: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var id: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var info_version: platform.posix.int32_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.int32_t /* = kotlin.Int */) = TODO()

    final val name: kotlinx.cinterop.CArrayPointer<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */>> */
        get() = TODO()

    final var next_addr: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var reference_count: platform.posix.int32_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.int32_t /* = kotlin.Int */) = TODO()

    final var reference_list_addr: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var size: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var start_addr: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var stop_addr: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final val version: kotlinx.cinterop.CArrayPointer<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class kmod_info_64_v1 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var address: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var hdr_size: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var id: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var info_version: platform.posix.int32_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.int32_t /* = kotlin.Int */) = TODO()

    final val name: kotlinx.cinterop.CArrayPointer<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */>> */
        get() = TODO()

    final var next_addr: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var reference_count: platform.posix.int32_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.int32_t /* = kotlin.Int */) = TODO()

    final var reference_list_addr: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var size: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var start_addr: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var stop_addr: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final val version: kotlinx.cinterop.CArrayPointer<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class kmod_reference public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var info: kotlinx.cinterop.CPointer<platform.darwin.kmod_info>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.kmod_info>?) = TODO()

    actual final var next: kotlinx.cinterop.CPointer<platform.darwin.kmod_reference>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.darwin.kmod_reference>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class lastlogx public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val ll_tv: platform.posix.timeval
        get() = TODO()

    final val ll_host: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final val ll_line: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class lc_str public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var offset: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class linkedit_data_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var dataoff: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var datasize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class linker_option_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var count: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class load_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_header public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cpusubtype: platform.darwin.cpu_subtype_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.cpu_subtype_t /* = kotlin.Int */) = TODO()

    final var cputype: platform.darwin.cpu_type_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.cpu_type_t /* = kotlin.Int */) = TODO()

    final var filetype: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var flags: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var magic: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var ncmds: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var sizeofcmds: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_header_64 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cpusubtype: platform.darwin.cpu_subtype_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.cpu_subtype_t /* = kotlin.Int */) = TODO()

    final var cputype: platform.darwin.cpu_type_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.cpu_type_t /* = kotlin.Int */) = TODO()

    final var filetype: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var flags: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var magic: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var ncmds: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var reserved: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var sizeofcmds: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_audit_trailer_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val msgh_audit: platform.darwin.audit_token_t
        get() = TODO()

    actual final val msgh_sender: platform.darwin.security_token_t
        get() = TODO()

    final var msgh_seqno: platform.darwin.mach_port_seqno_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_seqno_t /* = kotlin.UInt */) = TODO()

    final var msgh_trailer_size: platform.darwin.mach_msg_trailer_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_trailer_size_t /* = kotlin.UInt */) = TODO()

    final var msgh_trailer_type: platform.darwin.mach_msg_trailer_type_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_trailer_type_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_base_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val body: platform.darwin.mach_msg_body_t
        get() = TODO()

    actual final val header: platform.darwin.mach_msg_header_t
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_body_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var msgh_descriptor_count: platform.darwin.mach_msg_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_size_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_context_trailer_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val msgh_audit: platform.darwin.audit_token_t
        get() = TODO()

    actual final val msgh_sender: platform.darwin.security_token_t
        get() = TODO()

    final var msgh_context: platform.darwin.mach_port_context_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_port_context_t /* = kotlin.ULong */) = TODO()

    final var msgh_seqno: platform.darwin.mach_port_seqno_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_seqno_t /* = kotlin.UInt */) = TODO()

    final var msgh_trailer_size: platform.darwin.mach_msg_trailer_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_trailer_size_t /* = kotlin.UInt */) = TODO()

    final var msgh_trailer_type: platform.darwin.mach_msg_trailer_type_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_trailer_type_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_descriptor_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val ool_ports: platform.darwin.mach_msg_ool_ports_descriptor_t
        get() = TODO()

    actual final val out_of_line: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    actual final val port: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    actual final val type: platform.darwin.mach_msg_type_descriptor_t
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_empty_rcv_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val header: platform.darwin.mach_msg_header_t
        get() = TODO()

    actual final val trailer: platform.darwin.mach_msg_trailer_t
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_empty_send_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val header: platform.darwin.mach_msg_header_t
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_empty_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val rcv: platform.darwin.mach_msg_empty_rcv_t
        get() = TODO()

    actual final val send: platform.darwin.mach_msg_empty_send_t
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_header_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var msgh_bits: platform.darwin.mach_msg_bits_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_bits_t /* = kotlin.UInt */) = TODO()

    final var msgh_id: platform.darwin.mach_msg_id_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.mach_msg_id_t /* = kotlin.Int */) = TODO()

    final var msgh_local_port: platform.darwin.mach_port_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_t /* = kotlin.UInt */) = TODO()

    final var msgh_remote_port: platform.darwin.mach_port_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_t /* = kotlin.UInt */) = TODO()

    final var msgh_size: platform.darwin.mach_msg_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_size_t /* = kotlin.UInt */) = TODO()

    final var msgh_voucher_port: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_mac_trailer_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var msgh_ad: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final val msgh_audit: platform.darwin.audit_token_t
        get() = TODO()

    actual final val msgh_labels: platform.darwin.msg_labels_t
        get() = TODO()

    actual final val msgh_sender: platform.darwin.security_token_t
        get() = TODO()

    final var msgh_context: platform.darwin.mach_port_context_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_port_context_t /* = kotlin.ULong */) = TODO()

    final var msgh_seqno: platform.darwin.mach_port_seqno_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_seqno_t /* = kotlin.UInt */) = TODO()

    final var msgh_trailer_size: platform.darwin.mach_msg_trailer_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_trailer_size_t /* = kotlin.UInt */) = TODO()

    final var msgh_trailer_type: platform.darwin.mach_msg_trailer_type_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_trailer_type_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_ool_descriptor32_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var pad1: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var address: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var copy: platform.darwin.mach_msg_copy_options_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_copy_options_t /* = kotlin.UInt */) = TODO()

    final var deallocate: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var size: platform.darwin.mach_msg_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_size_t /* = kotlin.UInt */) = TODO()

    final var type: platform.darwin.mach_msg_descriptor_type_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_descriptor_type_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_ool_descriptor64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var pad1: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var address: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var copy: platform.darwin.mach_msg_copy_options_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_copy_options_t /* = kotlin.UInt */) = TODO()

    final var deallocate: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var size: platform.darwin.mach_msg_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_size_t /* = kotlin.UInt */) = TODO()

    final var type: platform.darwin.mach_msg_descriptor_type_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_descriptor_type_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_ool_descriptor_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var pad1: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var address: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var copy: platform.darwin.mach_msg_copy_options_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_copy_options_t /* = kotlin.UInt */) = TODO()

    final var deallocate: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var size: platform.darwin.mach_msg_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_size_t /* = kotlin.UInt */) = TODO()

    final var type: platform.darwin.mach_msg_descriptor_type_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_descriptor_type_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_ool_ports_descriptor32_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var address: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var copy: platform.darwin.mach_msg_copy_options_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_copy_options_t /* = kotlin.UInt */) = TODO()

    final var count: platform.darwin.mach_msg_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_size_t /* = kotlin.UInt */) = TODO()

    final var deallocate: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var disposition: platform.darwin.mach_msg_type_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_name_t /* = kotlin.UInt */) = TODO()

    final var type: platform.darwin.mach_msg_descriptor_type_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_descriptor_type_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_ool_ports_descriptor64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var address: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var copy: platform.darwin.mach_msg_copy_options_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_copy_options_t /* = kotlin.UInt */) = TODO()

    final var count: platform.darwin.mach_msg_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_size_t /* = kotlin.UInt */) = TODO()

    final var deallocate: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var disposition: platform.darwin.mach_msg_type_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_name_t /* = kotlin.UInt */) = TODO()

    final var type: platform.darwin.mach_msg_descriptor_type_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_descriptor_type_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_ool_ports_descriptor_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var address: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var copy: platform.darwin.mach_msg_copy_options_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_copy_options_t /* = kotlin.UInt */) = TODO()

    final var count: platform.darwin.mach_msg_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_size_t /* = kotlin.UInt */) = TODO()

    final var deallocate: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var disposition: platform.darwin.mach_msg_type_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_name_t /* = kotlin.UInt */) = TODO()

    final var type: platform.darwin.mach_msg_descriptor_type_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_descriptor_type_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_port_descriptor_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var pad2: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var disposition: platform.darwin.mach_msg_type_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_name_t /* = kotlin.UInt */) = TODO()

    final var name: platform.darwin.mach_port_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_t /* = kotlin.UInt */) = TODO()

    final var pad1: platform.darwin.mach_msg_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_size_t /* = kotlin.UInt */) = TODO()

    final var type: platform.darwin.mach_msg_descriptor_type_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_descriptor_type_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_security_trailer_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val msgh_sender: platform.darwin.security_token_t
        get() = TODO()

    final var msgh_seqno: platform.darwin.mach_port_seqno_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_seqno_t /* = kotlin.UInt */) = TODO()

    final var msgh_trailer_size: platform.darwin.mach_msg_trailer_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_trailer_size_t /* = kotlin.UInt */) = TODO()

    final var msgh_trailer_type: platform.darwin.mach_msg_trailer_type_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_trailer_type_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_seqno_trailer_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var msgh_seqno: platform.darwin.mach_port_seqno_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_seqno_t /* = kotlin.UInt */) = TODO()

    final var msgh_trailer_size: platform.darwin.mach_msg_trailer_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_trailer_size_t /* = kotlin.UInt */) = TODO()

    final var msgh_trailer_type: platform.darwin.mach_msg_trailer_type_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_trailer_type_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_trailer_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var msgh_trailer_size: platform.darwin.mach_msg_trailer_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_trailer_size_t /* = kotlin.UInt */) = TODO()

    final var msgh_trailer_type: platform.darwin.mach_msg_trailer_type_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_trailer_type_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_msg_type_descriptor_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var pad3: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var pad1: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var pad2: platform.darwin.mach_msg_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_size_t /* = kotlin.UInt */) = TODO()

    final var type: platform.darwin.mach_msg_descriptor_type_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_descriptor_type_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_port_info_ext public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val mpie_status: platform.darwin.mach_port_status_t /* = platform.darwin.mach_port_status */
        get() = TODO()

    final var mpie_boost_cnt: platform.darwin.mach_port_msgcount_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_msgcount_t /* = kotlin.UInt */) = TODO()

    final val reserved: kotlinx.cinterop.CArrayPointer<platform.posix.uint32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.uint32_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.posix.uint32_t /* = kotlin.UInt */>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_port_limits public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var mpl_qlimit: platform.darwin.mach_port_msgcount_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_msgcount_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_port_options public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val mpl: platform.darwin.mach_port_limits_t /* = platform.darwin.mach_port_limits */
        get() = TODO()

    final var flags: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final val reserved: kotlinx.cinterop.CArrayPointer<platform.posix.uint64_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.uint64_t /* = kotlin.ULong */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ULongVarOf<platform.posix.uint64_t /* = kotlin.ULong */>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_port_qos public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var name: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var prealloc: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var len: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var pad1: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_port_status public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var mps_flags: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var mps_mscount: platform.darwin.mach_port_mscount_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_mscount_t /* = kotlin.UInt */) = TODO()

    final var mps_msgcount: platform.darwin.mach_port_msgcount_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_msgcount_t /* = kotlin.UInt */) = TODO()

    final var mps_nsrequest: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var mps_pdrequest: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var mps_pset: platform.darwin.mach_port_rights_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_rights_t /* = kotlin.UInt */) = TODO()

    final var mps_qlimit: platform.darwin.mach_port_msgcount_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_msgcount_t /* = kotlin.UInt */) = TODO()

    final var mps_seqno: platform.darwin.mach_port_seqno_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_seqno_t /* = kotlin.UInt */) = TODO()

    final var mps_sorights: platform.darwin.mach_port_rights_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_rights_t /* = kotlin.UInt */) = TODO()

    final var mps_srights: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_task_basic_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val system_time: platform.darwin.time_value_t /* = platform.darwin.time_value */
        get() = TODO()

    actual final val user_time: platform.darwin.time_value_t /* = platform.darwin.time_value */
        get() = TODO()

    final var policy: platform.darwin.policy_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.policy_t /* = kotlin.Int */) = TODO()

    final var resident_size: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final var resident_size_max: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final var suspend_count: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var virtual_size: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_timespec public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var tv_sec: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var tv_nsec: platform.darwin.clock_res_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.clock_res_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_vm_read_entry public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var address: platform.darwin.mach_vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_address_t /* = kotlin.ULong */) = TODO()

    final var size: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class mach_voucher_attr_recipe_data public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class memory_object_attr_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cluster_size: platform.darwin.memory_object_cluster_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.memory_object_cluster_size_t /* = kotlin.UInt */) = TODO()

    final var copy_strategy: platform.darwin.memory_object_copy_strategy_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.memory_object_copy_strategy_t /* = kotlin.Int */) = TODO()

    final var may_cache_object: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var temporary: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class memory_object_behave_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var advisory_pageout: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var copy_strategy: platform.darwin.memory_object_copy_strategy_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.memory_object_copy_strategy_t /* = kotlin.Int */) = TODO()

    final var invalidate: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var silent_overwrite: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var temporary: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class memory_object_perf_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cluster_size: platform.darwin.memory_object_cluster_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.memory_object_cluster_size_t /* = kotlin.UInt */) = TODO()

    final var may_cache: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class msg_labels_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var sender: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class note_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final val data_owner: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var offset: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var size: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class nt_sid_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var sid_authcount: platform.posix.u_int8_t /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_int8_t /* = kotlin.UByte */) = TODO()

    final val sid_authorities: kotlinx.cinterop.CArrayPointer<platform.posix.u_int32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */>> */
        get() = TODO()

    final val sid_authority: kotlinx.cinterop.CArrayPointer<platform.posix.u_int8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.u_int8_t /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.posix.u_int8_t /* = kotlin.UByte */>> */
        get() = TODO()

    final var sid_kind: platform.posix.u_int8_t /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_int8_t /* = kotlin.UByte */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class objc_object public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var isa: kotlinx.cinterop.ObjCClass
        get() = TODO()
        set(value: kotlinx.cinterop.ObjCClass) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class os_activity_scope_state_s public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val opaque: kotlinx.cinterop.CArrayPointer<platform.posix.uint64_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.uint64_t /* = kotlin.ULong */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ULongVarOf<platform.posix.uint64_t /* = kotlin.ULong */>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class os_unfair_lock_s public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var _os_unfair_lock_opaque: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class persona_token public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val originator: platform.darwin.proc_persona_info
        get() = TODO()

    actual final val proximate: platform.darwin.proc_persona_info
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class policy_bases public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val fifo: platform.darwin.policy_fifo_base_data_t /* = platform.darwin.policy_fifo_base */
        get() = TODO()

    actual final val rr: platform.darwin.policy_rr_base_data_t /* = platform.darwin.policy_rr_base */
        get() = TODO()

    actual final val ts: platform.darwin.policy_timeshare_base_data_t /* = platform.darwin.policy_timeshare_base */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class policy_fifo_base public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var base_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class policy_fifo_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var base_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var depress_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var depressed: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var max_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class policy_fifo_limit public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var max_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class policy_infos public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val fifo: platform.darwin.policy_fifo_info_data_t /* = platform.darwin.policy_fifo_info */
        get() = TODO()

    actual final val rr: platform.darwin.policy_rr_info_data_t /* = platform.darwin.policy_rr_info */
        get() = TODO()

    actual final val ts: platform.darwin.policy_timeshare_info_data_t /* = platform.darwin.policy_timeshare_info */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class policy_limits public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val fifo: platform.darwin.policy_fifo_limit_data_t /* = platform.darwin.policy_fifo_limit */
        get() = TODO()

    actual final val rr: platform.darwin.policy_rr_limit_data_t /* = platform.darwin.policy_rr_limit */
        get() = TODO()

    actual final val ts: platform.darwin.policy_timeshare_limit_data_t /* = platform.darwin.policy_timeshare_limit */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class policy_rr_base public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var base_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var quantum: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class policy_rr_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var base_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var depress_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var depressed: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var max_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var quantum: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class policy_rr_limit public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var max_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class policy_timeshare_base public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var base_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class policy_timeshare_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var base_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var cur_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var depress_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var depressed: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var max_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class policy_timeshare_limit public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var max_priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class prebind_cksum_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cksum: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class prebound_dylib_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val linked_modules: platform.darwin.lc_str
        get() = TODO()

    actual final val name: platform.darwin.lc_str
        get() = TODO()

    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nmodules: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class printf_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var alt: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var extra: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var get_prec: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var get_width: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var group: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var is_char: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var is_intmax: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var is_long: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var is_long_double: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var is_ptrdiff: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var is_quad: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var is_short: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var is_size: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var is_vec: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var left: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var prec: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var showsign: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var sofar: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var space: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var wide: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var width: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    final val arg: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */>> */
        get() = TODO()

    final var begin: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var context: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final var end: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var loc: platform.posix.locale_t? /* = kotlinx.cinterop.CPointer<cnames.structs._xlocale>? */
        get() = TODO()
        set(value: platform.posix.locale_t? /* = kotlinx.cinterop.CPointer<cnames.structs._xlocale>? */) = TODO()

    final var pad: platform.posix.wchar_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.wchar_t /* = kotlin.Int */) = TODO()

    final var signchar: platform.posix.wchar_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.wchar_t /* = kotlin.Int */) = TODO()

    final var spec: platform.posix.wchar_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.wchar_t /* = kotlin.Int */) = TODO()

    final var vsep: platform.posix.wchar_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.wchar_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class proc_persona_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var flags: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var gid: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final val macho_uuid: kotlinx.cinterop.CArrayPointer<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */>> */
        get() = TODO()

    final var persona_id: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var pid: platform.posix.int32_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.int32_t /* = kotlin.Int */) = TODO()

    final var pidversion: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var uid: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var unique_pid: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class processor_basic_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var slot_num: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    final var cpu_subtype: platform.darwin.cpu_subtype_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.cpu_subtype_t /* = kotlin.Int */) = TODO()

    final var cpu_type: platform.darwin.cpu_type_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.cpu_type_t /* = kotlin.Int */) = TODO()

    final var is_master: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var running: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class processor_cpu_load_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val cpu_ticks: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.UIntVar /* = kotlinx.cinterop.UIntVarOf<kotlin.UInt> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<kotlin.UInt>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class processor_set_basic_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var default_policy: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var processor_count: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class processor_set_load_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var task_count: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var thread_count: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    final var load_average: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var mach_factor: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class routines_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var init_address: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var init_module: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var reserved1: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var reserved2: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var reserved3: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var reserved4: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var reserved5: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var reserved6: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class routines_command_64 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var init_address: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var init_module: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var reserved1: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var reserved2: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var reserved3: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var reserved4: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var reserved5: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var reserved6: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class rpath_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val path: platform.darwin.lc_str
        get() = TODO()

    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class section public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var addr: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var align: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var flags: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nreloc: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var offset: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var reloff: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var reserved1: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var reserved2: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final val sectname: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final val segname: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var size: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class section_64 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var addr: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var align: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var flags: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nreloc: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var offset: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var reloff: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var reserved1: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var reserved2: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var reserved3: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final val sectname: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final val segname: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var size: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class security_token_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val `val`: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.UIntVar /* = kotlinx.cinterop.UIntVarOf<kotlin.UInt> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<kotlin.UInt>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class segment_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var fileoff: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var filesize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var flags: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var initprot: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var maxprot: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var nsects: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final val segname: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var vmaddr: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var vmsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class segment_command_64 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var fileoff: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var filesize: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var flags: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var initprot: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var maxprot: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var nsects: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final val segname: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var vmaddr: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var vmsize: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class simd_double2x2 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class simd_double2x3 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class simd_double2x4 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class simd_double3x2 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class simd_double3x3 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class simd_double3x4 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class simd_double4x2 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class simd_double4x3 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class simd_double4x4 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class simd_float2x2 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class simd_float2x3 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class simd_float2x4 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class simd_float3x2 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class simd_float3x3 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class simd_float3x4 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class simd_float4x2 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class simd_float4x3 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class simd_float4x4 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class simd_quatd public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class simd_quatf public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class source_version_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var version: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class sub_client_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val client: platform.darwin.lc_str
        get() = TODO()

    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class sub_framework_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val umbrella: platform.darwin.lc_str
        get() = TODO()

    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class sub_library_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val sub_library: platform.darwin.lc_str
        get() = TODO()

    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class sub_umbrella_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val sub_umbrella: platform.darwin.lc_str
        get() = TODO()

    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class symseg_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var offset: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var size: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class symtab_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nsyms: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var stroff: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var strsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var symoff: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class task_absolutetime_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var threads_system: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var threads_user: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var total_system: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var total_user: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class task_affinity_tag_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var max: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var min: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var set_count: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var task_count: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class task_basic_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val system_time: platform.darwin.time_value_t /* = platform.darwin.time_value */
        get() = TODO()

    actual final val user_time: platform.darwin.time_value_t /* = platform.darwin.time_value */
        get() = TODO()

    final var policy: platform.darwin.policy_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.policy_t /* = kotlin.Int */) = TODO()

    final var resident_size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    final var suspend_count: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var virtual_size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class task_basic_info_32 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val system_time: platform.darwin.time_value_t /* = platform.darwin.time_value */
        get() = TODO()

    actual final val user_time: platform.darwin.time_value_t /* = platform.darwin.time_value */
        get() = TODO()

    final var policy: platform.darwin.policy_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.policy_t /* = kotlin.Int */) = TODO()

    final var resident_size: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var suspend_count: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var virtual_size: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class task_basic_info_64 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val system_time: platform.darwin.time_value_t /* = platform.darwin.time_value */
        get() = TODO()

    actual final val user_time: platform.darwin.time_value_t /* = platform.darwin.time_value */
        get() = TODO()

    final var policy: platform.darwin.policy_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.policy_t /* = kotlin.Int */) = TODO()

    final var resident_size: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final var suspend_count: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var virtual_size: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class task_category_policy public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var role: platform.darwin.task_role_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.task_role_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class task_dyld_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var all_image_info_addr: platform.darwin.mach_vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_address_t /* = kotlin.ULong */) = TODO()

    final var all_image_info_format: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var all_image_info_size: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class task_events_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cow_faults: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var csw: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var faults: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var messages_received: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var messages_sent: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var pageins: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var syscalls_mach: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var syscalls_unix: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class task_extmod_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val extmod_statistics: platform.darwin.vm_extmod_statistics_data_t /* = platform.darwin.vm_extmod_statistics */
        get() = TODO()

    final val task_uuid: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class task_flags_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var flags: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class task_inspect_basic_counts public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cycles: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var instructions: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class task_kernelmemory_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var total_palloc: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var total_pfree: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var total_salloc: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var total_sfree: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class task_power_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var task_interrupt_wakeups: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var task_platform_idle_wakeups: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var task_timer_wakeups_bin_1: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var task_timer_wakeups_bin_2: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var total_system: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var total_user: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class task_power_info_v2 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val cpu_energy: platform.darwin.task_power_info_data_t /* = platform.darwin.task_power_info */
        get() = TODO()

    actual final val gpu_energy: platform.darwin.gpu_energy_data
        get() = TODO()

    final var task_pset_switches: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var task_ptime: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class task_qos_policy public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var task_latency_qos_tier: platform.darwin.task_latency_qos_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.task_latency_qos_t /* = kotlin.Int */) = TODO()

    final var task_throughput_qos_tier: platform.darwin.task_throughput_qos_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.task_throughput_qos_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class task_thread_times_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val system_time: platform.darwin.time_value_t /* = platform.darwin.time_value */
        get() = TODO()

    actual final val user_time: platform.darwin.time_value_t /* = platform.darwin.time_value */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class task_trace_memory_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var buffer_size: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var mailbox_array_size: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var user_memory_address: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class task_vm_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var compressed: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final var compressed_lifetime: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final var compressed_peak: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final var device: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final var device_peak: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final var external: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final var external_peak: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final var internal: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final var internal_peak: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final var max_address: platform.darwin.mach_vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_address_t /* = kotlin.ULong */) = TODO()

    final var min_address: platform.darwin.mach_vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_address_t /* = kotlin.ULong */) = TODO()

    final var page_size: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var phys_footprint: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final var purgeable_volatile_pmap: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final var purgeable_volatile_resident: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final var purgeable_volatile_virtual: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final var region_count: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var resident_size: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final var resident_size_peak: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final var reusable: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final var reusable_peak: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final var virtual_size: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class task_wait_state_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val _reserved: kotlinx.cinterop.CArrayPointer<platform.posix.uint32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.uint32_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.posix.uint32_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var total_wait_sfi_state_time: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var total_wait_state_time: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class thread_affinity_policy public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var affinity_tag: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class thread_background_policy public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var priority: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class thread_basic_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val system_time: platform.darwin.time_value_t /* = platform.darwin.time_value */
        get() = TODO()

    actual final val user_time: platform.darwin.time_value_t /* = platform.darwin.time_value */
        get() = TODO()

    final var cpu_usage: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var flags: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var policy: platform.darwin.policy_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.policy_t /* = kotlin.Int */) = TODO()

    final var run_state: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var sleep_time: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var suspend_count: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class thread_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class thread_extended_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var pth_cpu_usage: platform.posix.int32_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.int32_t /* = kotlin.Int */) = TODO()

    final var pth_curpri: platform.posix.int32_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.int32_t /* = kotlin.Int */) = TODO()

    final var pth_flags: platform.posix.int32_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.int32_t /* = kotlin.Int */) = TODO()

    final var pth_maxpriority: platform.posix.int32_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.int32_t /* = kotlin.Int */) = TODO()

    final val pth_name: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var pth_policy: platform.posix.int32_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.int32_t /* = kotlin.Int */) = TODO()

    final var pth_priority: platform.posix.int32_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.int32_t /* = kotlin.Int */) = TODO()

    final var pth_run_state: platform.posix.int32_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.int32_t /* = kotlin.Int */) = TODO()

    final var pth_sleep_time: platform.posix.int32_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.int32_t /* = kotlin.Int */) = TODO()

    final var pth_system_time: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var pth_user_time: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class thread_extended_policy public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var timeshare: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class thread_identifier_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var dispatch_qaddr: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var thread_handle: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var thread_id: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class thread_latency_qos_policy public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var thread_latency_qos_tier: platform.darwin.thread_latency_qos_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.thread_latency_qos_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class thread_precedence_policy public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var importance: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class thread_standard_policy public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var no_data: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class thread_throughput_qos_policy public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var thread_throughput_qos_tier: platform.darwin.thread_throughput_qos_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.thread_throughput_qos_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class thread_time_constraint_policy public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var computation: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var constraint: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var period: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var preemptible: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class time_value public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var microseconds: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var seconds: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class tlv_descriptor public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var key: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    actual final var offset: kotlin.ULong
        get() = TODO()
        set(value: kotlin.ULong) = TODO()

    final var thunk: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.tlv_descriptor>?) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.tlv_descriptor>?) -> kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */>>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class ttyent public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var ty_status: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    final var ty_comment: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var ty_getty: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var ty_name: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var ty_onerror: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var ty_onoption: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var ty_type: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var ty_window: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class twolevel_hint public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var isub_image: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var itoc: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class twolevel_hints_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var nhints: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var offset: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class unw_context_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val data: kotlinx.cinterop.CArrayPointer<platform.posix.uint64_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.uint64_t /* = kotlin.ULong */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ULongVarOf<platform.posix.uint64_t /* = kotlin.ULong */>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class unw_cursor_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val data: kotlinx.cinterop.CArrayPointer<platform.posix.uint64_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.uint64_t /* = kotlin.ULong */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ULongVarOf<platform.posix.uint64_t /* = kotlin.ULong */>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class unw_proc_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var end_ip: platform.darwin.unw_word_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.unw_word_t /* = kotlin.ULong */) = TODO()

    final var extra: platform.darwin.unw_word_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.unw_word_t /* = kotlin.ULong */) = TODO()

    final var flags: platform.darwin.unw_word_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.unw_word_t /* = kotlin.ULong */) = TODO()

    final var format: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var gp: platform.darwin.unw_word_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.unw_word_t /* = kotlin.ULong */) = TODO()

    final var handler: platform.darwin.unw_word_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.unw_word_t /* = kotlin.ULong */) = TODO()

    final var lsda: platform.darwin.unw_word_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.unw_word_t /* = kotlin.ULong */) = TODO()

    final var start_ip: platform.darwin.unw_word_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.unw_word_t /* = kotlin.ULong */) = TODO()

    final var unwind_info: platform.darwin.unw_word_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.unw_word_t /* = kotlin.ULong */) = TODO()

    final var unwind_info_size: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class utmpx public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val ut_tv: platform.posix.timeval
        get() = TODO()

    actual final var ut_type: kotlin.Short
        get() = TODO()
        set(value: kotlin.Short) = TODO()

    final val ut_host: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final val ut_id: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final val ut_line: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final val ut_pad: kotlinx.cinterop.CArrayPointer<platform.posix.__uint32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.__uint32_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.posix.__uint32_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var ut_pid: platform.posix.pid_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.posix.pid_t /* = kotlin.Int */) = TODO()

    final val ut_user: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class uuid_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final val uuid: kotlinx.cinterop.CArrayPointer<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */>> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class version_min_command public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cmd: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var cmdsize: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var sdk: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var version: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class vm_extmod_statistics public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var task_for_pid_caller_count: platform.posix.int64_t /* = kotlin.Long */
        get() = TODO()
        set(value: platform.posix.int64_t /* = kotlin.Long */) = TODO()

    final var task_for_pid_count: platform.posix.int64_t /* = kotlin.Long */
        get() = TODO()
        set(value: platform.posix.int64_t /* = kotlin.Long */) = TODO()

    final var thread_creation_caller_count: platform.posix.int64_t /* = kotlin.Long */
        get() = TODO()
        set(value: platform.posix.int64_t /* = kotlin.Long */) = TODO()

    final var thread_creation_count: platform.posix.int64_t /* = kotlin.Long */
        get() = TODO()
        set(value: platform.posix.int64_t /* = kotlin.Long */) = TODO()

    final var thread_set_state_caller_count: platform.posix.int64_t /* = kotlin.Long */
        get() = TODO()
        set(value: platform.posix.int64_t /* = kotlin.Long */) = TODO()

    final var thread_set_state_count: platform.posix.int64_t /* = kotlin.Long */
        get() = TODO()
        set(value: platform.posix.int64_t /* = kotlin.Long */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class vm_page_info_basic public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var __pad: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var depth: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var disposition: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    actual final var ref_count: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    final var object_id: platform.darwin.vm_object_id_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_object_id_t /* = kotlin.ULong */) = TODO()

    final var offset: platform.darwin.memory_object_offset_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.memory_object_offset_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class vm_purgeable_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val obsolete_data: platform.darwin.vm_purgeable_stat_t /* = platform.darwin.vm_purgeable_stat */
        get() = TODO()

    final val fifo_data: kotlinx.cinterop.CArrayPointer<platform.darwin.vm_purgeable_stat_t /* = platform.darwin.vm_purgeable_stat */> /* = kotlinx.cinterop.CPointer<platform.darwin.vm_purgeable_stat_t /* = platform.darwin.vm_purgeable_stat */> */
        get() = TODO()

    final val lifo_data: kotlinx.cinterop.CArrayPointer<platform.darwin.vm_purgeable_stat_t /* = platform.darwin.vm_purgeable_stat */> /* = kotlinx.cinterop.CPointer<platform.darwin.vm_purgeable_stat_t /* = platform.darwin.vm_purgeable_stat */> */
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class vm_purgeable_stat public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var count: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var size: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class vm_read_entry public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class vm_region_basic_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var user_wired_count: kotlin.UShort
        get() = TODO()
        set(value: kotlin.UShort) = TODO()

    final var behavior: platform.darwin.vm_behavior_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_behavior_t /* = kotlin.Int */) = TODO()

    final var inheritance: platform.darwin.vm_inherit_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.vm_inherit_t /* = kotlin.UInt */) = TODO()

    final var max_protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var offset: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var reserved: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var shared: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class vm_region_basic_info_64 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var user_wired_count: kotlin.UShort
        get() = TODO()
        set(value: kotlin.UShort) = TODO()

    final var behavior: platform.darwin.vm_behavior_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_behavior_t /* = kotlin.Int */) = TODO()

    final var inheritance: platform.darwin.vm_inherit_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.vm_inherit_t /* = kotlin.UInt */) = TODO()

    final var max_protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var offset: platform.darwin.memory_object_offset_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.memory_object_offset_t /* = kotlin.ULong */) = TODO()

    final var protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var reserved: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var shared: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class vm_region_extended_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var external_pager: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    actual final var pages_dirtied: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var pages_resident: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var pages_reusable: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var pages_shared_now_private: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var pages_swapped_out: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var ref_count: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var shadow_depth: kotlin.UShort
        get() = TODO()
        set(value: kotlin.UShort) = TODO()

    actual final var share_mode: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    actual final var user_tag: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class vm_region_submap_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var external_pager: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    actual final var pages_dirtied: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var pages_resident: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var pages_shared_now_private: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var pages_swapped_out: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var ref_count: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var shadow_depth: kotlin.UShort
        get() = TODO()
        set(value: kotlin.UShort) = TODO()

    actual final var share_mode: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    actual final var user_tag: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var user_wired_count: kotlin.UShort
        get() = TODO()
        set(value: kotlin.UShort) = TODO()

    final var behavior: platform.darwin.vm_behavior_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_behavior_t /* = kotlin.Int */) = TODO()

    final var inheritance: platform.darwin.vm_inherit_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.vm_inherit_t /* = kotlin.UInt */) = TODO()

    final var is_submap: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var max_protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var object_id: platform.darwin.vm32_object_id_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.vm32_object_id_t /* = kotlin.UInt */) = TODO()

    final var offset: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class vm_region_submap_info_64 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var external_pager: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    actual final var pages_dirtied: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var pages_resident: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var pages_reusable: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var pages_shared_now_private: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var pages_swapped_out: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var ref_count: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var shadow_depth: kotlin.UShort
        get() = TODO()
        set(value: kotlin.UShort) = TODO()

    actual final var share_mode: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    actual final var user_tag: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var user_wired_count: kotlin.UShort
        get() = TODO()
        set(value: kotlin.UShort) = TODO()

    final var behavior: platform.darwin.vm_behavior_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_behavior_t /* = kotlin.Int */) = TODO()

    final var inheritance: platform.darwin.vm_inherit_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.vm_inherit_t /* = kotlin.UInt */) = TODO()

    final var is_submap: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var max_protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var object_id: platform.darwin.vm32_object_id_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.vm32_object_id_t /* = kotlin.UInt */) = TODO()

    final var offset: platform.darwin.memory_object_offset_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.memory_object_offset_t /* = kotlin.ULong */) = TODO()

    final var protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class vm_region_submap_short_info_64 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var external_pager: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    actual final var ref_count: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var shadow_depth: kotlin.UShort
        get() = TODO()
        set(value: kotlin.UShort) = TODO()

    actual final var share_mode: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    actual final var user_tag: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var user_wired_count: kotlin.UShort
        get() = TODO()
        set(value: kotlin.UShort) = TODO()

    final var behavior: platform.darwin.vm_behavior_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_behavior_t /* = kotlin.Int */) = TODO()

    final var inheritance: platform.darwin.vm_inherit_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.vm_inherit_t /* = kotlin.UInt */) = TODO()

    final var is_submap: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var max_protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var object_id: platform.darwin.vm32_object_id_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.vm32_object_id_t /* = kotlin.UInt */) = TODO()

    final var offset: platform.darwin.memory_object_offset_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.memory_object_offset_t /* = kotlin.ULong */) = TODO()

    final var protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class vm_region_top_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final var obj_id: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var private_pages_resident: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var ref_count: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual final var share_mode: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    actual final var shared_pages_resident: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class vm_statistics public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var active_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var cow_faults: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var faults: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var free_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var hits: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var inactive_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var lookups: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var pageins: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var pageouts: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var purgeable_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var purges: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var reactivations: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var speculative_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var wire_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var zero_fill_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class vm_statistics64 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var active_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var compressions: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var compressor_page_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var cow_faults: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var decompressions: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var external_page_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var faults: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var free_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var hits: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var inactive_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var internal_page_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var lookups: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var pageins: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var pageouts: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var purgeable_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var purges: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var reactivations: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var speculative_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var swapins: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var swapouts: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var throttled_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var total_uncompressed_pages_in_compressor: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var wire_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var zero_fill_count: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class wide public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var hi: platform.darwin.SInt32 /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.SInt32 /* = kotlin.Int */) = TODO()

    final var lo: platform.darwin.UInt32 /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.UInt32 /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class wordexp_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var we_offs: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    final var we_wordc: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    final var we_wordv: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class x86_avx512_state public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val ash: platform.darwin.x86_state_hdr_t /* = platform.darwin.x86_state_hdr */
        get() = TODO()

    final val ufs: platform.darwin.anonymousStruct7
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class x86_avx_state public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val ash: platform.darwin.x86_state_hdr_t /* = platform.darwin.x86_state_hdr */
        get() = TODO()

    final val ufs: platform.darwin.anonymousStruct6
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class x86_debug_state public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val dsh: platform.darwin.x86_state_hdr_t /* = platform.darwin.x86_state_hdr */
        get() = TODO()

    final val uds: platform.darwin.anonymousStruct5
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class x86_exception_state public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val esh: platform.darwin.x86_state_hdr_t /* = platform.darwin.x86_state_hdr */
        get() = TODO()

    final val ues: platform.darwin.anonymousStruct4
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class x86_float_state public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val fsh: platform.darwin.x86_state_hdr_t /* = platform.darwin.x86_state_hdr */
        get() = TODO()

    final val ufs: platform.darwin.anonymousStruct3
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class x86_state_hdr public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var count: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var flavor: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final actual class x86_thread_state public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    actual final val tsh: platform.darwin.x86_state_hdr_t /* = platform.darwin.x86_state_hdr */
        get() = TODO()

    final val uts: platform.darwin.anonymousStruct2
        get() = TODO()

    actual companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

actual typealias AbsoluteTime = platform.darwin.UnsignedWide

actual typealias BKT = platform.darwin._bkt

actual typealias CharParameter = kotlin.Short

actual typealias CompTimeValue = platform.darwin.wide

actual typealias DB = platform.darwin.__db

actual typealias Float32 = kotlin.Float

actual typealias Float64 = kotlin.Double

actual typealias NSInteger = kotlin.Long

actual typealias SInt16 = kotlin.Short

actual typealias SInt32 = kotlin.Int

actual typealias SInt64 = kotlin.Long

actual typealias SInt8 = kotlin.Byte

actual typealias ShortFixed = kotlin.Short

actual typealias Size = kotlin.Long

actual typealias StringList = platform.darwin._stringlist

actual typealias StyleParameter = kotlin.Short

actual typealias TXTRecordRef = platform.darwin._TXTRecordRef_t

actual typealias alarm_type_t = kotlin.Int

actual typealias at_encoder_t = platform.darwin.NSObject?

actual typealias at_error_t = kotlin.Long

actual typealias au_evclass_map_t = platform.darwin.au_evclass_map

actual typealias au_expire_after_t = platform.darwin.au_expire_after

actual typealias au_fstat_t = platform.darwin.audit_fstat

actual typealias au_mask_t = platform.darwin.au_mask

actual typealias au_qctrl_t = platform.darwin.au_qctrl

actual typealias au_session_t = platform.darwin.au_session

actual typealias au_stat_t = platform.darwin.audit_stat

actual typealias au_tid_addr_t = platform.darwin.au_tid_addr

actual typealias au_tid_t = platform.darwin.au_tid

actual typealias auditinfo_addr_t = platform.darwin.auditinfo_addr

actual typealias auditinfo_t = platform.darwin.auditinfo

actual typealias auditpinfo_addr_t = platform.darwin.auditpinfo_addr

actual typealias auditpinfo_t = platform.darwin.auditpinfo

actual typealias cache_attributes_t = platform.darwin.cache_attributes_s

actual typealias cache_t = cnames.structs.cache_s

actual typealias clock_flavor_t = kotlin.Int

actual typealias clock_id_t = kotlin.Int

actual typealias clock_res_t = kotlin.Int

actual typealias compression_status = kotlin.Int

actual typealias dispatch_data_t = platform.darwin.NSObject?

actual typealias dispatch_fd_t = kotlin.Int

actual typealias dispatch_group_t = platform.darwin.NSObject?

actual typealias dispatch_io_t = platform.darwin.NSObject?

actual typealias dispatch_object_t = platform.darwin.NSObject?

actual typealias dispatch_once_t = kotlin.Long

actual typealias dispatch_queue_attr_t = platform.darwin.NSObject?

actual typealias dispatch_queue_concurrent_t = platform.darwin.NSObject?

actual typealias dispatch_queue_global_t = platform.darwin.NSObject?

actual typealias dispatch_queue_main_t = platform.darwin.NSObject?

actual typealias dispatch_queue_priority_t = kotlin.Long

actual typealias dispatch_queue_serial_t = platform.darwin.NSObject?

actual typealias dispatch_queue_t = platform.darwin.NSObject?

actual typealias dispatch_semaphore_t = platform.darwin.NSObject?

actual typealias dispatch_source_t = platform.darwin.NSObject?

actual typealias dnssd_sock_t = kotlin.Int

actual typealias dyld_kernel_image_info_t = platform.darwin.dyld_kernel_image_info

actual typealias dyld_kernel_process_info_t = platform.darwin.dyld_kernel_process_info

actual typealias exception_behavior_t = kotlin.Int

actual typealias exception_type_t = kotlin.Int

actual typealias extended80 = platform.darwin.Float80

actual typealias extended96 = platform.darwin.Float96

actual typealias fsid_t = platform.darwin.fsid

actual typealias fsobj_id_t = platform.darwin.fsobj_id

actual typealias host_basic_info_data_t = platform.darwin.host_basic_info

actual typealias host_can_has_debugger_info_data_t = platform.darwin.host_can_has_debugger_info

actual typealias host_cpu_load_info_data_t = platform.darwin.host_cpu_load_info

actual typealias host_load_info_data_t = platform.darwin.host_load_info

actual typealias host_preferred_user_arch_data_t = platform.darwin.host_preferred_user_arch

actual typealias host_priority_info_data_t = platform.darwin.host_priority_info

actual typealias host_purgable_info_data_t = platform.darwin.vm_purgeable_info

actual typealias host_sched_info_data_t = platform.darwin.host_sched_info

actual typealias i386_exception_state_t = platform.posix.__darwin_i386_exception_state

actual typealias i386_float_state_t = platform.posix.__darwin_i386_float_state

actual typealias i386_thread_state_t = platform.posix.__darwin_i386_thread_state

actual typealias integer_t = kotlin.Int

actual typealias kern_return_t = kotlin.Int

actual typealias kernel_resource_sizes_data_t = platform.darwin.kernel_resource_sizes

actual typealias kmod_control_flavor_t = kotlin.Int

actual typealias kmod_info_32_v1_t = platform.darwin.kmod_info_32_v1

actual typealias kmod_info_64_v1_t = platform.darwin.kmod_info_64_v1

actual typealias kmod_info_t = platform.darwin.kmod_info

actual typealias kmod_reference_t = platform.darwin.kmod_reference

actual typealias kmod_t = kotlin.Int

actual typealias mach_msg_format_0_trailer_t = platform.darwin.mach_msg_security_trailer_t

actual typealias mach_msg_max_trailer_t = platform.darwin.mach_msg_mac_trailer_t

actual typealias mach_port_flavor_t = kotlin.Int

actual typealias mach_port_info_ext_t = platform.darwin.mach_port_info_ext

actual typealias mach_port_limits_t = platform.darwin.mach_port_limits

actual typealias mach_port_options_t = platform.darwin.mach_port_options

actual typealias mach_port_qos_t = platform.darwin.mach_port_qos

actual typealias mach_port_status_t = platform.darwin.mach_port_status

actual typealias mach_task_basic_info_data_t = platform.darwin.mach_task_basic_info

actual typealias mach_timespec_t = platform.darwin.mach_timespec

actual typealias mach_voucher_attr_recipe_data_t = platform.darwin.mach_voucher_attr_recipe_data

actual typealias matrix_double2x2 = platform.darwin.simd_double2x2

actual typealias matrix_double2x3 = platform.darwin.simd_double2x3

actual typealias matrix_double2x4 = platform.darwin.simd_double2x4

actual typealias matrix_double3x2 = platform.darwin.simd_double3x2

actual typealias matrix_double3x3 = platform.darwin.simd_double3x3

actual typealias matrix_double3x4 = platform.darwin.simd_double3x4

actual typealias matrix_double4x2 = platform.darwin.simd_double4x2

actual typealias matrix_double4x3 = platform.darwin.simd_double4x3

actual typealias matrix_double4x4 = platform.darwin.simd_double4x4

actual typealias matrix_float2x2 = platform.darwin.simd_float2x2

actual typealias matrix_float2x3 = platform.darwin.simd_float2x3

actual typealias matrix_float2x4 = platform.darwin.simd_float2x4

actual typealias matrix_float3x2 = platform.darwin.simd_float3x2

actual typealias matrix_float3x3 = platform.darwin.simd_float3x3

actual typealias matrix_float3x4 = platform.darwin.simd_float3x4

actual typealias matrix_float4x2 = platform.darwin.simd_float4x2

actual typealias matrix_float4x3 = platform.darwin.simd_float4x3

actual typealias matrix_float4x4 = platform.darwin.simd_float4x4

actual typealias memory_object_attr_info_data_t = platform.darwin.memory_object_attr_info

actual typealias memory_object_behave_info_data_t = platform.darwin.memory_object_behave_info

actual typealias memory_object_copy_strategy_t = kotlin.Int

actual typealias memory_object_flavor_t = kotlin.Int

actual typealias memory_object_perf_info_data_t = platform.darwin.memory_object_perf_info

actual typealias memory_object_return_t = kotlin.Int

actual typealias os_log_t = platform.darwin.NSObject?

actual typealias os_unfair_lock = platform.darwin.os_unfair_lock_s

actual typealias policy_base_data_t = platform.darwin.policy_bases

actual typealias policy_fifo_base_data_t = platform.darwin.policy_fifo_base

actual typealias policy_fifo_info_data_t = platform.darwin.policy_fifo_info

actual typealias policy_fifo_limit_data_t = platform.darwin.policy_fifo_limit

actual typealias policy_info_data_t = platform.darwin.policy_infos

actual typealias policy_limit_data_t = platform.darwin.policy_limits

actual typealias policy_rr_base_data_t = platform.darwin.policy_rr_base

actual typealias policy_rr_info_data_t = platform.darwin.policy_rr_info

actual typealias policy_rr_limit_data_t = platform.darwin.policy_rr_limit

actual typealias policy_t = kotlin.Int

actual typealias policy_timeshare_base_data_t = platform.darwin.policy_timeshare_base

actual typealias policy_timeshare_info_data_t = platform.darwin.policy_timeshare_info

actual typealias policy_timeshare_limit_data_t = platform.darwin.policy_timeshare_limit

actual typealias processor_basic_info_data_t = platform.darwin.processor_basic_info

actual typealias processor_cpu_load_info_data_t = platform.darwin.processor_cpu_load_info

actual typealias processor_flavor_t = kotlin.Int

actual typealias processor_set_basic_info_data_t = platform.darwin.processor_set_basic_info

actual typealias processor_set_flavor_t = kotlin.Int

actual typealias processor_set_load_info_data_t = platform.darwin.processor_set_load_info

actual typealias simd_bool = kotlin.Boolean

actual typealias simd_char1 = kotlin.Byte

actual typealias simd_double1 = kotlin.Double

actual typealias simd_float1 = kotlin.Float

actual typealias simd_int1 = kotlin.Int

actual typealias simd_long1 = kotlin.Long

actual typealias simd_short1 = kotlin.Short

actual typealias sleep_type_t = kotlin.Int

actual typealias task_absolutetime_info_data_t = platform.darwin.task_absolutetime_info

actual typealias task_affinity_tag_info_data_t = platform.darwin.task_affinity_tag_info

actual typealias task_basic_info_32_data_t = platform.darwin.task_basic_info_32

actual typealias task_basic_info_64_data_t = platform.darwin.task_basic_info_64

actual typealias task_basic_info_data_t = platform.darwin.task_basic_info

actual typealias task_category_policy_data_t = platform.darwin.task_category_policy

actual typealias task_dyld_info_data_t = platform.darwin.task_dyld_info

actual typealias task_events_info_data_t = platform.darwin.task_events_info

actual typealias task_extmod_info_data_t = platform.darwin.task_extmod_info

actual typealias task_flags_info_data_t = platform.darwin.task_flags_info

actual typealias task_inspect_basic_counts_data_t = platform.darwin.task_inspect_basic_counts

actual typealias task_kernelmemory_info_data_t = platform.darwin.task_kernelmemory_info

actual typealias task_power_info_data_t = platform.darwin.task_power_info

actual typealias task_power_info_v2_data_t = platform.darwin.task_power_info_v2

actual typealias task_purgable_info_t = platform.darwin.vm_purgeable_info

actual typealias task_role = kotlin.Int

actual typealias task_special_port_t = kotlin.Int

actual typealias task_thread_times_info_data_t = platform.darwin.task_thread_times_info

actual typealias task_trace_memory_info_data_t = platform.darwin.task_trace_memory_info

actual typealias task_vm_info_data_t = platform.darwin.task_vm_info

actual typealias task_wait_state_info_data_t = platform.darwin.task_wait_state_info

actual typealias thread_affinity_policy_data_t = platform.darwin.thread_affinity_policy

actual typealias thread_background_policy_data_t = platform.darwin.thread_background_policy

actual typealias thread_basic_info_data_t = platform.darwin.thread_basic_info

actual typealias thread_extended_info_data_t = platform.darwin.thread_extended_info

actual typealias thread_extended_policy_data_t = platform.darwin.thread_extended_policy

actual typealias thread_identifier_info_data_t = platform.darwin.thread_identifier_info

actual typealias thread_latency_qos_policy_data_t = platform.darwin.thread_latency_qos_policy

actual typealias thread_precedence_policy_data_t = platform.darwin.thread_precedence_policy

actual typealias thread_standard_policy_data_t = platform.darwin.thread_standard_policy

actual typealias thread_state_flavor_t = kotlin.Int

actual typealias thread_throughput_qos_policy_data_t = platform.darwin.thread_throughput_qos_policy

actual typealias thread_time_constraint_policy_data_t = platform.darwin.thread_time_constraint_policy

actual typealias time_value_t = platform.darwin.time_value

actual typealias token_t = cnames.structs.au_token

actual typealias unw_fpreg_t = kotlin.Double

actual typealias unw_regnum_t = kotlin.Int

actual typealias vm_behavior_t = kotlin.Int

actual typealias vm_extmod_statistics_data_t = platform.darwin.vm_extmod_statistics

actual typealias vm_machine_attribute_val_t = kotlin.Int

actual typealias vm_page_info_basic_data_t = platform.darwin.vm_page_info_basic

actual typealias vm_page_info_flavor_t = kotlin.Int

actual typealias vm_prot_t = kotlin.Int

actual typealias vm_purgable_t = kotlin.Int

actual typealias vm_purgeable_stat_t = platform.darwin.vm_purgeable_stat

actual typealias vm_region_basic_info_data_64_t = platform.darwin.vm_region_basic_info_64

actual typealias vm_region_basic_info_data_t = platform.darwin.vm_region_basic_info

actual typealias vm_region_extended_info_data_t = platform.darwin.vm_region_extended_info

actual typealias vm_region_flavor_t = kotlin.Int

actual typealias vm_region_submap_info_data_64_t = platform.darwin.vm_region_submap_info_64

actual typealias vm_region_submap_info_data_t = platform.darwin.vm_region_submap_info

actual typealias vm_region_submap_short_info_data_64_t = platform.darwin.vm_region_submap_short_info_64

actual typealias vm_region_top_info_data_t = platform.darwin.vm_region_top_info

actual typealias vm_statistics64_data_t = platform.darwin.vm_statistics64

actual typealias vm_statistics_data_t = platform.darwin.vm_statistics

actual typealias x86_avx512_state32_t = platform.posix.__darwin_i386_avx512_state

actual typealias x86_avx512_state64_t = platform.posix.__darwin_x86_avx512_state64

actual typealias x86_avx512_state_t = platform.darwin.x86_avx512_state

actual typealias x86_avx_state32_t = platform.posix.__darwin_i386_avx_state

actual typealias x86_avx_state64_t = platform.posix.__darwin_x86_avx_state64

actual typealias x86_avx_state_t = platform.darwin.x86_avx_state

actual typealias x86_debug_state32_t = platform.posix.__darwin_x86_debug_state32

actual typealias x86_debug_state64_t = platform.posix.__darwin_x86_debug_state64

actual typealias x86_debug_state_t = platform.darwin.x86_debug_state

actual typealias x86_exception_state32_t = platform.posix.__darwin_i386_exception_state

actual typealias x86_exception_state64_t = platform.posix.__darwin_x86_exception_state64

actual typealias x86_exception_state_t = platform.darwin.x86_exception_state

actual typealias x86_float_state32_t = platform.posix.__darwin_i386_float_state

actual typealias x86_float_state64_t = platform.posix.__darwin_x86_float_state64

actual typealias x86_float_state_t = platform.darwin.x86_float_state

actual typealias x86_state_hdr_t = platform.darwin.x86_state_hdr

actual typealias x86_thread_state32_t = platform.posix.__darwin_i386_thread_state

actual typealias x86_thread_state64_t = platform.posix.__darwin_x86_thread_state64

actual typealias x86_thread_state_t = platform.darwin.x86_thread_state

actual val ASL_KEY_AUX_DATA: kotlin.String
    get() = TODO()

actual val ASL_KEY_AUX_TITLE: kotlin.String
    get() = TODO()

actual val ASL_KEY_AUX_URL: kotlin.String
    get() = TODO()

actual val ASL_KEY_AUX_UTI: kotlin.String
    get() = TODO()

actual val ASL_KEY_EXPIRE_TIME: kotlin.String
    get() = TODO()

actual val ASL_KEY_FACILITY: kotlin.String
    get() = TODO()

actual val ASL_KEY_FINAL_NOTIFICATION: kotlin.String
    get() = TODO()

actual val ASL_KEY_GID: kotlin.String
    get() = TODO()

actual val ASL_KEY_HOST: kotlin.String
    get() = TODO()

actual val ASL_KEY_LEVEL: kotlin.String
    get() = TODO()

actual val ASL_KEY_MODULE: kotlin.String
    get() = TODO()

actual val ASL_KEY_MSG: kotlin.String
    get() = TODO()

actual val ASL_KEY_MSG_ID: kotlin.String
    get() = TODO()

actual val ASL_KEY_OPTION: kotlin.String
    get() = TODO()

actual val ASL_KEY_OS_ACTIVITY_ID: kotlin.String
    get() = TODO()

actual val ASL_KEY_PID: kotlin.String
    get() = TODO()

actual val ASL_KEY_READ_GID: kotlin.String
    get() = TODO()

actual val ASL_KEY_READ_UID: kotlin.String
    get() = TODO()

actual val ASL_KEY_REF_PID: kotlin.String
    get() = TODO()

actual val ASL_KEY_REF_PROC: kotlin.String
    get() = TODO()

actual val ASL_KEY_SENDER: kotlin.String
    get() = TODO()

actual val ASL_KEY_SENDER_INSTANCE: kotlin.String
    get() = TODO()

actual val ASL_KEY_SENDER_MACH_UUID: kotlin.String
    get() = TODO()

actual val ASL_KEY_SESSION: kotlin.String
    get() = TODO()

actual val ASL_KEY_TIME: kotlin.String
    get() = TODO()

actual val ASL_KEY_TIME_NSEC: kotlin.String
    get() = TODO()

actual val ASL_KEY_UID: kotlin.String
    get() = TODO()

actual val ASL_MSG_FMT_BSD: kotlin.String
    get() = TODO()

actual val ASL_MSG_FMT_MSG: kotlin.String
    get() = TODO()

actual val ASL_MSG_FMT_RAW: kotlin.String
    get() = TODO()

actual val ASL_MSG_FMT_STD: kotlin.String
    get() = TODO()

actual val ASL_MSG_FMT_XML: kotlin.String
    get() = TODO()

actual val ASL_STRING_ALERT: kotlin.String
    get() = TODO()

actual val ASL_STRING_CRIT: kotlin.String
    get() = TODO()

actual val ASL_STRING_DEBUG: kotlin.String
    get() = TODO()

actual val ASL_STRING_EMERG: kotlin.String
    get() = TODO()

actual val ASL_STRING_ERR: kotlin.String
    get() = TODO()

actual val ASL_STRING_INFO: kotlin.String
    get() = TODO()

actual val ASL_STRING_NOTICE: kotlin.String
    get() = TODO()

actual val ASL_STRING_WARNING: kotlin.String
    get() = TODO()

actual val ASL_TIME_FMT_LCL: kotlin.String
    get() = TODO()

actual val ASL_TIME_FMT_SEC: kotlin.String
    get() = TODO()

actual val ASL_TIME_FMT_UTC: kotlin.String
    get() = TODO()

actual val AUDITDEV_FILENAME: kotlin.String
    get() = TODO()

actual val CHECKINT_NO_ERROR: kotlin.UInt
    get() = TODO()

actual val CHECKINT_OVERFLOW_ERROR: kotlin.UInt
    get() = TODO()

actual val CHECKINT_TYPE_ERROR: kotlin.UInt
    get() = TODO()

actual val COPYFILE_DISABLE_VAR: kotlin.String
    get() = TODO()

actual val DBM_SUFFIX: kotlin.String
    get() = TODO()

actual val DEBUG_ASSERT_COMPONENT_NAME_STRING: kotlin.String
    get() = TODO()

actual val DISPATCH_WALLTIME_NOW: kotlin.ULong
    get() = TODO()

actual val FSTAB: kotlin.String
    get() = TODO()

actual val FSTAB_RO: kotlin.String
    get() = TODO()

actual val FSTAB_RQ: kotlin.String
    get() = TODO()

actual val FSTAB_RW: kotlin.String
    get() = TODO()

actual val FSTAB_SW: kotlin.String
    get() = TODO()

actual val FSTAB_XX: kotlin.String
    get() = TODO()

actual val KERNEL_AUDIT_TOKEN: platform.darwin.audit_token_t
    get() = TODO()

actual val KERNEL_SECURITY_TOKEN: platform.darwin.security_token_t
    get() = TODO()

actual val MAGIC: kotlin.String
    get() = TODO()

actual val OSBigEndian: kotlin.UInt
    get() = TODO()

actual val OSLittleEndian: kotlin.UInt
    get() = TODO()

actual val OSUnknownByteOrder: kotlin.UInt
    get() = TODO()

actual val PA_CHAR: kotlin.UInt
    get() = TODO()

actual val PA_DOUBLE: kotlin.UInt
    get() = TODO()

actual val PA_FLOAT: kotlin.UInt
    get() = TODO()

actual val PA_INT: kotlin.UInt
    get() = TODO()

actual val PA_POINTER: kotlin.UInt
    get() = TODO()

actual val PA_STRING: kotlin.UInt
    get() = TODO()

actual val PA_VECTOR: kotlin.UInt
    get() = TODO()

actual val PA_WCHAR: kotlin.UInt
    get() = TODO()

actual val PA_WSTRING: kotlin.UInt
    get() = TODO()

actual val REMOVEFILE_CROSS_MOUNT: kotlin.UInt
    get() = TODO()

actual val REMOVEFILE_KEEP_PARENT: kotlin.UInt
    get() = TODO()

actual val REMOVEFILE_PROCEED: kotlin.UInt
    get() = TODO()

actual val REMOVEFILE_RECURSIVE: kotlin.UInt
    get() = TODO()

actual val REMOVEFILE_SECURE_1_PASS: kotlin.UInt
    get() = TODO()

actual val REMOVEFILE_SECURE_1_PASS_ZERO: kotlin.UInt
    get() = TODO()

actual val REMOVEFILE_SECURE_35_PASS: kotlin.UInt
    get() = TODO()

actual val REMOVEFILE_SECURE_3_PASS: kotlin.UInt
    get() = TODO()

actual val REMOVEFILE_SECURE_7_PASS: kotlin.UInt
    get() = TODO()

actual val REMOVEFILE_SKIP: kotlin.UInt
    get() = TODO()

actual val REMOVEFILE_STATE_CONFIRM_CALLBACK: kotlin.UInt
    get() = TODO()

actual val REMOVEFILE_STATE_CONFIRM_CONTEXT: kotlin.UInt
    get() = TODO()

actual val REMOVEFILE_STATE_ERRNO: kotlin.UInt
    get() = TODO()

actual val REMOVEFILE_STATE_ERROR_CALLBACK: kotlin.UInt
    get() = TODO()

actual val REMOVEFILE_STATE_ERROR_CONTEXT: kotlin.UInt
    get() = TODO()

actual val REMOVEFILE_STATE_STATUS_CALLBACK: kotlin.UInt
    get() = TODO()

actual val REMOVEFILE_STATE_STATUS_CONTEXT: kotlin.UInt
    get() = TODO()

actual val REMOVEFILE_STOP: kotlin.UInt
    get() = TODO()

actual val SECT_BSS: kotlin.String
    get() = TODO()

actual val SECT_COMMON: kotlin.String
    get() = TODO()

actual val SECT_DATA: kotlin.String
    get() = TODO()

actual val SECT_FVMLIB_INIT0: kotlin.String
    get() = TODO()

actual val SECT_FVMLIB_INIT1: kotlin.String
    get() = TODO()

actual val SECT_ICON_HEADER: kotlin.String
    get() = TODO()

actual val SECT_ICON_TIFF: kotlin.String
    get() = TODO()

actual val SECT_OBJC_MODULES: kotlin.String
    get() = TODO()

actual val SECT_OBJC_REFS: kotlin.String
    get() = TODO()

actual val SECT_OBJC_STRINGS: kotlin.String
    get() = TODO()

actual val SECT_OBJC_SYMBOLS: kotlin.String
    get() = TODO()

actual val SECT_TEXT: kotlin.String
    get() = TODO()

actual val SEG_DATA: kotlin.String
    get() = TODO()

actual val SEG_ICON: kotlin.String
    get() = TODO()

actual val SEG_IMPORT: kotlin.String
    get() = TODO()

actual val SEG_LINKEDIT: kotlin.String
    get() = TODO()

actual val SEG_OBJC: kotlin.String
    get() = TODO()

actual val SEG_PAGEZERO: kotlin.String
    get() = TODO()

actual val SEG_TEXT: kotlin.String
    get() = TODO()

actual val SEG_UNIXSTACK: kotlin.String
    get() = TODO()

actual val TMAGIC: kotlin.String
    get() = TODO()

actual val TVERSION: kotlin.String
    get() = TODO()

actual val UNW_EBADFRAME: kotlin.Int
    get() = TODO()

actual val UNW_EBADREG: kotlin.Int
    get() = TODO()

actual val UNW_EBADVERSION: kotlin.Int
    get() = TODO()

actual val UNW_EINVAL: kotlin.Int
    get() = TODO()

actual val UNW_EINVALIDIP: kotlin.Int
    get() = TODO()

actual val UNW_ENOINFO: kotlin.Int
    get() = TODO()

actual val UNW_ENOMEM: kotlin.Int
    get() = TODO()

actual val UNW_EREADONLYREG: kotlin.Int
    get() = TODO()

actual val UNW_ESTOPUNWIND: kotlin.Int
    get() = TODO()

actual val UNW_ESUCCESS: kotlin.Int
    get() = TODO()

actual val UNW_EUNSPEC: kotlin.Int
    get() = TODO()

actual val UNW_PPC_AP: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_CR0: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_CR1: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_CR2: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_CR3: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_CR4: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_CR5: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_CR6: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_CR7: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_CTR: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F0: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F1: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F10: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F11: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F12: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F13: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F14: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F15: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F16: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F17: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F18: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F19: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F2: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F20: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F21: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F22: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F23: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F24: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F25: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F26: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F27: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F28: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F29: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F3: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F30: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F31: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F4: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F5: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F6: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F7: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F8: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_F9: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_LR: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_MQ: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R0: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R1: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R10: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R11: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R12: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R13: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R14: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R15: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R16: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R17: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R18: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R19: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R2: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R20: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R21: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R22: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R23: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R24: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R25: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R26: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R27: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R28: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R29: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R3: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R30: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R31: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R4: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R5: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R6: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R7: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R8: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_R9: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_SPEFSCR: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_SPE_ACC: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V0: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V1: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V10: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V11: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V12: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V13: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V14: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V15: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V16: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V17: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V18: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V19: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V2: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V20: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V21: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V22: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V23: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V24: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V25: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V26: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V27: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V28: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V29: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V3: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V30: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V31: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V4: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V5: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V6: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V7: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V8: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_V9: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_VRSAVE: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_VSCR: kotlin.UInt
    get() = TODO()

actual val UNW_PPC_XER: kotlin.UInt
    get() = TODO()

actual val UNW_REG_IP: kotlin.Int
    get() = TODO()

actual val UNW_REG_SP: kotlin.Int
    get() = TODO()

actual val UNW_X86_64_R10: kotlin.UInt
    get() = TODO()

actual val UNW_X86_64_R11: kotlin.UInt
    get() = TODO()

actual val UNW_X86_64_R12: kotlin.UInt
    get() = TODO()

actual val UNW_X86_64_R13: kotlin.UInt
    get() = TODO()

actual val UNW_X86_64_R14: kotlin.UInt
    get() = TODO()

actual val UNW_X86_64_R15: kotlin.UInt
    get() = TODO()

actual val UNW_X86_64_R8: kotlin.UInt
    get() = TODO()

actual val UNW_X86_64_R9: kotlin.UInt
    get() = TODO()

actual val UNW_X86_64_RAX: kotlin.UInt
    get() = TODO()

actual val UNW_X86_64_RBP: kotlin.UInt
    get() = TODO()

actual val UNW_X86_64_RBX: kotlin.UInt
    get() = TODO()

actual val UNW_X86_64_RCX: kotlin.UInt
    get() = TODO()

actual val UNW_X86_64_RDI: kotlin.UInt
    get() = TODO()

actual val UNW_X86_64_RDX: kotlin.UInt
    get() = TODO()

actual val UNW_X86_64_RSI: kotlin.UInt
    get() = TODO()

actual val UNW_X86_64_RSP: kotlin.UInt
    get() = TODO()

actual val UNW_X86_EAX: kotlin.UInt
    get() = TODO()

actual val UNW_X86_EBP: kotlin.UInt
    get() = TODO()

actual val UNW_X86_EBX: kotlin.UInt
    get() = TODO()

actual val UNW_X86_ECX: kotlin.UInt
    get() = TODO()

actual val UNW_X86_EDI: kotlin.UInt
    get() = TODO()

actual val UNW_X86_EDX: kotlin.UInt
    get() = TODO()

actual val UNW_X86_ESI: kotlin.UInt
    get() = TODO()

actual val UNW_X86_ESP: kotlin.UInt
    get() = TODO()

actual val UTMPX_CHANGE_NOTIFICATION: kotlin.String
    get() = TODO()

actual val UTMPX_FILE: kotlin.String
    get() = TODO()

actual val _PATH_FSTAB: kotlin.String
    get() = TODO()

actual val _PATH_TTYS: kotlin.String
    get() = TODO()

actual val _PATH_UTMPX: kotlin.String
    get() = TODO()

actual val _TTYS_OFF: kotlin.String
    get() = TODO()

actual val _TTYS_ON: kotlin.String
    get() = TODO()

actual val _TTYS_ONERROR: kotlin.String
    get() = TODO()

actual val _TTYS_ONOPTION: kotlin.String
    get() = TODO()

actual val _TTYS_SECURE: kotlin.String
    get() = TODO()

actual val _TTYS_SLOT: kotlin.String
    get() = TODO()

actual val _TTYS_WINDOW: kotlin.String
    get() = TODO()

actual val __dso_handle: platform.darwin.mach_header
    get() = TODO()

actual val _dispatch_data_empty: cnames.structs.dispatch_data_s
    get() = TODO()

actual val _dispatch_main_q: cnames.structs.dispatch_queue_s
    get() = TODO()

actual val _dispatch_queue_attr_concurrent: cnames.structs.dispatch_queue_attr_s
    get() = TODO()

actual val _dispatch_source_type_data_add: cnames.structs.dispatch_source_type_s
    get() = TODO()

actual val _dispatch_source_type_data_or: cnames.structs.dispatch_source_type_s
    get() = TODO()

actual val _dispatch_source_type_data_replace: cnames.structs.dispatch_source_type_s
    get() = TODO()

actual val _dispatch_source_type_mach_recv: cnames.structs.dispatch_source_type_s
    get() = TODO()

actual val _dispatch_source_type_mach_send: cnames.structs.dispatch_source_type_s
    get() = TODO()

actual val _dispatch_source_type_memorypressure: cnames.structs.dispatch_source_type_s
    get() = TODO()

actual val _dispatch_source_type_proc: cnames.structs.dispatch_source_type_s
    get() = TODO()

actual val _dispatch_source_type_read: cnames.structs.dispatch_source_type_s
    get() = TODO()

actual val _dispatch_source_type_signal: cnames.structs.dispatch_source_type_s
    get() = TODO()

actual val _dispatch_source_type_timer: cnames.structs.dispatch_source_type_s
    get() = TODO()

actual val _dispatch_source_type_vnode: cnames.structs.dispatch_source_type_s
    get() = TODO()

actual val _dispatch_source_type_write: cnames.structs.dispatch_source_type_s
    get() = TODO()

actual val _os_log_default: cnames.structs.os_log_s
    get() = TODO()

actual val alphaStage: kotlin.UInt
    get() = TODO()

actual val betaStage: kotlin.UInt
    get() = TODO()

actual val bold: kotlin.UInt
    get() = TODO()

actual val condense: kotlin.UInt
    get() = TODO()

actual val developStage: kotlin.UInt
    get() = TODO()

actual val extend: kotlin.UInt
    get() = TODO()

actual val finalStage: kotlin.UInt
    get() = TODO()

actual val italic: kotlin.UInt
    get() = TODO()

actual val kDNSServiceClass_IN: kotlin.UInt
    get() = TODO()

actual val kDNSServiceErr_AlreadyRegistered: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_BadFlags: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_BadInterfaceIndex: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_BadKey: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_BadParam: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_BadReference: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_BadSig: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_BadState: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_BadTime: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_DoubleNAT: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_Firewall: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_Incompatible: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_Invalid: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_NATPortMappingDisabled: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_NATPortMappingUnsupported: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_NATTraversal: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_NameConflict: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_NoAuth: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_NoError: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_NoMemory: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_NoRouter: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_NoSuchKey: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_NoSuchName: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_NoSuchRecord: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_NotInitialized: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_PollingMode: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_Refused: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_ServiceNotRunning: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_Timeout: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_Transient: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_Unknown: kotlin.Int
    get() = TODO()

actual val kDNSServiceErr_Unsupported: kotlin.Int
    get() = TODO()

actual val kDNSServiceFlagsAdd: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsAllowExpiredAnswers: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsAllowRemoteQuery: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsAutoTrigger: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsBackgroundTrafficClass: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsBogus: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsBrowseDomains: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsDefault: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsExpiredAnswer: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsForce: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsForceMulticast: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsIncludeAWDL: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsIncludeP2P: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsIndeterminate: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsInsecure: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsKnownUnique: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsLongLivedQuery: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsMoreComing: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsNoAutoRename: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsNonBrowsable: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsPrivateFour: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsPrivateOne: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsPrivateThree: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsPrivateTwo: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsRegistrationDomains: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsReturnIntermediates: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsSecure: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsShareConnection: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsShared: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsSuppressUnusable: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsThresholdFinder: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsThresholdOne: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsThresholdReached: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsTimeout: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsUnicastResponse: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsUnique: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsValidate: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsValidateOptional: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsWakeOnResolve: kotlin.UInt
    get() = TODO()

actual val kDNSServiceFlagsWakeOnlyService: kotlin.UInt
    get() = TODO()

actual val kDNSServiceProperty_DaemonVersion: kotlin.String
    get() = TODO()

actual val kDNSServiceProtocol_IPv4: kotlin.UInt
    get() = TODO()

actual val kDNSServiceProtocol_IPv6: kotlin.UInt
    get() = TODO()

actual val kDNSServiceProtocol_TCP: kotlin.UInt
    get() = TODO()

actual val kDNSServiceProtocol_UDP: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_A: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_A6: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_AAAA: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_AFSDB: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_ANY: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_APL: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_ATMA: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_AXFR: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_CERT: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_CNAME: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_DHCID: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_DNAME: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_DNSKEY: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_DS: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_EID: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_GID: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_GPOS: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_HINFO: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_HIP: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_IPSECKEY: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_ISDN: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_IXFR: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_KEY: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_KX: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_LOC: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_MAILA: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_MAILB: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_MB: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_MD: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_MF: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_MG: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_MINFO: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_MR: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_MX: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_NAPTR: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_NIMLOC: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_NS: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_NSAP: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_NSAP_PTR: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_NSEC: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_NSEC3: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_NSEC3PARAM: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_NULL: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_NXT: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_OPT: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_PTR: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_PX: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_RP: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_RRSIG: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_RT: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_SIG: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_SINK: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_SOA: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_SPF: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_SRV: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_SSHFP: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_TKEY: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_TSIG: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_TXT: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_UID: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_UINFO: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_UNSPEC: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_WKS: kotlin.UInt
    get() = TODO()

actual val kDNSServiceType_X25: kotlin.UInt
    get() = TODO()

actual val kNilOptions: kotlin.UInt
    get() = TODO()

actual val kNotifyASLDBUpdate: kotlin.String
    get() = TODO()

actual val kNotifyClockSet: kotlin.String
    get() = TODO()

actual val kNotifyDSCacheInvalidation: kotlin.String
    get() = TODO()

actual val kNotifyDSCacheInvalidationGroup: kotlin.String
    get() = TODO()

actual val kNotifyDSCacheInvalidationHost: kotlin.String
    get() = TODO()

actual val kNotifyDSCacheInvalidationService: kotlin.String
    get() = TODO()

actual val kNotifyDSCacheInvalidationUser: kotlin.String
    get() = TODO()

actual val kNotifySCHostNameChange: kotlin.String
    get() = TODO()

actual val kNotifySCNetworkChange: kotlin.String
    get() = TODO()

actual val kNotifyTimeZoneChange: kotlin.String
    get() = TODO()

actual val kNotifyVFSLowDiskSpace: kotlin.String
    get() = TODO()

actual val kNotifyVFSLowDiskSpaceOtherFS: kotlin.String
    get() = TODO()

actual val kNotifyVFSLowDiskSpaceRootFS: kotlin.String
    get() = TODO()

actual val kNotifyVFSMount: kotlin.String
    get() = TODO()

actual val kNotifyVFSUnmount: kotlin.String
    get() = TODO()

actual val kNotifyVFSUpdate: kotlin.String
    get() = TODO()

actual val kUnknownType: kotlin.UInt
    get() = TODO()

actual val kVariableLengthArray: kotlin.UInt
    get() = TODO()

actual val matrix_identity_double2x2: platform.darwin.simd_double2x2
    get() = TODO()

actual val matrix_identity_double3x3: platform.darwin.simd_double3x3
    get() = TODO()

actual val matrix_identity_double4x4: platform.darwin.simd_double4x4
    get() = TODO()

actual val matrix_identity_float2x2: platform.darwin.simd_float2x2
    get() = TODO()

actual val matrix_identity_float3x3: platform.darwin.simd_float3x3
    get() = TODO()

actual val matrix_identity_float4x4: platform.darwin.simd_float4x4
    get() = TODO()

actual val noErr: kotlin.UInt
    get() = TODO()

actual val normal: kotlin.UInt
    get() = TODO()

actual val outline: kotlin.UInt
    get() = TODO()

actual val shadow: kotlin.UInt
    get() = TODO()

actual val underline: kotlin.UInt
    get() = TODO()

actual fun BZ2_bzCompress(/*0*/ strm: kotlinx.cinterop.CValuesRef<platform.darwin.bz_stream>?, /*1*/ action: kotlin.Int): kotlin.Int { TODO() }

actual fun BZ2_bzCompressEnd(/*0*/ strm: kotlinx.cinterop.CValuesRef<platform.darwin.bz_stream>?): kotlin.Int { TODO() }

actual fun BZ2_bzCompressInit(/*0*/ strm: kotlinx.cinterop.CValuesRef<platform.darwin.bz_stream>?, /*1*/ blockSize100k: kotlin.Int, /*2*/ verbosity: kotlin.Int, /*3*/ workFactor: kotlin.Int): kotlin.Int { TODO() }

actual fun BZ2_bzDecompress(/*0*/ strm: kotlinx.cinterop.CValuesRef<platform.darwin.bz_stream>?): kotlin.Int { TODO() }

actual fun BZ2_bzDecompressEnd(/*0*/ strm: kotlinx.cinterop.CValuesRef<platform.darwin.bz_stream>?): kotlin.Int { TODO() }

actual fun BZ2_bzDecompressInit(/*0*/ strm: kotlinx.cinterop.CValuesRef<platform.darwin.bz_stream>?, /*1*/ verbosity: kotlin.Int, /*2*/ small: kotlin.Int): kotlin.Int { TODO() }

actual fun BZ2_bzclose(/*0*/ b: kotlinx.cinterop.CValuesRef<*>?) { TODO() }

actual fun BZ2_bzflush(/*0*/ b: kotlinx.cinterop.CValuesRef<*>?): kotlin.Int { TODO() }

actual fun BZ2_bzread(/*0*/ b: kotlinx.cinterop.CValuesRef<*>?, /*1*/ buf: kotlinx.cinterop.CValuesRef<*>?, /*2*/ len: kotlin.Int): kotlin.Int { TODO() }

actual fun BZ2_bzwrite(/*0*/ b: kotlinx.cinterop.CValuesRef<*>?, /*1*/ buf: kotlinx.cinterop.CValuesRef<*>?, /*2*/ len: kotlin.Int): kotlin.Int { TODO() }

actual fun NXHostByteOrder(): platform.darwin.NXByteOrder { TODO() }

actual fun NXSwapBigIntToHost(/*0*/ x: kotlin.UInt): kotlin.UInt { TODO() }

actual fun NXSwapBigLongLongToHost(/*0*/ x: kotlin.ULong): kotlin.ULong { TODO() }

actual fun NXSwapBigLongToHost(/*0*/ x: kotlin.ULong): kotlin.ULong { TODO() }

actual fun NXSwapBigShortToHost(/*0*/ x: kotlin.UShort): kotlin.UShort { TODO() }

actual fun NXSwapHostIntToBig(/*0*/ x: kotlin.UInt): kotlin.UInt { TODO() }

actual fun NXSwapHostIntToLittle(/*0*/ x: kotlin.UInt): kotlin.UInt { TODO() }

actual fun NXSwapHostLongLongToBig(/*0*/ x: kotlin.ULong): kotlin.ULong { TODO() }

actual fun NXSwapHostLongLongToLittle(/*0*/ x: kotlin.ULong): kotlin.ULong { TODO() }

actual fun NXSwapHostLongToBig(/*0*/ x: kotlin.ULong): kotlin.ULong { TODO() }

actual fun NXSwapHostLongToLittle(/*0*/ x: kotlin.ULong): kotlin.ULong { TODO() }

actual fun NXSwapHostShortToBig(/*0*/ x: kotlin.UShort): kotlin.UShort { TODO() }

actual fun NXSwapHostShortToLittle(/*0*/ x: kotlin.UShort): kotlin.UShort { TODO() }

actual fun NXSwapInt(/*0*/ inv: kotlin.UInt): kotlin.UInt { TODO() }

actual fun NXSwapLittleIntToHost(/*0*/ x: kotlin.UInt): kotlin.UInt { TODO() }

actual fun NXSwapLittleLongLongToHost(/*0*/ x: kotlin.ULong): kotlin.ULong { TODO() }

actual fun NXSwapLittleLongToHost(/*0*/ x: kotlin.ULong): kotlin.ULong { TODO() }

actual fun NXSwapLittleShortToHost(/*0*/ x: kotlin.UShort): kotlin.UShort { TODO() }

actual fun NXSwapLong(/*0*/ inv: kotlin.ULong): kotlin.ULong { TODO() }

actual fun NXSwapLongLong(/*0*/ inv: kotlin.ULong): kotlin.ULong { TODO() }

actual fun NXSwapShort(/*0*/ inv: kotlin.UShort): kotlin.UShort { TODO() }

actual fun TXTRecordDeallocate(/*0*/ txtRecord: kotlinx.cinterop.CValuesRef<platform.darwin.TXTRecordRef /* = platform.darwin._TXTRecordRef_t */>?) { TODO() }

actual fun _Block_object_assign(/*0*/ arg0: kotlinx.cinterop.CValuesRef<*>?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<*>?, /*2*/ arg2: kotlin.Int) { TODO() }

actual fun _Block_object_dispose(/*0*/ arg0: kotlinx.cinterop.CValuesRef<*>?, /*1*/ arg1: kotlin.Int) { TODO() }

actual fun _Block_release(/*0*/ aBlock: kotlinx.cinterop.CValuesRef<*>?) { TODO() }

actual fun _Unwind_DeleteException(/*0*/ exception_object: kotlinx.cinterop.CValuesRef<platform.darwin._Unwind_Exception>?) { TODO() }

actual fun _Unwind_Resume(/*0*/ exception_object: kotlinx.cinterop.CValuesRef<platform.darwin._Unwind_Exception>?) { TODO() }

actual fun __deregister_frame(/*0*/ fde: kotlinx.cinterop.CValuesRef<*>?) { TODO() }

actual fun __invert_d2(/*0*/ arg0: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x2> { TODO() }

actual fun __invert_d3(/*0*/ arg0: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x3> { TODO() }

actual fun __invert_d4(/*0*/ arg0: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x4> { TODO() }

actual fun __invert_f2(/*0*/ arg0: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x2> { TODO() }

actual fun __invert_f3(/*0*/ arg0: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x3> { TODO() }

actual fun __invert_f4(/*0*/ arg0: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x4> { TODO() }

actual fun __os_warn_unused(/*0*/ x: kotlin.Boolean): kotlin.Boolean { TODO() }

actual fun __register_frame(/*0*/ fde: kotlinx.cinterop.CValuesRef<*>?) { TODO() }

actual fun __tg_acos(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_acos(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_acosh(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_acosh(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_asin(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_asin(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_asinh(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_asinh(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_atan(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_atan(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_atan2(/*0*/ __x: kotlin.Double, /*1*/ __y: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_atan2(/*0*/ __x: kotlin.Float, /*1*/ __y: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_atanh(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_atanh(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_carg(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_carg(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_cbrt(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_cbrt(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_ceil(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_ceil(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_cimag(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_cimag(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_copysign(/*0*/ __x: kotlin.Double, /*1*/ __y: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_copysign(/*0*/ __x: kotlin.Float, /*1*/ __y: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_cos(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_cos(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_cosh(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_cosh(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_cospi(/*0*/ x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_cospi(/*0*/ x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_creal(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_creal(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_erf(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_erf(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_erfc(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_erfc(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_exp(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_exp(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_exp(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun __tg_exp(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun __tg_exp10(/*0*/ x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_exp10(/*0*/ x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_exp2(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_exp2(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_expm1(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_expm1(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_fabs(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_fabs(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_fdim(/*0*/ __x: kotlin.Double, /*1*/ __y: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_fdim(/*0*/ __x: kotlin.Float, /*1*/ __y: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_floor(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_floor(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_fma(/*0*/ __x: kotlin.Double, /*1*/ __y: kotlin.Double, /*2*/ __z: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_fma(/*0*/ __x: kotlin.Float, /*1*/ __y: kotlin.Float, /*2*/ __z: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_fmax(/*0*/ __x: kotlin.Double, /*1*/ __y: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_fmax(/*0*/ __x: kotlin.Float, /*1*/ __y: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_fmin(/*0*/ __x: kotlin.Double, /*1*/ __y: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_fmin(/*0*/ __x: kotlin.Float, /*1*/ __y: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_fmod(/*0*/ __x: kotlin.Double, /*1*/ __y: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_fmod(/*0*/ __x: kotlin.Float, /*1*/ __y: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_hypot(/*0*/ __x: kotlin.Double, /*1*/ __y: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_hypot(/*0*/ __x: kotlin.Float, /*1*/ __y: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_ilogb(/*0*/ __x: kotlin.Double): kotlin.Int { TODO() }

actual fun __tg_ilogb(/*0*/ __x: kotlin.Float): kotlin.Int { TODO() }

actual fun __tg_ldexp(/*0*/ __x: kotlin.Double, /*1*/ __y: kotlin.Int): kotlin.Double { TODO() }

actual fun __tg_ldexp(/*0*/ __x: kotlin.Float, /*1*/ __y: kotlin.Int): kotlin.Float { TODO() }

actual fun __tg_lgamma(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_lgamma(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_llrint(/*0*/ __x: kotlin.Double): kotlin.Long { TODO() }

actual fun __tg_llrint(/*0*/ __x: kotlin.Float): kotlin.Long { TODO() }

actual fun __tg_llround(/*0*/ __x: kotlin.Double): kotlin.Long { TODO() }

actual fun __tg_llround(/*0*/ __x: kotlin.Float): kotlin.Long { TODO() }

actual fun __tg_log(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_log(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_log(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun __tg_log(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun __tg_log10(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_log10(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_log1p(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_log1p(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_log2(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_log2(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_logb(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_logb(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_lrint(/*0*/ __x: kotlin.Double): kotlin.Long { TODO() }

actual fun __tg_lrint(/*0*/ __x: kotlin.Float): kotlin.Long { TODO() }

actual fun __tg_lround(/*0*/ __x: kotlin.Double): kotlin.Long { TODO() }

actual fun __tg_lround(/*0*/ __x: kotlin.Float): kotlin.Long { TODO() }

actual fun __tg_nearbyint(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_nearbyint(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_nextafter(/*0*/ __x: kotlin.Double, /*1*/ __y: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_nextafter(/*0*/ __x: kotlin.Float, /*1*/ __y: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_pow(/*0*/ __x: kotlin.Double, /*1*/ __y: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_pow(/*0*/ __x: kotlin.Float, /*1*/ __y: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_remainder(/*0*/ __x: kotlin.Double, /*1*/ __y: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_remainder(/*0*/ __x: kotlin.Float, /*1*/ __y: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_rint(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_rint(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_round(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_round(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_scalbln(/*0*/ __x: kotlin.Double, /*1*/ __y: kotlin.Long): kotlin.Double { TODO() }

actual fun __tg_scalbln(/*0*/ __x: kotlin.Float, /*1*/ __y: kotlin.Long): kotlin.Float { TODO() }

actual fun __tg_scalbn(/*0*/ __x: kotlin.Double, /*1*/ __y: kotlin.Int): kotlin.Double { TODO() }

actual fun __tg_scalbn(/*0*/ __x: kotlin.Float, /*1*/ __y: kotlin.Int): kotlin.Float { TODO() }

actual fun __tg_sin(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_sin(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_sinh(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_sinh(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_sinpi(/*0*/ x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_sinpi(/*0*/ x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_sqrt(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_sqrt(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_tan(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_tan(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_tanh(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_tanh(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_tanpi(/*0*/ x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_tanpi(/*0*/ x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_tgamma(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_tgamma(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tg_trunc(/*0*/ __x: kotlin.Double): kotlin.Double { TODO() }

actual fun __tg_trunc(/*0*/ __x: kotlin.Float): kotlin.Float { TODO() }

actual fun __tzcnt_u16(/*0*/ __X: kotlin.UShort): kotlin.UShort { TODO() }

actual fun __tzcnt_u32(/*0*/ __X: kotlin.UInt): kotlin.UInt { TODO() }

actual fun __tzcnt_u64(/*0*/ __X: kotlin.ULong): kotlin.ULong { TODO() }

actual fun _bit_scan_forward(/*0*/ __A: kotlin.Int): kotlin.Int { TODO() }

actual fun _bit_scan_reverse(/*0*/ __A: kotlin.Int): kotlin.Int { TODO() }

actual fun _dispatch_object_validate(/*0*/ `object`: platform.darwin.dispatch_object_t? /* = platform.darwin.NSObject? */) { TODO() }

actual fun _mm_clflush(/*0*/ __p: kotlinx.cinterop.CValuesRef<*>?) { TODO() }

actual fun _mm_free(/*0*/ __p: kotlinx.cinterop.CValuesRef<*>?) { TODO() }

actual fun _mm_getcsr(): kotlin.UInt { TODO() }

actual fun _mm_lfence() { TODO() }

actual fun _mm_mfence() { TODO() }

actual fun _mm_pause() { TODO() }

actual fun _mm_setcsr(/*0*/ __i: kotlin.UInt) { TODO() }

actual fun _mm_sfence() { TODO() }

actual fun _mm_tzcnt_32(/*0*/ __X: kotlin.UInt): kotlin.Int { TODO() }

actual fun _mm_tzcnt_64(/*0*/ __X: kotlin.ULong): kotlin.Long { TODO() }

actual fun _os_activity_label_useraction(/*0*/ dso: kotlinx.cinterop.CValuesRef<*>?, /*1*/ name: kotlin.String?) { TODO() }

actual fun _os_activity_set_breadcrumb(/*0*/ dso: kotlinx.cinterop.CValuesRef<*>?, /*1*/ name: kotlin.String?) { TODO() }

actual fun _os_log_create(/*0*/ dso: kotlinx.cinterop.CValuesRef<*>?, /*1*/ subsystem: kotlin.String?, /*2*/ category: kotlin.String?): platform.darwin.os_log_t? /* = platform.darwin.NSObject? */ { TODO() }

actual fun _os_log_sensitive_deprecated() { TODO() }

actual fun _simd_angle(/*0*/ p: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*1*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>): kotlin.Double { TODO() }

actual fun _simd_angle(/*0*/ p: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*1*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>): kotlin.Float { TODO() }

actual fun _simd_intermediate(/*0*/ q0: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*1*/ q1: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*2*/ q2: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun _simd_intermediate(/*0*/ q0: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*1*/ q1: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*2*/ q2: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun _simd_sinc(/*0*/ x: kotlin.Double): kotlin.Double { TODO() }

actual fun _simd_sinc(/*0*/ x: kotlin.Float): kotlin.Float { TODO() }

actual fun _simd_slerp_internal(/*0*/ q0: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*1*/ q1: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*2*/ t: kotlin.Double): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun _simd_slerp_internal(/*0*/ q0: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*1*/ q1: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*2*/ t: kotlin.Float): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun _simd_squad(/*0*/ q0: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*1*/ qa: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*2*/ qb: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*3*/ q1: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*4*/ t: kotlin.Double): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun _simd_squad(/*0*/ q0: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*1*/ qa: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*2*/ qb: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*3*/ q1: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*4*/ t: kotlin.Float): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun aio_cancel(/*0*/ fd: kotlin.Int, /*1*/ aiocbp: kotlinx.cinterop.CValuesRef<platform.darwin.aiocb>?): kotlin.Int { TODO() }

actual fun aio_error(/*0*/ aiocbp: kotlinx.cinterop.CValuesRef<platform.darwin.aiocb>?): kotlin.Int { TODO() }

actual fun aio_fsync(/*0*/ op: kotlin.Int, /*1*/ aiocbp: kotlinx.cinterop.CValuesRef<platform.darwin.aiocb>?): kotlin.Int { TODO() }

actual fun aio_read(/*0*/ aiocbp: kotlinx.cinterop.CValuesRef<platform.darwin.aiocb>?): kotlin.Int { TODO() }

actual fun aio_write(/*0*/ aiocbp: kotlinx.cinterop.CValuesRef<platform.darwin.aiocb>?): kotlin.Int { TODO() }

actual fun ascii2addr(/*0*/ arg0: kotlin.Int, /*1*/ arg1: kotlin.String?, /*2*/ arg2: kotlinx.cinterop.CValuesRef<*>?): kotlin.Int { TODO() }

actual fun asl_close_auxiliary_file(/*0*/ descriptor: kotlin.Int): kotlin.Int { TODO() }

actual fun asl_log_message(/*0*/ level: kotlin.Int, /*1*/ format: kotlin.String?, /*2*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): kotlin.Int { TODO() }

actual fun at_encoder_get_block_counts(/*0*/ encoder: platform.darwin.at_encoder_t? /* = platform.darwin.NSObject? */, /*1*/ imageSize: kotlinx.cinterop.CValue<platform.darwin.at_size_t>): kotlinx.cinterop.CValue<platform.darwin.at_size_t> { TODO() }

actual fun at_encoder_get_block_dimensions(/*0*/ encoder: platform.darwin.at_encoder_t? /* = platform.darwin.NSObject? */): kotlinx.cinterop.CValue<platform.darwin.at_size_t> { TODO() }

actual fun audit(/*0*/ arg0: kotlinx.cinterop.CValuesRef<*>?, /*1*/ arg1: kotlin.Int): kotlin.Int { TODO() }

actual fun auditctl(/*0*/ arg0: kotlin.String?): kotlin.Int { TODO() }

actual fun auditon(/*0*/ arg0: kotlin.Int, /*1*/ arg1: kotlinx.cinterop.CValuesRef<*>?, /*2*/ arg2: kotlin.Int): kotlin.Int { TODO() }

actual fun cache_destroy(/*0*/ cache: kotlinx.cinterop.CValuesRef<platform.darwin.cache_t /* = cnames.structs.cache_s */>?): kotlin.Int { TODO() }

actual fun cache_key_is_equal_cb_cstring(/*0*/ key1: kotlinx.cinterop.CValuesRef<*>?, /*1*/ key2: kotlinx.cinterop.CValuesRef<*>?, /*2*/ unused: kotlinx.cinterop.CValuesRef<*>?): kotlin.Boolean { TODO() }

actual fun cache_key_is_equal_cb_integer(/*0*/ key1: kotlinx.cinterop.CValuesRef<*>?, /*1*/ key2: kotlinx.cinterop.CValuesRef<*>?, /*2*/ unused: kotlinx.cinterop.CValuesRef<*>?): kotlin.Boolean { TODO() }

actual fun cache_release_cb_free(/*0*/ key_or_value: kotlinx.cinterop.CValuesRef<*>?, /*1*/ unused: kotlinx.cinterop.CValuesRef<*>?) { TODO() }

actual fun cache_release_value(/*0*/ cache: kotlinx.cinterop.CValuesRef<platform.darwin.cache_t /* = cnames.structs.cache_s */>?, /*1*/ value: kotlinx.cinterop.CValuesRef<*>?): kotlin.Int { TODO() }

actual fun cache_remove(/*0*/ cache: kotlinx.cinterop.CValuesRef<platform.darwin.cache_t /* = cnames.structs.cache_s */>?, /*1*/ key: kotlinx.cinterop.CValuesRef<*>?): kotlin.Int { TODO() }

actual fun cache_remove_all(/*0*/ cache: kotlinx.cinterop.CValuesRef<platform.darwin.cache_t /* = cnames.structs.cache_s */>?): kotlin.Int { TODO() }

actual fun cache_value_make_nonpurgeable_cb(/*0*/ value: kotlinx.cinterop.CValuesRef<*>?, /*1*/ unused: kotlinx.cinterop.CValuesRef<*>?): kotlin.Boolean { TODO() }

actual fun cache_value_make_purgeable_cb(/*0*/ value: kotlinx.cinterop.CValuesRef<*>?, /*1*/ unused: kotlinx.cinterop.CValuesRef<*>?) { TODO() }

actual fun dbm_clearerr(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.DBM>?): kotlin.Int { TODO() }

actual fun dbm_close(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.DBM>?) { TODO() }

actual fun dbm_delete(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.DBM>?, /*1*/ arg1: kotlinx.cinterop.CValue<platform.darwin.datum>): kotlin.Int { TODO() }

actual fun dbm_dirfno(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.DBM>?): kotlin.Int { TODO() }

actual fun dbm_error(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.DBM>?): kotlin.Int { TODO() }

actual fun dbm_fetch(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.DBM>?, /*1*/ arg1: kotlinx.cinterop.CValue<platform.darwin.datum>): kotlinx.cinterop.CValue<platform.darwin.datum> { TODO() }

actual fun dbm_firstkey(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.DBM>?): kotlinx.cinterop.CValue<platform.darwin.datum> { TODO() }

actual fun dbm_forder(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.DBM>?, /*1*/ arg1: kotlinx.cinterop.CValue<platform.darwin.datum>): kotlin.Long { TODO() }

actual fun dbm_nextkey(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.DBM>?): kotlinx.cinterop.CValue<platform.darwin.datum> { TODO() }

actual fun dbm_store(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.DBM>?, /*1*/ arg1: kotlinx.cinterop.CValue<platform.darwin.datum>, /*2*/ arg2: kotlinx.cinterop.CValue<platform.darwin.datum>, /*3*/ arg3: kotlin.Int): kotlin.Int { TODO() }

actual fun dbopen(/*0*/ arg0: kotlin.String?, /*1*/ arg1: kotlin.Int, /*2*/ arg2: kotlin.Int, /*3*/ arg3: platform.darwin.DBTYPE, /*4*/ arg4: kotlinx.cinterop.CValuesRef<*>?): kotlinx.cinterop.CPointer<platform.darwin.DB /* = platform.darwin.__db */>? { TODO() }

actual fun dispatch_activate(/*0*/ `object`: platform.darwin.dispatch_object_t? /* = platform.darwin.NSObject? */) { TODO() }

actual fun dispatch_assert_queue(/*0*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */) { TODO() }

actual fun dispatch_assert_queue_barrier(/*0*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */) { TODO() }

actual fun dispatch_assert_queue_not(/*0*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */) { TODO() }

actual fun dispatch_data_create_concat(/*0*/ data1: platform.darwin.dispatch_data_t? /* = platform.darwin.NSObject? */, /*1*/ data2: platform.darwin.dispatch_data_t? /* = platform.darwin.NSObject? */): platform.darwin.dispatch_data_t? /* = platform.darwin.NSObject? */ { TODO() }

actual fun dispatch_debug(/*0*/ `object`: platform.darwin.dispatch_object_t? /* = platform.darwin.NSObject? */, /*1*/ message: kotlin.String?, /*2*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/) { TODO() }

actual fun dispatch_get_current_queue(): platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */ { TODO() }

actual fun dispatch_get_global_queue(/*0*/ identifier: kotlin.Long, /*1*/ flags: kotlin.ULong): platform.darwin.dispatch_queue_global_t? /* = platform.darwin.NSObject? */ { TODO() }

actual fun dispatch_get_main_queue(): platform.darwin.dispatch_queue_main_t? /* = platform.darwin.NSObject? */ { TODO() }

actual fun dispatch_group_create(): platform.darwin.dispatch_group_t? /* = platform.darwin.NSObject? */ { TODO() }

actual fun dispatch_group_enter(/*0*/ group: platform.darwin.dispatch_group_t? /* = platform.darwin.NSObject? */) { TODO() }

actual fun dispatch_group_leave(/*0*/ group: platform.darwin.dispatch_group_t? /* = platform.darwin.NSObject? */) { TODO() }

actual fun dispatch_main() { TODO() }

actual fun dispatch_queue_attr_make_initially_inactive(/*0*/ attr: platform.darwin.dispatch_queue_attr_t? /* = platform.darwin.NSObject? */): platform.darwin.dispatch_queue_attr_t? /* = platform.darwin.NSObject? */ { TODO() }

actual fun dispatch_queue_create(/*0*/ label: kotlin.String?, /*1*/ attr: platform.darwin.dispatch_queue_attr_t? /* = platform.darwin.NSObject? */): platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */ { TODO() }

actual fun dispatch_queue_create_with_target(/*0*/ label: kotlin.String?, /*1*/ attr: platform.darwin.dispatch_queue_attr_t? /* = platform.darwin.NSObject? */, /*2*/ target: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */): platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */ { TODO() }

external actual fun dispatch_release(/*0*/ `object`: platform.darwin.dispatch_object_t? /* = platform.darwin.NSObject? */)

actual fun dispatch_resume(/*0*/ `object`: platform.darwin.dispatch_object_t? /* = platform.darwin.NSObject? */) { TODO() }

external actual fun dispatch_retain(/*0*/ `object`: platform.darwin.dispatch_object_t? /* = platform.darwin.NSObject? */)

actual fun dispatch_semaphore_create(/*0*/ value: kotlin.Long): platform.darwin.dispatch_semaphore_t? /* = platform.darwin.NSObject? */ { TODO() }

actual fun dispatch_semaphore_signal(/*0*/ dsema: platform.darwin.dispatch_semaphore_t? /* = platform.darwin.NSObject? */): kotlin.Long { TODO() }

actual fun dispatch_set_context(/*0*/ `object`: platform.darwin.dispatch_object_t? /* = platform.darwin.NSObject? */, /*1*/ context: kotlinx.cinterop.CValuesRef<*>?) { TODO() }

actual fun dispatch_set_target_queue(/*0*/ `object`: platform.darwin.dispatch_object_t? /* = platform.darwin.NSObject? */, /*1*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */) { TODO() }

actual fun dispatch_source_cancel(/*0*/ source: platform.darwin.dispatch_source_t? /* = platform.darwin.NSObject? */) { TODO() }

actual fun dispatch_source_get_data(/*0*/ source: platform.darwin.dispatch_source_t? /* = platform.darwin.NSObject? */): kotlin.ULong { TODO() }

actual fun dispatch_source_get_mask(/*0*/ source: platform.darwin.dispatch_source_t? /* = platform.darwin.NSObject? */): kotlin.ULong { TODO() }

actual fun dispatch_source_merge_data(/*0*/ source: platform.darwin.dispatch_source_t? /* = platform.darwin.NSObject? */, /*1*/ value: kotlin.ULong) { TODO() }

actual fun dispatch_source_testcancel(/*0*/ source: platform.darwin.dispatch_source_t? /* = platform.darwin.NSObject? */): kotlin.Long { TODO() }

actual fun dispatch_suspend(/*0*/ `object`: platform.darwin.dispatch_object_t? /* = platform.darwin.NSObject? */) { TODO() }

actual fun dns_free_question(/*0*/ q: kotlinx.cinterop.CValuesRef<platform.darwin.dns_question_t>?) { TODO() }

actual fun dns_free_reply(/*0*/ r: kotlinx.cinterop.CValuesRef<platform.darwin.dns_reply_t>?) { TODO() }

actual fun dns_free_resource_record(/*0*/ rr: kotlinx.cinterop.CValuesRef<platform.darwin.dns_resource_record_t>?) { TODO() }

actual fun dns_print_question(/*0*/ q: kotlinx.cinterop.CValuesRef<platform.darwin.dns_question_t>?, /*1*/ f: kotlinx.cinterop.CValuesRef<platform.posix.FILE /* = platform.posix.__sFILE */>?) { TODO() }

actual fun dns_print_resource_record(/*0*/ r: kotlinx.cinterop.CValuesRef<platform.darwin.dns_resource_record_t>?, /*1*/ f: kotlinx.cinterop.CValuesRef<platform.posix.FILE /* = platform.posix.__sFILE */>?) { TODO() }

actual fun endfsent() { TODO() }

actual fun endttyent(): kotlin.Int { TODO() }

actual fun endutxent() { TODO() }

actual fun endutxent_wtmp() { TODO() }

actual fun fmtmsg(/*0*/ arg0: kotlin.Long, /*1*/ arg1: kotlin.String?, /*2*/ arg2: kotlin.Int, /*3*/ arg3: kotlin.String?, /*4*/ arg4: kotlin.String?, /*5*/ arg5: kotlin.String?): kotlin.Int { TODO() }

actual fun freeifaddrs(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.ifaddrs>?) { TODO() }

actual fun freeifmaddrs(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.ifmaddrs>?) { TODO() }

actual fun getaudit(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.auditinfo>?): kotlin.Int { TODO() }

actual fun getaudit_addr(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.auditinfo_addr>?, /*1*/ arg1: kotlin.Int): kotlin.Int { TODO() }

actual fun getfsent(): kotlinx.cinterop.CPointer<platform.darwin.fstab>? { TODO() }

actual fun getfsfile(/*0*/ arg0: kotlin.String?): kotlinx.cinterop.CPointer<platform.darwin.fstab>? { TODO() }

actual fun getfsspec(/*0*/ arg0: kotlin.String?): kotlinx.cinterop.CPointer<platform.darwin.fstab>? { TODO() }

actual fun getlastlogxbyname(/*0*/ arg0: kotlin.String?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<platform.darwin.lastlogx>?): kotlinx.cinterop.CPointer<platform.darwin.lastlogx>? { TODO() }

actual fun getttyent(): kotlinx.cinterop.CPointer<platform.darwin.ttyent>? { TODO() }

actual fun getttynam(/*0*/ arg0: kotlin.String?): kotlinx.cinterop.CPointer<platform.darwin.ttyent>? { TODO() }

actual fun getutxent(): kotlinx.cinterop.CPointer<platform.darwin.utmpx>? { TODO() }

actual fun getutxent_wtmp(): kotlinx.cinterop.CPointer<platform.darwin.utmpx>? { TODO() }

actual fun getutxid(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.utmpx>?): kotlinx.cinterop.CPointer<platform.darwin.utmpx>? { TODO() }

actual fun getutxline(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.utmpx>?): kotlinx.cinterop.CPointer<platform.darwin.utmpx>? { TODO() }

actual fun globfree(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.glob_t>?) { TODO() }

actual fun inet_aton(/*0*/ arg0: kotlin.String?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<platform.posix.in_addr>?): kotlin.Int { TODO() }

actual fun inet_pton(/*0*/ arg0: kotlin.Int, /*1*/ arg1: kotlin.String?, /*2*/ arg2: kotlinx.cinterop.CValuesRef<*>?): kotlin.Int { TODO() }

actual fun login_tty(/*0*/ arg0: kotlin.Int): kotlin.Int { TODO() }

actual fun logwtmp(/*0*/ arg0: kotlin.String?, /*1*/ arg1: kotlin.String?, /*2*/ arg2: kotlin.String?) { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x2> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x2> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x2> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x3> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x3> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x3> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x4> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x4> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x4> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x2> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x2> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x2> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x3> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x3> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x3> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x4> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x4> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x4> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x2> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x2> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x2> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x3> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x3> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x3> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x4> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x4> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x4> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x2> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x2> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x2> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x3> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x3> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x3> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x4> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x4> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x4> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x2> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x2> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x2> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x3> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x3> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x3> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x4> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x4> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x4> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x2> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x2> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x2> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x3> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x3> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x3> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x4> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x4> { TODO() }

actual fun matrix_multiply(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x4> { TODO() }

actual fun matrix_scale(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x2> { TODO() }

actual fun matrix_scale(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x3> { TODO() }

actual fun matrix_scale(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x4> { TODO() }

actual fun matrix_scale(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x2> { TODO() }

actual fun matrix_scale(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x3> { TODO() }

actual fun matrix_scale(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x4> { TODO() }

actual fun matrix_scale(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x2> { TODO() }

actual fun matrix_scale(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x3> { TODO() }

actual fun matrix_scale(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x4> { TODO() }

actual fun matrix_scale(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x2> { TODO() }

actual fun matrix_scale(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x3> { TODO() }

actual fun matrix_scale(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x4> { TODO() }

actual fun matrix_scale(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x2> { TODO() }

actual fun matrix_scale(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x3> { TODO() }

actual fun matrix_scale(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x4> { TODO() }

actual fun matrix_scale(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x2> { TODO() }

actual fun matrix_scale(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x3> { TODO() }

actual fun matrix_scale(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x4> { TODO() }

actual fun mbr_string_to_sid(/*0*/ string: kotlin.String?, /*1*/ sid: kotlinx.cinterop.CValuesRef<platform.darwin.nt_sid_t>?): kotlin.Int { TODO() }

actual fun mpool_close(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.MPOOL>?): kotlin.Int { TODO() }

actual fun mpool_put(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.MPOOL>?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<*>?, /*2*/ arg2: kotlin.UInt): kotlin.Int { TODO() }

actual fun mpool_sync(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.MPOOL>?): kotlin.Int { TODO() }

actual fun notify_is_valid_token(/*0*/ `val`: kotlin.Int): kotlin.Boolean { TODO() }

actual fun os_log_create(/*0*/ subsystem: kotlin.String?, /*1*/ category: kotlin.String?): platform.darwin.os_log_t? /* = platform.darwin.NSObject? */ { TODO() }

actual fun os_log_is_debug_enabled(/*0*/ log: platform.darwin.os_log_t? /* = platform.darwin.NSObject? */): kotlin.Boolean { TODO() }

actual fun os_log_is_enabled(/*0*/ log: platform.darwin.os_log_t? /* = platform.darwin.NSObject? */): kotlin.Boolean { TODO() }

external actual fun os_release(/*0*/ `object`: kotlinx.cinterop.CValuesRef<*>?)

actual fun os_trace_debug_enabled(): kotlin.Boolean { TODO() }

actual fun os_trace_info_enabled(): kotlin.Boolean { TODO() }

actual fun pututxline(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.utmpx>?): kotlinx.cinterop.CPointer<platform.darwin.utmpx>? { TODO() }

actual fun sel_isMapped(/*0*/ sel: kotlinx.cinterop.CValuesRef<*>?): kotlin.Boolean { TODO() }

actual fun setaudit(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.auditinfo>?): kotlin.Int { TODO() }

actual fun setaudit_addr(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.auditinfo_addr>?, /*1*/ arg1: kotlin.Int): kotlin.Int { TODO() }

actual fun setfsent(): kotlin.Int { TODO() }

actual fun setttyent(): kotlin.Int { TODO() }

actual fun setutxent() { TODO() }

actual fun setutxent_wtmp(/*0*/ arg0: kotlin.Int) { TODO() }

actual fun simd_add(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x2> { TODO() }

actual fun simd_add(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x3> { TODO() }

actual fun simd_add(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x4> { TODO() }

actual fun simd_add(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x2> { TODO() }

actual fun simd_add(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x3> { TODO() }

actual fun simd_add(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x4> { TODO() }

actual fun simd_add(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x2> { TODO() }

actual fun simd_add(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x3> { TODO() }

actual fun simd_add(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x4> { TODO() }

actual fun simd_add(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x2> { TODO() }

actual fun simd_add(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x3> { TODO() }

actual fun simd_add(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x4> { TODO() }

actual fun simd_add(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x2> { TODO() }

actual fun simd_add(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x3> { TODO() }

actual fun simd_add(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x4> { TODO() }

actual fun simd_add(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x2> { TODO() }

actual fun simd_add(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x3> { TODO() }

actual fun simd_add(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x4> { TODO() }

actual fun simd_add(/*0*/ p: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*1*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun simd_add(/*0*/ p: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*1*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun simd_angle(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>): kotlin.Double { TODO() }

actual fun simd_angle(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>): kotlin.Float { TODO() }

actual fun simd_bezier(/*0*/ q0: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*1*/ q1: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*2*/ q2: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*3*/ q3: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*4*/ t: kotlin.Double): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun simd_bezier(/*0*/ q0: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*1*/ q1: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*2*/ q2: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*3*/ q3: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*4*/ t: kotlin.Float): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun simd_clamp(/*0*/ x: kotlin.Double, /*1*/ min: kotlin.Double, /*2*/ max: kotlin.Double): kotlin.Double { TODO() }

actual fun simd_clamp(/*0*/ x: kotlin.Float, /*1*/ min: kotlin.Float, /*2*/ max: kotlin.Float): kotlin.Float { TODO() }

actual fun simd_conjugate(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun simd_conjugate(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun simd_determinant(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>): kotlin.Double { TODO() }

actual fun simd_determinant(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>): kotlin.Double { TODO() }

actual fun simd_determinant(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>): kotlin.Double { TODO() }

actual fun simd_determinant(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>): kotlin.Float { TODO() }

actual fun simd_determinant(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>): kotlin.Float { TODO() }

actual fun simd_determinant(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>): kotlin.Float { TODO() }

actual fun simd_dot(/*0*/ p: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*1*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>): kotlin.Double { TODO() }

actual fun simd_dot(/*0*/ p: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*1*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>): kotlin.Float { TODO() }

actual fun simd_fast_recip(/*0*/ x: kotlin.Double): kotlin.Double { TODO() }

actual fun simd_fast_recip(/*0*/ x: kotlin.Float): kotlin.Float { TODO() }

actual fun simd_fast_rsqrt(/*0*/ x: kotlin.Double): kotlin.Double { TODO() }

actual fun simd_fast_rsqrt(/*0*/ x: kotlin.Float): kotlin.Float { TODO() }

actual fun simd_fract(/*0*/ x: kotlin.Double): kotlin.Double { TODO() }

actual fun simd_fract(/*0*/ x: kotlin.Float): kotlin.Float { TODO() }

actual fun simd_inverse(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x2> { TODO() }

actual fun simd_inverse(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x3> { TODO() }

actual fun simd_inverse(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x4> { TODO() }

actual fun simd_inverse(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x2> { TODO() }

actual fun simd_inverse(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x3> { TODO() }

actual fun simd_inverse(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x4> { TODO() }

actual fun simd_inverse(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun simd_inverse(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun simd_length(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>): kotlin.Double { TODO() }

actual fun simd_length(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>): kotlin.Float { TODO() }

actual fun simd_linear_combination(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>, /*2*/ __b: kotlin.Double, /*3*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x2> { TODO() }

actual fun simd_linear_combination(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>, /*2*/ __b: kotlin.Double, /*3*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x3> { TODO() }

actual fun simd_linear_combination(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>, /*2*/ __b: kotlin.Double, /*3*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x4> { TODO() }

actual fun simd_linear_combination(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>, /*2*/ __b: kotlin.Double, /*3*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x2> { TODO() }

actual fun simd_linear_combination(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>, /*2*/ __b: kotlin.Double, /*3*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x3> { TODO() }

actual fun simd_linear_combination(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>, /*2*/ __b: kotlin.Double, /*3*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x4> { TODO() }

actual fun simd_linear_combination(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>, /*2*/ __b: kotlin.Double, /*3*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x2> { TODO() }

actual fun simd_linear_combination(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>, /*2*/ __b: kotlin.Double, /*3*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x3> { TODO() }

actual fun simd_linear_combination(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>, /*2*/ __b: kotlin.Double, /*3*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x4> { TODO() }

actual fun simd_linear_combination(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>, /*2*/ __b: kotlin.Float, /*3*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x2> { TODO() }

actual fun simd_linear_combination(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>, /*2*/ __b: kotlin.Float, /*3*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x3> { TODO() }

actual fun simd_linear_combination(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>, /*2*/ __b: kotlin.Float, /*3*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x4> { TODO() }

actual fun simd_linear_combination(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>, /*2*/ __b: kotlin.Float, /*3*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x2> { TODO() }

actual fun simd_linear_combination(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>, /*2*/ __b: kotlin.Float, /*3*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x3> { TODO() }

actual fun simd_linear_combination(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>, /*2*/ __b: kotlin.Float, /*3*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x4> { TODO() }

actual fun simd_linear_combination(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>, /*2*/ __b: kotlin.Float, /*3*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x2> { TODO() }

actual fun simd_linear_combination(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>, /*2*/ __b: kotlin.Float, /*3*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x3> { TODO() }

actual fun simd_linear_combination(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>, /*2*/ __b: kotlin.Float, /*3*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x4> { TODO() }

actual fun simd_matrix3x3(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x3> { TODO() }

actual fun simd_matrix3x3(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x3> { TODO() }

actual fun simd_matrix4x4(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x4> { TODO() }

actual fun simd_matrix4x4(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x4> { TODO() }

actual fun simd_max(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Double { TODO() }

actual fun simd_max(/*0*/ x: kotlin.Float, /*1*/ y: kotlin.Float): kotlin.Float { TODO() }

actual fun simd_min(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double): kotlin.Double { TODO() }

actual fun simd_min(/*0*/ x: kotlin.Float, /*1*/ y: kotlin.Float): kotlin.Float { TODO() }

actual fun simd_mix(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double, /*2*/ t: kotlin.Double): kotlin.Double { TODO() }

actual fun simd_mix(/*0*/ x: kotlin.Float, /*1*/ y: kotlin.Float, /*2*/ t: kotlin.Float): kotlin.Float { TODO() }

actual fun simd_mul(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x2> { TODO() }

actual fun simd_mul(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x3> { TODO() }

actual fun simd_mul(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x4> { TODO() }

actual fun simd_mul(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x2> { TODO() }

actual fun simd_mul(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x3> { TODO() }

actual fun simd_mul(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x4> { TODO() }

actual fun simd_mul(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x2> { TODO() }

actual fun simd_mul(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x3> { TODO() }

actual fun simd_mul(/*0*/ __a: kotlin.Double, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x4> { TODO() }

actual fun simd_mul(/*0*/ a: kotlin.Double, /*1*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun simd_mul(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x2> { TODO() }

actual fun simd_mul(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x3> { TODO() }

actual fun simd_mul(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x4> { TODO() }

actual fun simd_mul(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x2> { TODO() }

actual fun simd_mul(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x3> { TODO() }

actual fun simd_mul(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x4> { TODO() }

actual fun simd_mul(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x2> { TODO() }

actual fun simd_mul(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x3> { TODO() }

actual fun simd_mul(/*0*/ __a: kotlin.Float, /*1*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x4> { TODO() }

actual fun simd_mul(/*0*/ a: kotlin.Float, /*1*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x2> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x2> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x2> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x3> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x3> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x3> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x4> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x4> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x4> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x2> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x2> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x2> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x3> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x3> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x3> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x4> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x4> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x4> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x2> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x2> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x2> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x3> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x3> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x3> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x4> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x4> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x4> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x2> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x2> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x2> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x3> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x3> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x3> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x4> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x4> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x4> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x2> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x2> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x2> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x3> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x3> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x3> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x4> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x4> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x4> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x2> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x2> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x2> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x3> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x3> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x3> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x4> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x4> { TODO() }

actual fun simd_mul(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x4> { TODO() }

actual fun simd_mul(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*1*/ a: kotlin.Double): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun simd_mul(/*0*/ p: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*1*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun simd_mul(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*1*/ a: kotlin.Float): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun simd_mul(/*0*/ p: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*1*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun simd_muladd(/*0*/ x: kotlin.Double, /*1*/ y: kotlin.Double, /*2*/ z: kotlin.Double): kotlin.Double { TODO() }

actual fun simd_muladd(/*0*/ x: kotlin.Float, /*1*/ y: kotlin.Float, /*2*/ z: kotlin.Float): kotlin.Float { TODO() }

actual fun simd_negate(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun simd_negate(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun simd_normalize(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun simd_normalize(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun simd_precise_recip(/*0*/ x: kotlin.Double): kotlin.Double { TODO() }

actual fun simd_precise_recip(/*0*/ x: kotlin.Float): kotlin.Float { TODO() }

actual fun simd_precise_rsqrt(/*0*/ x: kotlin.Double): kotlin.Double { TODO() }

actual fun simd_precise_rsqrt(/*0*/ x: kotlin.Float): kotlin.Float { TODO() }

actual fun simd_quaternion(/*0*/ ix: kotlin.Double, /*1*/ iy: kotlin.Double, /*2*/ iz: kotlin.Double, /*3*/ r: kotlin.Double): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun simd_quaternion(/*0*/ ix: kotlin.Float, /*1*/ iy: kotlin.Float, /*2*/ iz: kotlin.Float, /*3*/ r: kotlin.Float): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun simd_quaternion(/*0*/ matrix: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun simd_quaternion(/*0*/ matrix: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun simd_quaternion(/*0*/ matrix: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun simd_quaternion(/*0*/ matrix: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun simd_real(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>): kotlin.Double { TODO() }

actual fun simd_real(/*0*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>): kotlin.Float { TODO() }

actual fun simd_recip(/*0*/ x: kotlin.Double): kotlin.Double { TODO() }

actual fun simd_recip(/*0*/ x: kotlin.Float): kotlin.Float { TODO() }

actual fun simd_rsqrt(/*0*/ x: kotlin.Double): kotlin.Double { TODO() }

actual fun simd_rsqrt(/*0*/ x: kotlin.Float): kotlin.Float { TODO() }

actual fun simd_sign(/*0*/ x: kotlin.Double): kotlin.Double { TODO() }

actual fun simd_sign(/*0*/ x: kotlin.Float): kotlin.Float { TODO() }

actual fun simd_slerp(/*0*/ q0: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*1*/ q1: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*2*/ t: kotlin.Double): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun simd_slerp(/*0*/ q0: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*1*/ q1: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*2*/ t: kotlin.Float): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun simd_slerp_longest(/*0*/ q0: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*1*/ q1: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*2*/ t: kotlin.Double): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun simd_slerp_longest(/*0*/ q0: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*1*/ q1: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*2*/ t: kotlin.Float): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun simd_smoothstep(/*0*/ edge0: kotlin.Double, /*1*/ edge1: kotlin.Double, /*2*/ x: kotlin.Double): kotlin.Double { TODO() }

actual fun simd_smoothstep(/*0*/ edge0: kotlin.Float, /*1*/ edge1: kotlin.Float, /*2*/ x: kotlin.Float): kotlin.Float { TODO() }

actual fun simd_spline(/*0*/ q0: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*1*/ q1: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*2*/ q2: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*3*/ q3: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*4*/ t: kotlin.Double): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun simd_spline(/*0*/ q0: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*1*/ q1: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*2*/ q2: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*3*/ q3: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*4*/ t: kotlin.Float): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun simd_step(/*0*/ edge: kotlin.Double, /*1*/ x: kotlin.Double): kotlin.Double { TODO() }

actual fun simd_step(/*0*/ edge: kotlin.Float, /*1*/ x: kotlin.Float): kotlin.Float { TODO() }

actual fun simd_sub(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x2> { TODO() }

actual fun simd_sub(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x3> { TODO() }

actual fun simd_sub(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x4> { TODO() }

actual fun simd_sub(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x2> { TODO() }

actual fun simd_sub(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x3> { TODO() }

actual fun simd_sub(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x4> { TODO() }

actual fun simd_sub(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x2> { TODO() }

actual fun simd_sub(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x3> { TODO() }

actual fun simd_sub(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x4> { TODO() }

actual fun simd_sub(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x2> { TODO() }

actual fun simd_sub(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x3> { TODO() }

actual fun simd_sub(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x4> { TODO() }

actual fun simd_sub(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x2> { TODO() }

actual fun simd_sub(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x3> { TODO() }

actual fun simd_sub(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x4> { TODO() }

actual fun simd_sub(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x2> { TODO() }

actual fun simd_sub(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x3> { TODO() }

actual fun simd_sub(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x4> { TODO() }

actual fun simd_sub(/*0*/ p: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>, /*1*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatd>): kotlinx.cinterop.CValue<platform.darwin.simd_quatd> { TODO() }

actual fun simd_sub(/*0*/ p: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>, /*1*/ q: kotlinx.cinterop.CValue<platform.darwin.simd_quatf>): kotlinx.cinterop.CValue<platform.darwin.simd_quatf> { TODO() }

actual fun simd_transpose(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x2> { TODO() }

actual fun simd_transpose(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x2> { TODO() }

actual fun simd_transpose(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x2> { TODO() }

actual fun simd_transpose(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x3> { TODO() }

actual fun simd_transpose(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x3> { TODO() }

actual fun simd_transpose(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x3> { TODO() }

actual fun simd_transpose(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_double2x4> { TODO() }

actual fun simd_transpose(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_double3x4> { TODO() }

actual fun simd_transpose(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_double4x4> { TODO() }

actual fun simd_transpose(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x2> { TODO() }

actual fun simd_transpose(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x2> { TODO() }

actual fun simd_transpose(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x2> { TODO() }

actual fun simd_transpose(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x3> { TODO() }

actual fun simd_transpose(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x3> { TODO() }

actual fun simd_transpose(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x3> { TODO() }

actual fun simd_transpose(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>): kotlinx.cinterop.CValue<platform.darwin.simd_float2x4> { TODO() }

actual fun simd_transpose(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>): kotlinx.cinterop.CValue<platform.darwin.simd_float3x4> { TODO() }

actual fun simd_transpose(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>): kotlinx.cinterop.CValue<platform.darwin.simd_float4x4> { TODO() }

actual fun sl_free(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.StringList /* = platform.darwin._stringlist */>?, /*1*/ arg1: kotlin.Int) { TODO() }

actual fun sl_init(): kotlinx.cinterop.CPointer<platform.darwin.StringList /* = platform.darwin._stringlist */>? { TODO() }

actual fun ttyunlock(/*0*/ arg0: kotlin.String?): kotlin.Int { TODO() }

actual fun unw_get_proc_info(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.unw_cursor_t>?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<platform.darwin.unw_proc_info_t>?): kotlin.Int { TODO() }

actual fun unw_getcontext(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.unw_context_t>?): kotlin.Int { TODO() }

actual fun unw_init_local(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.unw_cursor_t>?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<platform.darwin.unw_context_t>?): kotlin.Int { TODO() }

actual fun unw_is_signal_frame(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.unw_cursor_t>?): kotlin.Int { TODO() }

actual fun unw_resume(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.unw_cursor_t>?): kotlin.Int { TODO() }

actual fun unw_step(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.unw_cursor_t>?): kotlin.Int { TODO() }

actual fun utmpxname(/*0*/ arg0: kotlin.String?): kotlin.Int { TODO() }

actual fun wtmpxname(/*0*/ arg0: kotlin.String?): kotlin.Int { TODO() }

final class NDR_record_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var char_rep: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    final var float_rep: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    final var if_vers: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    final var int_rep: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    final var mig_encoding: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    final var mig_vers: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    final var reserved1: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    final var reserved2: kotlin.UByte
        get() = TODO()
        set(value: kotlin.UByte) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

interface OS_xpc_objectProtocol: platform.darwin.NSObjectProtocol {
}

interface OS_xpc_objectProtocolMeta: platform.darwin.NSObjectProtocolMeta {
}

final class __ReplyUnion__clock_priv_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Reply_clock_set_attributes: platform.darwin.__Reply__clock_set_attributes_t
        get() = TODO()

    final val Reply_clock_set_time: platform.darwin.__Reply__clock_set_time_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __ReplyUnion__host_priv_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Reply_host_default_memory_manager: platform.darwin.__Reply__host_default_memory_manager_t
        get() = TODO()

    final val Reply_host_get_UNDServer: platform.darwin.__Reply__host_get_UNDServer_t
        get() = TODO()

    final val Reply_host_get_boot_info: platform.darwin.__Reply__host_get_boot_info_t
        get() = TODO()

    final val Reply_host_get_clock_control: platform.darwin.__Reply__host_get_clock_control_t
        get() = TODO()

    final val Reply_host_get_exception_ports: platform.darwin.__Reply__host_get_exception_ports_t
        get() = TODO()

    final val Reply_host_get_special_port: platform.darwin.__Reply__host_get_special_port_t
        get() = TODO()

    final val Reply_host_priv_statistics: platform.darwin.__Reply__host_priv_statistics_t
        get() = TODO()

    final val Reply_host_processor_set_priv: platform.darwin.__Reply__host_processor_set_priv_t
        get() = TODO()

    final val Reply_host_processor_sets: platform.darwin.__Reply__host_processor_sets_t
        get() = TODO()

    final val Reply_host_processors: platform.darwin.__Reply__host_processors_t
        get() = TODO()

    final val Reply_host_reboot: platform.darwin.__Reply__host_reboot_t
        get() = TODO()

    final val Reply_host_set_UNDServer: platform.darwin.__Reply__host_set_UNDServer_t
        get() = TODO()

    final val Reply_host_set_exception_ports: platform.darwin.__Reply__host_set_exception_ports_t
        get() = TODO()

    final val Reply_host_set_special_port: platform.darwin.__Reply__host_set_special_port_t
        get() = TODO()

    final val Reply_host_swap_exception_ports: platform.darwin.__Reply__host_swap_exception_ports_t
        get() = TODO()

    final val Reply_kext_request: platform.darwin.__Reply__kext_request_t
        get() = TODO()

    final val Reply_kmod_control: platform.darwin.__Reply__kmod_control_t
        get() = TODO()

    final val Reply_kmod_create: platform.darwin.__Reply__kmod_create_t
        get() = TODO()

    final val Reply_kmod_destroy: platform.darwin.__Reply__kmod_destroy_t
        get() = TODO()

    final val Reply_mach_vm_wire: platform.darwin.__Reply__mach_vm_wire_t
        get() = TODO()

    final val Reply_thread_wire: platform.darwin.__Reply__thread_wire_t
        get() = TODO()

    final val Reply_vm_allocate_cpm: platform.darwin.__Reply__vm_allocate_cpm_t
        get() = TODO()

    final val Reply_vm_wire: platform.darwin.__Reply__vm_wire_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __ReplyUnion__host_security_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Reply_host_security_create_task_token: platform.darwin.__Reply__host_security_create_task_token_t
        get() = TODO()

    final val Reply_host_security_set_task_token: platform.darwin.__Reply__host_security_set_task_token_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __ReplyUnion__lock_set_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Reply_lock_acquire: platform.darwin.__Reply__lock_acquire_t
        get() = TODO()

    final val Reply_lock_handoff: platform.darwin.__Reply__lock_handoff_t
        get() = TODO()

    final val Reply_lock_handoff_accept: platform.darwin.__Reply__lock_handoff_accept_t
        get() = TODO()

    final val Reply_lock_make_stable: platform.darwin.__Reply__lock_make_stable_t
        get() = TODO()

    final val Reply_lock_release: platform.darwin.__Reply__lock_release_t
        get() = TODO()

    final val Reply_lock_try: platform.darwin.__Reply__lock_try_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __ReplyUnion__mach_host_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Reply__host_page_size: platform.darwin.__Reply___host_page_size_t
        get() = TODO()

    final val Reply_host_check_multiuser_mode: platform.darwin.__Reply__host_check_multiuser_mode_t
        get() = TODO()

    final val Reply_host_create_mach_voucher: platform.darwin.__Reply__host_create_mach_voucher_t
        get() = TODO()

    final val Reply_host_get_atm_diagnostic_flag: platform.darwin.__Reply__host_get_atm_diagnostic_flag_t
        get() = TODO()

    final val Reply_host_get_clock_service: platform.darwin.__Reply__host_get_clock_service_t
        get() = TODO()

    final val Reply_host_get_io_master: platform.darwin.__Reply__host_get_io_master_t
        get() = TODO()

    final val Reply_host_get_multiuser_config_flags: platform.darwin.__Reply__host_get_multiuser_config_flags_t
        get() = TODO()

    final val Reply_host_info: platform.darwin.__Reply__host_info_t
        get() = TODO()

    final val Reply_host_kernel_version: platform.darwin.__Reply__host_kernel_version_t
        get() = TODO()

    final val Reply_host_lockgroup_info: platform.darwin.__Reply__host_lockgroup_info_t
        get() = TODO()

    final val Reply_host_processor_info: platform.darwin.__Reply__host_processor_info_t
        get() = TODO()

    final val Reply_host_register_mach_voucher_attr_manager: platform.darwin.__Reply__host_register_mach_voucher_attr_manager_t
        get() = TODO()

    final val Reply_host_register_well_known_mach_voucher_attr_manager: platform.darwin.__Reply__host_register_well_known_mach_voucher_attr_manager_t
        get() = TODO()

    final val Reply_host_request_notification: platform.darwin.__Reply__host_request_notification_t
        get() = TODO()

    final val Reply_host_set_atm_diagnostic_flag: platform.darwin.__Reply__host_set_atm_diagnostic_flag_t
        get() = TODO()

    final val Reply_host_set_multiuser_config_flags: platform.darwin.__Reply__host_set_multiuser_config_flags_t
        get() = TODO()

    final val Reply_host_statistics: platform.darwin.__Reply__host_statistics_t
        get() = TODO()

    final val Reply_host_statistics64: platform.darwin.__Reply__host_statistics64_t
        get() = TODO()

    final val Reply_host_virtual_physical_table_info: platform.darwin.__Reply__host_virtual_physical_table_info_t
        get() = TODO()

    final val Reply_kmod_get_info: platform.darwin.__Reply__kmod_get_info_t
        get() = TODO()

    final val Reply_mach_memory_info: platform.darwin.__Reply__mach_memory_info_t
        get() = TODO()

    final val Reply_mach_memory_object_memory_entry: platform.darwin.__Reply__mach_memory_object_memory_entry_t
        get() = TODO()

    final val Reply_mach_memory_object_memory_entry_64: platform.darwin.__Reply__mach_memory_object_memory_entry_64_t
        get() = TODO()

    final val Reply_mach_zone_info: platform.darwin.__Reply__mach_zone_info_t
        get() = TODO()

    final val Reply_mach_zone_info_for_zone: platform.darwin.__Reply__mach_zone_info_for_zone_t
        get() = TODO()

    final val Reply_processor_set_create: platform.darwin.__Reply__processor_set_create_t
        get() = TODO()

    final val Reply_processor_set_default: platform.darwin.__Reply__processor_set_default_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __ReplyUnion__mach_port_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Reply_mach_port_allocate: platform.darwin.__Reply__mach_port_allocate_t
        get() = TODO()

    final val Reply_mach_port_allocate_full: platform.darwin.__Reply__mach_port_allocate_full_t
        get() = TODO()

    final val Reply_mach_port_allocate_name: platform.darwin.__Reply__mach_port_allocate_name_t
        get() = TODO()

    final val Reply_mach_port_allocate_qos: platform.darwin.__Reply__mach_port_allocate_qos_t
        get() = TODO()

    final val Reply_mach_port_construct: platform.darwin.__Reply__mach_port_construct_t
        get() = TODO()

    final val Reply_mach_port_deallocate: platform.darwin.__Reply__mach_port_deallocate_t
        get() = TODO()

    final val Reply_mach_port_destroy: platform.darwin.__Reply__mach_port_destroy_t
        get() = TODO()

    final val Reply_mach_port_destruct: platform.darwin.__Reply__mach_port_destruct_t
        get() = TODO()

    final val Reply_mach_port_dnrequest_info: platform.darwin.__Reply__mach_port_dnrequest_info_t
        get() = TODO()

    final val Reply_mach_port_extract_member: platform.darwin.__Reply__mach_port_extract_member_t
        get() = TODO()

    final val Reply_mach_port_extract_right: platform.darwin.__Reply__mach_port_extract_right_t
        get() = TODO()

    final val Reply_mach_port_get_attributes: platform.darwin.__Reply__mach_port_get_attributes_t
        get() = TODO()

    final val Reply_mach_port_get_context: platform.darwin.__Reply__mach_port_get_context_t
        get() = TODO()

    final val Reply_mach_port_get_refs: platform.darwin.__Reply__mach_port_get_refs_t
        get() = TODO()

    final val Reply_mach_port_get_set_status: platform.darwin.__Reply__mach_port_get_set_status_t
        get() = TODO()

    final val Reply_mach_port_get_srights: platform.darwin.__Reply__mach_port_get_srights_t
        get() = TODO()

    final val Reply_mach_port_guard: platform.darwin.__Reply__mach_port_guard_t
        get() = TODO()

    final val Reply_mach_port_insert_member: platform.darwin.__Reply__mach_port_insert_member_t
        get() = TODO()

    final val Reply_mach_port_insert_right: platform.darwin.__Reply__mach_port_insert_right_t
        get() = TODO()

    final val Reply_mach_port_kernel_object: platform.darwin.__Reply__mach_port_kernel_object_t
        get() = TODO()

    final val Reply_mach_port_kobject: platform.darwin.__Reply__mach_port_kobject_t
        get() = TODO()

    final val Reply_mach_port_mod_refs: platform.darwin.__Reply__mach_port_mod_refs_t
        get() = TODO()

    final val Reply_mach_port_move_member: platform.darwin.__Reply__mach_port_move_member_t
        get() = TODO()

    final val Reply_mach_port_names: platform.darwin.__Reply__mach_port_names_t
        get() = TODO()

    final val Reply_mach_port_peek: platform.darwin.__Reply__mach_port_peek_t
        get() = TODO()

    final val Reply_mach_port_rename: platform.darwin.__Reply__mach_port_rename_t
        get() = TODO()

    final val Reply_mach_port_request_notification: platform.darwin.__Reply__mach_port_request_notification_t
        get() = TODO()

    final val Reply_mach_port_set_attributes: platform.darwin.__Reply__mach_port_set_attributes_t
        get() = TODO()

    final val Reply_mach_port_set_context: platform.darwin.__Reply__mach_port_set_context_t
        get() = TODO()

    final val Reply_mach_port_set_mscount: platform.darwin.__Reply__mach_port_set_mscount_t
        get() = TODO()

    final val Reply_mach_port_set_seqno: platform.darwin.__Reply__mach_port_set_seqno_t
        get() = TODO()

    final val Reply_mach_port_space_basic_info: platform.darwin.__Reply__mach_port_space_basic_info_t
        get() = TODO()

    final val Reply_mach_port_space_info: platform.darwin.__Reply__mach_port_space_info_t
        get() = TODO()

    final val Reply_mach_port_type: platform.darwin.__Reply__mach_port_type_t
        get() = TODO()

    final val Reply_mach_port_unguard: platform.darwin.__Reply__mach_port_unguard_t
        get() = TODO()

    final val Reply_task_set_port_space: platform.darwin.__Reply__task_set_port_space_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __ReplyUnion__processor_set_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Reply_processor_set_destroy: platform.darwin.__Reply__processor_set_destroy_t
        get() = TODO()

    final val Reply_processor_set_info: platform.darwin.__Reply__processor_set_info_t
        get() = TODO()

    final val Reply_processor_set_max_priority: platform.darwin.__Reply__processor_set_max_priority_t
        get() = TODO()

    final val Reply_processor_set_policy_control: platform.darwin.__Reply__processor_set_policy_control_t
        get() = TODO()

    final val Reply_processor_set_policy_disable: platform.darwin.__Reply__processor_set_policy_disable_t
        get() = TODO()

    final val Reply_processor_set_policy_enable: platform.darwin.__Reply__processor_set_policy_enable_t
        get() = TODO()

    final val Reply_processor_set_stack_usage: platform.darwin.__Reply__processor_set_stack_usage_t
        get() = TODO()

    final val Reply_processor_set_statistics: platform.darwin.__Reply__processor_set_statistics_t
        get() = TODO()

    final val Reply_processor_set_tasks: platform.darwin.__Reply__processor_set_tasks_t
        get() = TODO()

    final val Reply_processor_set_threads: platform.darwin.__Reply__processor_set_threads_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __ReplyUnion__processor_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Reply_processor_assign: platform.darwin.__Reply__processor_assign_t
        get() = TODO()

    final val Reply_processor_control: platform.darwin.__Reply__processor_control_t
        get() = TODO()

    final val Reply_processor_exit: platform.darwin.__Reply__processor_exit_t
        get() = TODO()

    final val Reply_processor_get_assignment: platform.darwin.__Reply__processor_get_assignment_t
        get() = TODO()

    final val Reply_processor_info: platform.darwin.__Reply__processor_info_t
        get() = TODO()

    final val Reply_processor_start: platform.darwin.__Reply__processor_start_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __ReplyUnion__task_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Reply_lock_set_create: platform.darwin.__Reply__lock_set_create_t
        get() = TODO()

    final val Reply_lock_set_destroy: platform.darwin.__Reply__lock_set_destroy_t
        get() = TODO()

    final val Reply_mach_ports_lookup: platform.darwin.__Reply__mach_ports_lookup_t
        get() = TODO()

    final val Reply_mach_ports_register: platform.darwin.__Reply__mach_ports_register_t
        get() = TODO()

    final val Reply_semaphore_create: platform.darwin.__Reply__semaphore_create_t
        get() = TODO()

    final val Reply_semaphore_destroy: platform.darwin.__Reply__semaphore_destroy_t
        get() = TODO()

    final val Reply_task_assign: platform.darwin.__Reply__task_assign_t
        get() = TODO()

    final val Reply_task_assign_default: platform.darwin.__Reply__task_assign_default_t
        get() = TODO()

    final val Reply_task_create: platform.darwin.__Reply__task_create_t
        get() = TODO()

    final val Reply_task_generate_corpse: platform.darwin.__Reply__task_generate_corpse_t
        get() = TODO()

    final val Reply_task_get_assignment: platform.darwin.__Reply__task_get_assignment_t
        get() = TODO()

    final val Reply_task_get_dyld_image_infos: platform.darwin.__Reply__task_get_dyld_image_infos_t
        get() = TODO()

    final val Reply_task_get_emulation_vector: platform.darwin.__Reply__task_get_emulation_vector_t
        get() = TODO()

    final val Reply_task_get_exception_ports: platform.darwin.__Reply__task_get_exception_ports_t
        get() = TODO()

    final val Reply_task_get_mach_voucher: platform.darwin.__Reply__task_get_mach_voucher_t
        get() = TODO()

    final val Reply_task_get_special_port: platform.darwin.__Reply__task_get_special_port_t
        get() = TODO()

    final val Reply_task_get_state: platform.darwin.__Reply__task_get_state_t
        get() = TODO()

    final val Reply_task_info: platform.darwin.__Reply__task_info_t
        get() = TODO()

    final val Reply_task_inspect: platform.darwin.__Reply__task_inspect_t
        get() = TODO()

    final val Reply_task_map_corpse_info: platform.darwin.__Reply__task_map_corpse_info_t
        get() = TODO()

    final val Reply_task_map_corpse_info_64: platform.darwin.__Reply__task_map_corpse_info_64_t
        get() = TODO()

    final val Reply_task_policy: platform.darwin.__Reply__task_policy_t
        get() = TODO()

    final val Reply_task_policy_get: platform.darwin.__Reply__task_policy_get_t
        get() = TODO()

    final val Reply_task_policy_set: platform.darwin.__Reply__task_policy_set_t
        get() = TODO()

    final val Reply_task_purgable_info: platform.darwin.__Reply__task_purgable_info_t
        get() = TODO()

    final val Reply_task_register_dyld_get_process_state: platform.darwin.__Reply__task_register_dyld_get_process_state_t
        get() = TODO()

    final val Reply_task_register_dyld_image_infos: platform.darwin.__Reply__task_register_dyld_image_infos_t
        get() = TODO()

    final val Reply_task_register_dyld_set_dyld_state: platform.darwin.__Reply__task_register_dyld_set_dyld_state_t
        get() = TODO()

    final val Reply_task_register_dyld_shared_cache_image_info: platform.darwin.__Reply__task_register_dyld_shared_cache_image_info_t
        get() = TODO()

    final val Reply_task_resume: platform.darwin.__Reply__task_resume_t
        get() = TODO()

    final val Reply_task_resume2: platform.darwin.__Reply__task_resume2_t
        get() = TODO()

    final val Reply_task_sample: platform.darwin.__Reply__task_sample_t
        get() = TODO()

    final val Reply_task_set_emulation: platform.darwin.__Reply__task_set_emulation_t
        get() = TODO()

    final val Reply_task_set_emulation_vector: platform.darwin.__Reply__task_set_emulation_vector_t
        get() = TODO()

    final val Reply_task_set_exception_ports: platform.darwin.__Reply__task_set_exception_ports_t
        get() = TODO()

    final val Reply_task_set_info: platform.darwin.__Reply__task_set_info_t
        get() = TODO()

    final val Reply_task_set_mach_voucher: platform.darwin.__Reply__task_set_mach_voucher_t
        get() = TODO()

    final val Reply_task_set_phys_footprint_limit: platform.darwin.__Reply__task_set_phys_footprint_limit_t
        get() = TODO()

    final val Reply_task_set_policy: platform.darwin.__Reply__task_set_policy_t
        get() = TODO()

    final val Reply_task_set_ras_pc: platform.darwin.__Reply__task_set_ras_pc_t
        get() = TODO()

    final val Reply_task_set_special_port: platform.darwin.__Reply__task_set_special_port_t
        get() = TODO()

    final val Reply_task_set_state: platform.darwin.__Reply__task_set_state_t
        get() = TODO()

    final val Reply_task_suspend: platform.darwin.__Reply__task_suspend_t
        get() = TODO()

    final val Reply_task_suspend2: platform.darwin.__Reply__task_suspend2_t
        get() = TODO()

    final val Reply_task_swap_exception_ports: platform.darwin.__Reply__task_swap_exception_ports_t
        get() = TODO()

    final val Reply_task_swap_mach_voucher: platform.darwin.__Reply__task_swap_mach_voucher_t
        get() = TODO()

    final val Reply_task_terminate: platform.darwin.__Reply__task_terminate_t
        get() = TODO()

    final val Reply_task_threads: platform.darwin.__Reply__task_threads_t
        get() = TODO()

    final val Reply_task_unregister_dyld_image_infos: platform.darwin.__Reply__task_unregister_dyld_image_infos_t
        get() = TODO()

    final val Reply_task_zone_info: platform.darwin.__Reply__task_zone_info_t
        get() = TODO()

    final val Reply_thread_create: platform.darwin.__Reply__thread_create_t
        get() = TODO()

    final val Reply_thread_create_running: platform.darwin.__Reply__thread_create_running_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __ReplyUnion__thread_act_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Reply_act_get_state: platform.darwin.__Reply__act_get_state_t
        get() = TODO()

    final val Reply_act_set_state: platform.darwin.__Reply__act_set_state_t
        get() = TODO()

    final val Reply_etap_trace_thread: platform.darwin.__Reply__etap_trace_thread_t
        get() = TODO()

    final val Reply_thread_abort: platform.darwin.__Reply__thread_abort_t
        get() = TODO()

    final val Reply_thread_abort_safely: platform.darwin.__Reply__thread_abort_safely_t
        get() = TODO()

    final val Reply_thread_assign: platform.darwin.__Reply__thread_assign_t
        get() = TODO()

    final val Reply_thread_assign_default: platform.darwin.__Reply__thread_assign_default_t
        get() = TODO()

    final val Reply_thread_depress_abort: platform.darwin.__Reply__thread_depress_abort_t
        get() = TODO()

    final val Reply_thread_get_assignment: platform.darwin.__Reply__thread_get_assignment_t
        get() = TODO()

    final val Reply_thread_get_exception_ports: platform.darwin.__Reply__thread_get_exception_ports_t
        get() = TODO()

    final val Reply_thread_get_mach_voucher: platform.darwin.__Reply__thread_get_mach_voucher_t
        get() = TODO()

    final val Reply_thread_get_special_port: platform.darwin.__Reply__thread_get_special_port_t
        get() = TODO()

    final val Reply_thread_get_state: platform.darwin.__Reply__thread_get_state_t
        get() = TODO()

    final val Reply_thread_info: platform.darwin.__Reply__thread_info_t
        get() = TODO()

    final val Reply_thread_policy: platform.darwin.__Reply__thread_policy_t
        get() = TODO()

    final val Reply_thread_policy_get: platform.darwin.__Reply__thread_policy_get_t
        get() = TODO()

    final val Reply_thread_policy_set: platform.darwin.__Reply__thread_policy_set_t
        get() = TODO()

    final val Reply_thread_resume: platform.darwin.__Reply__thread_resume_t
        get() = TODO()

    final val Reply_thread_sample: platform.darwin.__Reply__thread_sample_t
        get() = TODO()

    final val Reply_thread_set_exception_ports: platform.darwin.__Reply__thread_set_exception_ports_t
        get() = TODO()

    final val Reply_thread_set_mach_voucher: platform.darwin.__Reply__thread_set_mach_voucher_t
        get() = TODO()

    final val Reply_thread_set_policy: platform.darwin.__Reply__thread_set_policy_t
        get() = TODO()

    final val Reply_thread_set_special_port: platform.darwin.__Reply__thread_set_special_port_t
        get() = TODO()

    final val Reply_thread_set_state: platform.darwin.__Reply__thread_set_state_t
        get() = TODO()

    final val Reply_thread_suspend: platform.darwin.__Reply__thread_suspend_t
        get() = TODO()

    final val Reply_thread_swap_exception_ports: platform.darwin.__Reply__thread_swap_exception_ports_t
        get() = TODO()

    final val Reply_thread_swap_mach_voucher: platform.darwin.__Reply__thread_swap_mach_voucher_t
        get() = TODO()

    final val Reply_thread_terminate: platform.darwin.__Reply__thread_terminate_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __ReplyUnion__vm_map_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Reply_mach_make_memory_entry: platform.darwin.__Reply__mach_make_memory_entry_t
        get() = TODO()

    final val Reply_mach_make_memory_entry_64: platform.darwin.__Reply__mach_make_memory_entry_64_t
        get() = TODO()

    final val Reply_mach_vm_region_info: platform.darwin.__Reply__mach_vm_region_info_t
        get() = TODO()

    final val Reply_mach_vm_region_info_64: platform.darwin.__Reply__mach_vm_region_info_64_t
        get() = TODO()

    final val Reply_task_wire: platform.darwin.__Reply__task_wire_t
        get() = TODO()

    final val Reply_vm_allocate: platform.darwin.__Reply__vm_allocate_t
        get() = TODO()

    final val Reply_vm_behavior_set: platform.darwin.__Reply__vm_behavior_set_t
        get() = TODO()

    final val Reply_vm_copy: platform.darwin.__Reply__vm_copy_t
        get() = TODO()

    final val Reply_vm_deallocate: platform.darwin.__Reply__vm_deallocate_t
        get() = TODO()

    final val Reply_vm_inherit: platform.darwin.__Reply__vm_inherit_t
        get() = TODO()

    final val Reply_vm_machine_attribute: platform.darwin.__Reply__vm_machine_attribute_t
        get() = TODO()

    final val Reply_vm_map: platform.darwin.__Reply__vm_map_t
        get() = TODO()

    final val Reply_vm_map_64: platform.darwin.__Reply__vm_map_64_t
        get() = TODO()

    final val Reply_vm_map_exec_lockdown: platform.darwin.__Reply__vm_map_exec_lockdown_t
        get() = TODO()

    final val Reply_vm_map_page_query: platform.darwin.__Reply__vm_map_page_query_t
        get() = TODO()

    final val Reply_vm_mapped_pages_info: platform.darwin.__Reply__vm_mapped_pages_info_t
        get() = TODO()

    final val Reply_vm_msync: platform.darwin.__Reply__vm_msync_t
        get() = TODO()

    final val Reply_vm_protect: platform.darwin.__Reply__vm_protect_t
        get() = TODO()

    final val Reply_vm_purgable_control: platform.darwin.__Reply__vm_purgable_control_t
        get() = TODO()

    final val Reply_vm_read: platform.darwin.__Reply__vm_read_t
        get() = TODO()

    final val Reply_vm_read_list: platform.darwin.__Reply__vm_read_list_t
        get() = TODO()

    final val Reply_vm_read_overwrite: platform.darwin.__Reply__vm_read_overwrite_t
        get() = TODO()

    final val Reply_vm_region: platform.darwin.__Reply__vm_region_t
        get() = TODO()

    final val Reply_vm_region_64: platform.darwin.__Reply__vm_region_64_t
        get() = TODO()

    final val Reply_vm_region_recurse: platform.darwin.__Reply__vm_region_recurse_t
        get() = TODO()

    final val Reply_vm_region_recurse_64: platform.darwin.__Reply__vm_region_recurse_64_t
        get() = TODO()

    final val Reply_vm_remap: platform.darwin.__Reply__vm_remap_t
        get() = TODO()

    final val Reply_vm_write: platform.darwin.__Reply__vm_write_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply___host_page_size_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var out_page_size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__act_get_state_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final val old_state: kotlinx.cinterop.CArrayPointer<platform.darwin.natural_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var old_stateCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__act_set_state_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__clock_set_attributes_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__clock_set_time_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__etap_trace_thread_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_check_multiuser_mode_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var multiuser_mode: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_create_mach_voucher_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val voucher: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_default_memory_manager_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val default_manager: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_get_UNDServer_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val server: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_get_atm_diagnostic_flag_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var diagnostic_flag: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_get_boot_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final val boot_info: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var boot_infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final var boot_infoOffset: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_get_clock_control_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val clock_ctrl: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_get_clock_service_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val clock_serv: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_get_exception_ports_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val masks: kotlinx.cinterop.CArrayPointer<platform.darwin.exception_mask_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_mask_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.darwin.exception_mask_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var masksCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val old_behaviors: kotlinx.cinterop.CArrayPointer<platform.darwin.exception_behavior_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.exception_behavior_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.exception_behavior_t /* = kotlin.Int */>> */
        get() = TODO()

    final val old_flavors: kotlinx.cinterop.CArrayPointer<platform.darwin.thread_state_flavor_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.thread_state_flavor_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.thread_state_flavor_t /* = kotlin.Int */>> */
        get() = TODO()

    final val old_handlers: kotlinx.cinterop.CArrayPointer<platform.darwin.mach_msg_port_descriptor_t> /* = kotlinx.cinterop.CPointer<platform.darwin.mach_msg_port_descriptor_t> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_get_io_master_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val io_master: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_get_multiuser_config_flags_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var multiuser_flags: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_get_special_port_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val port: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final val host_info_out: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var host_info_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_kernel_version_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final val kernel_version: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var kernel_versionCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final var kernel_versionOffset: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_lockgroup_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val lockgroup_info: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var lockgroup_infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_priv_statistics_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final val host_info_out: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var host_info_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_processor_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var out_processor_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final val out_processor_info: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var out_processor_infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_processor_set_priv_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val set: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_processor_sets_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val processor_sets: platform.darwin.mach_msg_ool_ports_descriptor_t
        get() = TODO()

    final var processor_setsCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_processors_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val out_processor_list: platform.darwin.mach_msg_ool_ports_descriptor_t
        get() = TODO()

    final var out_processor_listCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_reboot_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_register_mach_voucher_attr_manager_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val new_attr_control: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var new_key: platform.darwin.mach_voucher_attr_key_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_voucher_attr_key_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_register_well_known_mach_voucher_attr_manager_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val new_attr_control: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_request_notification_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_security_create_task_token_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val child_task: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_security_set_task_token_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_set_UNDServer_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_set_atm_diagnostic_flag_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_set_exception_ports_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_set_multiuser_config_flags_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_set_special_port_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_statistics64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final val host_info64_out: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var host_info64_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_statistics_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final val host_info_out: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var host_info_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_swap_exception_ports_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val masks: kotlinx.cinterop.CArrayPointer<platform.darwin.exception_mask_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_mask_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.darwin.exception_mask_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var masksCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val old_behaviors: kotlinx.cinterop.CArrayPointer<platform.darwin.exception_behavior_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.exception_behavior_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.exception_behavior_t /* = kotlin.Int */>> */
        get() = TODO()

    final val old_flavors: kotlinx.cinterop.CArrayPointer<platform.darwin.thread_state_flavor_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.thread_state_flavor_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.thread_state_flavor_t /* = kotlin.Int */>> */
        get() = TODO()

    final val old_handlerss: kotlinx.cinterop.CArrayPointer<platform.darwin.mach_msg_port_descriptor_t> /* = kotlinx.cinterop.CPointer<platform.darwin.mach_msg_port_descriptor_t> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__host_virtual_physical_table_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val info: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__kext_request_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val log_data: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var log_dataCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var op_result: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final val response_data: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var response_dataCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__kmod_control_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val data: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var dataCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__kmod_create_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var module: platform.darwin.kmod_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kmod_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__kmod_destroy_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__kmod_get_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val modules: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var modulesCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__lock_acquire_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__lock_handoff_accept_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__lock_handoff_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__lock_make_stable_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__lock_release_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__lock_set_create_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val new_lock_set: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__lock_set_destroy_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__lock_try_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_make_memory_entry_64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val object_handle: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var size: platform.darwin.memory_object_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.memory_object_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_make_memory_entry_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val object_handle: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_memory_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val info: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val memory_info: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var memory_infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val names: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var namesCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_memory_object_memory_entry_64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val entry_handle: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_memory_object_memory_entry_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val entry_handle: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_allocate_full_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final val qos: platform.darwin.mach_port_qos_t /* = platform.darwin.mach_port_qos */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_allocate_name_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_allocate_qos_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final val qos: platform.darwin.mach_port_qos_t /* = platform.darwin.mach_port_qos */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_allocate_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_construct_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_deallocate_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_destroy_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_destruct_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_dnrequest_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var dnr_total: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var dnr_used: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_extract_member_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_extract_right_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val poly: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_get_attributes_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final val port_info_out: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var port_info_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_get_context_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var context: platform.darwin.mach_port_context_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_port_context_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_get_refs_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var refs: platform.darwin.mach_port_urefs_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_urefs_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_get_set_status_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val members: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var membersCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_get_srights_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var srights: platform.darwin.mach_port_rights_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_rights_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_guard_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_insert_member_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_insert_right_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_kernel_object_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var object_addr: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var object_type: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_kobject_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var object_addr: platform.darwin.mach_vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_address_t /* = kotlin.ULong */) = TODO()

    final var object_type: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_mod_refs_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_move_member_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_names_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val names: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var namesCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val types: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var typesCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_peek_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var msg_idp: platform.darwin.mach_msg_id_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.mach_msg_id_t /* = kotlin.Int */) = TODO()

    final var msg_sizep: platform.darwin.mach_msg_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_size_t /* = kotlin.UInt */) = TODO()

    final var request_seqnop: platform.darwin.mach_port_seqno_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_seqno_t /* = kotlin.UInt */) = TODO()

    final val trailer_infop: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var trailer_infopCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_rename_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_request_notification_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val previous: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_set_attributes_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_set_context_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_set_mscount_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_set_seqno_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_space_basic_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final val basic_info: platform.darwin.ipc_info_space_basic_t /* = platform.darwin.ipc_info_space_basic */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_space_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val space_info: platform.darwin.ipc_info_space_t /* = platform.darwin.ipc_info_space */
        get() = TODO()

    final val table_info: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var table_infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val tree_info: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var tree_infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_type_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var ptype: platform.darwin.mach_port_type_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_type_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_port_unguard_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_ports_lookup_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val init_port_set: platform.darwin.mach_msg_ool_ports_descriptor_t
        get() = TODO()

    final var init_port_setCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_ports_register_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_vm_region_info_64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val objects: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var objectsCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val region: platform.darwin.vm_info_region_64_t /* = platform.darwin.vm_info_region_64 */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_vm_region_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val objects: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var objectsCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val region: platform.darwin.vm_info_region_t /* = platform.darwin.vm_info_region */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_vm_wire_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_zone_info_for_zone_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final val info: platform.darwin.mach_zone_info_t /* = platform.darwin.mach_zone_info_data */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__mach_zone_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val info: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val names: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var namesCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__processor_assign_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__processor_control_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__processor_exit_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__processor_get_assignment_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val assigned_set: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__processor_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val host: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val processor_info_out: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var processor_info_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__processor_set_create_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val new_name: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val new_set: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__processor_set_default_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val default_set: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__processor_set_destroy_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__processor_set_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val host: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val info_out: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var info_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__processor_set_max_priority_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__processor_set_policy_control_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__processor_set_policy_disable_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__processor_set_policy_enable_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__processor_set_stack_usage_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var ltotal: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var maxstack: platform.darwin.vm_offset_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_offset_t /* = kotlin.ULong */) = TODO()

    final var maxusage: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    final var resident: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    final var space: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__processor_set_statistics_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final val info_out: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var info_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__processor_set_tasks_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val task_list: platform.darwin.mach_msg_ool_ports_descriptor_t
        get() = TODO()

    final var task_listCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__processor_set_threads_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val thread_list: platform.darwin.mach_msg_ool_ports_descriptor_t
        get() = TODO()

    final var thread_listCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__processor_start_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__semaphore_create_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val semaphore: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__semaphore_destroy_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_assign_default_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_assign_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_create_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val child_task: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_generate_corpse_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val corpse_task_port: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_get_assignment_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val assigned_set: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_get_dyld_image_infos_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val dyld_images: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var dyld_imagesCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_get_emulation_vector_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val emulation_vector: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var emulation_vectorCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var vector_start: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_get_exception_ports_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val masks: kotlinx.cinterop.CArrayPointer<platform.darwin.exception_mask_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_mask_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.darwin.exception_mask_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var masksCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val old_behaviors: kotlinx.cinterop.CArrayPointer<platform.darwin.exception_behavior_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.exception_behavior_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.exception_behavior_t /* = kotlin.Int */>> */
        get() = TODO()

    final val old_flavors: kotlinx.cinterop.CArrayPointer<platform.darwin.thread_state_flavor_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.thread_state_flavor_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.thread_state_flavor_t /* = kotlin.Int */>> */
        get() = TODO()

    final val old_handlers: kotlinx.cinterop.CArrayPointer<platform.darwin.mach_msg_port_descriptor_t> /* = kotlinx.cinterop.CPointer<platform.darwin.mach_msg_port_descriptor_t> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_get_mach_voucher_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val voucher: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_get_special_port_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val special_port: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_get_state_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final val old_state: kotlinx.cinterop.CArrayPointer<platform.darwin.natural_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var old_stateCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final val task_info_out: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var task_info_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_inspect_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final val info_out: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var info_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_map_corpse_info_64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var kcd_addr_begin: platform.darwin.mach_vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_address_t /* = kotlin.ULong */) = TODO()

    final var kcd_size: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_map_corpse_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var kcd_addr_begin: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var kcd_size: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_policy_get_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var get_default: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final val policy_info: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var policy_infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_policy_set_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_policy_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_purgable_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final val stats: platform.darwin.task_purgable_info_t /* = platform.darwin.vm_purgeable_info */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_register_dyld_get_process_state_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final val dyld_process_state: platform.darwin.dyld_kernel_process_info_t /* = platform.darwin.dyld_kernel_process_info */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_register_dyld_image_infos_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_register_dyld_set_dyld_state_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_register_dyld_shared_cache_image_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_resume2_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_resume_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_sample_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_set_emulation_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_set_emulation_vector_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_set_exception_ports_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_set_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_set_mach_voucher_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_set_phys_footprint_limit_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var old_limit: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_set_policy_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_set_port_space_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_set_ras_pc_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_set_special_port_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_set_state_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_suspend2_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val suspend_token: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_suspend_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_swap_exception_ports_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val masks: kotlinx.cinterop.CArrayPointer<platform.darwin.exception_mask_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_mask_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.darwin.exception_mask_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var masksCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val old_behaviors: kotlinx.cinterop.CArrayPointer<platform.darwin.exception_behavior_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.exception_behavior_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.exception_behavior_t /* = kotlin.Int */>> */
        get() = TODO()

    final val old_flavors: kotlinx.cinterop.CArrayPointer<platform.darwin.thread_state_flavor_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.thread_state_flavor_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.thread_state_flavor_t /* = kotlin.Int */>> */
        get() = TODO()

    final val old_handlerss: kotlinx.cinterop.CArrayPointer<platform.darwin.mach_msg_port_descriptor_t> /* = kotlinx.cinterop.CPointer<platform.darwin.mach_msg_port_descriptor_t> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_swap_mach_voucher_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val old_voucher: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_terminate_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_threads_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val act_list: platform.darwin.mach_msg_ool_ports_descriptor_t
        get() = TODO()

    final var act_listCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_unregister_dyld_image_infos_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_wire_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__task_zone_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val info: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val names: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var namesCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_abort_safely_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_abort_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_assign_default_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_assign_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_create_running_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val child_act: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_create_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val child_act: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_depress_abort_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_get_assignment_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val assigned_set: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_get_exception_ports_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val masks: kotlinx.cinterop.CArrayPointer<platform.darwin.exception_mask_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_mask_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.darwin.exception_mask_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var masksCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val old_behaviors: kotlinx.cinterop.CArrayPointer<platform.darwin.exception_behavior_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.exception_behavior_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.exception_behavior_t /* = kotlin.Int */>> */
        get() = TODO()

    final val old_flavors: kotlinx.cinterop.CArrayPointer<platform.darwin.thread_state_flavor_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.thread_state_flavor_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.thread_state_flavor_t /* = kotlin.Int */>> */
        get() = TODO()

    final val old_handlers: kotlinx.cinterop.CArrayPointer<platform.darwin.mach_msg_port_descriptor_t> /* = kotlinx.cinterop.CPointer<platform.darwin.mach_msg_port_descriptor_t> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_get_mach_voucher_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val voucher: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_get_special_port_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val special_port: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_get_state_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final val old_state: kotlinx.cinterop.CArrayPointer<platform.darwin.natural_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var old_stateCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final val thread_info_out: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var thread_info_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_policy_get_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var get_default: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final val policy_info: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var policy_infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_policy_set_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_policy_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_resume_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_sample_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_set_exception_ports_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_set_mach_voucher_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_set_policy_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_set_special_port_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_set_state_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_suspend_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_swap_exception_ports_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val masks: kotlinx.cinterop.CArrayPointer<platform.darwin.exception_mask_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_mask_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.darwin.exception_mask_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var masksCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val old_behaviors: kotlinx.cinterop.CArrayPointer<platform.darwin.exception_behavior_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.exception_behavior_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.exception_behavior_t /* = kotlin.Int */>> */
        get() = TODO()

    final val old_flavors: kotlinx.cinterop.CArrayPointer<platform.darwin.thread_state_flavor_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.thread_state_flavor_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.thread_state_flavor_t /* = kotlin.Int */>> */
        get() = TODO()

    final val old_handlers: kotlinx.cinterop.CArrayPointer<platform.darwin.mach_msg_port_descriptor_t> /* = kotlinx.cinterop.CPointer<platform.darwin.mach_msg_port_descriptor_t> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_swap_mach_voucher_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val old_voucher: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_terminate_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__thread_wire_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_allocate_cpm_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_allocate_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_behavior_set_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_copy_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_deallocate_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_inherit_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_machine_attribute_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var value: platform.darwin.vm_machine_attribute_val_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_machine_attribute_val_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_map_64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_map_exec_lockdown_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_map_page_query_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var disposition: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var ref_count: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_map_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_mapped_pages_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val pages: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var pagesCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_msync_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_protect_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_purgable_control_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var state: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_read_list_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final val data_list: platform.darwin.vm_read_entry_t /* = kotlinx.cinterop.CPointer<platform.darwin.vm_read_entry> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_read_overwrite_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var outsize: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_read_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val data: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var dataCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_region_64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final val info: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<kotlin.Int>> */
        get() = TODO()

    final var infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val object_name: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_region_recurse_64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final val info: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<kotlin.Int>> */
        get() = TODO()

    final var infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final var nesting_depth: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_region_recurse_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final val info: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<kotlin.Int>> */
        get() = TODO()

    final var infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final var nesting_depth: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_region_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final val info: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<kotlin.Int>> */
        get() = TODO()

    final var infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val object_name: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_remap_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    final var cur_protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var max_protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var target_address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_wire_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Reply__vm_write_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __RequestUnion__clock_priv_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Request_clock_set_attributes: platform.darwin.__Request__clock_set_attributes_t
        get() = TODO()

    final val Request_clock_set_time: platform.darwin.__Request__clock_set_time_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __RequestUnion__host_priv_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Request_host_default_memory_manager: platform.darwin.__Request__host_default_memory_manager_t
        get() = TODO()

    final val Request_host_get_UNDServer: platform.darwin.__Request__host_get_UNDServer_t
        get() = TODO()

    final val Request_host_get_boot_info: platform.darwin.__Request__host_get_boot_info_t
        get() = TODO()

    final val Request_host_get_clock_control: platform.darwin.__Request__host_get_clock_control_t
        get() = TODO()

    final val Request_host_get_exception_ports: platform.darwin.__Request__host_get_exception_ports_t
        get() = TODO()

    final val Request_host_get_special_port: platform.darwin.__Request__host_get_special_port_t
        get() = TODO()

    final val Request_host_priv_statistics: platform.darwin.__Request__host_priv_statistics_t
        get() = TODO()

    final val Request_host_processor_set_priv: platform.darwin.__Request__host_processor_set_priv_t
        get() = TODO()

    final val Request_host_processor_sets: platform.darwin.__Request__host_processor_sets_t
        get() = TODO()

    final val Request_host_processors: platform.darwin.__Request__host_processors_t
        get() = TODO()

    final val Request_host_reboot: platform.darwin.__Request__host_reboot_t
        get() = TODO()

    final val Request_host_set_UNDServer: platform.darwin.__Request__host_set_UNDServer_t
        get() = TODO()

    final val Request_host_set_exception_ports: platform.darwin.__Request__host_set_exception_ports_t
        get() = TODO()

    final val Request_host_set_special_port: platform.darwin.__Request__host_set_special_port_t
        get() = TODO()

    final val Request_host_swap_exception_ports: platform.darwin.__Request__host_swap_exception_ports_t
        get() = TODO()

    final val Request_kext_request: platform.darwin.__Request__kext_request_t
        get() = TODO()

    final val Request_kmod_control: platform.darwin.__Request__kmod_control_t
        get() = TODO()

    final val Request_kmod_create: platform.darwin.__Request__kmod_create_t
        get() = TODO()

    final val Request_kmod_destroy: platform.darwin.__Request__kmod_destroy_t
        get() = TODO()

    final val Request_mach_vm_wire: platform.darwin.__Request__mach_vm_wire_t
        get() = TODO()

    final val Request_thread_wire: platform.darwin.__Request__thread_wire_t
        get() = TODO()

    final val Request_vm_allocate_cpm: platform.darwin.__Request__vm_allocate_cpm_t
        get() = TODO()

    final val Request_vm_wire: platform.darwin.__Request__vm_wire_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __RequestUnion__host_security_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Request_host_security_create_task_token: platform.darwin.__Request__host_security_create_task_token_t
        get() = TODO()

    final val Request_host_security_set_task_token: platform.darwin.__Request__host_security_set_task_token_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __RequestUnion__lock_set_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Request_lock_acquire: platform.darwin.__Request__lock_acquire_t
        get() = TODO()

    final val Request_lock_handoff: platform.darwin.__Request__lock_handoff_t
        get() = TODO()

    final val Request_lock_handoff_accept: platform.darwin.__Request__lock_handoff_accept_t
        get() = TODO()

    final val Request_lock_make_stable: platform.darwin.__Request__lock_make_stable_t
        get() = TODO()

    final val Request_lock_release: platform.darwin.__Request__lock_release_t
        get() = TODO()

    final val Request_lock_try: platform.darwin.__Request__lock_try_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __RequestUnion__mach_host_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Request__host_page_size: platform.darwin.__Request___host_page_size_t
        get() = TODO()

    final val Request_host_check_multiuser_mode: platform.darwin.__Request__host_check_multiuser_mode_t
        get() = TODO()

    final val Request_host_create_mach_voucher: platform.darwin.__Request__host_create_mach_voucher_t
        get() = TODO()

    final val Request_host_get_atm_diagnostic_flag: platform.darwin.__Request__host_get_atm_diagnostic_flag_t
        get() = TODO()

    final val Request_host_get_clock_service: platform.darwin.__Request__host_get_clock_service_t
        get() = TODO()

    final val Request_host_get_io_master: platform.darwin.__Request__host_get_io_master_t
        get() = TODO()

    final val Request_host_get_multiuser_config_flags: platform.darwin.__Request__host_get_multiuser_config_flags_t
        get() = TODO()

    final val Request_host_info: platform.darwin.__Request__host_info_t
        get() = TODO()

    final val Request_host_kernel_version: platform.darwin.__Request__host_kernel_version_t
        get() = TODO()

    final val Request_host_lockgroup_info: platform.darwin.__Request__host_lockgroup_info_t
        get() = TODO()

    final val Request_host_processor_info: platform.darwin.__Request__host_processor_info_t
        get() = TODO()

    final val Request_host_register_mach_voucher_attr_manager: platform.darwin.__Request__host_register_mach_voucher_attr_manager_t
        get() = TODO()

    final val Request_host_register_well_known_mach_voucher_attr_manager: platform.darwin.__Request__host_register_well_known_mach_voucher_attr_manager_t
        get() = TODO()

    final val Request_host_request_notification: platform.darwin.__Request__host_request_notification_t
        get() = TODO()

    final val Request_host_set_atm_diagnostic_flag: platform.darwin.__Request__host_set_atm_diagnostic_flag_t
        get() = TODO()

    final val Request_host_set_multiuser_config_flags: platform.darwin.__Request__host_set_multiuser_config_flags_t
        get() = TODO()

    final val Request_host_statistics: platform.darwin.__Request__host_statistics_t
        get() = TODO()

    final val Request_host_statistics64: platform.darwin.__Request__host_statistics64_t
        get() = TODO()

    final val Request_host_virtual_physical_table_info: platform.darwin.__Request__host_virtual_physical_table_info_t
        get() = TODO()

    final val Request_kmod_get_info: platform.darwin.__Request__kmod_get_info_t
        get() = TODO()

    final val Request_mach_memory_info: platform.darwin.__Request__mach_memory_info_t
        get() = TODO()

    final val Request_mach_memory_object_memory_entry: platform.darwin.__Request__mach_memory_object_memory_entry_t
        get() = TODO()

    final val Request_mach_memory_object_memory_entry_64: platform.darwin.__Request__mach_memory_object_memory_entry_64_t
        get() = TODO()

    final val Request_mach_zone_info: platform.darwin.__Request__mach_zone_info_t
        get() = TODO()

    final val Request_mach_zone_info_for_zone: platform.darwin.__Request__mach_zone_info_for_zone_t
        get() = TODO()

    final val Request_processor_set_create: platform.darwin.__Request__processor_set_create_t
        get() = TODO()

    final val Request_processor_set_default: platform.darwin.__Request__processor_set_default_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __RequestUnion__mach_port_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Request_mach_port_allocate: platform.darwin.__Request__mach_port_allocate_t
        get() = TODO()

    final val Request_mach_port_allocate_full: platform.darwin.__Request__mach_port_allocate_full_t
        get() = TODO()

    final val Request_mach_port_allocate_name: platform.darwin.__Request__mach_port_allocate_name_t
        get() = TODO()

    final val Request_mach_port_allocate_qos: platform.darwin.__Request__mach_port_allocate_qos_t
        get() = TODO()

    final val Request_mach_port_construct: platform.darwin.__Request__mach_port_construct_t
        get() = TODO()

    final val Request_mach_port_deallocate: platform.darwin.__Request__mach_port_deallocate_t
        get() = TODO()

    final val Request_mach_port_destroy: platform.darwin.__Request__mach_port_destroy_t
        get() = TODO()

    final val Request_mach_port_destruct: platform.darwin.__Request__mach_port_destruct_t
        get() = TODO()

    final val Request_mach_port_dnrequest_info: platform.darwin.__Request__mach_port_dnrequest_info_t
        get() = TODO()

    final val Request_mach_port_extract_member: platform.darwin.__Request__mach_port_extract_member_t
        get() = TODO()

    final val Request_mach_port_extract_right: platform.darwin.__Request__mach_port_extract_right_t
        get() = TODO()

    final val Request_mach_port_get_attributes: platform.darwin.__Request__mach_port_get_attributes_t
        get() = TODO()

    final val Request_mach_port_get_context: platform.darwin.__Request__mach_port_get_context_t
        get() = TODO()

    final val Request_mach_port_get_refs: platform.darwin.__Request__mach_port_get_refs_t
        get() = TODO()

    final val Request_mach_port_get_set_status: platform.darwin.__Request__mach_port_get_set_status_t
        get() = TODO()

    final val Request_mach_port_get_srights: platform.darwin.__Request__mach_port_get_srights_t
        get() = TODO()

    final val Request_mach_port_guard: platform.darwin.__Request__mach_port_guard_t
        get() = TODO()

    final val Request_mach_port_insert_member: platform.darwin.__Request__mach_port_insert_member_t
        get() = TODO()

    final val Request_mach_port_insert_right: platform.darwin.__Request__mach_port_insert_right_t
        get() = TODO()

    final val Request_mach_port_kernel_object: platform.darwin.__Request__mach_port_kernel_object_t
        get() = TODO()

    final val Request_mach_port_kobject: platform.darwin.__Request__mach_port_kobject_t
        get() = TODO()

    final val Request_mach_port_mod_refs: platform.darwin.__Request__mach_port_mod_refs_t
        get() = TODO()

    final val Request_mach_port_move_member: platform.darwin.__Request__mach_port_move_member_t
        get() = TODO()

    final val Request_mach_port_names: platform.darwin.__Request__mach_port_names_t
        get() = TODO()

    final val Request_mach_port_peek: platform.darwin.__Request__mach_port_peek_t
        get() = TODO()

    final val Request_mach_port_rename: platform.darwin.__Request__mach_port_rename_t
        get() = TODO()

    final val Request_mach_port_request_notification: platform.darwin.__Request__mach_port_request_notification_t
        get() = TODO()

    final val Request_mach_port_set_attributes: platform.darwin.__Request__mach_port_set_attributes_t
        get() = TODO()

    final val Request_mach_port_set_context: platform.darwin.__Request__mach_port_set_context_t
        get() = TODO()

    final val Request_mach_port_set_mscount: platform.darwin.__Request__mach_port_set_mscount_t
        get() = TODO()

    final val Request_mach_port_set_seqno: platform.darwin.__Request__mach_port_set_seqno_t
        get() = TODO()

    final val Request_mach_port_space_basic_info: platform.darwin.__Request__mach_port_space_basic_info_t
        get() = TODO()

    final val Request_mach_port_space_info: platform.darwin.__Request__mach_port_space_info_t
        get() = TODO()

    final val Request_mach_port_type: platform.darwin.__Request__mach_port_type_t
        get() = TODO()

    final val Request_mach_port_unguard: platform.darwin.__Request__mach_port_unguard_t
        get() = TODO()

    final val Request_task_set_port_space: platform.darwin.__Request__task_set_port_space_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __RequestUnion__processor_set_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Request_processor_set_destroy: platform.darwin.__Request__processor_set_destroy_t
        get() = TODO()

    final val Request_processor_set_info: platform.darwin.__Request__processor_set_info_t
        get() = TODO()

    final val Request_processor_set_max_priority: platform.darwin.__Request__processor_set_max_priority_t
        get() = TODO()

    final val Request_processor_set_policy_control: platform.darwin.__Request__processor_set_policy_control_t
        get() = TODO()

    final val Request_processor_set_policy_disable: platform.darwin.__Request__processor_set_policy_disable_t
        get() = TODO()

    final val Request_processor_set_policy_enable: platform.darwin.__Request__processor_set_policy_enable_t
        get() = TODO()

    final val Request_processor_set_stack_usage: platform.darwin.__Request__processor_set_stack_usage_t
        get() = TODO()

    final val Request_processor_set_statistics: platform.darwin.__Request__processor_set_statistics_t
        get() = TODO()

    final val Request_processor_set_tasks: platform.darwin.__Request__processor_set_tasks_t
        get() = TODO()

    final val Request_processor_set_threads: platform.darwin.__Request__processor_set_threads_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __RequestUnion__processor_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Request_processor_assign: platform.darwin.__Request__processor_assign_t
        get() = TODO()

    final val Request_processor_control: platform.darwin.__Request__processor_control_t
        get() = TODO()

    final val Request_processor_exit: platform.darwin.__Request__processor_exit_t
        get() = TODO()

    final val Request_processor_get_assignment: platform.darwin.__Request__processor_get_assignment_t
        get() = TODO()

    final val Request_processor_info: platform.darwin.__Request__processor_info_t
        get() = TODO()

    final val Request_processor_start: platform.darwin.__Request__processor_start_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __RequestUnion__task_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Request_lock_set_create: platform.darwin.__Request__lock_set_create_t
        get() = TODO()

    final val Request_lock_set_destroy: platform.darwin.__Request__lock_set_destroy_t
        get() = TODO()

    final val Request_mach_ports_lookup: platform.darwin.__Request__mach_ports_lookup_t
        get() = TODO()

    final val Request_mach_ports_register: platform.darwin.__Request__mach_ports_register_t
        get() = TODO()

    final val Request_semaphore_create: platform.darwin.__Request__semaphore_create_t
        get() = TODO()

    final val Request_semaphore_destroy: platform.darwin.__Request__semaphore_destroy_t
        get() = TODO()

    final val Request_task_assign: platform.darwin.__Request__task_assign_t
        get() = TODO()

    final val Request_task_assign_default: platform.darwin.__Request__task_assign_default_t
        get() = TODO()

    final val Request_task_create: platform.darwin.__Request__task_create_t
        get() = TODO()

    final val Request_task_generate_corpse: platform.darwin.__Request__task_generate_corpse_t
        get() = TODO()

    final val Request_task_get_assignment: platform.darwin.__Request__task_get_assignment_t
        get() = TODO()

    final val Request_task_get_dyld_image_infos: platform.darwin.__Request__task_get_dyld_image_infos_t
        get() = TODO()

    final val Request_task_get_emulation_vector: platform.darwin.__Request__task_get_emulation_vector_t
        get() = TODO()

    final val Request_task_get_exception_ports: platform.darwin.__Request__task_get_exception_ports_t
        get() = TODO()

    final val Request_task_get_mach_voucher: platform.darwin.__Request__task_get_mach_voucher_t
        get() = TODO()

    final val Request_task_get_special_port: platform.darwin.__Request__task_get_special_port_t
        get() = TODO()

    final val Request_task_get_state: platform.darwin.__Request__task_get_state_t
        get() = TODO()

    final val Request_task_info: platform.darwin.__Request__task_info_t
        get() = TODO()

    final val Request_task_inspect: platform.darwin.__Request__task_inspect_t
        get() = TODO()

    final val Request_task_map_corpse_info: platform.darwin.__Request__task_map_corpse_info_t
        get() = TODO()

    final val Request_task_map_corpse_info_64: platform.darwin.__Request__task_map_corpse_info_64_t
        get() = TODO()

    final val Request_task_policy: platform.darwin.__Request__task_policy_t
        get() = TODO()

    final val Request_task_policy_get: platform.darwin.__Request__task_policy_get_t
        get() = TODO()

    final val Request_task_policy_set: platform.darwin.__Request__task_policy_set_t
        get() = TODO()

    final val Request_task_purgable_info: platform.darwin.__Request__task_purgable_info_t
        get() = TODO()

    final val Request_task_register_dyld_get_process_state: platform.darwin.__Request__task_register_dyld_get_process_state_t
        get() = TODO()

    final val Request_task_register_dyld_image_infos: platform.darwin.__Request__task_register_dyld_image_infos_t
        get() = TODO()

    final val Request_task_register_dyld_set_dyld_state: platform.darwin.__Request__task_register_dyld_set_dyld_state_t
        get() = TODO()

    final val Request_task_register_dyld_shared_cache_image_info: platform.darwin.__Request__task_register_dyld_shared_cache_image_info_t
        get() = TODO()

    final val Request_task_resume: platform.darwin.__Request__task_resume_t
        get() = TODO()

    final val Request_task_resume2: platform.darwin.__Request__task_resume2_t
        get() = TODO()

    final val Request_task_sample: platform.darwin.__Request__task_sample_t
        get() = TODO()

    final val Request_task_set_emulation: platform.darwin.__Request__task_set_emulation_t
        get() = TODO()

    final val Request_task_set_emulation_vector: platform.darwin.__Request__task_set_emulation_vector_t
        get() = TODO()

    final val Request_task_set_exception_ports: platform.darwin.__Request__task_set_exception_ports_t
        get() = TODO()

    final val Request_task_set_info: platform.darwin.__Request__task_set_info_t
        get() = TODO()

    final val Request_task_set_mach_voucher: platform.darwin.__Request__task_set_mach_voucher_t
        get() = TODO()

    final val Request_task_set_phys_footprint_limit: platform.darwin.__Request__task_set_phys_footprint_limit_t
        get() = TODO()

    final val Request_task_set_policy: platform.darwin.__Request__task_set_policy_t
        get() = TODO()

    final val Request_task_set_ras_pc: platform.darwin.__Request__task_set_ras_pc_t
        get() = TODO()

    final val Request_task_set_special_port: platform.darwin.__Request__task_set_special_port_t
        get() = TODO()

    final val Request_task_set_state: platform.darwin.__Request__task_set_state_t
        get() = TODO()

    final val Request_task_suspend: platform.darwin.__Request__task_suspend_t
        get() = TODO()

    final val Request_task_suspend2: platform.darwin.__Request__task_suspend2_t
        get() = TODO()

    final val Request_task_swap_exception_ports: platform.darwin.__Request__task_swap_exception_ports_t
        get() = TODO()

    final val Request_task_swap_mach_voucher: platform.darwin.__Request__task_swap_mach_voucher_t
        get() = TODO()

    final val Request_task_terminate: platform.darwin.__Request__task_terminate_t
        get() = TODO()

    final val Request_task_threads: platform.darwin.__Request__task_threads_t
        get() = TODO()

    final val Request_task_unregister_dyld_image_infos: platform.darwin.__Request__task_unregister_dyld_image_infos_t
        get() = TODO()

    final val Request_task_zone_info: platform.darwin.__Request__task_zone_info_t
        get() = TODO()

    final val Request_thread_create: platform.darwin.__Request__thread_create_t
        get() = TODO()

    final val Request_thread_create_running: platform.darwin.__Request__thread_create_running_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __RequestUnion__thread_act_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Request_act_get_state: platform.darwin.__Request__act_get_state_t
        get() = TODO()

    final val Request_act_set_state: platform.darwin.__Request__act_set_state_t
        get() = TODO()

    final val Request_etap_trace_thread: platform.darwin.__Request__etap_trace_thread_t
        get() = TODO()

    final val Request_thread_abort: platform.darwin.__Request__thread_abort_t
        get() = TODO()

    final val Request_thread_abort_safely: platform.darwin.__Request__thread_abort_safely_t
        get() = TODO()

    final val Request_thread_assign: platform.darwin.__Request__thread_assign_t
        get() = TODO()

    final val Request_thread_assign_default: platform.darwin.__Request__thread_assign_default_t
        get() = TODO()

    final val Request_thread_depress_abort: platform.darwin.__Request__thread_depress_abort_t
        get() = TODO()

    final val Request_thread_get_assignment: platform.darwin.__Request__thread_get_assignment_t
        get() = TODO()

    final val Request_thread_get_exception_ports: platform.darwin.__Request__thread_get_exception_ports_t
        get() = TODO()

    final val Request_thread_get_mach_voucher: platform.darwin.__Request__thread_get_mach_voucher_t
        get() = TODO()

    final val Request_thread_get_special_port: platform.darwin.__Request__thread_get_special_port_t
        get() = TODO()

    final val Request_thread_get_state: platform.darwin.__Request__thread_get_state_t
        get() = TODO()

    final val Request_thread_info: platform.darwin.__Request__thread_info_t
        get() = TODO()

    final val Request_thread_policy: platform.darwin.__Request__thread_policy_t
        get() = TODO()

    final val Request_thread_policy_get: platform.darwin.__Request__thread_policy_get_t
        get() = TODO()

    final val Request_thread_policy_set: platform.darwin.__Request__thread_policy_set_t
        get() = TODO()

    final val Request_thread_resume: platform.darwin.__Request__thread_resume_t
        get() = TODO()

    final val Request_thread_sample: platform.darwin.__Request__thread_sample_t
        get() = TODO()

    final val Request_thread_set_exception_ports: platform.darwin.__Request__thread_set_exception_ports_t
        get() = TODO()

    final val Request_thread_set_mach_voucher: platform.darwin.__Request__thread_set_mach_voucher_t
        get() = TODO()

    final val Request_thread_set_policy: platform.darwin.__Request__thread_set_policy_t
        get() = TODO()

    final val Request_thread_set_special_port: platform.darwin.__Request__thread_set_special_port_t
        get() = TODO()

    final val Request_thread_set_state: platform.darwin.__Request__thread_set_state_t
        get() = TODO()

    final val Request_thread_suspend: platform.darwin.__Request__thread_suspend_t
        get() = TODO()

    final val Request_thread_swap_exception_ports: platform.darwin.__Request__thread_swap_exception_ports_t
        get() = TODO()

    final val Request_thread_swap_mach_voucher: platform.darwin.__Request__thread_swap_mach_voucher_t
        get() = TODO()

    final val Request_thread_terminate: platform.darwin.__Request__thread_terminate_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __RequestUnion__vm_map_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Request_mach_make_memory_entry: platform.darwin.__Request__mach_make_memory_entry_t
        get() = TODO()

    final val Request_mach_make_memory_entry_64: platform.darwin.__Request__mach_make_memory_entry_64_t
        get() = TODO()

    final val Request_mach_vm_region_info: platform.darwin.__Request__mach_vm_region_info_t
        get() = TODO()

    final val Request_mach_vm_region_info_64: platform.darwin.__Request__mach_vm_region_info_64_t
        get() = TODO()

    final val Request_task_wire: platform.darwin.__Request__task_wire_t
        get() = TODO()

    final val Request_vm_allocate: platform.darwin.__Request__vm_allocate_t
        get() = TODO()

    final val Request_vm_behavior_set: platform.darwin.__Request__vm_behavior_set_t
        get() = TODO()

    final val Request_vm_copy: platform.darwin.__Request__vm_copy_t
        get() = TODO()

    final val Request_vm_deallocate: platform.darwin.__Request__vm_deallocate_t
        get() = TODO()

    final val Request_vm_inherit: platform.darwin.__Request__vm_inherit_t
        get() = TODO()

    final val Request_vm_machine_attribute: platform.darwin.__Request__vm_machine_attribute_t
        get() = TODO()

    final val Request_vm_map: platform.darwin.__Request__vm_map_t
        get() = TODO()

    final val Request_vm_map_64: platform.darwin.__Request__vm_map_64_t
        get() = TODO()

    final val Request_vm_map_exec_lockdown: platform.darwin.__Request__vm_map_exec_lockdown_t
        get() = TODO()

    final val Request_vm_map_page_query: platform.darwin.__Request__vm_map_page_query_t
        get() = TODO()

    final val Request_vm_mapped_pages_info: platform.darwin.__Request__vm_mapped_pages_info_t
        get() = TODO()

    final val Request_vm_msync: platform.darwin.__Request__vm_msync_t
        get() = TODO()

    final val Request_vm_protect: platform.darwin.__Request__vm_protect_t
        get() = TODO()

    final val Request_vm_purgable_control: platform.darwin.__Request__vm_purgable_control_t
        get() = TODO()

    final val Request_vm_read: platform.darwin.__Request__vm_read_t
        get() = TODO()

    final val Request_vm_read_list: platform.darwin.__Request__vm_read_list_t
        get() = TODO()

    final val Request_vm_read_overwrite: platform.darwin.__Request__vm_read_overwrite_t
        get() = TODO()

    final val Request_vm_region: platform.darwin.__Request__vm_region_t
        get() = TODO()

    final val Request_vm_region_64: platform.darwin.__Request__vm_region_64_t
        get() = TODO()

    final val Request_vm_region_recurse: platform.darwin.__Request__vm_region_recurse_t
        get() = TODO()

    final val Request_vm_region_recurse_64: platform.darwin.__Request__vm_region_recurse_64_t
        get() = TODO()

    final val Request_vm_remap: platform.darwin.__Request__vm_remap_t
        get() = TODO()

    final val Request_vm_write: platform.darwin.__Request__vm_write_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request___host_page_size_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__act_get_state_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    final var old_stateCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__act_set_state_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    final val new_state: kotlinx.cinterop.CArrayPointer<platform.darwin.natural_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var new_stateCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__clock_set_attributes_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val clock_attr: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<kotlin.Int>> */
        get() = TODO()

    final var clock_attrCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final var flavor: platform.darwin.clock_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.clock_flavor_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__clock_set_time_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val new_time: platform.darwin.mach_timespec_t /* = platform.darwin.mach_timespec */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__etap_trace_thread_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var trace_status: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_check_multiuser_mode_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_create_mach_voucher_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val recipes: kotlinx.cinterop.CArrayPointer<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */>> */
        get() = TODO()

    final var recipesCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_default_memory_manager_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var cluster_size: platform.darwin.memory_object_cluster_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.memory_object_cluster_size_t /* = kotlin.UInt */) = TODO()

    final val default_manager: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_get_UNDServer_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_get_atm_diagnostic_flag_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_get_boot_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_get_clock_control_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var clock_id: platform.darwin.clock_id_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.clock_id_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_get_clock_service_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var clock_id: platform.darwin.clock_id_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.clock_id_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_get_exception_ports_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var exception_mask: platform.darwin.exception_mask_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.exception_mask_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_get_io_master_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_get_multiuser_config_flags_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_get_special_port_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var node: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    final var which: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.host_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.host_flavor_t /* = kotlin.Int */) = TODO()

    final var host_info_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_kernel_version_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_lockgroup_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_priv_statistics_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.host_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.host_flavor_t /* = kotlin.Int */) = TODO()

    final var host_info_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_processor_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.processor_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.processor_flavor_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_processor_set_priv_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val set_name: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_processor_sets_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_processors_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_reboot_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var options: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_register_mach_voucher_attr_manager_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val attr_manager: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var default_value: platform.darwin.mach_voucher_attr_value_handle_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_voucher_attr_value_handle_t /* = kotlin.ULong */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_register_well_known_mach_voucher_attr_manager_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val attr_manager: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var default_value: platform.darwin.mach_voucher_attr_value_handle_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_voucher_attr_value_handle_t /* = kotlin.ULong */) = TODO()

    final var key: platform.darwin.mach_voucher_attr_key_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_voucher_attr_key_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_request_notification_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val notify_port: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var notify_type: platform.darwin.host_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.host_flavor_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_security_create_task_token_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val audit_token: platform.darwin.audit_token_t
        get() = TODO()

    final val host: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var inherit_memory: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final val ledgers: platform.darwin.mach_msg_ool_ports_descriptor_t
        get() = TODO()

    final var ledgersCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val parent_task: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val sec_token: platform.darwin.security_token_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_security_set_task_token_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val audit_token: platform.darwin.audit_token_t
        get() = TODO()

    final val host: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val sec_token: platform.darwin.security_token_t
        get() = TODO()

    final val target_task: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_set_UNDServer_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val server: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_set_atm_diagnostic_flag_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var diagnostic_flag: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_set_exception_ports_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var behavior: platform.darwin.exception_behavior_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.exception_behavior_t /* = kotlin.Int */) = TODO()

    final var exception_mask: platform.darwin.exception_mask_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.exception_mask_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var new_flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.thread_state_flavor_t /* = kotlin.Int */) = TODO()

    final val new_port: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_set_multiuser_config_flags_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var multiuser_flags: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_set_special_port_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val port: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var which: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_statistics64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.host_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.host_flavor_t /* = kotlin.Int */) = TODO()

    final var host_info64_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_statistics_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.host_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.host_flavor_t /* = kotlin.Int */) = TODO()

    final var host_info_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_swap_exception_ports_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var behavior: platform.darwin.exception_behavior_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.exception_behavior_t /* = kotlin.Int */) = TODO()

    final var exception_mask: platform.darwin.exception_mask_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.exception_mask_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var new_flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.thread_state_flavor_t /* = kotlin.Int */) = TODO()

    final val new_port: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__host_virtual_physical_table_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__kext_request_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val request_data: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var request_dataCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final var user_log_flags: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__kmod_control_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val data: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var dataCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final var flavor: platform.darwin.kmod_control_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kmod_control_flavor_t /* = kotlin.Int */) = TODO()

    final var module: platform.darwin.kmod_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kmod_t /* = kotlin.Int */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__kmod_create_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var info: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__kmod_destroy_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var module: platform.darwin.kmod_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kmod_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__kmod_get_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__lock_acquire_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var lock_id: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__lock_handoff_accept_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var lock_id: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__lock_handoff_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var lock_id: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__lock_make_stable_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var lock_id: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__lock_release_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var lock_id: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__lock_set_create_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var n_ulocks: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    final var policy: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__lock_set_destroy_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val lock_set: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__lock_try_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var lock_id: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_make_memory_entry_64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var offset: platform.darwin.memory_object_offset_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.memory_object_offset_t /* = kotlin.ULong */) = TODO()

    final val parent_entry: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var permission: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var size: platform.darwin.memory_object_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.memory_object_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_make_memory_entry_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var offset: platform.darwin.vm_offset_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_offset_t /* = kotlin.ULong */) = TODO()

    final val parent_entry: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var permission: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_memory_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_memory_object_memory_entry_64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var internal: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val pager: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var permission: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var size: platform.darwin.memory_object_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.memory_object_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_memory_object_memory_entry_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var internal: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val pager: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var permission: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_allocate_full_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final val proto: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val qos: platform.darwin.mach_port_qos_t /* = platform.darwin.mach_port_qos */
        get() = TODO()

    final var right: platform.darwin.mach_port_right_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_right_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_allocate_name_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final var right: platform.darwin.mach_port_right_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_right_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_allocate_qos_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val qos: platform.darwin.mach_port_qos_t /* = platform.darwin.mach_port_qos */
        get() = TODO()

    final var right: platform.darwin.mach_port_right_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_right_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_allocate_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var right: platform.darwin.mach_port_right_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_right_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_construct_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var context: platform.darwin.mach_port_context_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_port_context_t /* = kotlin.ULong */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val options: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_deallocate_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_destroy_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_destruct_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var guard: platform.darwin.mach_port_context_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_port_context_t /* = kotlin.ULong */) = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final var srdelta: platform.darwin.mach_port_delta_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.mach_port_delta_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_dnrequest_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_extract_member_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final var pset: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_extract_right_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var msgt_name: platform.darwin.mach_msg_type_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_name_t /* = kotlin.UInt */) = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_get_attributes_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.mach_port_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.mach_port_flavor_t /* = kotlin.Int */) = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final var port_info_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_get_context_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_get_refs_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final var right: platform.darwin.mach_port_right_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_right_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_get_set_status_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_get_srights_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_guard_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var guard: platform.darwin.mach_port_context_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_port_context_t /* = kotlin.ULong */) = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final var strict: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_insert_member_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final var pset: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_insert_right_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final val poly: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_kernel_object_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_kobject_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_mod_refs_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var delta: platform.darwin.mach_port_delta_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.mach_port_delta_t /* = kotlin.Int */) = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final var right: platform.darwin.mach_port_right_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_right_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_move_member_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var after: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final var member: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_names_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_peek_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final var request_seqnop: platform.darwin.mach_port_seqno_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_seqno_t /* = kotlin.UInt */) = TODO()

    final var trailer_infopCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final var trailer_type: platform.darwin.mach_msg_trailer_type_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_trailer_type_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_rename_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var new_name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final var old_name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_request_notification_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var msgid: platform.darwin.mach_msg_id_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.mach_msg_id_t /* = kotlin.Int */) = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final val notify: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var sync: platform.darwin.mach_port_mscount_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_mscount_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_set_attributes_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.mach_port_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.mach_port_flavor_t /* = kotlin.Int */) = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final val port_info: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var port_infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_set_context_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var context: platform.darwin.mach_port_context_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_port_context_t /* = kotlin.ULong */) = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_set_mscount_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var mscount: platform.darwin.mach_port_mscount_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_mscount_t /* = kotlin.UInt */) = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_set_seqno_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final var seqno: platform.darwin.mach_port_seqno_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_seqno_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_space_basic_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_space_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_type_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_port_unguard_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var guard: platform.darwin.mach_port_context_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_port_context_t /* = kotlin.ULong */) = TODO()

    final var name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_ports_lookup_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_ports_register_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val init_port_set: platform.darwin.mach_msg_ool_ports_descriptor_t
        get() = TODO()

    final var init_port_setCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_vm_region_info_64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_vm_region_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_vm_wire_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.mach_vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_address_t /* = kotlin.ULong */) = TODO()

    final var desired_access: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var size: platform.darwin.mach_vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_size_t /* = kotlin.ULong */) = TODO()

    final val task: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_zone_info_for_zone_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val name: platform.darwin.mach_zone_name_t /* = platform.darwin.mach_zone_name */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__mach_zone_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__processor_assign_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val new_set: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var wait: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__processor_control_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val processor_cmd: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var processor_cmdCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__processor_exit_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__processor_get_assignment_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__processor_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.processor_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.processor_flavor_t /* = kotlin.Int */) = TODO()

    final var processor_info_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__processor_set_create_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__processor_set_default_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__processor_set_destroy_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__processor_set_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    final var info_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__processor_set_max_priority_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var change_threads: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var max_priority: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__processor_set_policy_control_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var change: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var flavor: platform.darwin.processor_set_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.processor_set_flavor_t /* = kotlin.Int */) = TODO()

    final val policy_info: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var policy_infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__processor_set_policy_disable_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var change_threads: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var policy: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__processor_set_policy_enable_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var policy: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__processor_set_stack_usage_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__processor_set_statistics_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.processor_set_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.processor_set_flavor_t /* = kotlin.Int */) = TODO()

    final var info_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__processor_set_tasks_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__processor_set_threads_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__processor_start_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__semaphore_create_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var policy: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    final var value: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__semaphore_destroy_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val semaphore: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_assign_default_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var assign_threads: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_assign_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var assign_threads: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val new_set: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_create_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var inherit_memory: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final val ledgers: platform.darwin.mach_msg_ool_ports_descriptor_t
        get() = TODO()

    final var ledgersCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_generate_corpse_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_get_assignment_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_get_dyld_image_infos_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_get_emulation_vector_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_get_exception_ports_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var exception_mask: platform.darwin.exception_mask_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.exception_mask_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_get_mach_voucher_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var which: platform.darwin.mach_voucher_selector_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_voucher_selector_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_get_special_port_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var which_port: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_get_state_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.thread_state_flavor_t /* = kotlin.Int */) = TODO()

    final var old_stateCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.task_flavor_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.task_flavor_t /* = kotlin.UInt */) = TODO()

    final var task_info_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_inspect_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.task_inspect_flavor_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.task_inspect_flavor_t /* = kotlin.UInt */) = TODO()

    final var info_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_map_corpse_info_64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val corspe_task: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_map_corpse_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val corspe_task: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_policy_get_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.task_policy_flavor_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.task_policy_flavor_t /* = kotlin.UInt */) = TODO()

    final var get_default: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var policy_infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_policy_set_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.task_policy_flavor_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.task_policy_flavor_t /* = kotlin.UInt */) = TODO()

    final val policy_info: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var policy_infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_policy_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val base: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var baseCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final var change: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var policy: platform.darwin.policy_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.policy_t /* = kotlin.Int */) = TODO()

    final var set_limit: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_purgable_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_register_dyld_get_process_state_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_register_dyld_image_infos_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val dyld_images: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var dyld_imagesCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_register_dyld_set_dyld_state_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var dyld_state: platform.posix.uint8_t /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.uint8_t /* = kotlin.UByte */) = TODO()

    final val dyld_statePad: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_register_dyld_shared_cache_image_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val dyld_cache_image: platform.darwin.dyld_kernel_image_info_t /* = platform.darwin.dyld_kernel_image_info */
        get() = TODO()

    final var no_cache: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var private_cache: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_resume2_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_resume_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_sample_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val reply: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_set_emulation_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var routine_entry_pt: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var routine_number: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_set_emulation_vector_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val emulation_vector: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var emulation_vectorCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var vector_start: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_set_exception_ports_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var behavior: platform.darwin.exception_behavior_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.exception_behavior_t /* = kotlin.Int */) = TODO()

    final var exception_mask: platform.darwin.exception_mask_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.exception_mask_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var new_flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.thread_state_flavor_t /* = kotlin.Int */) = TODO()

    final val new_port: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_set_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.task_flavor_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.task_flavor_t /* = kotlin.UInt */) = TODO()

    final val task_info_in: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var task_info_inCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_set_mach_voucher_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val voucher: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_set_phys_footprint_limit_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var new_limit: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_set_policy_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val base: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var baseCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final var change: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final val limit: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var limitCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var policy: platform.darwin.policy_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.policy_t /* = kotlin.Int */) = TODO()

    final val pset: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_set_port_space_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var table_entries: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_set_ras_pc_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var basepc: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var boundspc: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_set_special_port_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val special_port: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var which_port: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_set_state_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.thread_state_flavor_t /* = kotlin.Int */) = TODO()

    final val new_state: kotlinx.cinterop.CArrayPointer<platform.darwin.natural_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var new_stateCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_suspend2_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_suspend_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_swap_exception_ports_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var behavior: platform.darwin.exception_behavior_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.exception_behavior_t /* = kotlin.Int */) = TODO()

    final var exception_mask: platform.darwin.exception_mask_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.exception_mask_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var new_flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.thread_state_flavor_t /* = kotlin.Int */) = TODO()

    final val new_port: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_swap_mach_voucher_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val new_voucher: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val old_voucher: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_terminate_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_threads_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_unregister_dyld_image_infos_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val dyld_images: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var dyld_imagesCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_wire_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var must_wire: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__task_zone_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_abort_safely_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_abort_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_assign_default_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_assign_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val new_set: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_create_running_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.thread_state_flavor_t /* = kotlin.Int */) = TODO()

    final val new_state: kotlinx.cinterop.CArrayPointer<platform.darwin.natural_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var new_stateCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_create_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_depress_abort_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_get_assignment_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_get_exception_ports_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var exception_mask: platform.darwin.exception_mask_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.exception_mask_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_get_mach_voucher_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var which: platform.darwin.mach_voucher_selector_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_voucher_selector_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_get_special_port_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var which_port: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_get_state_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.thread_state_flavor_t /* = kotlin.Int */) = TODO()

    final var old_stateCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.thread_flavor_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.thread_flavor_t /* = kotlin.UInt */) = TODO()

    final var thread_info_outCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_policy_get_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.thread_policy_flavor_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.thread_policy_flavor_t /* = kotlin.UInt */) = TODO()

    final var get_default: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var policy_infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_policy_set_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.thread_policy_flavor_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.thread_policy_flavor_t /* = kotlin.UInt */) = TODO()

    final val policy_info: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var policy_infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_policy_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val base: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var baseCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final var policy: platform.darwin.policy_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.policy_t /* = kotlin.Int */) = TODO()

    final var set_limit: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_resume_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_sample_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val reply: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_set_exception_ports_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var behavior: platform.darwin.exception_behavior_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.exception_behavior_t /* = kotlin.Int */) = TODO()

    final var exception_mask: platform.darwin.exception_mask_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.exception_mask_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var new_flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.thread_state_flavor_t /* = kotlin.Int */) = TODO()

    final val new_port: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_set_mach_voucher_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val voucher: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_set_policy_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val base: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var baseCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val limit: kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */>> */
        get() = TODO()

    final var limitCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var policy: platform.darwin.policy_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.policy_t /* = kotlin.Int */) = TODO()

    final val pset: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_set_special_port_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val special_port: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var which_port: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_set_state_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.thread_state_flavor_t /* = kotlin.Int */) = TODO()

    final val new_state: kotlinx.cinterop.CArrayPointer<platform.darwin.natural_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var new_stateCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_suspend_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_swap_exception_ports_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var behavior: platform.darwin.exception_behavior_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.exception_behavior_t /* = kotlin.Int */) = TODO()

    final var exception_mask: platform.darwin.exception_mask_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.exception_mask_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var new_flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.thread_state_flavor_t /* = kotlin.Int */) = TODO()

    final val new_port: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_swap_mach_voucher_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val new_voucher: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val old_voucher: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_terminate_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__thread_wire_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val thread: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var wired: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_allocate_cpm_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var flags: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    final val task: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_allocate_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var flags: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_behavior_set_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var new_behavior: platform.darwin.vm_behavior_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_behavior_t /* = kotlin.Int */) = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_copy_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var dest_address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    final var source_address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_deallocate_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_inherit_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var new_inheritance: platform.darwin.vm_inherit_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.vm_inherit_t /* = kotlin.UInt */) = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_machine_attribute_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var attribute: platform.darwin.vm_machine_attribute_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.vm_machine_attribute_t /* = kotlin.UInt */) = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    final var value: platform.darwin.vm_machine_attribute_val_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_machine_attribute_val_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_map_64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var copy: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var cur_protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var flags: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    final var inheritance: platform.darwin.vm_inherit_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.vm_inherit_t /* = kotlin.UInt */) = TODO()

    final var mask: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var max_protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val `object`: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var offset: platform.darwin.memory_object_offset_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.memory_object_offset_t /* = kotlin.ULong */) = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_map_exec_lockdown_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_map_page_query_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var offset: platform.darwin.vm_offset_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_offset_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_map_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var copy: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var cur_protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var flags: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    final var inheritance: platform.darwin.vm_inherit_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.vm_inherit_t /* = kotlin.UInt */) = TODO()

    final var mask: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var max_protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val `object`: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var offset: platform.darwin.vm_offset_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_offset_t /* = kotlin.ULong */) = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_mapped_pages_info_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_msync_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    final var sync_flags: platform.darwin.vm_sync_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.vm_sync_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_protect_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var new_protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var set_maximum: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_purgable_control_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var control: platform.darwin.vm_purgable_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_purgable_t /* = kotlin.Int */) = TODO()

    final var state: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_read_list_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final val data_list: platform.darwin.vm_read_entry_t /* = kotlinx.cinterop.CPointer<platform.darwin.vm_read_entry> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_read_overwrite_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var data: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_read_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_region_64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var flavor: platform.darwin.vm_region_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_region_flavor_t /* = kotlin.Int */) = TODO()

    final var infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_region_recurse_64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final var nesting_depth: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_region_recurse_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final var nesting_depth: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_region_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var flavor: platform.darwin.vm_region_flavor_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_region_flavor_t /* = kotlin.Int */) = TODO()

    final var infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_remap_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var copy: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var flags: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    final var inheritance: platform.darwin.vm_inherit_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.vm_inherit_t /* = kotlin.UInt */) = TODO()

    final var mask: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    final var src_address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final val src_task: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final var target_address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_wire_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var desired_access: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final var size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    final val task: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class __Request__vm_write_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var address: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final val data: platform.darwin.mach_msg_ool_descriptor_t
        get() = TODO()

    final var dataCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val msgh_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class anonymousStruct10 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val arb: platform.darwin.au_arb_t
        get() = TODO()

    final val arg32: platform.darwin.au_arg32_t
        get() = TODO()

    final val arg64: platform.darwin.au_arg64_t
        get() = TODO()

    final val attr32: platform.darwin.au_attr32_t
        get() = TODO()

    final val attr64: platform.darwin.au_attr64_t
        get() = TODO()

    final val cert_hash: platform.darwin.au_cert_hash_t
        get() = TODO()

    final val execarg: platform.darwin.au_execarg_t
        get() = TODO()

    final val execenv: platform.darwin.au_execenv_t
        get() = TODO()

    final val exit: platform.darwin.au_exit_t
        get() = TODO()

    final val file: platform.darwin.au_file_t
        get() = TODO()

    final val grps: platform.darwin.au_groups_t
        get() = TODO()

    final val hdr32: platform.darwin.au_header32_t
        get() = TODO()

    final val hdr32_ex: platform.darwin.au_header32_ex_t
        get() = TODO()

    final val hdr64: platform.darwin.au_header64_t
        get() = TODO()

    final val hdr64_ex: platform.darwin.au_header64_ex_t
        get() = TODO()

    final val identity: platform.darwin.au_identity_t
        get() = TODO()

    final val inaddr: platform.darwin.au_inaddr_t
        get() = TODO()

    final val inaddr_ex: platform.darwin.au_inaddr_ex_t
        get() = TODO()

    final val invalid: platform.darwin.au_invalid_t
        get() = TODO()

    final val ip: platform.darwin.au_ip_t
        get() = TODO()

    final val ipc: platform.darwin.au_ipc_t
        get() = TODO()

    final val ipcperm: platform.darwin.au_ipcperm_t
        get() = TODO()

    final val iport: platform.darwin.au_iport_t
        get() = TODO()

    final val kevent: platform.darwin.au_kevent_t
        get() = TODO()

    final val krb5_principal: platform.darwin.au_krb5_principal_t
        get() = TODO()

    final val opaque: platform.darwin.au_opaque_t
        get() = TODO()

    final val path: platform.darwin.au_path_t
        get() = TODO()

    final val proc32: platform.darwin.au_proc32_t
        get() = TODO()

    final val proc32_ex: platform.darwin.au_proc32ex_t
        get() = TODO()

    final val proc64: platform.darwin.au_proc64_t
        get() = TODO()

    final val proc64_ex: platform.darwin.au_proc64ex_t
        get() = TODO()

    final val ret32: platform.darwin.au_ret32_t
        get() = TODO()

    final val ret64: platform.darwin.au_ret64_t
        get() = TODO()

    final val seq: platform.darwin.au_seq_t
        get() = TODO()

    final val socket: platform.darwin.au_socket_t
        get() = TODO()

    final val socket_ex32: platform.darwin.au_socket_ex32_t
        get() = TODO()

    final val sockinet_ex32: platform.darwin.au_socketinet_ex32_t
        get() = TODO()

    final val sockunix: platform.darwin.au_socketunix_t
        get() = TODO()

    final val subj32: platform.darwin.au_subject32_t
        get() = TODO()

    final val subj32_ex: platform.darwin.au_subject32ex_t
        get() = TODO()

    final val subj64: platform.darwin.au_subject64_t
        get() = TODO()

    final val subj64_ex: platform.darwin.au_subject64ex_t
        get() = TODO()

    final val text: platform.darwin.au_text_t
        get() = TODO()

    final val trail: platform.darwin.au_trailer_t
        get() = TODO()

    final val zonename: platform.darwin.au_zonename_t
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_arb_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var bu: platform.posix.u_char /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_char /* = kotlin.UByte */) = TODO()

    final var data: kotlinx.cinterop.CPointer<platform.posix.u_charVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.u_char /* = kotlin.UByte */> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.posix.u_charVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.u_char /* = kotlin.UByte */> */>?) = TODO()

    final var howtopr: platform.posix.u_char /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_char /* = kotlin.UByte */) = TODO()

    final var uc: platform.posix.u_char /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_char /* = kotlin.UByte */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_arg32_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var len: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var no: platform.posix.u_char /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_char /* = kotlin.UByte */) = TODO()

    final var text: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var `val`: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_arg64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var len: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var no: platform.posix.u_char /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_char /* = kotlin.UByte */) = TODO()

    final var text: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var `val`: platform.posix.u_int64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.u_int64_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_attr32_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var dev: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var fsid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var gid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var mode: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var nid: platform.posix.u_int64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.u_int64_t /* = kotlin.ULong */) = TODO()

    final var uid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_attr64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var dev: platform.posix.u_int64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.u_int64_t /* = kotlin.ULong */) = TODO()

    final var fsid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var gid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var mode: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var nid: platform.posix.u_int64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.u_int64_t /* = kotlin.ULong */) = TODO()

    final var uid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_cert_hash_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var count: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final val text: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_class_ent public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var ac_class: platform.darwin.au_class_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.au_class_t /* = kotlin.UInt */) = TODO()

    final var ac_desc: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var ac_name: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_event_ent public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var ae_class: platform.darwin.au_class_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.au_class_t /* = kotlin.UInt */) = TODO()

    final var ae_desc: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var ae_name: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var ae_number: platform.darwin.au_event_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.darwin.au_event_t /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_execarg_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var count: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final val text: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_execenv_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var count: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final val text: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_exit_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var ret: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var status: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_file_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var len: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var ms: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var name: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var s: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_groups_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val list: kotlinx.cinterop.CArrayPointer<platform.posix.u_int32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var no: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_header32_ex_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var ad_type: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final val addr: kotlinx.cinterop.CArrayPointer<platform.posix.u_int32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var e_mod: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var e_type: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var ms: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var s: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var size: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var version: platform.posix.u_char /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_char /* = kotlin.UByte */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_header32_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var e_mod: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var e_type: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var ms: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var s: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var size: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var version: platform.posix.u_char /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_char /* = kotlin.UByte */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_header64_ex_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var ad_type: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final val addr: kotlinx.cinterop.CArrayPointer<platform.posix.u_int32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var e_mod: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var e_type: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var ms: platform.posix.u_int64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.u_int64_t /* = kotlin.ULong */) = TODO()

    final var s: platform.posix.u_int64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.u_int64_t /* = kotlin.ULong */) = TODO()

    final var size: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var version: platform.posix.u_char /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_char /* = kotlin.UByte */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_header64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var e_mod: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var e_type: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var ms: platform.posix.u_int64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.u_int64_t /* = kotlin.ULong */) = TODO()

    final var s: platform.posix.u_int64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.u_int64_t /* = kotlin.ULong */) = TODO()

    final var size: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var version: platform.posix.u_char /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_char /* = kotlin.UByte */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_identity_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var cdhash: kotlinx.cinterop.CPointer<platform.posix.u_int8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.u_int8_t /* = kotlin.UByte */> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.posix.u_int8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.u_int8_t /* = kotlin.UByte */> */>?) = TODO()

    final var cdhash_len: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var signer_type: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var signing_id: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var signing_id_len: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var signing_id_truncated: platform.posix.u_char /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_char /* = kotlin.UByte */) = TODO()

    final var team_id: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var team_id_len: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var team_id_truncated: platform.posix.u_char /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_char /* = kotlin.UByte */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_inaddr_ex_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val addr: kotlinx.cinterop.CArrayPointer<platform.posix.u_int32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var type: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_inaddr_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var addr: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_invalid_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var data: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var length: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_ip_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var chksm: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var dest: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var id: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var len: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var offset: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var prot: platform.posix.u_char /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_char /* = kotlin.UByte */) = TODO()

    final var src: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var tos: platform.posix.u_char /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_char /* = kotlin.UByte */) = TODO()

    final var ttl: platform.posix.u_char /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_char /* = kotlin.UByte */) = TODO()

    final var version: platform.posix.u_char /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_char /* = kotlin.UByte */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_ipc_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var id: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var type: platform.posix.u_char /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_char /* = kotlin.UByte */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_ipcperm_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var gid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var key: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var mode: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var pgid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var puid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var seq: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var uid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_iport_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var port: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_kevent_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var data: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var fflags: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var filter: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var flags: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var ident: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_krb5_principal_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var count: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final val text: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_opaque_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var data: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var size: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_path_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var len: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var path: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_proc32_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var auid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var egid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var euid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var pid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var rgid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var ruid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var sid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final val tid: platform.darwin.au_tid32_t /* = platform.darwin.au_tid32 */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_proc32ex_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var auid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var egid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var euid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var pid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var rgid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var ruid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var sid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final val tid: platform.darwin.au_tidaddr32_t /* = platform.darwin.au_tidaddr32 */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_proc64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var auid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var egid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var euid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var pid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var rgid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var ruid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var sid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final val tid: platform.darwin.au_tid64_t /* = platform.darwin.au_tid64 */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_proc64ex_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var auid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var egid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var euid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var pid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var rgid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var ruid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var sid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final val tid: platform.darwin.au_tidaddr64_t /* = platform.darwin.au_tidaddr64 */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_ret32_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var ret: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var status: platform.posix.u_char /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_char /* = kotlin.UByte */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_ret64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var err: platform.posix.u_char /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_char /* = kotlin.UByte */) = TODO()

    final var `val`: platform.posix.u_int64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.u_int64_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_seq_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var seqno: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_socket_ex32_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var atype: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var domain: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final val l_addr: kotlinx.cinterop.CArrayPointer<platform.posix.u_int32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var l_port: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final val r_addr: kotlinx.cinterop.CArrayPointer<platform.posix.u_int32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var r_port: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var type: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_socket_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var l_addr: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var l_port: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var r_addr: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var r_port: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var type: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_socketinet32_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var addr: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var family: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var port: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_socketinet_ex32_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val addr: kotlinx.cinterop.CArrayPointer<platform.posix.u_int32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var family: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var port: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_socketunix_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var family: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final val path: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_subject32_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var auid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var egid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var euid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var pid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var rgid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var ruid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var sid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final val tid: platform.darwin.au_tid32_t /* = platform.darwin.au_tid32 */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_subject32ex_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var auid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var egid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var euid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var pid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var rgid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var ruid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var sid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final val tid: platform.darwin.au_tidaddr32_t /* = platform.darwin.au_tidaddr32 */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_subject64_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var auid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var egid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var euid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var pid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var rgid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var ruid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var sid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final val tid: platform.darwin.au_tid64_t /* = platform.darwin.au_tid64 */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_subject64ex_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var auid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var egid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var euid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var pid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var rgid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var ruid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var sid: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final val tid: platform.darwin.au_tidaddr64_t /* = platform.darwin.au_tidaddr64 */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_text_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var len: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var text: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_tid32 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var addr: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var port: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_tid64 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var addr: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var port: platform.posix.u_int64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.u_int64_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_tidaddr32 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val addr: kotlinx.cinterop.CArrayPointer<platform.posix.u_int32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var port: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var type: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_tidaddr64 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val addr: kotlinx.cinterop.CArrayPointer<platform.posix.u_int32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.posix.u_int32_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var port: platform.posix.u_int64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.u_int64_t /* = kotlin.ULong */) = TODO()

    final var type: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_trailer_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var count: platform.posix.u_int32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.u_int32_t /* = kotlin.UInt */) = TODO()

    final var magic: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_user_ent public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val au_always: platform.darwin.au_mask_t /* = platform.darwin.au_mask */
        get() = TODO()

    final var au_name: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final val au_never: platform.darwin.au_mask_t /* = platform.darwin.au_mask */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class au_zonename_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var len: platform.posix.u_int16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.u_int16_t /* = kotlin.UShort */) = TODO()

    final var zonename: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class hash_info_bucket public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var hib_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ipc_info_name public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var iin_collision: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var iin_hash: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var iin_name: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final var iin_next: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var iin_object: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var iin_type: platform.darwin.mach_port_type_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_type_t /* = kotlin.UInt */) = TODO()

    final var iin_urefs: platform.darwin.mach_port_urefs_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_urefs_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ipc_info_space public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var iis_genno_mask: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var iis_table_next: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var iis_table_size: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var iis_tree_hash: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var iis_tree_size: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var iis_tree_small: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ipc_info_space_basic public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var iisb_genno_mask: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final val iisb_reserved: kotlinx.cinterop.CArrayPointer<platform.darwin.natural_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */>> */
        get() = TODO()

    final var iisb_table_inuse: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var iisb_table_next: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var iisb_table_size: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class ipc_info_tree_name public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var iitn_lchild: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final val iitn_name: platform.darwin.ipc_info_name_t /* = platform.darwin.ipc_info_name */
        get() = TODO()

    final var iitn_rchild: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class lockgroup_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var lock_mtx_cnt: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_mtx_held_cnt: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_mtx_held_cum: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_mtx_held_max: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_mtx_miss_cnt: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_mtx_util_cnt: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_mtx_wait_cnt: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_mtx_wait_cum: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_mtx_wait_max: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_rw_cnt: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_rw_held_cnt: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_rw_held_cum: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_rw_held_max: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_rw_miss_cnt: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_rw_util_cnt: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_rw_wait_cnt: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_rw_wait_cum: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_rw_wait_max: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_spin_cnt: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_spin_held_cnt: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_spin_held_cum: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_spin_held_max: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_spin_miss_cnt: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lock_spin_util_cnt: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var lockgroup_attr: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final val lockgroup_name: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class mach_core_details public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val core_name: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var gzip_length: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var gzip_offset: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class mach_core_fileheader public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val files: kotlinx.cinterop.CArrayPointer<platform.darwin.mach_core_details> /* = kotlinx.cinterop.CPointer<platform.darwin.mach_core_details> */
        get() = TODO()

    final var log_length: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var log_offset: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var num_files: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var signature: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class mach_dead_name_notification_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val not_header: platform.darwin.mach_msg_header_t
        get() = TODO()

    final var not_port: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final val trailer: platform.darwin.mach_msg_format_0_trailer_t /* = platform.darwin.mach_msg_security_trailer_t */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class mach_memory_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val _resv: kotlinx.cinterop.CArrayPointer<platform.posix.uint64_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.uint64_t /* = kotlin.ULong */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ULongVarOf<platform.posix.uint64_t /* = kotlin.ULong */>> */
        get() = TODO()

    final val _resvA: kotlinx.cinterop.CArrayPointer<platform.posix.uint16_tVar /* = kotlinx.cinterop.UShortVarOf<platform.posix.uint16_t /* = kotlin.UShort */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UShortVarOf<platform.posix.uint16_t /* = kotlin.UShort */>> */
        get() = TODO()

    final var collectable_bytes: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var flags: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var free: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var largest: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var mapped: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final val name: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var peak: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var site: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var size: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var tag: platform.posix.uint16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.uint16_t /* = kotlin.UShort */) = TODO()

    final var zone: platform.posix.uint16_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.uint16_t /* = kotlin.UShort */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class mach_no_senders_notification_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var not_count: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */) = TODO()

    final val not_header: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val trailer: platform.darwin.mach_msg_format_0_trailer_t /* = platform.darwin.mach_msg_security_trailer_t */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class mach_port_deleted_notification_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val not_header: platform.darwin.mach_msg_header_t
        get() = TODO()

    final var not_port: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final val trailer: platform.darwin.mach_msg_format_0_trailer_t /* = platform.darwin.mach_msg_security_trailer_t */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class mach_port_destroyed_notification_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val not_body: platform.darwin.mach_msg_body_t
        get() = TODO()

    final val not_header: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val not_port: platform.darwin.mach_msg_port_descriptor_t
        get() = TODO()

    final val trailer: platform.darwin.mach_msg_format_0_trailer_t /* = platform.darwin.mach_msg_security_trailer_t */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class mach_send_once_notification_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val not_header: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val trailer: platform.darwin.mach_msg_format_0_trailer_t /* = platform.darwin.mach_msg_security_trailer_t */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class mach_send_possible_notification_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final val not_header: platform.darwin.mach_msg_header_t
        get() = TODO()

    final var not_port: platform.darwin.mach_port_name_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_port_name_t /* = kotlin.UInt */) = TODO()

    final val trailer: platform.darwin.mach_msg_format_0_trailer_t /* = platform.darwin.mach_msg_security_trailer_t */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class mach_vm_info_region public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var vir_end: platform.darwin.mach_vm_offset_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_offset_t /* = kotlin.ULong */) = TODO()

    final var vir_inheritance: platform.darwin.vm_inherit_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.vm_inherit_t /* = kotlin.UInt */) = TODO()

    final var vir_max_protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var vir_needs_copy: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var vir_object: platform.darwin.mach_vm_offset_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_offset_t /* = kotlin.ULong */) = TODO()

    final var vir_offset: platform.darwin.memory_object_offset_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.memory_object_offset_t /* = kotlin.ULong */) = TODO()

    final var vir_protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var vir_start: platform.darwin.mach_vm_offset_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.mach_vm_offset_t /* = kotlin.ULong */) = TODO()

    final var vir_user_wired_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var vir_wired_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class mach_zone_info_data public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var mzi_alloc_size: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var mzi_collectable: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var mzi_count: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var mzi_cur_size: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var mzi_elem_size: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var mzi_exhaustible: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var mzi_max_size: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var mzi_sum_size: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class mach_zone_name public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val mzn_name: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class mig_reply_error_t public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val Head: platform.darwin.mach_msg_header_t
        get() = TODO()

    final val NDR: platform.darwin.NDR_record_t
        get() = TODO()

    final var RetCode: platform.darwin.kern_return_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.kern_return_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class mig_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var end: platform.darwin.mach_msg_id_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.mach_msg_id_t /* = kotlin.Int */) = TODO()

    final var maxsize: platform.darwin.mach_msg_size_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.mach_msg_size_t /* = kotlin.UInt */) = TODO()

    final var reserved: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final val routine: kotlinx.cinterop.CArrayPointer<platform.darwin.mig_routine_descriptor /* = platform.darwin.routine_descriptor */> /* = kotlinx.cinterop.CPointer<platform.darwin.mig_routine_descriptor /* = platform.darwin.routine_descriptor */> */
        get() = TODO()

    final var server: platform.darwin.mig_server_routine_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?) -> platform.darwin.mig_routine_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?, kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?) -> kotlin.Unit>>? */>>? */
        get() = TODO()
        set(value: platform.darwin.mig_server_routine_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?) -> platform.darwin.mig_routine_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?, kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?) -> kotlin.Unit>>? */>>? */) = TODO()

    final var start: platform.darwin.mach_msg_id_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.mach_msg_id_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class mig_symtab public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var ms_routine: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Unit>>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Unit>>?) = TODO()

    final var ms_routine_name: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) = TODO()

    final var ms_routine_number: kotlin.Int
        get() = TODO()
        set(value: kotlin.Int) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class routine_descriptor public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var arg_descr: platform.darwin.routine_arg_descriptor_t? /* = kotlinx.cinterop.CPointer<platform.darwin.mach_msg_type_descriptor_t>? */
        get() = TODO()
        set(value: platform.darwin.routine_arg_descriptor_t? /* = kotlinx.cinterop.CPointer<platform.darwin.mach_msg_type_descriptor_t>? */) = TODO()

    final var argc: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var descr_count: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var impl_routine: platform.darwin.mig_impl_routine_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> platform.darwin.kern_return_t /* = kotlin.Int */>>? */
        get() = TODO()
        set(value: platform.darwin.mig_impl_routine_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> platform.darwin.kern_return_t /* = kotlin.Int */>>? */) = TODO()

    final var max_reply_msg: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var stub_routine: platform.darwin.mig_stub_routine_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?, kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.darwin.mig_stub_routine_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?, kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?) -> kotlin.Unit>>? */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class rpc_routine_arg_descriptor public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var count: platform.darwin.routine_arg_size /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.routine_arg_size /* = kotlin.UInt */) = TODO()

    final var offset: platform.darwin.routine_arg_offset /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.routine_arg_offset /* = kotlin.UInt */) = TODO()

    final var size: platform.darwin.routine_arg_size /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.routine_arg_size /* = kotlin.UInt */) = TODO()

    final var type: platform.darwin.routine_arg_type /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.routine_arg_type /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class rpc_routine_descriptor public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var arg_descr: platform.darwin.rpc_routine_arg_descriptor_t? /* = kotlinx.cinterop.CPointer<platform.darwin.rpc_routine_arg_descriptor>? */
        get() = TODO()
        set(value: platform.darwin.rpc_routine_arg_descriptor_t? /* = kotlinx.cinterop.CPointer<platform.darwin.rpc_routine_arg_descriptor>? */) = TODO()

    final var argc: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var descr_count: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var impl_routine: platform.darwin.mig_impl_routine_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> platform.darwin.kern_return_t /* = kotlin.Int */>>? */
        get() = TODO()
        set(value: platform.darwin.mig_impl_routine_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> platform.darwin.kern_return_t /* = kotlin.Int */>>? */) = TODO()

    final var max_reply_msg: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var stub_routine: platform.darwin.mig_stub_routine_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?, kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?) -> kotlin.Unit>>? */
        get() = TODO()
        set(value: platform.darwin.mig_stub_routine_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?, kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?) -> kotlin.Unit>>? */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class rpc_signature public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val rad: kotlinx.cinterop.CArrayPointer<platform.darwin.rpc_routine_arg_descriptor> /* = kotlinx.cinterop.CPointer<platform.darwin.rpc_routine_arg_descriptor> */
        get() = TODO()

    final val rd: platform.darwin.rpc_routine_descriptor
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class rpc_subsystem public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val arg_descriptor: kotlinx.cinterop.CArrayPointer<platform.darwin.rpc_routine_arg_descriptor> /* = kotlinx.cinterop.CPointer<platform.darwin.rpc_routine_arg_descriptor> */
        get() = TODO()

    final var base_addr: platform.darwin.vm_address_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_address_t /* = kotlin.ULong */) = TODO()

    final var end: platform.darwin.mach_msg_id_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.mach_msg_id_t /* = kotlin.Int */) = TODO()

    final var maxsize: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var reserved: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */
        get() = TODO()
        set(value: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) = TODO()

    final val routine: kotlinx.cinterop.CArrayPointer<platform.darwin.rpc_routine_descriptor> /* = kotlinx.cinterop.CPointer<platform.darwin.rpc_routine_descriptor> */
        get() = TODO()

    final var start: platform.darwin.mach_msg_id_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.mach_msg_id_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class sockaddr_in public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val sin_addr: platform.posix.in_addr
        get() = TODO()

    final var sin_family: platform.posix.sa_family_t /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.sa_family_t /* = kotlin.UByte */) = TODO()

    final var sin_len: platform.posix.__uint8_t /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.__uint8_t /* = kotlin.UByte */) = TODO()

    final var sin_port: platform.posix.in_port_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.in_port_t /* = kotlin.UShort */) = TODO()

    final val sin_zero: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class sockaddr_in6 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val sin6_addr: platform.posix.in6_addr
        get() = TODO()

    final var sin6_family: platform.posix.sa_family_t /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.sa_family_t /* = kotlin.UByte */) = TODO()

    final var sin6_flowinfo: platform.posix.__uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.__uint32_t /* = kotlin.UInt */) = TODO()

    final var sin6_len: platform.posix.__uint8_t /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.__uint8_t /* = kotlin.UByte */) = TODO()

    final var sin6_port: platform.posix.in_port_t /* = kotlin.UShort */
        get() = TODO()
        set(value: platform.posix.in_port_t /* = kotlin.UShort */) = TODO()

    final var sin6_scope_id: platform.posix.__uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.__uint32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class task_zone_info_data public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var tzi_alloc_size: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var tzi_caller_acct: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var tzi_collectable: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var tzi_count: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var tzi_cur_size: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var tzi_elem_size: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var tzi_exhaustible: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var tzi_max_size: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var tzi_sum_size: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var tzi_task_alloc: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    final var tzi_task_free: platform.posix.uint64_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.uint64_t /* = kotlin.ULong */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class tokenstr public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var data: kotlinx.cinterop.CPointer<platform.posix.u_charVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.u_char /* = kotlin.UByte */> */>?
        get() = TODO()
        set(value: kotlinx.cinterop.CPointer<platform.posix.u_charVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.u_char /* = kotlin.UByte */> */>?) = TODO()

    final var id: platform.posix.u_char /* = kotlin.UByte */
        get() = TODO()
        set(value: platform.posix.u_char /* = kotlin.UByte */) = TODO()

    final var len: platform.posix.size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.posix.size_t /* = kotlin.ULong */) = TODO()

    final val tt: platform.darwin.anonymousStruct10
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class utmp public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val ut_host: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final val ut_line: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final val ut_name: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    final var ut_time: kotlin.Long
        get() = TODO()
        set(value: kotlin.Long) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class vm_info_object public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var vio_absent_count: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var vio_alive: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var vio_can_persist: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var vio_copy: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var vio_copy_strategy: platform.darwin.memory_object_copy_strategy_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.memory_object_copy_strategy_t /* = kotlin.Int */) = TODO()

    final var vio_internal: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var vio_last_alloc: platform.darwin.vm_offset_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_offset_t /* = kotlin.ULong */) = TODO()

    final var vio_object: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var vio_pager_created: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var vio_pager_initialized: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var vio_pager_ready: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var vio_paging_in_progress: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var vio_paging_offset: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var vio_purgable: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var vio_purgable_volatile: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var vio_ref_count: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var vio_resident_page_count: kotlin.UInt
        get() = TODO()
        set(value: kotlin.UInt) = TODO()

    final var vio_shadow: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var vio_shadow_offset: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var vio_size: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var vio_temporary: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class vm_info_region public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var vir_end: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var vir_inheritance: platform.darwin.vm_inherit_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.vm_inherit_t /* = kotlin.UInt */) = TODO()

    final var vir_max_protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var vir_needs_copy: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var vir_object: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var vir_offset: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var vir_protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var vir_start: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var vir_user_wired_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var vir_wired_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class vm_info_region_64 public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var vir_end: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var vir_inheritance: platform.darwin.vm_inherit_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.vm_inherit_t /* = kotlin.UInt */) = TODO()

    final var vir_max_protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var vir_needs_copy: platform.posix.boolean_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.boolean_t /* = kotlin.UInt */) = TODO()

    final var vir_object: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var vir_offset: platform.darwin.memory_object_offset_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.memory_object_offset_t /* = kotlin.ULong */) = TODO()

    final var vir_protection: platform.darwin.vm_prot_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.vm_prot_t /* = kotlin.Int */) = TODO()

    final var vir_start: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var vir_user_wired_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    final var vir_wired_count: platform.darwin.natural_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.darwin.natural_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class zone_btrecord public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val bt: kotlinx.cinterop.CArrayPointer<platform.posix.uint64_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.uint64_t /* = kotlin.ULong */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ULongVarOf<platform.posix.uint64_t /* = kotlin.ULong */>> */
        get() = TODO()

    final var operation_type: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    final var ref_count: platform.posix.uint32_t /* = kotlin.UInt */
        get() = TODO()
        set(value: platform.posix.uint32_t /* = kotlin.UInt */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class zone_info public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final var zi_alloc_size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    final var zi_collectable: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var zi_count: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var zi_cur_size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    final var zi_elem_size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    final var zi_exhaustible: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var zi_max_size: platform.darwin.vm_size_t /* = kotlin.ULong */
        get() = TODO()
        set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

    final var zi_pageable: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    final var zi_sleepable: platform.darwin.integer_t /* = kotlin.Int */
        get() = TODO()
        set(value: platform.darwin.integer_t /* = kotlin.Int */) = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

final class zone_name public constructor(/*0*/ rawPtr: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.CStructVar(TODO() as kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) {
    final val zn_name: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
        get() = TODO()

    companion object Companion: kotlinx.cinterop.CStructVar.Type(TODO() as kotlin.Long, TODO() as kotlin.Int) {
    }
}

typealias Byte = platform.darwin.UInt8

typealias ByteCount = kotlin.ULong

typealias ByteCountVar = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteCount>

typealias ByteOffset = kotlin.ULong

typealias ByteOffsetVar = kotlinx.cinterop.ULongVarOf<platform.darwin.ByteOffset>

typealias BytePtr = kotlinx.cinterop.CPointer<platform.darwin.UInt8Var>

typealias BytePtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.BytePtr>

typealias ByteVar = kotlinx.cinterop.UByteVarOf<platform.darwin.Byte>

typealias CharParameterVar = kotlinx.cinterop.ShortVarOf<platform.darwin.CharParameter>

typealias ConstLogicalAddress = kotlinx.cinterop.COpaquePointer

typealias ConstLogicalAddressVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.ConstLogicalAddress>

typealias ConstStr15Param = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar>

typealias ConstStr15ParamVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.ConstStr15Param>

typealias ConstStr255Param = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar>

typealias ConstStr255ParamVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.ConstStr255Param>

typealias ConstStr27Param = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar>

typealias ConstStr27ParamVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.ConstStr27Param>

typealias ConstStr31Param = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar>

typealias ConstStr31ParamVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.ConstStr31Param>

typealias ConstStr32Param = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar>

typealias ConstStr32ParamVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.ConstStr32Param>

typealias ConstStr63Param = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar>

typealias ConstStr63ParamVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.ConstStr63Param>

typealias ConstStrFileNameParam = platform.darwin.ConstStr63Param

typealias ConstStrFileNameParamVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.ConstStrFileNameParam>

typealias ConstStringPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar>

typealias ConstStringPtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.ConstStringPtr>

typealias DNSRecordRef = kotlinx.cinterop.CPointer<cnames.structs._DNSRecordRef_t>

typealias DNSRecordRefVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSRecordRef>

typealias DNSServiceBrowseReply = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.DNSServiceRef?, platform.darwin.DNSServiceFlags, platform.posix.uint32_t, platform.darwin.DNSServiceErrorType, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias DNSServiceBrowseReplyVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSServiceBrowseReply>

typealias DNSServiceDomainEnumReply = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.DNSServiceRef?, platform.darwin.DNSServiceFlags, platform.posix.uint32_t, platform.darwin.DNSServiceErrorType, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias DNSServiceDomainEnumReplyVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSServiceDomainEnumReply>

typealias DNSServiceErrorType = platform.posix.int32_t

typealias DNSServiceErrorTypeVar = kotlinx.cinterop.IntVarOf<platform.darwin.DNSServiceErrorType>

typealias DNSServiceFlags = platform.posix.uint32_t

typealias DNSServiceFlagsVar = kotlinx.cinterop.UIntVarOf<platform.darwin.DNSServiceFlags>

typealias DNSServiceGetAddrInfoReply = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.DNSServiceRef?, platform.darwin.DNSServiceFlags, platform.posix.uint32_t, platform.darwin.DNSServiceErrorType, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, kotlinx.cinterop.CPointer<platform.posix.sockaddr>?, platform.posix.uint32_t, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias DNSServiceGetAddrInfoReplyVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSServiceGetAddrInfoReply>

typealias DNSServiceNATPortMappingReply = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.DNSServiceRef?, platform.darwin.DNSServiceFlags, platform.posix.uint32_t, platform.darwin.DNSServiceErrorType, platform.posix.uint32_t, platform.darwin.DNSServiceProtocol, platform.posix.uint16_t, platform.posix.uint16_t, platform.posix.uint32_t, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias DNSServiceNATPortMappingReplyVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSServiceNATPortMappingReply>

typealias DNSServiceProtocol = platform.posix.uint32_t

typealias DNSServiceProtocolVar = kotlinx.cinterop.UIntVarOf<platform.darwin.DNSServiceProtocol>

typealias DNSServiceQueryRecordReply = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.DNSServiceRef?, platform.darwin.DNSServiceFlags, platform.posix.uint32_t, platform.darwin.DNSServiceErrorType, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, platform.posix.uint16_t, platform.posix.uint16_t, platform.posix.uint16_t, kotlinx.cinterop.COpaquePointer?, platform.posix.uint32_t, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias DNSServiceQueryRecordReplyVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSServiceQueryRecordReply>

typealias DNSServiceRef = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t>

typealias DNSServiceRefVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSServiceRef>

typealias DNSServiceRegisterRecordReply = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.DNSServiceRef?, platform.darwin.DNSRecordRef?, platform.darwin.DNSServiceFlags, platform.darwin.DNSServiceErrorType, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias DNSServiceRegisterRecordReplyVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSServiceRegisterRecordReply>

typealias DNSServiceRegisterReply = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.DNSServiceRef?, platform.darwin.DNSServiceFlags, platform.darwin.DNSServiceErrorType, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias DNSServiceRegisterReplyVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSServiceRegisterReply>

typealias DNSServiceResolveReply = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.DNSServiceRef?, platform.darwin.DNSServiceFlags, platform.posix.uint32_t, platform.darwin.DNSServiceErrorType, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, platform.posix.uint16_t, platform.posix.uint16_t, kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar>?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias DNSServiceResolveReplyVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSServiceResolveReply>

typealias DNSServiceSleepKeepaliveReply = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.DNSServiceRef?, platform.darwin.DNSServiceErrorType, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias DNSServiceSleepKeepaliveReplyVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSServiceSleepKeepaliveReply>

typealias Duration = platform.darwin.SInt32

typealias DurationVar = kotlinx.cinterop.IntVarOf<platform.darwin.Duration>

typealias Fixed = platform.darwin.SInt32

typealias FixedPtr = kotlinx.cinterop.CPointer<platform.darwin.FixedVar>

typealias FixedPtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.FixedPtr>

typealias FixedVar = kotlinx.cinterop.IntVarOf<platform.darwin.Fixed>

typealias Float32Var = kotlinx.cinterop.FloatVarOf<platform.darwin.Float32>

typealias Float64Var = kotlinx.cinterop.DoubleVarOf<platform.darwin.Float64>

typealias FourCharCode = platform.darwin.UInt32

typealias FourCharCodeVar = kotlinx.cinterop.UIntVarOf<platform.darwin.FourCharCode>

typealias Fract = platform.darwin.SInt32

typealias FractPtr = kotlinx.cinterop.CPointer<platform.darwin.FractVar>

typealias FractPtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.FractPtr>

typealias FractVar = kotlinx.cinterop.IntVarOf<platform.darwin.Fract>

typealias Handle = kotlinx.cinterop.CPointer<platform.darwin.PtrVar>

typealias HandleVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.Handle>

typealias IMP = kotlinx.cinterop.COpaquePointer

typealias IMPVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.IMP>

typealias ItemCount = kotlin.ULong

typealias ItemCountVar = kotlinx.cinterop.ULongVarOf<platform.darwin.ItemCount>

typealias LangCode = platform.darwin.SInt16

typealias LangCodeVar = kotlinx.cinterop.ShortVarOf<platform.darwin.LangCode>

typealias LogicalAddress = kotlinx.cinterop.COpaquePointer

typealias LogicalAddressVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.LogicalAddress>

typealias NSIntegerVar = kotlinx.cinterop.LongVarOf<platform.darwin.NSInteger>

typealias NSUInteger = kotlin.ULong

typealias NSUIntegerVar = kotlinx.cinterop.ULongVarOf<platform.darwin.NSUInteger>

typealias NXSwappedDouble = kotlin.ULong

typealias NXSwappedDoubleVar = kotlinx.cinterop.ULongVarOf<platform.darwin.NXSwappedDouble>

typealias NXSwappedFloat = kotlin.ULong

typealias NXSwappedFloatVar = kotlinx.cinterop.ULongVarOf<platform.darwin.NXSwappedFloat>

typealias NumVersionVariantHandle = kotlinx.cinterop.CPointer<platform.darwin.NumVersionVariantPtrVar>

typealias NumVersionVariantHandleVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.NumVersionVariantHandle>

typealias NumVersionVariantPtr = kotlinx.cinterop.CPointer<platform.darwin.NumVersionVariant>

typealias NumVersionVariantPtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.NumVersionVariantPtr>

typealias OSErr = platform.darwin.SInt16

typealias OSErrVar = kotlinx.cinterop.ShortVarOf<platform.darwin.OSErr>

typealias OSStatus = platform.darwin.SInt32

typealias OSStatusVar = kotlinx.cinterop.IntVarOf<platform.darwin.OSStatus>

typealias OSType = platform.darwin.FourCharCode

typealias OSTypePtr = kotlinx.cinterop.CPointer<platform.darwin.OSTypeVar>

typealias OSTypePtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.OSTypePtr>

typealias OSTypeVar = kotlinx.cinterop.UIntVarOf<platform.darwin.OSType>

typealias OptionBits = platform.darwin.UInt32

typealias OptionBitsVar = kotlinx.cinterop.UIntVarOf<platform.darwin.OptionBits>

typealias PBVersion = platform.darwin.UInt32

typealias PBVersionVar = kotlinx.cinterop.UIntVarOf<platform.darwin.PBVersion>

typealias PRefCon = kotlinx.cinterop.COpaquePointer

typealias PRefConVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.PRefCon>

typealias PhysicalAddress = kotlinx.cinterop.COpaquePointer

typealias PhysicalAddressVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.PhysicalAddress>

typealias PointPtr = kotlinx.cinterop.CPointer<platform.darwin.Point>

typealias PointPtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.PointPtr>

typealias ProcHandle = kotlinx.cinterop.CPointer<platform.darwin.ProcPtrVar>

typealias ProcHandleVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.ProcHandle>

typealias ProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Long>>

typealias ProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.ProcPtr>

typealias ProcessSerialNumberPtr = kotlinx.cinterop.CPointer<platform.darwin.ProcessSerialNumber>

typealias ProcessSerialNumberPtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.ProcessSerialNumberPtr>

typealias Ptr = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>

typealias PtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.Ptr>

typealias RectPtr = kotlinx.cinterop.CPointer<platform.darwin.Rect>

typealias RectPtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.RectPtr>

typealias RegionCode = platform.darwin.SInt16

typealias RegionCodeVar = kotlinx.cinterop.ShortVarOf<platform.darwin.RegionCode>

typealias Register68kProcPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> kotlin.Unit>>

typealias Register68kProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.Register68kProcPtr>

typealias ResType = platform.darwin.FourCharCode

typealias ResTypePtr = kotlinx.cinterop.CPointer<platform.darwin.ResTypeVar>

typealias ResTypePtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.ResTypePtr>

typealias ResTypeVar = kotlinx.cinterop.UIntVarOf<platform.darwin.ResType>

typealias SInt16Var = kotlinx.cinterop.ShortVarOf<platform.darwin.SInt16>

typealias SInt32Var = kotlinx.cinterop.IntVarOf<platform.darwin.SInt32>

typealias SInt64Var = kotlinx.cinterop.LongVarOf<platform.darwin.SInt64>

typealias SInt8Var = kotlinx.cinterop.ByteVarOf<platform.darwin.SInt8>

typealias SRefCon = kotlinx.cinterop.COpaquePointer

typealias SRefConVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.SRefCon>

typealias ScriptCode = platform.darwin.SInt16

typealias ScriptCodeVar = kotlinx.cinterop.ShortVarOf<platform.darwin.ScriptCode>

typealias ShortFixedPtr = kotlinx.cinterop.CPointer<platform.darwin.ShortFixedVar>

typealias ShortFixedPtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.ShortFixedPtr>

typealias ShortFixedVar = kotlinx.cinterop.ShortVarOf<platform.darwin.ShortFixed>

typealias SignedByte = platform.darwin.SInt8

typealias SignedByteVar = kotlinx.cinterop.ByteVarOf<platform.darwin.SignedByte>

typealias SizeVar = kotlinx.cinterop.LongVarOf<platform.darwin.Size>

typealias Str15 = kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.UByteVar>

typealias Str15Var = kotlinx.cinterop.CPointerVarOf<platform.darwin.Str15>

typealias Str255 = kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.UByteVar>

typealias Str255Var = kotlinx.cinterop.CPointerVarOf<platform.darwin.Str255>

typealias Str27 = kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.UByteVar>

typealias Str27Var = kotlinx.cinterop.CPointerVarOf<platform.darwin.Str27>

typealias Str31 = kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.UByteVar>

typealias Str31Var = kotlinx.cinterop.CPointerVarOf<platform.darwin.Str31>

typealias Str32 = kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.UByteVar>

typealias Str32Field = kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.UByteVar>

typealias Str32FieldVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.Str32Field>

typealias Str32Var = kotlinx.cinterop.CPointerVarOf<platform.darwin.Str32>

typealias Str63 = kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.UByteVar>

typealias Str63Var = kotlinx.cinterop.CPointerVarOf<platform.darwin.Str63>

typealias StrFileName = platform.darwin.Str63

typealias StrFileNameVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.StrFileName>

typealias StringHandle = kotlinx.cinterop.CPointer<platform.darwin.StringPtrVar>

typealias StringHandleVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.StringHandle>

typealias StringPtr = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar>

typealias StringPtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.StringPtr>

typealias Style = kotlin.UByte

typealias StyleField = platform.darwin.Style

typealias StyleFieldVar = kotlinx.cinterop.UByteVarOf<platform.darwin.StyleField>

typealias StyleParameterVar = kotlinx.cinterop.ShortVarOf<platform.darwin.StyleParameter>

typealias StyleVar = kotlinx.cinterop.UByteVarOf<platform.darwin.Style>

typealias TimeBase = kotlinx.cinterop.CPointer<cnames.structs.TimeBaseRecord>

typealias TimeBaseVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.TimeBase>

typealias TimeScale = platform.darwin.SInt32

typealias TimeScaleVar = kotlinx.cinterop.IntVarOf<platform.darwin.TimeScale>

typealias TimeValue = platform.darwin.SInt32

typealias TimeValue64 = platform.darwin.SInt64

typealias TimeValue64Var = kotlinx.cinterop.LongVarOf<platform.darwin.TimeValue64>

typealias TimeValueVar = kotlinx.cinterop.IntVarOf<platform.darwin.TimeValue>

typealias UInt16 = kotlin.UShort

typealias UInt16Var = kotlinx.cinterop.UShortVarOf<platform.darwin.UInt16>

typealias UInt32 = kotlin.UInt

typealias UInt32Var = kotlinx.cinterop.UIntVarOf<platform.darwin.UInt32>

typealias UInt64 = kotlin.ULong

typealias UInt64Var = kotlinx.cinterop.ULongVarOf<platform.darwin.UInt64>

typealias UInt8 = kotlin.UByte

typealias UInt8Var = kotlinx.cinterop.UByteVarOf<platform.darwin.UInt8>

typealias UNDServerRef = platform.darwin.mach_port_t

typealias UNDServerRefVar = kotlinx.cinterop.UIntVarOf<platform.darwin.UNDServerRef>

typealias URefCon = kotlinx.cinterop.COpaquePointer

typealias URefConVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.URefCon>

typealias UTF16Char = platform.darwin.UInt16

typealias UTF16CharVar = kotlinx.cinterop.UShortVarOf<platform.darwin.UTF16Char>

typealias UTF32Char = platform.darwin.UInt32

typealias UTF32CharVar = kotlinx.cinterop.UIntVarOf<platform.darwin.UTF32Char>

typealias UTF8Char = platform.darwin.UInt8

typealias UTF8CharVar = kotlinx.cinterop.UByteVarOf<platform.darwin.UTF8Char>

typealias UniChar = platform.darwin.UInt16

typealias UniCharCount = kotlin.ULong

typealias UniCharCountPtr = kotlinx.cinterop.CPointer<platform.darwin.UniCharCountVar>

typealias UniCharCountPtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.UniCharCountPtr>

typealias UniCharCountVar = kotlinx.cinterop.ULongVarOf<platform.darwin.UniCharCount>

typealias UniCharPtr = kotlinx.cinterop.CPointer<platform.darwin.UniCharVar>

typealias UniCharPtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.UniCharPtr>

typealias UniCharVar = kotlinx.cinterop.UShortVarOf<platform.darwin.UniChar>

typealias UnicodeScalarValue = platform.darwin.UInt32

typealias UnicodeScalarValueVar = kotlinx.cinterop.UIntVarOf<platform.darwin.UnicodeScalarValue>

typealias UniversalProcHandle = kotlinx.cinterop.CPointer<platform.darwin.UniversalProcPtrVar>

typealias UniversalProcHandleVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.UniversalProcHandle>

typealias UniversalProcPtr = platform.darwin.ProcPtr

typealias UniversalProcPtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.UniversalProcPtr>

typealias UnsignedFixed = platform.darwin.UInt32

typealias UnsignedFixedPtr = kotlinx.cinterop.CPointer<platform.darwin.UnsignedFixedVar>

typealias UnsignedFixedPtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.UnsignedFixedPtr>

typealias UnsignedFixedVar = kotlinx.cinterop.UIntVarOf<platform.darwin.UnsignedFixed>

typealias UnsignedWidePtr = kotlinx.cinterop.CPointer<platform.darwin.UnsignedWide>

typealias UnsignedWidePtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.UnsignedWidePtr>

typealias VHSelect = platform.darwin.SInt8

typealias VHSelectVar = kotlinx.cinterop.ByteVarOf<platform.darwin.VHSelect>

typealias VersRecHndl = kotlinx.cinterop.CPointer<platform.darwin.VersRecPtrVar>

typealias VersRecHndlVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.VersRecHndl>

typealias VersRecPtr = kotlinx.cinterop.CPointer<platform.darwin.VersRec>

typealias VersRecPtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.VersRecPtr>

typealias WidePtr = kotlinx.cinterop.CPointer<platform.darwin.wide>

typealias WidePtrVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.WidePtr>

typealias _MM_PERM_ENUM = kotlin.UInt

typealias _MM_PERM_ENUMVar = kotlinx.cinterop.UIntVarOf<platform.darwin._MM_PERM_ENUM>

typealias _Unwind_Action = kotlin.UInt

typealias _Unwind_ActionVar = kotlinx.cinterop.UIntVarOf<platform.darwin._Unwind_Action>

typealias _Unwind_Reason_Code = kotlin.UInt

typealias _Unwind_Reason_CodeVar = kotlinx.cinterop.UIntVarOf<platform.darwin._Unwind_Reason_Code>

typealias _Unwind_Stop_Fn = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Int, platform.darwin._Unwind_Action, platform.posix.uint64_t, kotlinx.cinterop.CPointer<platform.darwin._Unwind_Exception>?, kotlinx.cinterop.CPointer<cnames.structs._Unwind_Context>?, kotlinx.cinterop.COpaquePointer?) -> platform.darwin._Unwind_Reason_Code>>

typealias _Unwind_Stop_FnVar = kotlinx.cinterop.CPointerVarOf<platform.darwin._Unwind_Stop_Fn>

typealias _Unwind_Trace_Fn = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<cnames.structs._Unwind_Context>?, kotlinx.cinterop.COpaquePointer?) -> platform.darwin._Unwind_Reason_Code>>

typealias _Unwind_Trace_FnVar = kotlinx.cinterop.CPointerVarOf<platform.darwin._Unwind_Trace_Fn>

typealias __SIMD_BOOLEAN_TYPE__ = platform.darwin.simd_bool

typealias __SIMD_BOOLEAN_TYPE__Var = kotlinx.cinterop.BooleanVarOf<platform.darwin.__SIMD_BOOLEAN_TYPE__>

typealias __mmask16 = kotlin.UShort

typealias __mmask16Var = kotlinx.cinterop.UShortVarOf<platform.darwin.__mmask16>

typealias __mmask32 = kotlin.UInt

typealias __mmask32Var = kotlinx.cinterop.UIntVarOf<platform.darwin.__mmask32>

typealias __mmask64 = kotlin.ULong

typealias __mmask64Var = kotlinx.cinterop.ULongVarOf<platform.darwin.__mmask64>

typealias __mmask8 = kotlin.UByte

typealias __mmask8Var = kotlinx.cinterop.UByteVarOf<platform.darwin.__mmask8>

typealias __personality_routine = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Int, platform.darwin._Unwind_Action, platform.posix.uint64_t, kotlinx.cinterop.CPointer<platform.darwin._Unwind_Exception>?, kotlinx.cinterop.CPointer<cnames.structs._Unwind_Context>?) -> platform.darwin._Unwind_Reason_Code>>

typealias __personality_routineVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.__personality_routine>

typealias addr64_t = platform.posix.uint64_t

typealias addr64_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.addr64_t>

typealias alarm_port_t = platform.darwin.alarm_t

typealias alarm_port_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.alarm_port_t>

typealias alarm_t = platform.darwin.mach_port_t

typealias alarm_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.alarm_t>

typealias alarm_type_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.alarm_type_t>

typealias asl_object_t = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>

typealias asl_object_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.asl_object_t>

typealias aslclient = platform.darwin.asl_object_t

typealias aslclientVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.aslclient>

typealias aslmsg = platform.darwin.asl_object_t

typealias aslmsgVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.aslmsg>

typealias aslresponse = platform.darwin.asl_object_t

typealias aslresponseVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.aslresponse>

typealias at_alpha_t = platform.posix.uint32_t

typealias at_alpha_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.at_alpha_t>

typealias at_block_format_t = kotlin.ULong

typealias at_block_format_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.at_block_format_t>

typealias at_encoder_tVar = kotlinx.cinterop.ObjCObjectVar<platform.darwin.at_encoder_t>

typealias at_error_tVar = kotlinx.cinterop.LongVarOf<platform.darwin.at_error_t>

typealias at_flags_t = platform.posix.uint64_t

typealias at_flags_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.at_flags_t>

typealias at_texel_format_t = kotlin.ULong

typealias at_texel_format_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.at_texel_format_t>

typealias au_asflgs_t = platform.posix.u_int64_t

typealias au_asflgs_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.au_asflgs_t>

typealias au_asid_t = platform.posix.pid_t

typealias au_asid_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.au_asid_t>

typealias au_class_ent_t = platform.darwin.au_class_ent

typealias au_class_t = platform.posix.u_int32_t

typealias au_class_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.au_class_t>

typealias au_ctlmode_t = kotlin.UByte

typealias au_ctlmode_tVar = kotlinx.cinterop.UByteVarOf<platform.darwin.au_ctlmode_t>

typealias au_emod_t = platform.posix.u_int16_t

typealias au_emod_tVar = kotlinx.cinterop.UShortVarOf<platform.darwin.au_emod_t>

typealias au_event_ent_t = platform.darwin.au_event_ent

typealias au_event_t = platform.posix.u_int16_t

typealias au_event_tVar = kotlinx.cinterop.UShortVarOf<platform.darwin.au_event_t>

typealias au_id_t = platform.posix.uid_t

typealias au_id_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.au_id_t>

typealias au_tid32_t = platform.darwin.au_tid32

typealias au_tid64_t = platform.darwin.au_tid64

typealias au_tidaddr32_t = platform.darwin.au_tidaddr32

typealias au_tidaddr64_t = platform.darwin.au_tidaddr64

typealias au_user_ent_t = platform.darwin.au_user_ent

typealias bank_action_t = platform.posix.uint32_t

typealias bank_action_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.bank_action_t>

typealias bitstr_t = kotlin.UByte

typealias bitstr_tVar = kotlinx.cinterop.UByteVarOf<platform.darwin.bitstr_t>

typealias bootstrap_t = platform.darwin.mach_port_t

typealias bootstrap_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.bootstrap_t>

typealias cache_cost_t = platform.posix.size_t

typealias cache_cost_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.cache_cost_t>

typealias cache_key_hash_cb_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer?, kotlinx.cinterop.COpaquePointer?) -> platform.posix.uintptr_t>>

typealias cache_key_hash_cb_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.cache_key_hash_cb_t>

typealias cache_key_is_equal_cb_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer?, kotlinx.cinterop.COpaquePointer?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Boolean>>

typealias cache_key_is_equal_cb_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.cache_key_is_equal_cb_t>

typealias cache_key_retain_cb_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer?, kotlinx.cinterop.CPointer<kotlinx.cinterop.COpaquePointerVar>?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias cache_key_retain_cb_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.cache_key_retain_cb_t>

typealias cache_release_cb_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias cache_release_cb_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.cache_release_cb_t>

typealias cache_value_make_nonpurgeable_cb_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Boolean>>

typealias cache_value_make_nonpurgeable_cb_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.cache_value_make_nonpurgeable_cb_t>

typealias cache_value_make_purgeable_cb_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias cache_value_make_purgeable_cb_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.cache_value_make_purgeable_cb_t>

typealias cache_value_retain_cb_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias cache_value_retain_cb_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.cache_value_retain_cb_t>

typealias clock_attr_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVar>

typealias clock_attr_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.clock_attr_t>

typealias clock_ctrl_port_t = platform.darwin.clock_ctrl_t

typealias clock_ctrl_port_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.clock_ctrl_port_t>

typealias clock_ctrl_t = platform.darwin.mach_port_t

typealias clock_ctrl_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.clock_ctrl_t>

typealias clock_flavor_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.clock_flavor_t>

typealias clock_id_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.clock_id_t>

typealias clock_reply_t = platform.darwin.mach_port_t

typealias clock_reply_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.clock_reply_t>

typealias clock_res_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.clock_res_t>

typealias clock_serv_port_t = platform.darwin.clock_serv_t

typealias clock_serv_port_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.clock_serv_port_t>

typealias clock_serv_t = platform.darwin.mach_port_t

typealias clock_serv_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.clock_serv_t>

typealias coalition_t = platform.darwin.mach_port_t

typealias coalition_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.coalition_t>

typealias compression_algorithm = kotlin.UInt

typealias compression_algorithmVar = kotlinx.cinterop.UIntVarOf<platform.darwin.compression_algorithm>

typealias compression_statusVar = kotlinx.cinterop.IntVarOf<platform.darwin.compression_status>

typealias compression_stream_flags = kotlin.UInt

typealias compression_stream_flagsVar = kotlinx.cinterop.UIntVarOf<platform.darwin.compression_stream_flags>

typealias compression_stream_operation = kotlin.UInt

typealias compression_stream_operationVar = kotlinx.cinterop.UIntVarOf<platform.darwin.compression_stream_operation>

typealias copyfile_callback_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Int, kotlin.Int, platform.darwin.copyfile_state_t?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Int>>

typealias copyfile_callback_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.copyfile_callback_t>

typealias copyfile_flags_t = platform.posix.uint32_t

typealias copyfile_flags_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.copyfile_flags_t>

typealias copyfile_state_t = kotlinx.cinterop.CPointer<cnames.structs._copyfile_state>

typealias copyfile_state_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.copyfile_state_t>

typealias cpu_subtype_t = platform.darwin.integer_t

typealias cpu_subtype_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.cpu_subtype_t>

typealias cpu_threadtype_t = platform.darwin.integer_t

typealias cpu_threadtype_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.cpu_threadtype_t>

typealias cpu_type_t = platform.darwin.integer_t

typealias cpu_type_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.cpu_type_t>

typealias dispatch_autorelease_frequency_t = kotlin.ULong

typealias dispatch_autorelease_frequency_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.dispatch_autorelease_frequency_t>

typealias dispatch_block_flags_t = kotlin.ULong

typealias dispatch_block_flags_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.dispatch_block_flags_t>

typealias dispatch_block_t = (() -> kotlin.Unit)?

typealias dispatch_block_tVar = kotlinx.cinterop.ObjCBlockVar<platform.darwin.dispatch_block_t>

typealias dispatch_data_applier_t = ((platform.darwin.dispatch_data_t?, platform.posix.size_t, kotlinx.cinterop.COpaquePointer?, platform.posix.size_t) -> kotlin.Boolean)?

typealias dispatch_data_applier_tVar = kotlinx.cinterop.ObjCBlockVar<platform.darwin.dispatch_data_applier_t>

typealias dispatch_data_tVar = kotlinx.cinterop.ObjCObjectVar<platform.darwin.dispatch_data_t>

typealias dispatch_fd_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.dispatch_fd_t>

typealias dispatch_function_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias dispatch_function_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.dispatch_function_t>

typealias dispatch_group_tVar = kotlinx.cinterop.ObjCObjectVar<platform.darwin.dispatch_group_t>

typealias dispatch_io_close_flags_t = kotlin.ULong

typealias dispatch_io_close_flags_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.dispatch_io_close_flags_t>

typealias dispatch_io_handler_t = ((kotlin.Boolean, platform.darwin.dispatch_data_t?, kotlin.Int) -> kotlin.Unit)?

typealias dispatch_io_handler_tVar = kotlinx.cinterop.ObjCBlockVar<platform.darwin.dispatch_io_handler_t>

typealias dispatch_io_interval_flags_t = kotlin.ULong

typealias dispatch_io_interval_flags_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.dispatch_io_interval_flags_t>

typealias dispatch_io_tVar = kotlinx.cinterop.ObjCObjectVar<platform.darwin.dispatch_io_t>

typealias dispatch_io_type_t = kotlin.ULong

typealias dispatch_io_type_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.dispatch_io_type_t>

typealias dispatch_object_tVar = kotlinx.cinterop.ObjCObjectVar<platform.darwin.dispatch_object_t>

typealias dispatch_once_tVar = kotlinx.cinterop.LongVarOf<platform.darwin.dispatch_once_t>

typealias dispatch_qos_class_t = platform.posix.qos_class_t

typealias dispatch_qos_class_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.dispatch_qos_class_t>

typealias dispatch_queue_attr_tVar = kotlinx.cinterop.ObjCObjectVar<platform.darwin.dispatch_queue_attr_t>

typealias dispatch_queue_concurrent_tVar = kotlinx.cinterop.ObjCObjectVar<platform.darwin.dispatch_queue_concurrent_t>

typealias dispatch_queue_global_tVar = kotlinx.cinterop.ObjCObjectVar<platform.darwin.dispatch_queue_global_t>

typealias dispatch_queue_main_tVar = kotlinx.cinterop.ObjCObjectVar<platform.darwin.dispatch_queue_main_t>

typealias dispatch_queue_priority_tVar = kotlinx.cinterop.LongVarOf<platform.darwin.dispatch_queue_priority_t>

typealias dispatch_queue_serial_tVar = kotlinx.cinterop.ObjCObjectVar<platform.darwin.dispatch_queue_serial_t>

typealias dispatch_queue_tVar = kotlinx.cinterop.ObjCObjectVar<platform.darwin.dispatch_queue_t>

typealias dispatch_semaphore_tVar = kotlinx.cinterop.ObjCObjectVar<platform.darwin.dispatch_semaphore_t>

typealias dispatch_source_mach_send_flags_t = kotlin.ULong

typealias dispatch_source_mach_send_flags_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.dispatch_source_mach_send_flags_t>

typealias dispatch_source_memorypressure_flags_t = kotlin.ULong

typealias dispatch_source_memorypressure_flags_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.dispatch_source_memorypressure_flags_t>

typealias dispatch_source_proc_flags_t = kotlin.ULong

typealias dispatch_source_proc_flags_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.dispatch_source_proc_flags_t>

typealias dispatch_source_tVar = kotlinx.cinterop.ObjCObjectVar<platform.darwin.dispatch_source_t>

typealias dispatch_source_timer_flags_t = kotlin.ULong

typealias dispatch_source_timer_flags_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.dispatch_source_timer_flags_t>

typealias dispatch_source_type_t = kotlinx.cinterop.CPointer<cnames.structs.dispatch_source_type_s>

typealias dispatch_source_type_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.dispatch_source_type_t>

typealias dispatch_source_vnode_flags_t = kotlin.ULong

typealias dispatch_source_vnode_flags_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.dispatch_source_vnode_flags_t>

typealias dispatch_time_t = platform.posix.uint64_t

typealias dispatch_time_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.dispatch_time_t>

typealias dns_handle_t = kotlinx.cinterop.CPointer<cnames.structs.__dns_handle_private_struct>

typealias dns_handle_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.dns_handle_t>

typealias dnssd_sock_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.dnssd_sock_t>

typealias dyld_kernel_image_info_array_t = kotlinx.cinterop.CPointer<platform.darwin.dyld_kernel_image_info_t>

typealias dyld_kernel_image_info_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.dyld_kernel_image_info_array_t>

typealias emulation_vector_t = kotlinx.cinterop.CPointer<platform.darwin.mach_vm_offset_tVar>

typealias emulation_vector_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.emulation_vector_t>

typealias exception_behavior_array_t = kotlinx.cinterop.CPointer<platform.darwin.exception_behavior_tVar>

typealias exception_behavior_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.exception_behavior_array_t>

typealias exception_behavior_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.exception_behavior_t>

typealias exception_data_t = kotlinx.cinterop.CPointer<platform.darwin.exception_data_type_tVar>

typealias exception_data_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.exception_data_t>

typealias exception_data_type_t = platform.darwin.integer_t

typealias exception_data_type_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.exception_data_type_t>

typealias exception_flavor_array_t = kotlinx.cinterop.CPointer<platform.darwin.thread_state_flavor_tVar>

typealias exception_flavor_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.exception_flavor_array_t>

typealias exception_handler_array_t = kotlinx.cinterop.CPointer<platform.darwin.exception_handler_tVar>

typealias exception_handler_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.exception_handler_array_t>

typealias exception_handler_t = platform.darwin.mach_port_t

typealias exception_handler_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_handler_t>

typealias exception_mask_array_t = kotlinx.cinterop.CPointer<platform.darwin.exception_mask_tVar>

typealias exception_mask_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.exception_mask_array_t>

typealias exception_mask_t = kotlin.UInt

typealias exception_mask_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_mask_t>

typealias exception_port_arrary_t = platform.darwin.exception_handler_array_t

typealias exception_port_arrary_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.exception_port_arrary_t>

typealias exception_port_array_t = kotlinx.cinterop.CPointer<platform.darwin.mach_port_tVar>

typealias exception_port_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.exception_port_array_t>

typealias exception_port_t = platform.darwin.exception_handler_t

typealias exception_port_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_port_t>

typealias exception_type_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.exception_type_t>

typealias gpu_energy_data_t = kotlinx.cinterop.CPointer<platform.darwin.gpu_energy_data>

typealias gpu_energy_data_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.gpu_energy_data_t>

typealias hash_info_bucket_array_t = kotlinx.cinterop.CPointer<platform.darwin.hash_info_bucket_t>

typealias hash_info_bucket_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.hash_info_bucket_array_t>

typealias hash_info_bucket_t = platform.darwin.hash_info_bucket

typealias host_basic_info_t = kotlinx.cinterop.CPointer<platform.darwin.host_basic_info>

typealias host_basic_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.host_basic_info_t>

typealias host_can_has_debugger_info_t = kotlinx.cinterop.CPointer<platform.darwin.host_can_has_debugger_info>

typealias host_can_has_debugger_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.host_can_has_debugger_info_t>

typealias host_cpu_load_info_t = kotlinx.cinterop.CPointer<platform.darwin.host_cpu_load_info>

typealias host_cpu_load_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.host_cpu_load_info_t>

typealias host_flavor_t = platform.darwin.integer_t

typealias host_flavor_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.host_flavor_t>

typealias host_info64_t = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar>

typealias host_info64_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.host_info64_t>

typealias host_info_data_t = kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar>

typealias host_info_data_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.host_info_data_t>

typealias host_info_t = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar>

typealias host_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.host_info_t>

typealias host_load_info_t = kotlinx.cinterop.CPointer<platform.darwin.host_load_info>

typealias host_load_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.host_load_info_t>

typealias host_name_port_t = platform.darwin.host_t

typealias host_name_port_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.host_name_port_t>

typealias host_name_t = platform.darwin.host_t

typealias host_name_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.host_name_t>

typealias host_preferred_user_arch_t = kotlinx.cinterop.CPointer<platform.darwin.host_preferred_user_arch>

typealias host_preferred_user_arch_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.host_preferred_user_arch_t>

typealias host_priority_info_t = kotlinx.cinterop.CPointer<platform.darwin.host_priority_info>

typealias host_priority_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.host_priority_info_t>

typealias host_priv_t = platform.darwin.mach_port_t

typealias host_priv_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.host_priv_t>

typealias host_purgable_info_t = kotlinx.cinterop.CPointer<platform.darwin.vm_purgeable_info>

typealias host_purgable_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.host_purgable_info_t>

typealias host_sched_info_t = kotlinx.cinterop.CPointer<platform.darwin.host_sched_info>

typealias host_sched_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.host_sched_info_t>

typealias host_security_t = platform.darwin.mach_port_t

typealias host_security_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.host_security_t>

typealias host_t = platform.darwin.mach_port_t

typealias host_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.host_t>

typealias indx_t = platform.posix.u_int16_t

typealias indx_tVar = kotlinx.cinterop.UShortVarOf<platform.darwin.indx_t>

typealias integer_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t>

typealias io_master_t = platform.darwin.mach_port_t

typealias io_master_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.io_master_t>

typealias io_stat_info_t = kotlinx.cinterop.CPointer<platform.darwin.io_stat_info>

typealias io_stat_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.io_stat_info_t>

typealias ipc_info_name_array_t = kotlinx.cinterop.CPointer<platform.darwin.ipc_info_name_t>

typealias ipc_info_name_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.ipc_info_name_array_t>

typealias ipc_info_name_t = platform.darwin.ipc_info_name

typealias ipc_info_space_basic_t = platform.darwin.ipc_info_space_basic

typealias ipc_info_space_t = platform.darwin.ipc_info_space

typealias ipc_info_tree_name_array_t = kotlinx.cinterop.CPointer<platform.darwin.ipc_info_tree_name_t>

typealias ipc_info_tree_name_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.ipc_info_tree_name_array_t>

typealias ipc_info_tree_name_t = platform.darwin.ipc_info_tree_name

typealias ipc_space_inspect_t = platform.darwin.mach_port_t

typealias ipc_space_inspect_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.ipc_space_inspect_t>

typealias ipc_space_port_t = platform.darwin.ipc_space_t

typealias ipc_space_port_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.ipc_space_port_t>

typealias ipc_space_t = platform.darwin.mach_port_t

typealias ipc_space_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.ipc_space_t>

typealias ipc_voucher_attr_control_t = platform.darwin.mach_port_t

typealias ipc_voucher_attr_control_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.ipc_voucher_attr_control_t>

typealias ipc_voucher_attr_manager_t = platform.darwin.mach_port_t

typealias ipc_voucher_attr_manager_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.ipc_voucher_attr_manager_t>

typealias ipc_voucher_t = platform.darwin.mach_voucher_t

typealias ipc_voucher_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.ipc_voucher_t>

typealias kern_return_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.kern_return_t>

typealias kernel_boot_info_t = kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar>

typealias kernel_boot_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.kernel_boot_info_t>

typealias kernel_resource_sizes_t = kotlinx.cinterop.CPointer<platform.darwin.kernel_resource_sizes>

typealias kernel_resource_sizes_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.kernel_resource_sizes_t>

typealias kernel_version_t = kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar>

typealias kernel_version_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.kernel_version_t>

typealias kmod_args_t = kotlinx.cinterop.COpaquePointer

typealias kmod_args_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.kmod_args_t>

typealias kmod_control_flavor_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.kmod_control_flavor_t>

typealias kmod_info_array_t = kotlinx.cinterop.CPointer<platform.darwin.kmod_info_t>

typealias kmod_info_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.kmod_info_array_t>

typealias kmod_start_func_t = kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.kmod_info>?, kotlinx.cinterop.COpaquePointer?) -> platform.darwin.kern_return_t>

typealias kmod_stop_func_t = kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.kmod_info>?, kotlinx.cinterop.COpaquePointer?) -> platform.darwin.kern_return_t>

typealias kmod_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.kmod_t>

typealias labelstr_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>

typealias labelstr_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.labelstr_t>

typealias launch_data_dict_iterator_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.launch_data_t?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias launch_data_dict_iterator_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.launch_data_dict_iterator_t>

typealias launch_data_t = kotlinx.cinterop.CPointer<cnames.structs._launch_data>

typealias launch_data_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.launch_data_t>

typealias launch_data_type_t = kotlin.UInt

typealias launch_data_type_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.launch_data_type_t>

typealias ledger_amount_t = platform.posix.int64_t

typealias ledger_amount_tVar = kotlinx.cinterop.LongVarOf<platform.darwin.ledger_amount_t>

typealias ledger_array_t = kotlinx.cinterop.CPointer<platform.darwin.ledger_tVar>

typealias ledger_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.ledger_array_t>

typealias ledger_item_t = platform.darwin.natural_t

typealias ledger_item_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.ledger_item_t>

typealias ledger_port_array_t = platform.darwin.ledger_array_t

typealias ledger_port_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.ledger_port_array_t>

typealias ledger_port_t = platform.darwin.ledger_t

typealias ledger_port_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.ledger_port_t>

typealias ledger_t = platform.darwin.mach_port_t

typealias ledger_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.ledger_t>

typealias lock_set_port_t = platform.darwin.lock_set_t

typealias lock_set_port_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.lock_set_port_t>

typealias lock_set_t = platform.darwin.mach_port_t

typealias lock_set_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.lock_set_t>

typealias lockgroup_info_array_t = kotlinx.cinterop.CPointer<platform.darwin.lockgroup_info_t>

typealias lockgroup_info_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.lockgroup_info_array_t>

typealias lockgroup_info_t = platform.darwin.lockgroup_info

typealias mach_error_fn_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> platform.darwin.mach_error_t>>

typealias mach_error_fn_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_error_fn_t>

typealias mach_error_t = platform.darwin.kern_return_t

typealias mach_error_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.mach_error_t>

typealias mach_exception_code_t = platform.darwin.mach_exception_data_type_t

typealias mach_exception_code_tVar = kotlinx.cinterop.LongVarOf<platform.darwin.mach_exception_code_t>

typealias mach_exception_data_t = kotlinx.cinterop.CPointer<platform.darwin.mach_exception_data_type_tVar>

typealias mach_exception_data_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_exception_data_t>

typealias mach_exception_data_type_t = platform.posix.int64_t

typealias mach_exception_data_type_tVar = kotlinx.cinterop.LongVarOf<platform.darwin.mach_exception_data_type_t>

typealias mach_exception_subcode_t = platform.darwin.mach_exception_data_type_t

typealias mach_exception_subcode_tVar = kotlinx.cinterop.LongVarOf<platform.darwin.mach_exception_subcode_t>

typealias mach_memory_info_array_t = kotlinx.cinterop.CPointer<platform.darwin.mach_memory_info_t>

typealias mach_memory_info_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_memory_info_array_t>

typealias mach_memory_info_t = platform.darwin.mach_memory_info

typealias mach_msg_bits_t = kotlin.UInt

typealias mach_msg_bits_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_bits_t>

typealias mach_msg_copy_options_t = kotlin.UInt

typealias mach_msg_copy_options_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_copy_options_t>

typealias mach_msg_descriptor_type_t = kotlin.UInt

typealias mach_msg_descriptor_type_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_descriptor_type_t>

typealias mach_msg_id_t = platform.darwin.integer_t

typealias mach_msg_id_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.mach_msg_id_t>

typealias mach_msg_option_t = platform.darwin.integer_t

typealias mach_msg_option_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.mach_msg_option_t>

typealias mach_msg_options_t = platform.darwin.integer_t

typealias mach_msg_options_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.mach_msg_options_t>

typealias mach_msg_priority_t = kotlin.UInt

typealias mach_msg_priority_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_priority_t>

typealias mach_msg_return_t = platform.darwin.kern_return_t

typealias mach_msg_return_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.mach_msg_return_t>

typealias mach_msg_size_t = platform.darwin.natural_t

typealias mach_msg_size_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_size_t>

typealias mach_msg_timeout_t = platform.darwin.natural_t

typealias mach_msg_timeout_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_timeout_t>

typealias mach_msg_trailer_info_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>

typealias mach_msg_trailer_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_msg_trailer_info_t>

typealias mach_msg_trailer_size_t = kotlin.UInt

typealias mach_msg_trailer_size_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_trailer_size_t>

typealias mach_msg_trailer_type_t = kotlin.UInt

typealias mach_msg_trailer_type_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_trailer_type_t>

typealias mach_msg_type_name_t = kotlin.UInt

typealias mach_msg_type_name_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_name_t>

typealias mach_msg_type_number_t = platform.darwin.natural_t

typealias mach_msg_type_number_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t>

typealias mach_msg_type_size_t = platform.darwin.natural_t

typealias mach_msg_type_size_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_size_t>

typealias mach_port_array_t = kotlinx.cinterop.CPointer<platform.darwin.mach_port_tVar>

typealias mach_port_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_port_array_t>

typealias mach_port_context_t = platform.darwin.mach_vm_address_t

typealias mach_port_context_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.mach_port_context_t>

typealias mach_port_delta_t = platform.darwin.integer_t

typealias mach_port_delta_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.mach_port_delta_t>

typealias mach_port_flavor_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.mach_port_flavor_t>

typealias mach_port_guard_exception_codes = kotlin.UInt

typealias mach_port_guard_exception_codesVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_guard_exception_codes>

typealias mach_port_info_t = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar>

typealias mach_port_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_port_info_t>

typealias mach_port_mscount_t = platform.darwin.natural_t

typealias mach_port_mscount_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_mscount_t>

typealias mach_port_msgcount_t = platform.darwin.natural_t

typealias mach_port_msgcount_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_msgcount_t>

typealias mach_port_name_array_t = kotlinx.cinterop.CPointer<platform.darwin.mach_port_name_tVar>

typealias mach_port_name_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_port_name_array_t>

typealias mach_port_name_t = platform.darwin.natural_t

typealias mach_port_name_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_name_t>

typealias mach_port_options_ptr_t = kotlinx.cinterop.CPointer<platform.darwin.mach_port_options_t>

typealias mach_port_options_ptr_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_port_options_ptr_t>

typealias mach_port_right_t = platform.darwin.natural_t

typealias mach_port_right_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_right_t>

typealias mach_port_rights_t = platform.darwin.natural_t

typealias mach_port_rights_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_rights_t>

typealias mach_port_seqno_t = platform.darwin.natural_t

typealias mach_port_seqno_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_seqno_t>

typealias mach_port_srights_t = kotlin.UInt

typealias mach_port_srights_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_srights_t>

typealias mach_port_t = platform.posix.__darwin_mach_port_t

typealias mach_port_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_t>

typealias mach_port_type_array_t = kotlinx.cinterop.CPointer<platform.darwin.mach_port_type_tVar>

typealias mach_port_type_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_port_type_array_t>

typealias mach_port_type_t = platform.darwin.natural_t

typealias mach_port_type_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_type_t>

typealias mach_port_urefs_t = platform.darwin.natural_t

typealias mach_port_urefs_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_urefs_t>

typealias mach_task_basic_info_t = kotlinx.cinterop.CPointer<platform.darwin.mach_task_basic_info>

typealias mach_task_basic_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_task_basic_info_t>

typealias mach_vm_address_t = platform.posix.uint64_t

typealias mach_vm_address_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.mach_vm_address_t>

typealias mach_vm_info_region_t = platform.darwin.mach_vm_info_region

typealias mach_vm_offset_t = platform.posix.uint64_t

typealias mach_vm_offset_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.mach_vm_offset_t>

typealias mach_vm_read_entry_t = kotlinx.cinterop.CArrayPointer<platform.darwin.mach_vm_read_entry>

typealias mach_vm_read_entry_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_vm_read_entry_t>

typealias mach_vm_size_t = platform.posix.uint64_t

typealias mach_vm_size_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.mach_vm_size_t>

typealias mach_voucher_attr_command_t = platform.posix.uint32_t

typealias mach_voucher_attr_command_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_voucher_attr_command_t>

typealias mach_voucher_attr_content_size_t = platform.posix.uint32_t

typealias mach_voucher_attr_content_size_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_voucher_attr_content_size_t>

typealias mach_voucher_attr_content_t = kotlinx.cinterop.CPointer<platform.posix.uint8_tVar>

typealias mach_voucher_attr_content_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_voucher_attr_content_t>

typealias mach_voucher_attr_control_flags_t = platform.posix.uint32_t

typealias mach_voucher_attr_control_flags_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_voucher_attr_control_flags_t>

typealias mach_voucher_attr_control_t = platform.darwin.mach_port_t

typealias mach_voucher_attr_control_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_voucher_attr_control_t>

typealias mach_voucher_attr_importance_refs = platform.posix.uint32_t

typealias mach_voucher_attr_importance_refsVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_voucher_attr_importance_refs>

typealias mach_voucher_attr_key_array_t = kotlinx.cinterop.CPointer<platform.darwin.mach_voucher_attr_key_tVar>

typealias mach_voucher_attr_key_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_voucher_attr_key_array_t>

typealias mach_voucher_attr_key_t = platform.posix.uint32_t

typealias mach_voucher_attr_key_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_voucher_attr_key_t>

typealias mach_voucher_attr_manager_t = platform.darwin.mach_port_t

typealias mach_voucher_attr_manager_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_voucher_attr_manager_t>

typealias mach_voucher_attr_raw_recipe_array_size_t = platform.darwin.mach_msg_type_number_t

typealias mach_voucher_attr_raw_recipe_array_size_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_voucher_attr_raw_recipe_array_size_t>

typealias mach_voucher_attr_raw_recipe_array_t = platform.darwin.mach_voucher_attr_raw_recipe_t

typealias mach_voucher_attr_raw_recipe_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_voucher_attr_raw_recipe_array_t>

typealias mach_voucher_attr_raw_recipe_size_t = platform.darwin.mach_msg_type_number_t

typealias mach_voucher_attr_raw_recipe_size_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_voucher_attr_raw_recipe_size_t>

typealias mach_voucher_attr_raw_recipe_t = kotlinx.cinterop.CPointer<platform.posix.uint8_tVar>

typealias mach_voucher_attr_raw_recipe_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_voucher_attr_raw_recipe_t>

typealias mach_voucher_attr_recipe_command_array_t = kotlinx.cinterop.CPointer<platform.darwin.mach_voucher_attr_recipe_command_tVar>

typealias mach_voucher_attr_recipe_command_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_voucher_attr_recipe_command_array_t>

typealias mach_voucher_attr_recipe_command_t = platform.posix.uint32_t

typealias mach_voucher_attr_recipe_command_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_voucher_attr_recipe_command_t>

typealias mach_voucher_attr_recipe_size_t = platform.darwin.mach_msg_type_number_t

typealias mach_voucher_attr_recipe_size_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_voucher_attr_recipe_size_t>

typealias mach_voucher_attr_recipe_t = kotlinx.cinterop.CPointer<platform.darwin.mach_voucher_attr_recipe_data_t>

typealias mach_voucher_attr_recipe_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_voucher_attr_recipe_t>

typealias mach_voucher_attr_value_flags_t = platform.posix.uint32_t

typealias mach_voucher_attr_value_flags_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_voucher_attr_value_flags_t>

typealias mach_voucher_attr_value_handle_array_size_t = platform.darwin.mach_msg_type_number_t

typealias mach_voucher_attr_value_handle_array_size_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_voucher_attr_value_handle_array_size_t>

typealias mach_voucher_attr_value_handle_array_t = kotlinx.cinterop.CPointer<platform.darwin.mach_voucher_attr_value_handle_tVar>

typealias mach_voucher_attr_value_handle_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_voucher_attr_value_handle_array_t>

typealias mach_voucher_attr_value_handle_t = platform.posix.uint64_t

typealias mach_voucher_attr_value_handle_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.mach_voucher_attr_value_handle_t>

typealias mach_voucher_attr_value_reference_t = platform.posix.uint32_t

typealias mach_voucher_attr_value_reference_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_voucher_attr_value_reference_t>

typealias mach_voucher_name_array_t = kotlinx.cinterop.CPointer<platform.darwin.mach_voucher_name_tVar>

typealias mach_voucher_name_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_voucher_name_array_t>

typealias mach_voucher_name_t = platform.darwin.mach_port_name_t

typealias mach_voucher_name_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_voucher_name_t>

typealias mach_voucher_selector_t = platform.posix.uint32_t

typealias mach_voucher_selector_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_voucher_selector_t>

typealias mach_voucher_t = platform.darwin.mach_port_t

typealias mach_voucher_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_voucher_t>

typealias mach_zone_info_array_t = kotlinx.cinterop.CPointer<platform.darwin.mach_zone_info_t>

typealias mach_zone_info_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_zone_info_array_t>

typealias mach_zone_info_t = platform.darwin.mach_zone_info_data

typealias mach_zone_name_array_t = kotlinx.cinterop.CPointer<platform.darwin.mach_zone_name_t>

typealias mach_zone_name_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_zone_name_array_t>

typealias mach_zone_name_t = platform.darwin.mach_zone_name

typealias mem_entry_name_port_t = platform.darwin.mach_port_t

typealias mem_entry_name_port_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.mem_entry_name_port_t>

typealias memory_object_array_t = kotlinx.cinterop.CPointer<platform.darwin.memory_object_tVar>

typealias memory_object_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.memory_object_array_t>

typealias memory_object_attr_info_t = kotlinx.cinterop.CPointer<platform.darwin.memory_object_attr_info>

typealias memory_object_attr_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.memory_object_attr_info_t>

typealias memory_object_behave_info_t = kotlinx.cinterop.CPointer<platform.darwin.memory_object_behave_info>

typealias memory_object_behave_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.memory_object_behave_info_t>

typealias memory_object_cluster_size_t = platform.darwin.natural_t

typealias memory_object_cluster_size_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.memory_object_cluster_size_t>

typealias memory_object_control_t = platform.darwin.mach_port_t

typealias memory_object_control_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.memory_object_control_t>

typealias memory_object_copy_strategy_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.memory_object_copy_strategy_t>

typealias memory_object_default_t = platform.darwin.mach_port_t

typealias memory_object_default_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.memory_object_default_t>

typealias memory_object_fault_info_t = kotlinx.cinterop.CPointer<platform.darwin.natural_tVar>

typealias memory_object_fault_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.memory_object_fault_info_t>

typealias memory_object_flavor_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.memory_object_flavor_t>

typealias memory_object_info_data_t = kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.IntVar>

typealias memory_object_info_data_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.memory_object_info_data_t>

typealias memory_object_info_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVar>

typealias memory_object_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.memory_object_info_t>

typealias memory_object_name_t = platform.darwin.mach_port_t

typealias memory_object_name_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.memory_object_name_t>

typealias memory_object_offset_t = kotlin.ULong

typealias memory_object_offset_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.memory_object_offset_t>

typealias memory_object_perf_info_t = kotlinx.cinterop.CPointer<platform.darwin.memory_object_perf_info>

typealias memory_object_perf_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.memory_object_perf_info_t>

typealias memory_object_return_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.memory_object_return_t>

typealias memory_object_size_t = kotlin.ULong

typealias memory_object_size_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.memory_object_size_t>

typealias memory_object_t = platform.darwin.mach_port_t

typealias memory_object_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.memory_object_t>

typealias mig_impl_routine_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<() -> platform.darwin.kern_return_t>>

typealias mig_impl_routine_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mig_impl_routine_t>

typealias mig_routine_arg_descriptor_t = kotlinx.cinterop.CPointer<platform.darwin.mach_msg_type_descriptor_t>

typealias mig_routine_arg_descriptor_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mig_routine_arg_descriptor_t>

typealias mig_routine_descriptor = platform.darwin.routine_descriptor

typealias mig_routine_descriptor_t = kotlinx.cinterop.CPointer<platform.darwin.mig_routine_descriptor>

typealias mig_routine_descriptor_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mig_routine_descriptor_t>

typealias mig_routine_t = platform.darwin.mig_stub_routine_t

typealias mig_routine_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mig_routine_t>

typealias mig_server_routine_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?) -> platform.darwin.mig_routine_t?>>

typealias mig_server_routine_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mig_server_routine_t>

typealias mig_stub_routine_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?, kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?) -> kotlin.Unit>>

typealias mig_stub_routine_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mig_stub_routine_t>

typealias mig_subsystem_t = kotlinx.cinterop.CPointer<platform.darwin.mig_subsystem>

typealias mig_subsystem_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.mig_subsystem_t>

typealias mig_symtab_t = platform.darwin.mig_symtab

typealias natural_t = platform.posix.__darwin_natural_t

typealias natural_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t>

typealias nl_catd = kotlinx.cinterop.CPointer<platform.darwin.__nl_cat_d>

typealias nl_catdVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.nl_catd>

typealias nl_item = platform.posix.__darwin_nl_item

typealias nl_itemVar = kotlinx.cinterop.IntVarOf<platform.darwin.nl_item>

typealias notify_handler_t = ((kotlin.Int) -> kotlin.Unit)?

typealias notify_handler_tVar = kotlinx.cinterop.ObjCBlockVar<platform.darwin.notify_handler_t>

typealias notify_port_t = platform.darwin.mach_port_t

typealias notify_port_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.notify_port_t>

typealias objc_objectptr_t = kotlinx.cinterop.COpaquePointer

typealias objc_objectptr_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.objc_objectptr_t>

typealias os_activity_flag_t = platform.posix.uint32_t

typealias os_activity_flag_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.os_activity_flag_t>

typealias os_activity_id_t = platform.posix.uint64_t

typealias os_activity_id_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.os_activity_id_t>

typealias os_activity_scope_state_t = kotlinx.cinterop.CPointer<platform.darwin.os_activity_scope_state_s>

typealias os_activity_scope_state_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.os_activity_scope_state_t>

typealias os_activity_t = platform.posix.uint64_t

typealias os_activity_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.os_activity_t>

typealias os_block_t = (() -> kotlin.Unit)?

typealias os_block_tVar = kotlinx.cinterop.ObjCBlockVar<platform.darwin.os_block_t>

typealias os_breadcrumb_t = platform.posix.uint32_t

typealias os_breadcrumb_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.os_breadcrumb_t>

typealias os_function_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias os_function_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.os_function_t>

typealias os_log_tVar = kotlinx.cinterop.ObjCObjectVar<platform.darwin.os_log_t>

typealias os_log_type_t = platform.posix.uint8_t

typealias os_log_type_tVar = kotlinx.cinterop.UByteVarOf<platform.darwin.os_log_type_t>

typealias os_trace_payload_object_t = platform.darwin.xpc_object_t

typealias os_trace_payload_object_tVar = kotlinx.cinterop.ObjCObjectVar<platform.darwin.os_trace_payload_object_t>

typealias os_trace_payload_t = ((platform.darwin.os_trace_payload_object_t?) -> kotlin.Unit)?

typealias os_trace_payload_tVar = kotlinx.cinterop.ObjCBlockVar<platform.darwin.os_trace_payload_t>

typealias os_unfair_lock_t = kotlinx.cinterop.CPointer<platform.darwin.os_unfair_lock_s>

typealias os_unfair_lock_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.os_unfair_lock_t>

typealias page_address_array_t = kotlinx.cinterop.CPointer<platform.darwin.vm_offset_tVar>

typealias page_address_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.page_address_array_t>

typealias pgno_t = platform.posix.u_int32_t

typealias pgno_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.pgno_t>

typealias pointer_t = platform.darwin.vm_offset_t

typealias pointer_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.pointer_t>

typealias policy_base_t = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar>

typealias policy_base_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.policy_base_t>

typealias policy_fifo_base_t = kotlinx.cinterop.CPointer<platform.darwin.policy_fifo_base>

typealias policy_fifo_base_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.policy_fifo_base_t>

typealias policy_fifo_info_t = kotlinx.cinterop.CPointer<platform.darwin.policy_fifo_info>

typealias policy_fifo_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.policy_fifo_info_t>

typealias policy_fifo_limit_t = kotlinx.cinterop.CPointer<platform.darwin.policy_fifo_limit>

typealias policy_fifo_limit_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.policy_fifo_limit_t>

typealias policy_info_t = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar>

typealias policy_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.policy_info_t>

typealias policy_limit_t = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar>

typealias policy_limit_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.policy_limit_t>

typealias policy_rr_base_t = kotlinx.cinterop.CPointer<platform.darwin.policy_rr_base>

typealias policy_rr_base_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.policy_rr_base_t>

typealias policy_rr_info_t = kotlinx.cinterop.CPointer<platform.darwin.policy_rr_info>

typealias policy_rr_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.policy_rr_info_t>

typealias policy_rr_limit_t = kotlinx.cinterop.CPointer<platform.darwin.policy_rr_limit>

typealias policy_rr_limit_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.policy_rr_limit_t>

typealias policy_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.policy_t>

typealias policy_timeshare_base_t = kotlinx.cinterop.CPointer<platform.darwin.policy_timeshare_base>

typealias policy_timeshare_base_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.policy_timeshare_base_t>

typealias policy_timeshare_info_t = kotlinx.cinterop.CPointer<platform.darwin.policy_timeshare_info>

typealias policy_timeshare_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.policy_timeshare_info_t>

typealias policy_timeshare_limit_t = kotlinx.cinterop.CPointer<platform.darwin.policy_timeshare_limit>

typealias policy_timeshare_limit_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.policy_timeshare_limit_t>

typealias ppnum_t = platform.posix.uint32_t

typealias ppnum_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.ppnum_t>

typealias printf_arginfo_function = kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.printf_info>?, platform.posix.size_t, kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVar>?) -> kotlin.Int>

typealias printf_comp_t = kotlinx.cinterop.CPointer<cnames.structs._printf_compiled>

typealias printf_comp_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.printf_comp_t>

typealias printf_domain_t = kotlinx.cinterop.CPointer<cnames.structs._printf_domain>

typealias printf_domain_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.printf_domain_t>

typealias printf_function = kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.posix.FILE>?, kotlinx.cinterop.CPointer<platform.darwin.printf_info>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.COpaquePointerVar>?) -> kotlin.Int>

typealias processor_array_t = kotlinx.cinterop.CPointer<platform.darwin.processor_tVar>

typealias processor_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.processor_array_t>

typealias processor_basic_info_t = kotlinx.cinterop.CPointer<platform.darwin.processor_basic_info>

typealias processor_basic_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.processor_basic_info_t>

typealias processor_cpu_load_info_t = kotlinx.cinterop.CPointer<platform.darwin.processor_cpu_load_info>

typealias processor_cpu_load_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.processor_cpu_load_info_t>

typealias processor_flavor_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.processor_flavor_t>

typealias processor_info_array_t = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar>

typealias processor_info_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.processor_info_array_t>

typealias processor_info_data_t = kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar>

typealias processor_info_data_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.processor_info_data_t>

typealias processor_info_t = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar>

typealias processor_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.processor_info_t>

typealias processor_port_array_t = platform.darwin.processor_array_t

typealias processor_port_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.processor_port_array_t>

typealias processor_port_t = platform.darwin.processor_t

typealias processor_port_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.processor_port_t>

typealias processor_set_array_t = kotlinx.cinterop.CPointer<platform.darwin.processor_set_tVar>

typealias processor_set_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.processor_set_array_t>

typealias processor_set_basic_info_t = kotlinx.cinterop.CPointer<platform.darwin.processor_set_basic_info>

typealias processor_set_basic_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.processor_set_basic_info_t>

typealias processor_set_control_port_t = platform.darwin.processor_set_t

typealias processor_set_control_port_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.processor_set_control_port_t>

typealias processor_set_control_t = platform.darwin.mach_port_t

typealias processor_set_control_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.processor_set_control_t>

typealias processor_set_flavor_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.processor_set_flavor_t>

typealias processor_set_info_data_t = kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar>

typealias processor_set_info_data_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.processor_set_info_data_t>

typealias processor_set_info_t = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar>

typealias processor_set_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.processor_set_info_t>

typealias processor_set_load_info_t = kotlinx.cinterop.CPointer<platform.darwin.processor_set_load_info>

typealias processor_set_load_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.processor_set_load_info_t>

typealias processor_set_name_array_t = kotlinx.cinterop.CPointer<platform.darwin.processor_set_tVar>

typealias processor_set_name_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.processor_set_name_array_t>

typealias processor_set_name_port_array_t = platform.darwin.processor_set_array_t

typealias processor_set_name_port_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.processor_set_name_port_array_t>

typealias processor_set_name_port_t = platform.darwin.processor_set_t

typealias processor_set_name_port_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.processor_set_name_port_t>

typealias processor_set_name_t = platform.darwin.processor_set_t

typealias processor_set_name_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.processor_set_name_t>

typealias processor_set_port_t = platform.darwin.processor_set_t

typealias processor_set_port_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.processor_set_port_t>

typealias processor_set_t = platform.darwin.mach_port_t

typealias processor_set_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.processor_set_t>

typealias processor_t = platform.darwin.mach_port_t

typealias processor_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.processor_t>

typealias recno_t = platform.posix.u_int32_t

typealias recno_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.recno_t>

typealias reg64_t = platform.posix.uint32_t

typealias reg64_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.reg64_t>

typealias removefile_callback_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.removefile_state_t?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, kotlinx.cinterop.COpaquePointer?) -> kotlin.Int>>

typealias removefile_callback_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.removefile_callback_t>

typealias removefile_flags_t = platform.posix.uint32_t

typealias removefile_flags_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.removefile_flags_t>

typealias removefile_state_t = kotlinx.cinterop.CPointer<cnames.structs._removefile_state>

typealias removefile_state_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.removefile_state_t>

typealias routine_arg_descriptor = platform.darwin.mach_msg_type_descriptor_t

typealias routine_arg_descriptor_t = kotlinx.cinterop.CPointer<platform.darwin.mach_msg_type_descriptor_t>

typealias routine_arg_descriptor_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.routine_arg_descriptor_t>

typealias routine_arg_offset = kotlin.UInt

typealias routine_arg_offsetVar = kotlinx.cinterop.UIntVarOf<platform.darwin.routine_arg_offset>

typealias routine_arg_size = kotlin.UInt

typealias routine_arg_sizeVar = kotlinx.cinterop.UIntVarOf<platform.darwin.routine_arg_size>

typealias routine_arg_type = kotlin.UInt

typealias routine_arg_typeVar = kotlinx.cinterop.UIntVarOf<platform.darwin.routine_arg_type>

typealias routine_descriptor_t = kotlinx.cinterop.CPointer<platform.darwin.routine_descriptor>

typealias routine_descriptor_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.routine_descriptor_t>

typealias rpc_routine_arg_descriptor_t = kotlinx.cinterop.CPointer<platform.darwin.rpc_routine_arg_descriptor>

typealias rpc_routine_arg_descriptor_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.rpc_routine_arg_descriptor_t>

typealias rpc_routine_descriptor_t = kotlinx.cinterop.CPointer<platform.darwin.rpc_routine_descriptor>

typealias rpc_routine_descriptor_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.rpc_routine_descriptor_t>

typealias rpc_subsystem_t = kotlinx.cinterop.CPointer<platform.darwin.rpc_subsystem>

typealias rpc_subsystem_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.rpc_subsystem_t>

typealias semaphore_port_t = platform.darwin.semaphore_t

typealias semaphore_port_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.semaphore_port_t>

typealias semaphore_t = platform.darwin.mach_port_t

typealias semaphore_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.semaphore_t>

typealias simd_boolVar = kotlinx.cinterop.BooleanVarOf<platform.darwin.simd_bool>

typealias simd_char1Var = kotlinx.cinterop.ByteVarOf<platform.darwin.simd_char1>

typealias simd_double1Var = kotlinx.cinterop.DoubleVarOf<platform.darwin.simd_double1>

typealias simd_float1Var = kotlinx.cinterop.FloatVarOf<platform.darwin.simd_float1>

typealias simd_int1Var = kotlinx.cinterop.IntVarOf<platform.darwin.simd_int1>

typealias simd_long1Var = kotlinx.cinterop.LongVarOf<platform.darwin.simd_long1>

typealias simd_short1Var = kotlinx.cinterop.ShortVarOf<platform.darwin.simd_short1>

typealias simd_uchar1 = kotlin.UByte

typealias simd_uchar1Var = kotlinx.cinterop.UByteVarOf<platform.darwin.simd_uchar1>

typealias simd_uint1 = kotlin.UInt

typealias simd_uint1Var = kotlinx.cinterop.UIntVarOf<platform.darwin.simd_uint1>

typealias simd_ulong1 = kotlin.ULong

typealias simd_ulong1Var = kotlinx.cinterop.ULongVarOf<platform.darwin.simd_ulong1>

typealias simd_ushort1 = kotlin.UShort

typealias simd_ushort1Var = kotlinx.cinterop.UShortVarOf<platform.darwin.simd_ushort1>

typealias sleep_type_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.sleep_type_t>

typealias symtab_name_t = kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar>

typealias symtab_name_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.symtab_name_t>

typealias sync_policy_t = kotlin.Int

typealias sync_policy_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.sync_policy_t>

typealias sysdir_search_path_directory_t = kotlin.UInt

typealias sysdir_search_path_directory_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.sysdir_search_path_directory_t>

typealias sysdir_search_path_domain_mask_t = kotlin.UInt

typealias sysdir_search_path_domain_mask_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.sysdir_search_path_domain_mask_t>

typealias sysdir_search_path_enumeration_state = kotlin.UInt

typealias sysdir_search_path_enumeration_stateVar = kotlinx.cinterop.UIntVarOf<platform.darwin.sysdir_search_path_enumeration_state>

typealias task_absolutetime_info_t = kotlinx.cinterop.CPointer<platform.darwin.task_absolutetime_info>

typealias task_absolutetime_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_absolutetime_info_t>

typealias task_affinity_tag_info_t = kotlinx.cinterop.CPointer<platform.darwin.task_affinity_tag_info>

typealias task_affinity_tag_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_affinity_tag_info_t>

typealias task_array_t = kotlinx.cinterop.CPointer<platform.darwin.task_tVar>

typealias task_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_array_t>

typealias task_basic_info_32_t = kotlinx.cinterop.CPointer<platform.darwin.task_basic_info_32>

typealias task_basic_info_32_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_basic_info_32_t>

typealias task_basic_info_64_t = kotlinx.cinterop.CPointer<platform.darwin.task_basic_info_64>

typealias task_basic_info_64_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_basic_info_64_t>

typealias task_basic_info_t = kotlinx.cinterop.CPointer<platform.darwin.task_basic_info>

typealias task_basic_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_basic_info_t>

typealias task_category_policy_t = kotlinx.cinterop.CPointer<platform.darwin.task_category_policy>

typealias task_category_policy_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_category_policy_t>

typealias task_dyld_info_t = kotlinx.cinterop.CPointer<platform.darwin.task_dyld_info>

typealias task_dyld_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_dyld_info_t>

typealias task_events_info_t = kotlinx.cinterop.CPointer<platform.darwin.task_events_info>

typealias task_events_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_events_info_t>

typealias task_extmod_info_t = kotlinx.cinterop.CPointer<platform.darwin.task_extmod_info>

typealias task_extmod_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_extmod_info_t>

typealias task_flags_info_t = kotlinx.cinterop.CPointer<platform.darwin.task_flags_info>

typealias task_flags_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_flags_info_t>

typealias task_flavor_t = platform.darwin.natural_t

typealias task_flavor_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.task_flavor_t>

typealias task_info_data_t = kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar>

typealias task_info_data_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_info_data_t>

typealias task_info_t = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar>

typealias task_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_info_t>

typealias task_inspect_basic_counts_t = kotlinx.cinterop.CPointer<platform.darwin.task_inspect_basic_counts>

typealias task_inspect_basic_counts_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_inspect_basic_counts_t>

typealias task_inspect_flavor = kotlin.UInt

typealias task_inspect_flavorVar = kotlinx.cinterop.UIntVarOf<platform.darwin.task_inspect_flavor>

typealias task_inspect_flavor_t = platform.darwin.natural_t

typealias task_inspect_flavor_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.task_inspect_flavor_t>

typealias task_inspect_info_t = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar>

typealias task_inspect_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_inspect_info_t>

typealias task_inspect_t = platform.darwin.mach_port_t

typealias task_inspect_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.task_inspect_t>

typealias task_kernelmemory_info_t = kotlinx.cinterop.CPointer<platform.darwin.task_kernelmemory_info>

typealias task_kernelmemory_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_kernelmemory_info_t>

typealias task_latency_qos = kotlin.UInt

typealias task_latency_qosVar = kotlinx.cinterop.UIntVarOf<platform.darwin.task_latency_qos>

typealias task_latency_qos_t = platform.darwin.integer_t

typealias task_latency_qos_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.task_latency_qos_t>

typealias task_name_t = platform.darwin.mach_port_t

typealias task_name_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.task_name_t>

typealias task_policy_flavor_t = platform.darwin.natural_t

typealias task_policy_flavor_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.task_policy_flavor_t>

typealias task_policy_t = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar>

typealias task_policy_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_policy_t>

typealias task_port_array_t = platform.darwin.task_array_t

typealias task_port_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_port_array_t>

typealias task_port_t = platform.darwin.task_t

typealias task_port_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.task_port_t>

typealias task_power_info_t = kotlinx.cinterop.CPointer<platform.darwin.task_power_info>

typealias task_power_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_power_info_t>

typealias task_power_info_v2_t = kotlinx.cinterop.CPointer<platform.darwin.task_power_info_v2>

typealias task_power_info_v2_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_power_info_v2_t>

typealias task_qos_policy_t = kotlinx.cinterop.CPointer<platform.darwin.task_qos_policy>

typealias task_qos_policy_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_qos_policy_t>

typealias task_roleVar = kotlinx.cinterop.IntVarOf<platform.darwin.task_role>

typealias task_role_t = platform.darwin.integer_t

typealias task_role_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.task_role_t>

typealias task_special_port_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.task_special_port_t>

typealias task_suspension_token_t = platform.darwin.mach_port_t

typealias task_suspension_token_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.task_suspension_token_t>

typealias task_t = platform.darwin.mach_port_t

typealias task_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.task_t>

typealias task_thread_times_info_t = kotlinx.cinterop.CPointer<platform.darwin.task_thread_times_info>

typealias task_thread_times_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_thread_times_info_t>

typealias task_throughput_qos = kotlin.UInt

typealias task_throughput_qosVar = kotlinx.cinterop.UIntVarOf<platform.darwin.task_throughput_qos>

typealias task_throughput_qos_t = platform.darwin.integer_t

typealias task_throughput_qos_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.task_throughput_qos_t>

typealias task_trace_memory_info_t = kotlinx.cinterop.CPointer<platform.darwin.task_trace_memory_info>

typealias task_trace_memory_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_trace_memory_info_t>

typealias task_vm_info_t = kotlinx.cinterop.CPointer<platform.darwin.task_vm_info>

typealias task_vm_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_vm_info_t>

typealias task_wait_state_info_t = kotlinx.cinterop.CPointer<platform.darwin.task_wait_state_info>

typealias task_wait_state_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_wait_state_info_t>

typealias task_zone_info_array_t = kotlinx.cinterop.CPointer<platform.darwin.task_zone_info_t>

typealias task_zone_info_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_zone_info_array_t>

typealias task_zone_info_t = platform.darwin.task_zone_info_data

typealias thread_act_array_t = kotlinx.cinterop.CPointer<platform.darwin.thread_act_tVar>

typealias thread_act_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_act_array_t>

typealias thread_act_port_array_t = platform.darwin.thread_act_array_t

typealias thread_act_port_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_act_port_array_t>

typealias thread_act_port_t = platform.darwin.thread_act_t

typealias thread_act_port_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.thread_act_port_t>

typealias thread_act_t = platform.darwin.mach_port_t

typealias thread_act_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.thread_act_t>

typealias thread_affinity_policy_t = kotlinx.cinterop.CPointer<platform.darwin.thread_affinity_policy>

typealias thread_affinity_policy_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_affinity_policy_t>

typealias thread_array_t = kotlinx.cinterop.CPointer<platform.darwin.thread_tVar>

typealias thread_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_array_t>

typealias thread_background_policy_t = kotlinx.cinterop.CPointer<platform.darwin.thread_background_policy>

typealias thread_background_policy_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_background_policy_t>

typealias thread_basic_info_t = kotlinx.cinterop.CPointer<platform.darwin.thread_basic_info>

typealias thread_basic_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_basic_info_t>

typealias thread_extended_info_t = kotlinx.cinterop.CPointer<platform.darwin.thread_extended_info>

typealias thread_extended_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_extended_info_t>

typealias thread_extended_policy_t = kotlinx.cinterop.CPointer<platform.darwin.thread_extended_policy>

typealias thread_extended_policy_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_extended_policy_t>

typealias thread_flavor_t = platform.darwin.natural_t

typealias thread_flavor_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.thread_flavor_t>

typealias thread_identifier_info_t = kotlinx.cinterop.CPointer<platform.darwin.thread_identifier_info>

typealias thread_identifier_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_identifier_info_t>

typealias thread_info_data_t = kotlinx.cinterop.CArrayPointer<platform.darwin.integer_tVar>

typealias thread_info_data_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_info_data_t>

typealias thread_info_t = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar>

typealias thread_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_info_t>

typealias thread_inspect_t = platform.darwin.mach_port_t

typealias thread_inspect_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.thread_inspect_t>

typealias thread_latency_qos_policy_t = kotlinx.cinterop.CPointer<platform.darwin.thread_latency_qos_policy>

typealias thread_latency_qos_policy_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_latency_qos_policy_t>

typealias thread_latency_qos_t = platform.darwin.integer_t

typealias thread_latency_qos_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.thread_latency_qos_t>

typealias thread_policy_flavor_t = platform.darwin.natural_t

typealias thread_policy_flavor_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.thread_policy_flavor_t>

typealias thread_policy_t = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar>

typealias thread_policy_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_policy_t>

typealias thread_port_array_t = platform.darwin.thread_array_t

typealias thread_port_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_port_array_t>

typealias thread_port_t = platform.darwin.thread_t

typealias thread_port_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.thread_port_t>

typealias thread_precedence_policy_t = kotlinx.cinterop.CPointer<platform.darwin.thread_precedence_policy>

typealias thread_precedence_policy_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_precedence_policy_t>

typealias thread_standard_policy_t = kotlinx.cinterop.CPointer<platform.darwin.thread_standard_policy>

typealias thread_standard_policy_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_standard_policy_t>

typealias thread_state_data_t = kotlinx.cinterop.CArrayPointer<platform.darwin.natural_tVar>

typealias thread_state_data_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_state_data_t>

typealias thread_state_flavor_array_t = kotlinx.cinterop.CPointer<platform.darwin.thread_state_flavor_tVar>

typealias thread_state_flavor_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_state_flavor_array_t>

typealias thread_state_flavor_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.thread_state_flavor_t>

typealias thread_state_t = kotlinx.cinterop.CPointer<platform.darwin.natural_tVar>

typealias thread_state_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_state_t>

typealias thread_t = platform.darwin.mach_port_t

typealias thread_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.thread_t>

typealias thread_throughput_qos_policy_t = kotlinx.cinterop.CPointer<platform.darwin.thread_throughput_qos_policy>

typealias thread_throughput_qos_policy_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_throughput_qos_policy_t>

typealias thread_throughput_qos_t = platform.darwin.integer_t

typealias thread_throughput_qos_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.thread_throughput_qos_t>

typealias thread_time_constraint_policy_t = kotlinx.cinterop.CPointer<platform.darwin.thread_time_constraint_policy>

typealias thread_time_constraint_policy_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_time_constraint_policy_t>

typealias tokenstr_t = platform.darwin.tokenstr

typealias unw_addr_space_t = kotlinx.cinterop.CPointer<cnames.structs.unw_addr_space>

typealias unw_addr_space_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.unw_addr_space_t>

typealias unw_fpreg_tVar = kotlinx.cinterop.DoubleVarOf<platform.darwin.unw_fpreg_t>

typealias unw_regnum_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.unw_regnum_t>

typealias unw_word_t = platform.posix.uint64_t

typealias unw_word_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.unw_word_t>

typealias upl_t = platform.darwin.mach_port_t

typealias upl_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.upl_t>

typealias user_subsystem_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>

typealias user_subsystem_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.user_subsystem_t>

typealias uuid_string_t = platform.posix.__darwin_uuid_string_t

typealias uuid_string_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.uuid_string_t>

typealias vector_long1 = platform.darwin.simd_long1

typealias vector_long1Var = kotlinx.cinterop.LongVarOf<platform.darwin.vector_long1>

typealias vector_ulong1 = platform.darwin.simd_ulong1

typealias vector_ulong1Var = kotlinx.cinterop.ULongVarOf<platform.darwin.vector_ulong1>

typealias virtual_memory_guard_exception_codes = kotlin.UInt

typealias virtual_memory_guard_exception_codesVar = kotlinx.cinterop.UIntVarOf<platform.darwin.virtual_memory_guard_exception_codes>

typealias vm32_object_id_t = platform.posix.uint32_t

typealias vm32_object_id_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.vm32_object_id_t>

typealias vm_address_t = platform.darwin.vm_offset_t

typealias vm_address_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_address_t>

typealias vm_behavior_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.vm_behavior_t>

typealias vm_extmod_statistics_t = kotlinx.cinterop.CPointer<platform.darwin.vm_extmod_statistics>

typealias vm_extmod_statistics_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_extmod_statistics_t>

typealias vm_info_object_array_t = kotlinx.cinterop.CPointer<platform.darwin.vm_info_object_t>

typealias vm_info_object_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_info_object_array_t>

typealias vm_info_object_t = platform.darwin.vm_info_object

typealias vm_info_region_64_t = platform.darwin.vm_info_region_64

typealias vm_info_region_t = platform.darwin.vm_info_region

typealias vm_inherit_t = kotlin.UInt

typealias vm_inherit_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.vm_inherit_t>

typealias vm_machine_attribute_t = kotlin.UInt

typealias vm_machine_attribute_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.vm_machine_attribute_t>

typealias vm_machine_attribute_val_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.vm_machine_attribute_val_t>

typealias vm_map_address_t = platform.posix.uint64_t

typealias vm_map_address_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_map_address_t>

typealias vm_map_offset_t = platform.posix.uint64_t

typealias vm_map_offset_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_map_offset_t>

typealias vm_map_size_t = platform.posix.uint64_t

typealias vm_map_size_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_map_size_t>

typealias vm_map_t = platform.darwin.mach_port_t

typealias vm_map_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.vm_map_t>

typealias vm_named_entry_t = platform.darwin.mach_port_t

typealias vm_named_entry_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.vm_named_entry_t>

typealias vm_object_id_t = kotlin.ULong

typealias vm_object_id_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_object_id_t>

typealias vm_object_offset_t = platform.posix.uint64_t

typealias vm_object_offset_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_object_offset_t>

typealias vm_object_size_t = platform.posix.uint64_t

typealias vm_object_size_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_object_size_t>

typealias vm_offset_t = platform.posix.uintptr_t

typealias vm_offset_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_offset_t>

typealias vm_page_info_basic_t = kotlinx.cinterop.CPointer<platform.darwin.vm_page_info_basic>

typealias vm_page_info_basic_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_page_info_basic_t>

typealias vm_page_info_data_t = kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.IntVar>

typealias vm_page_info_data_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_page_info_data_t>

typealias vm_page_info_flavor_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.vm_page_info_flavor_t>

typealias vm_page_info_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVar>

typealias vm_page_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_page_info_t>

typealias vm_prot_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.vm_prot_t>

typealias vm_purgable_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.vm_purgable_t>

typealias vm_purgeable_info_t = kotlinx.cinterop.CPointer<platform.darwin.vm_purgeable_info>

typealias vm_purgeable_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_purgeable_info_t>

typealias vm_read_entry_t = kotlinx.cinterop.CArrayPointer<platform.darwin.vm_read_entry>

typealias vm_read_entry_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_read_entry_t>

typealias vm_region_basic_info_64_t = kotlinx.cinterop.CPointer<platform.darwin.vm_region_basic_info_64>

typealias vm_region_basic_info_64_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_region_basic_info_64_t>

typealias vm_region_basic_info_t = kotlinx.cinterop.CPointer<platform.darwin.vm_region_basic_info>

typealias vm_region_basic_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_region_basic_info_t>

typealias vm_region_extended_info_t = kotlinx.cinterop.CPointer<platform.darwin.vm_region_extended_info>

typealias vm_region_extended_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_region_extended_info_t>

typealias vm_region_flavor_tVar = kotlinx.cinterop.IntVarOf<platform.darwin.vm_region_flavor_t>

typealias vm_region_info_64_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVar>

typealias vm_region_info_64_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_region_info_64_t>

typealias vm_region_info_data_t = kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.IntVar>

typealias vm_region_info_data_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_region_info_data_t>

typealias vm_region_info_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVar>

typealias vm_region_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_region_info_t>

typealias vm_region_recurse_info_64_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVar>

typealias vm_region_recurse_info_64_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_region_recurse_info_64_t>

typealias vm_region_recurse_info_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVar>

typealias vm_region_recurse_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_region_recurse_info_t>

typealias vm_region_submap_info_64_t = kotlinx.cinterop.CPointer<platform.darwin.vm_region_submap_info_64>

typealias vm_region_submap_info_64_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_region_submap_info_64_t>

typealias vm_region_submap_info_t = kotlinx.cinterop.CPointer<platform.darwin.vm_region_submap_info>

typealias vm_region_submap_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_region_submap_info_t>

typealias vm_region_submap_short_info_64_t = kotlinx.cinterop.CPointer<platform.darwin.vm_region_submap_short_info_64>

typealias vm_region_submap_short_info_64_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_region_submap_short_info_64_t>

typealias vm_region_top_info_t = kotlinx.cinterop.CPointer<platform.darwin.vm_region_top_info>

typealias vm_region_top_info_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_region_top_info_t>

typealias vm_size_t = platform.posix.uintptr_t

typealias vm_size_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_size_t>

typealias vm_statistics64_t = kotlinx.cinterop.CPointer<platform.darwin.vm_statistics64>

typealias vm_statistics64_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_statistics64_t>

typealias vm_statistics_t = kotlinx.cinterop.CPointer<platform.darwin.vm_statistics>

typealias vm_statistics_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_statistics_t>

typealias vm_sync_t = kotlin.UInt

typealias vm_sync_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.vm_sync_t>

typealias vm_task_entry_t = platform.darwin.mach_port_t

typealias vm_task_entry_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.vm_task_entry_t>

typealias voucher_mach_msg_state_t = kotlinx.cinterop.CPointer<cnames.structs.voucher_mach_msg_state_s>

typealias voucher_mach_msg_state_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.voucher_mach_msg_state_t>

typealias xattr_flags_t = platform.posix.uint64_t

typealias xattr_flags_tVar = kotlinx.cinterop.ULongVarOf<platform.darwin.xattr_flags_t>

typealias xattr_operation_intent_t = kotlin.UInt

typealias xattr_operation_intent_tVar = kotlinx.cinterop.UIntVarOf<platform.darwin.xattr_operation_intent_t>

typealias xpc_activity_handler_t = ((platform.darwin.xpc_activity_t?) -> kotlin.Unit)?

typealias xpc_activity_handler_tVar = kotlinx.cinterop.ObjCBlockVar<platform.darwin.xpc_activity_handler_t>

typealias xpc_activity_state_t = kotlin.Long

typealias xpc_activity_state_tVar = kotlinx.cinterop.LongVarOf<platform.darwin.xpc_activity_state_t>

typealias xpc_activity_t = platform.darwin.xpc_object_t

typealias xpc_activity_tVar = kotlinx.cinterop.ObjCObjectVar<platform.darwin.xpc_activity_t>

typealias xpc_array_applier_t = ((platform.posix.size_t, platform.darwin.xpc_object_t?) -> kotlin.Boolean)?

typealias xpc_array_applier_tVar = kotlinx.cinterop.ObjCBlockVar<platform.darwin.xpc_array_applier_t>

typealias xpc_connection_handler_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.xpc_connection_t?) -> kotlin.Unit>>

typealias xpc_connection_handler_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.xpc_connection_handler_t>

typealias xpc_connection_t = platform.darwin.xpc_object_t

typealias xpc_connection_tVar = kotlinx.cinterop.ObjCObjectVar<platform.darwin.xpc_connection_t>

typealias xpc_dictionary_applier_t = ((kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar>?, platform.darwin.xpc_object_t?) -> kotlin.Boolean)?

typealias xpc_dictionary_applier_tVar = kotlinx.cinterop.ObjCBlockVar<platform.darwin.xpc_dictionary_applier_t>

typealias xpc_endpoint_t = platform.darwin.xpc_object_t

typealias xpc_endpoint_tVar = kotlinx.cinterop.ObjCObjectVar<platform.darwin.xpc_endpoint_t>

typealias xpc_finalizer_t = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer?) -> kotlin.Unit>>

typealias xpc_finalizer_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.xpc_finalizer_t>

typealias xpc_handler_t = ((platform.darwin.xpc_object_t?) -> kotlin.Unit)?

typealias xpc_handler_tVar = kotlinx.cinterop.ObjCBlockVar<platform.darwin.xpc_handler_t>

typealias xpc_object_t = platform.darwin.NSObject?

typealias xpc_object_tVar = kotlinx.cinterop.ObjCObjectVar<platform.darwin.xpc_object_t>

typealias xpc_type_t = kotlinx.cinterop.CPointer<cnames.structs._xpc_type_s>

typealias xpc_type_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.xpc_type_t>

typealias zone_btrecord_array_t = kotlinx.cinterop.CPointer<platform.darwin.zone_btrecord_t>

typealias zone_btrecord_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.zone_btrecord_array_t>

typealias zone_btrecord_t = platform.darwin.zone_btrecord

typealias zone_info_array_t = kotlinx.cinterop.CPointer<platform.darwin.zone_info_t>

typealias zone_info_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.zone_info_array_t>

typealias zone_info_t = platform.darwin.zone_info

typealias zone_name_array_t = kotlinx.cinterop.CPointer<platform.darwin.zone_name_t>

typealias zone_name_array_tVar = kotlinx.cinterop.CPointerVarOf<platform.darwin.zone_name_array_t>

typealias zone_name_t = platform.darwin.zone_name

const val ABDAY_1: kotlin.Int = 0

const val ABDAY_2: kotlin.Int = 0

const val ABDAY_3: kotlin.Int = 0

const val ABDAY_4: kotlin.Int = 0

const val ABDAY_5: kotlin.Int = 0

const val ABDAY_6: kotlin.Int = 0

const val ABDAY_7: kotlin.Int = 0

const val ABMON_1: kotlin.Int = 0

const val ABMON_10: kotlin.Int = 0

const val ABMON_11: kotlin.Int = 0

const val ABMON_12: kotlin.Int = 0

const val ABMON_2: kotlin.Int = 0

const val ABMON_3: kotlin.Int = 0

const val ABMON_4: kotlin.Int = 0

const val ABMON_5: kotlin.Int = 0

const val ABMON_6: kotlin.Int = 0

const val ABMON_7: kotlin.Int = 0

const val ABMON_8: kotlin.Int = 0

const val ABMON_9: kotlin.Int = 0

const val ACCESSOR_CALLS_ARE_FUNCTIONS: kotlin.Int = 0

const val ACCOUNTING: kotlin.Int = 0

const val AIO_ALLDONE: kotlin.Int = 0

const val AIO_CANCELED: kotlin.Int = 0

const val AIO_LISTIO_MAX: kotlin.Int = 0

const val AIO_NOTCANCELED: kotlin.Int = 0

const val ALARM_NULL: platform.darwin.alarm_t /* = kotlin.UInt */ = 0u

const val ALLOW_OBSOLETE_CARBON_MACMEMORY: kotlin.Int = 0

const val ALLOW_OBSOLETE_CARBON_OSUTILS: kotlin.Int = 0

const val ALRMTYPE: kotlin.Int = 0

const val ALT_DIGITS: kotlin.Int = 0

const val AM_STR: kotlin.Int = 0

const val API_TO_BE_DEPRECATED: kotlin.Int = 0

const val AQ_BUFSZ: kotlin.Int = 0

const val AQ_HIWATER: kotlin.Int = 0

const val AQ_LOWATER: kotlin.Int = 0

const val AQ_MAXBUFSZ: kotlin.Int = 0

const val AQ_MAXHIGH: kotlin.Int = 0

const val AREGTYPE: kotlin.Int = 0

const val ASL_API_VERSION: kotlin.Int = 0

const val ASL_ENCODE_ASL: kotlin.Int = 0

const val ASL_ENCODE_NONE: kotlin.Int = 0

const val ASL_ENCODE_SAFE: kotlin.Int = 0

const val ASL_ENCODE_XML: kotlin.Int = 0

const val ASL_FILTER_MASK_ALERT: kotlin.Int = 0

const val ASL_FILTER_MASK_CRIT: kotlin.Int = 0

const val ASL_FILTER_MASK_DEBUG: kotlin.Int = 0

const val ASL_FILTER_MASK_EMERG: kotlin.Int = 0

const val ASL_FILTER_MASK_ERR: kotlin.Int = 0

const val ASL_FILTER_MASK_INFO: kotlin.Int = 0

const val ASL_FILTER_MASK_NOTICE: kotlin.Int = 0

const val ASL_FILTER_MASK_WARNING: kotlin.Int = 0

const val ASL_LEVEL_ALERT: kotlin.Int = 0

const val ASL_LEVEL_CRIT: kotlin.Int = 0

const val ASL_LEVEL_DEBUG: kotlin.Int = 0

const val ASL_LEVEL_EMERG: kotlin.Int = 0

const val ASL_LEVEL_ERR: kotlin.Int = 0

const val ASL_LEVEL_INFO: kotlin.Int = 0

const val ASL_LEVEL_NOTICE: kotlin.Int = 0

const val ASL_LEVEL_WARNING: kotlin.Int = 0

const val ASL_LOG_DESCRIPTOR_READ: kotlin.Int = 0

const val ASL_LOG_DESCRIPTOR_WRITE: kotlin.Int = 0

const val ASL_MATCH_DIRECTION_FORWARD: kotlin.Int = 0

const val ASL_MATCH_DIRECTION_REVERSE: kotlin.Int = 0

const val ASL_OPT_CREATE_STORE: kotlin.Int = 0

const val ASL_OPT_NO_DELAY: kotlin.Int = 0

const val ASL_OPT_NO_REMOTE: kotlin.Int = 0

const val ASL_OPT_OPEN_WRITE: kotlin.Int = 0

const val ASL_OPT_STDERR: kotlin.Int = 0

const val ASL_QUERY_OP_CASEFOLD: kotlin.Int = 0

const val ASL_QUERY_OP_EQUAL: kotlin.Int = 0

const val ASL_QUERY_OP_GREATER: kotlin.Int = 0

const val ASL_QUERY_OP_GREATER_EQUAL: kotlin.Int = 0

const val ASL_QUERY_OP_LESS: kotlin.Int = 0

const val ASL_QUERY_OP_LESS_EQUAL: kotlin.Int = 0

const val ASL_QUERY_OP_NOT_EQUAL: kotlin.Int = 0

const val ASL_QUERY_OP_NUMERIC: kotlin.Int = 0

const val ASL_QUERY_OP_PREFIX: kotlin.Int = 0

const val ASL_QUERY_OP_REGEX: kotlin.Int = 0

const val ASL_QUERY_OP_SUBSTRING: kotlin.Int = 0

const val ASL_QUERY_OP_SUFFIX: kotlin.Int = 0

const val ASL_QUERY_OP_TRUE: kotlin.Int = 0

const val ASL_TYPE_CLIENT: kotlin.Int = 0

const val ASL_TYPE_FILE: kotlin.Int = 0

const val ASL_TYPE_LIST: kotlin.Int = 0

const val ASL_TYPE_MSG: kotlin.Int = 0

const val ASL_TYPE_QUERY: kotlin.Int = 0

const val ASL_TYPE_STORE: kotlin.Int = 0

const val ASL_TYPE_UNDEF: kotlin.UInt = 0u

const val AT_IPC_MSG: kotlin.UByte = 0u

const val AT_IPC_SEM: kotlin.UByte = 0u

const val AT_IPC_SHM: kotlin.UByte = 0u

const val AUC_AUDITING: kotlin.Int = 0

const val AUC_DISABLED: kotlin.Int = 0

const val AUC_NOAUDIT: kotlin.Int = 0

const val AUC_UNSET: kotlin.Int = 0

const val AUDIT_AHLT: kotlin.Int = 0

const val AUDIT_ARGE: kotlin.Int = 0

const val AUDIT_ARGV: kotlin.Int = 0

val AUDIT_CLASS_FILE: kotlin.String
    get() = TODO()

const val AUDIT_CNT: kotlin.Int = 0

val AUDIT_CONTROL_FILE: kotlin.String
    get() = TODO()

const val AUDIT_CTLMODE_EXTERNAL: kotlin.UByte = 0u

const val AUDIT_CTLMODE_NORMAL: kotlin.UByte = 0u

val AUDIT_EVENT_FILE: kotlin.String
    get() = TODO()

const val AUDIT_EXPIRE_OP_AND: kotlin.UByte = 0u

const val AUDIT_EXPIRE_OP_OR: kotlin.UByte = 0u

const val AUDIT_GROUP: kotlin.Int = 0

const val AUDIT_HARD_LIMIT_FREE_BLOCKS: kotlin.Int = 0

const val AUDIT_HEADER_VERSION_OLDDARWIN: kotlin.Int = 0

const val AUDIT_HEADER_VERSION_OPENBSM: kotlin.Int = 0

const val AUDIT_HEADER_VERSION_OPENBSM10: kotlin.Int = 0

const val AUDIT_HEADER_VERSION_OPENBSM11: kotlin.Int = 0

const val AUDIT_HEADER_VERSION_SOLARIS: kotlin.Int = 0

const val AUDIT_HEADER_VERSION_TSOL: kotlin.Int = 0

const val AUDIT_HEADER_VERSION_TSOL25: kotlin.Int = 0

val AUDIT_HOST_CONTROL_ENTRY: kotlin.String
    get() = TODO()

const val AUDIT_MAX_ARGS: kotlin.Int = 0

const val AUDIT_MAX_CERT_HASH: kotlin.Int = 0

const val AUDIT_MAX_ENV: kotlin.Int = 0

const val AUDIT_MAX_GROUPS: kotlin.Int = 0

const val AUDIT_MAX_KRB5_PRINCIPAL: kotlin.Int = 0

const val AUDIT_OFF: kotlin.Int = 0

const val AUDIT_ON: kotlin.Int = 0

const val AUDIT_PATH: kotlin.Int = 0

const val AUDIT_PERZONE: kotlin.Int = 0

const val AUDIT_PUBLIC: kotlin.Int = 0

const val AUDIT_RECORD_MAGIC: kotlin.UInt = 0u

const val AUDIT_SCNT: kotlin.Int = 0

const val AUDIT_SEQ: kotlin.Int = 0

const val AUDIT_TRAIL: kotlin.Int = 0

const val AUDIT_TRIGGER_CLOSE_AND_DIE: kotlin.Int = 0

const val AUDIT_TRIGGER_EXPIRE_TRAILS: kotlin.Int = 0

const val AUDIT_TRIGGER_INITIALIZE: kotlin.Int = 0

const val AUDIT_TRIGGER_LOW_SPACE: kotlin.Int = 0

const val AUDIT_TRIGGER_MAX: kotlin.Int = 0

const val AUDIT_TRIGGER_MIN: kotlin.Int = 0

const val AUDIT_TRIGGER_NO_SPACE: kotlin.Int = 0

const val AUDIT_TRIGGER_READ_FILE: kotlin.Int = 0

const val AUDIT_TRIGGER_ROTATE_KERNEL: kotlin.Int = 0

const val AUDIT_TRIGGER_ROTATE_USER: kotlin.Int = 0

const val AUDIT_USER: kotlin.Int = 0

val AUDIT_USER_FILE: kotlin.String
    get() = TODO()

const val AUDIT_WINDATA: kotlin.Int = 0

const val AUDIT_ZONENAME: kotlin.Int = 0

const val AUP_BINARY: kotlin.Int = 0

const val AUP_DECIMAL: kotlin.Int = 0

const val AUP_HEX: kotlin.Int = 0

const val AUP_OCTAL: kotlin.Int = 0

const val AUP_STRING: kotlin.Int = 0

const val AUR_BYTE: kotlin.Int = 0

const val AUR_BYTE_SIZE: kotlin.ULong = 0u

const val AUR_CHAR: kotlin.Int = 0

const val AUR_CHAR_SIZE: kotlin.ULong = 0u

const val AUR_INT: kotlin.Int = 0

const val AUR_INT32: kotlin.Int = 0

const val AUR_INT32_SIZE: kotlin.ULong = 0u

const val AUR_INT64: kotlin.Int = 0

const val AUR_INT64_SIZE: kotlin.ULong = 0u

const val AUR_INT_SIZE: kotlin.ULong = 0u

const val AUR_SHORT: kotlin.Int = 0

const val AUR_SHORT_SIZE: kotlin.ULong = 0u

const val AUT_ACE: kotlin.Int = 0

const val AUT_ACL: kotlin.Int = 0

const val AUT_ARG: kotlin.Int = 0

const val AUT_ARG32: kotlin.Int = 0

const val AUT_ARG64: kotlin.Int = 0

const val AUT_ATTR: kotlin.Int = 0

const val AUT_ATTR32: kotlin.Int = 0

const val AUT_ATTR64: kotlin.Int = 0

const val AUT_CERT_HASH: kotlin.Int = 0

const val AUT_CMD: kotlin.Int = 0

const val AUT_DATA: kotlin.Int = 0

const val AUT_EXEC_ARGS: kotlin.Int = 0

const val AUT_EXEC_ENV: kotlin.Int = 0

const val AUT_EXIT: kotlin.Int = 0

const val AUT_GROUPS: kotlin.Int = 0

const val AUT_HEADER: kotlin.Int = 0

const val AUT_HEADER32: kotlin.Int = 0

const val AUT_HEADER32_EX: kotlin.Int = 0

const val AUT_HEADER64: kotlin.Int = 0

const val AUT_HEADER64_EX: kotlin.Int = 0

const val AUT_HOST: kotlin.Int = 0

const val AUT_IDENTITY: kotlin.Int = 0

const val AUT_INVALID: kotlin.Int = 0

const val AUT_IN_ADDR: kotlin.Int = 0

const val AUT_IN_ADDR_EX: kotlin.Int = 0

const val AUT_IP: kotlin.Int = 0

const val AUT_IPC: kotlin.Int = 0

const val AUT_IPC_PERM: kotlin.Int = 0

const val AUT_IPORT: kotlin.Int = 0

const val AUT_KRB5_PRINCIPAL: kotlin.Int = 0

const val AUT_LABEL: kotlin.Int = 0

const val AUT_LIAISON: kotlin.Int = 0

const val AUT_NEWGROUPS: kotlin.Int = 0

const val AUT_OHEADER: kotlin.Int = 0

const val AUT_OPAQUE: kotlin.Int = 0

const val AUT_OTHER_FILE: kotlin.Int = 0

const val AUT_OTHER_FILE32: kotlin.Int = 0

const val AUT_OTHER_FILE64: kotlin.Int = 0

const val AUT_PATH: kotlin.Int = 0

const val AUT_PRIV: kotlin.Int = 0

const val AUT_PROCESS: kotlin.Int = 0

const val AUT_PROCESS32: kotlin.Int = 0

const val AUT_PROCESS32_EX: kotlin.Int = 0

const val AUT_PROCESS64: kotlin.Int = 0

const val AUT_PROCESS64_EX: kotlin.Int = 0

const val AUT_RETURN: kotlin.Int = 0

const val AUT_RETURN32: kotlin.Int = 0

const val AUT_RETURN64: kotlin.Int = 0

const val AUT_SEQ: kotlin.Int = 0

const val AUT_SOCKET: kotlin.Int = 0

const val AUT_SOCKET_EX: kotlin.Int = 0

const val AUT_SOCKINET128: kotlin.Int = 0

const val AUT_SOCKINET32: kotlin.Int = 0

const val AUT_SOCKUNIX: kotlin.Int = 0

const val AUT_SUBJECT: kotlin.Int = 0

const val AUT_SUBJECT32: kotlin.Int = 0

const val AUT_SUBJECT32_EX: kotlin.Int = 0

const val AUT_SUBJECT64: kotlin.Int = 0

const val AUT_SUBJECT64_EX: kotlin.Int = 0

const val AUT_TEXT: kotlin.Int = 0

const val AUT_TRAILER: kotlin.Int = 0

const val AUT_TRAILER_MAGIC: kotlin.Int = 0

const val AUT_UNAUTH: kotlin.Int = 0

const val AUT_UPRIV: kotlin.Int = 0

const val AUT_XATOM: kotlin.Int = 0

const val AUT_XATPATH: kotlin.Int = 0

const val AUT_XCLIENT: kotlin.Int = 0

const val AUT_XCOLORMAP: kotlin.Int = 0

const val AUT_XCURSOR: kotlin.Int = 0

const val AUT_XFONT: kotlin.Int = 0

const val AUT_XGC: kotlin.Int = 0

const val AUT_XOBJ: kotlin.Int = 0

const val AUT_XPIXMAP: kotlin.Int = 0

const val AUT_XPROPERTY: kotlin.Int = 0

const val AUT_XPROTO: kotlin.Int = 0

const val AUT_XSELECT: kotlin.Int = 0

const val AUT_XWINDOW: kotlin.Int = 0

const val AUT_ZONENAME: kotlin.Int = 0

const val AU_ASSIGN_ASID: kotlin.Int = 0

const val AU_CLASS_DESC_MAX: kotlin.Int = 0

const val AU_CLASS_MASK_RESERVED: kotlin.Int = 0

const val AU_CLASS_NAME_MAX: kotlin.Int = 0

const val AU_DEFAUDITID: platform.posix.uid_t /* = kotlin.UInt */ = 0u

const val AU_DEFAUDITSID: kotlin.Int = 0

const val AU_EVENT_DESC_MAX: kotlin.Int = 0

const val AU_EVENT_NAME_MAX: kotlin.Int = 0

const val AU_FS_MINFREE: kotlin.Int = 0

const val AU_IPv4: kotlin.Int = 0

const val AU_IPv6: kotlin.Int = 0

const val AU_LINE_MAX: kotlin.Int = 0

const val AU_OFLAG_NONE: kotlin.Int = 0

const val AU_OFLAG_NORESOLVE: kotlin.Int = 0

const val AU_OFLAG_RAW: kotlin.Int = 0

const val AU_OFLAG_SHORT: kotlin.Int = 0

const val AU_OFLAG_XML: kotlin.Int = 0

const val AU_PRS_BOTH: kotlin.Int = 0

const val AU_PRS_FAILURE: kotlin.Int = 0

const val AU_PRS_REREAD: kotlin.Int = 0

const val AU_PRS_SUCCESS: kotlin.Int = 0

const val AU_PRS_USECACHE: kotlin.Int = 0

const val AU_TO_NO_WRITE: kotlin.Int = 0

const val AU_TO_WRITE: kotlin.Int = 0

const val AU_UNIMPL: kotlin.Int = 0

const val AU_USER_NAME_MAX: kotlin.Int = 0

const val A_GETCAR: kotlin.Int = 0

const val A_GETCLASS: kotlin.Int = 0

const val A_GETCOND: kotlin.Int = 0

const val A_GETCTLMODE: kotlin.Int = 0

const val A_GETCWD: kotlin.Int = 0

const val A_GETEXPAFTER: kotlin.Int = 0

const val A_GETFSIZE: kotlin.Int = 0

const val A_GETKAUDIT: kotlin.Int = 0

const val A_GETKMASK: kotlin.Int = 0

const val A_GETPINFO: kotlin.Int = 0

const val A_GETPINFO_ADDR: kotlin.Int = 0

const val A_GETPOLICY: kotlin.Int = 0

const val A_GETQCTRL: kotlin.Int = 0

const val A_GETSFLAGS: kotlin.Int = 0

const val A_GETSINFO_ADDR: kotlin.Int = 0

const val A_GETSTAT: kotlin.Int = 0

const val A_OLDGETCOND: kotlin.Int = 0

const val A_OLDGETPOLICY: kotlin.Int = 0

const val A_OLDGETQCTRL: kotlin.Int = 0

const val A_OLDSETCOND: kotlin.Int = 0

const val A_OLDSETPOLICY: kotlin.Int = 0

const val A_OLDSETQCTRL: kotlin.Int = 0

const val A_SENDTRIGGER: kotlin.Int = 0

const val A_SETCLASS: kotlin.Int = 0

const val A_SETCOND: kotlin.Int = 0

const val A_SETCTLMODE: kotlin.Int = 0

const val A_SETEXPAFTER: kotlin.Int = 0

const val A_SETFSIZE: kotlin.Int = 0

const val A_SETKAUDIT: kotlin.Int = 0

const val A_SETKMASK: kotlin.Int = 0

const val A_SETPMASK: kotlin.Int = 0

const val A_SETPOLICY: kotlin.Int = 0

const val A_SETQCTRL: kotlin.Int = 0

const val A_SETSFLAGS: kotlin.Int = 0

const val A_SETSMASK: kotlin.Int = 0

const val A_SETSTAT: kotlin.Int = 0

const val A_SETUMASK: kotlin.Int = 0

const val BANK_ORIGINATOR_PID: kotlin.Int = 0

const val BANK_PERSONA_TOKEN: kotlin.Int = 0

const val BIND_IMMEDIATE_MASK: kotlin.Int = 0

const val BIND_OPCODE_ADD_ADDR_ULEB: kotlin.Int = 0

const val BIND_OPCODE_DONE: kotlin.Int = 0

const val BIND_OPCODE_DO_BIND: kotlin.Int = 0

const val BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED: kotlin.Int = 0

const val BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB: kotlin.Int = 0

const val BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB: kotlin.Int = 0

const val BIND_OPCODE_MASK: kotlin.Int = 0

const val BIND_OPCODE_SET_ADDEND_SLEB: kotlin.Int = 0

const val BIND_OPCODE_SET_DYLIB_ORDINAL_IMM: kotlin.Int = 0

const val BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB: kotlin.Int = 0

const val BIND_OPCODE_SET_DYLIB_SPECIAL_IMM: kotlin.Int = 0

const val BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB: kotlin.Int = 0

const val BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM: kotlin.Int = 0

const val BIND_OPCODE_SET_TYPE_IMM: kotlin.Int = 0

const val BIND_SPECIAL_DYLIB_FLAT_LOOKUP: kotlin.Int = 0

const val BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE: kotlin.Int = 0

const val BIND_SPECIAL_DYLIB_SELF: kotlin.Int = 0

const val BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION: kotlin.Int = 0

const val BIND_SYMBOL_FLAGS_WEAK_IMPORT: kotlin.Int = 0

const val BIND_TYPE_POINTER: kotlin.Int = 0

const val BIND_TYPE_TEXT_ABSOLUTE32: kotlin.Int = 0

const val BIND_TYPE_TEXT_PCREL32: kotlin.Int = 0

const val BLKTYPE: kotlin.Int = 0

const val BOOT_TIME: kotlin.Int = 0

const val BSM_TEXTBUFSZ: kotlin.Int = 0

const val BTREEMAGIC: kotlin.Int = 0

const val BTREEVERSION: kotlin.Int = 0

const val BYTE_SIZE: kotlin.Int = 0

const val BZ_CONFIG_ERROR: kotlin.Int = 0

const val BZ_DATA_ERROR: kotlin.Int = 0

const val BZ_DATA_ERROR_MAGIC: kotlin.Int = 0

const val BZ_FINISH: kotlin.Int = 0

const val BZ_FINISH_OK: kotlin.Int = 0

const val BZ_FLUSH: kotlin.Int = 0

const val BZ_FLUSH_OK: kotlin.Int = 0

const val BZ_IO_ERROR: kotlin.Int = 0

const val BZ_MAX_UNUSED: kotlin.Int = 0

const val BZ_MEM_ERROR: kotlin.Int = 0

const val BZ_OK: kotlin.Int = 0

const val BZ_OUTBUFF_FULL: kotlin.Int = 0

const val BZ_PARAM_ERROR: kotlin.Int = 0

const val BZ_RUN: kotlin.Int = 0

const val BZ_RUN_OK: kotlin.Int = 0

const val BZ_SEQUENCE_ERROR: kotlin.Int = 0

const val BZ_STREAM_END: kotlin.Int = 0

const val BZ_UNEXPECTED_EOF: kotlin.Int = 0

const val CACHE_ATTRIBUTES_VERSION_1: kotlin.Int = 0

const val CACHE_ATTRIBUTES_VERSION_2: kotlin.Int = 0

const val CALENDAR_CLOCK: kotlin.Int = 0

const val CALL_NOT_IN_CARBON: kotlin.Int = 0

const val CHRTYPE: kotlin.Int = 0

const val CLOCK_ALARM_CURRES: kotlin.Int = 0

const val CLOCK_ALARM_MAXRES: kotlin.Int = 0

const val CLOCK_ALARM_MINRES: kotlin.Int = 0

const val CLOCK_GET_TIME_RES: kotlin.Int = 0

const val CLOCK_NULL: platform.posix.clock_t /* = kotlin.ULong */ = 0u

const val COALITION_NULL: platform.darwin.coalition_t /* = kotlin.UInt */ = 0u

const val CODESET: kotlin.Int = 0

val COMPRESSION_LZ4: platform.darwin.compression_algorithm /* = kotlin.UInt */
    get() = TODO()

val COMPRESSION_LZ4_RAW: platform.darwin.compression_algorithm /* = kotlin.UInt */
    get() = TODO()

val COMPRESSION_LZFSE: platform.darwin.compression_algorithm /* = kotlin.UInt */
    get() = TODO()

val COMPRESSION_LZMA: platform.darwin.compression_algorithm /* = kotlin.UInt */
    get() = TODO()

val COMPRESSION_STATUS_END: platform.darwin.compression_status /* = kotlin.Int */
    get() = TODO()

val COMPRESSION_STATUS_ERROR: platform.darwin.compression_status /* = kotlin.Int */
    get() = TODO()

val COMPRESSION_STATUS_OK: platform.darwin.compression_status /* = kotlin.Int */
    get() = TODO()

val COMPRESSION_STREAM_DECODE: platform.darwin.compression_stream_operation /* = kotlin.UInt */
    get() = TODO()

val COMPRESSION_STREAM_ENCODE: platform.darwin.compression_stream_operation /* = kotlin.UInt */
    get() = TODO()

val COMPRESSION_STREAM_FINALIZE: platform.darwin.compression_stream_flags /* = kotlin.UInt */
    get() = TODO()

val COMPRESSION_ZLIB: platform.darwin.compression_algorithm /* = kotlin.UInt */
    get() = TODO()

const val CONTTYPE: kotlin.Int = 0

const val COPYFILE_ACL: kotlin.Int = 0

const val COPYFILE_ALL: kotlin.Int = 0

const val COPYFILE_CHECK: kotlin.Int = 0

const val COPYFILE_CLONE: kotlin.Int = 0

const val COPYFILE_CLONE_FORCE: kotlin.Int = 0

const val COPYFILE_CONTINUE: kotlin.Int = 0

const val COPYFILE_COPY_DATA: kotlin.Int = 0

const val COPYFILE_COPY_XATTR: kotlin.Int = 0

const val COPYFILE_DATA: kotlin.Int = 0

const val COPYFILE_DATA_SPARSE: kotlin.Int = 0

const val COPYFILE_ERR: kotlin.Int = 0

const val COPYFILE_EXCL: kotlin.Int = 0

const val COPYFILE_FINISH: kotlin.Int = 0

const val COPYFILE_METADATA: kotlin.Int = 0

const val COPYFILE_MOVE: kotlin.Int = 0

const val COPYFILE_NOFOLLOW: kotlin.Int = 0

const val COPYFILE_NOFOLLOW_DST: kotlin.Int = 0

const val COPYFILE_NOFOLLOW_SRC: kotlin.Int = 0

const val COPYFILE_PACK: kotlin.Int = 0

const val COPYFILE_PROGRESS: kotlin.Int = 0

const val COPYFILE_QUIT: kotlin.Int = 0

const val COPYFILE_RECURSE_DIR: kotlin.Int = 0

const val COPYFILE_RECURSE_DIR_CLEANUP: kotlin.Int = 0

const val COPYFILE_RECURSE_ERROR: kotlin.Int = 0

const val COPYFILE_RECURSE_FILE: kotlin.Int = 0

const val COPYFILE_RECURSIVE: kotlin.Int = 0

const val COPYFILE_RUN_IN_PLACE: kotlin.Int = 0

const val COPYFILE_SECURITY: kotlin.Int = 0

const val COPYFILE_SKIP: kotlin.Int = 0

const val COPYFILE_START: kotlin.Int = 0

const val COPYFILE_STAT: kotlin.Int = 0

const val COPYFILE_STATE_COPIED: kotlin.Int = 0

const val COPYFILE_STATE_DST_FD: kotlin.Int = 0

const val COPYFILE_STATE_DST_FILENAME: kotlin.Int = 0

const val COPYFILE_STATE_QUARANTINE: kotlin.Int = 0

const val COPYFILE_STATE_SRC_FD: kotlin.Int = 0

const val COPYFILE_STATE_SRC_FILENAME: kotlin.Int = 0

const val COPYFILE_STATE_STATUS_CB: kotlin.Int = 0

const val COPYFILE_STATE_STATUS_CTX: kotlin.Int = 0

const val COPYFILE_STATE_WAS_CLONED: kotlin.Int = 0

const val COPYFILE_STATE_XATTRNAME: kotlin.Int = 0

const val COPYFILE_UNLINK: kotlin.Int = 0

const val COPYFILE_UNPACK: kotlin.Int = 0

const val COPYFILE_VERBOSE: kotlin.Int = 0

const val COPYFILE_XATTR: kotlin.Int = 0

const val CPUFAMILY_ARM_11: kotlin.UInt = 0u

const val CPUFAMILY_ARM_12: kotlin.UInt = 0u

const val CPUFAMILY_ARM_13: kotlin.Int = 0

const val CPUFAMILY_ARM_14: kotlin.UInt = 0u

const val CPUFAMILY_ARM_15: kotlin.UInt = 0u

const val CPUFAMILY_ARM_9: kotlin.UInt = 0u

const val CPUFAMILY_ARM_CYCLONE: kotlin.Int = 0

const val CPUFAMILY_ARM_HURRICANE: kotlin.Int = 0

const val CPUFAMILY_ARM_MONSOON_MISTRAL: kotlin.UInt = 0u

const val CPUFAMILY_ARM_SWIFT: kotlin.Int = 0

const val CPUFAMILY_ARM_TWISTER: kotlin.UInt = 0u

const val CPUFAMILY_ARM_TYPHOON: kotlin.Int = 0

const val CPUFAMILY_ARM_XSCALE: kotlin.Int = 0

const val CPUFAMILY_INTEL_6_13: kotlin.UInt = 0u

const val CPUFAMILY_INTEL_6_23: kotlin.Int = 0

const val CPUFAMILY_INTEL_6_26: kotlin.Int = 0

const val CPUFAMILY_INTEL_BROADWELL: kotlin.Int = 0

const val CPUFAMILY_INTEL_HASWELL: kotlin.Int = 0

const val CPUFAMILY_INTEL_IVYBRIDGE: kotlin.Int = 0

const val CPUFAMILY_INTEL_KABYLAKE: kotlin.Int = 0

const val CPUFAMILY_INTEL_NEHALEM: kotlin.Int = 0

const val CPUFAMILY_INTEL_PENRYN: kotlin.Int = 0

const val CPUFAMILY_INTEL_SANDYBRIDGE: kotlin.Int = 0

const val CPUFAMILY_INTEL_SKYLAKE: kotlin.Int = 0

const val CPUFAMILY_INTEL_WESTMERE: kotlin.Int = 0

const val CPUFAMILY_POWERPC_G3: kotlin.UInt = 0u

const val CPUFAMILY_POWERPC_G4: kotlin.Int = 0

const val CPUFAMILY_POWERPC_G5: kotlin.UInt = 0u

const val CPUFAMILY_UNKNOWN: kotlin.Int = 0

const val CPU_ARCH_ABI64: kotlin.Int = 0

const val CPU_ARCH_ABI64_32: kotlin.Int = 0

const val CPU_ARCH_MASK: kotlin.UInt = 0u

const val CPU_STATE_IDLE: kotlin.Int = 0

const val CPU_STATE_MAX: kotlin.Int = 0

const val CPU_STATE_NICE: kotlin.Int = 0

const val CPU_STATE_SYSTEM: kotlin.Int = 0

const val CPU_STATE_USER: kotlin.Int = 0

const val CPU_SUBTYPE_386: kotlin.Int = 0

const val CPU_SUBTYPE_486: kotlin.Int = 0

const val CPU_SUBTYPE_486SX: kotlin.Int = 0

const val CPU_SUBTYPE_586: kotlin.Int = 0

const val CPU_SUBTYPE_ARM64_32_ALL: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_ARM64_32_V8: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_ARM64_ALL: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_ARM64_V8: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_ARM_ALL: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_ARM_V4T: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_ARM_V5TEJ: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_ARM_V6: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_ARM_V6M: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_ARM_V7: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_ARM_V7EM: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_ARM_V7F: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_ARM_V7K: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_ARM_V7M: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_ARM_V7S: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_ARM_V8: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_ARM_XSCALE: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_BIG_ENDIAN: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_CELERON: kotlin.Int = 0

const val CPU_SUBTYPE_CELERON_MOBILE: kotlin.Int = 0

const val CPU_SUBTYPE_HPPA_7100: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_HPPA_7100LC: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_HPPA_ALL: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_I386_ALL: kotlin.Int = 0

const val CPU_SUBTYPE_I860_860: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_I860_ALL: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_INTEL_FAMILY_MAX: kotlin.Int = 0

const val CPU_SUBTYPE_INTEL_MODEL_ALL: kotlin.Int = 0

const val CPU_SUBTYPE_ITANIUM: kotlin.Int = 0

const val CPU_SUBTYPE_ITANIUM_2: kotlin.Int = 0

const val CPU_SUBTYPE_LIB64: kotlin.UInt = 0u

const val CPU_SUBTYPE_LITTLE_ENDIAN: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_MASK: kotlin.UInt = 0u

const val CPU_SUBTYPE_MC68030: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_MC68030_ONLY: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_MC68040: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_MC680x0_ALL: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_MC88000_ALL: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_MC88100: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_MC88110: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_MC98000_ALL: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_MC98601: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_MIPS_ALL: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_MIPS_R2000: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_MIPS_R2000a: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_MIPS_R2300: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_MIPS_R2600: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_MIPS_R2800: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_MIPS_R3000: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_MIPS_R3000a: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_MULTIPLE: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_PENT: kotlin.Int = 0

const val CPU_SUBTYPE_PENTII_M3: kotlin.Int = 0

const val CPU_SUBTYPE_PENTII_M5: kotlin.Int = 0

const val CPU_SUBTYPE_PENTIUM_3: kotlin.Int = 0

const val CPU_SUBTYPE_PENTIUM_3_M: kotlin.Int = 0

const val CPU_SUBTYPE_PENTIUM_3_XEON: kotlin.Int = 0

const val CPU_SUBTYPE_PENTIUM_4: kotlin.Int = 0

const val CPU_SUBTYPE_PENTIUM_4_M: kotlin.Int = 0

const val CPU_SUBTYPE_PENTIUM_M: kotlin.Int = 0

const val CPU_SUBTYPE_PENTPRO: kotlin.Int = 0

const val CPU_SUBTYPE_POWERPC_601: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_POWERPC_602: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_POWERPC_603: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_POWERPC_603e: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_POWERPC_603ev: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_POWERPC_604: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_POWERPC_604e: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_POWERPC_620: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_POWERPC_7400: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_POWERPC_7450: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_POWERPC_750: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_POWERPC_970: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_POWERPC_ALL: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_SPARC_ALL: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_UVAXI: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_UVAXII: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_UVAXIII: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_VAX730: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_VAX750: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_VAX780: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_VAX785: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_VAX8200: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_VAX8500: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_VAX8600: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_VAX8650: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_VAX8800: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_VAX_ALL: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_X86_64_ALL: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_X86_64_H: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_X86_ALL: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_X86_ARCH1: platform.darwin.cpu_subtype_t /* = kotlin.Int */ = 0

const val CPU_SUBTYPE_XEON: kotlin.Int = 0

const val CPU_SUBTYPE_XEON_MP: kotlin.Int = 0

const val CPU_THREADTYPE_INTEL_HTT: platform.darwin.cpu_threadtype_t /* = kotlin.Int */ = 0

const val CPU_THREADTYPE_NONE: platform.darwin.cpu_threadtype_t /* = kotlin.Int */ = 0

const val CPU_TYPE_ANY: platform.darwin.cpu_type_t /* = kotlin.Int */ = 0

const val CPU_TYPE_ARM: platform.darwin.cpu_type_t /* = kotlin.Int */ = 0

const val CPU_TYPE_ARM64: kotlin.Int = 0

const val CPU_TYPE_ARM64_32: kotlin.Int = 0

const val CPU_TYPE_HPPA: platform.darwin.cpu_type_t /* = kotlin.Int */ = 0

const val CPU_TYPE_I386: platform.darwin.cpu_type_t /* = kotlin.Int */ = 0

const val CPU_TYPE_I860: platform.darwin.cpu_type_t /* = kotlin.Int */ = 0

const val CPU_TYPE_MC680x0: platform.darwin.cpu_type_t /* = kotlin.Int */ = 0

const val CPU_TYPE_MC88000: platform.darwin.cpu_type_t /* = kotlin.Int */ = 0

const val CPU_TYPE_MC98000: platform.darwin.cpu_type_t /* = kotlin.Int */ = 0

const val CPU_TYPE_POWERPC: platform.darwin.cpu_type_t /* = kotlin.Int */ = 0

const val CPU_TYPE_POWERPC64: kotlin.Int = 0

const val CPU_TYPE_SPARC: platform.darwin.cpu_type_t /* = kotlin.Int */ = 0

const val CPU_TYPE_VAX: platform.darwin.cpu_type_t /* = kotlin.Int */ = 0

const val CPU_TYPE_X86: platform.darwin.cpu_type_t /* = kotlin.Int */ = 0

const val CPU_TYPE_X86_64: kotlin.Int = 0

const val CRNCYSTR: kotlin.Int = 0

const val C_IRGRP: kotlin.Int = 0

const val C_IROTH: kotlin.Int = 0

const val C_IRUSR: kotlin.Int = 0

const val C_ISBLK: kotlin.Int = 0

const val C_ISCHR: kotlin.Int = 0

const val C_ISCTG: kotlin.Int = 0

const val C_ISDIR: kotlin.Int = 0

const val C_ISFIFO: kotlin.Int = 0

const val C_ISGID: kotlin.Int = 0

const val C_ISLNK: kotlin.Int = 0

const val C_ISREG: kotlin.Int = 0

const val C_ISSOCK: kotlin.Int = 0

const val C_ISUID: kotlin.Int = 0

const val C_ISVTX: kotlin.Int = 0

const val C_IWGRP: kotlin.Int = 0

const val C_IWOTH: kotlin.Int = 0

const val C_IWUSR: kotlin.Int = 0

const val C_IXGRP: kotlin.Int = 0

const val C_IXOTH: kotlin.Int = 0

const val C_IXUSR: kotlin.Int = 0

const val DAY_1: kotlin.Int = 0

const val DAY_2: kotlin.Int = 0

const val DAY_3: kotlin.Int = 0

const val DAY_4: kotlin.Int = 0

const val DAY_5: kotlin.Int = 0

const val DAY_6: kotlin.Int = 0

const val DAY_7: kotlin.Int = 0

const val DBM_INSERT: kotlin.Int = 0

const val DBM_RDONLY: kotlin.Int = 0

const val DBM_REPLACE: kotlin.Int = 0

const val DB_LOCK: kotlin.Int = 0

const val DB_SHMEM: kotlin.Int = 0

const val DB_TXN: kotlin.UInt = 0u

const val DEAD_PROCESS: kotlin.Int = 0

const val DICE_KIND_ABS_JUMP_TABLE32: kotlin.Int = 0

const val DICE_KIND_DATA: kotlin.Int = 0

const val DICE_KIND_JUMP_TABLE16: kotlin.Int = 0

const val DICE_KIND_JUMP_TABLE32: kotlin.Int = 0

const val DICE_KIND_JUMP_TABLE8: kotlin.Int = 0

const val DIRTYPE: kotlin.Int = 0

val DIR_CONTROL_ENTRY: kotlin.String
    get() = TODO()

const val DISPATCH_API_VERSION: kotlin.Int = 0

const val DISPATCH_APPLY_AUTO_AVAILABLE: kotlin.Int = 0

val DISPATCH_AUTORELEASE_FREQUENCY_INHERIT: platform.darwin.dispatch_autorelease_frequency_t /* = kotlin.ULong */
    get() = TODO()

val DISPATCH_AUTORELEASE_FREQUENCY_NEVER: platform.darwin.dispatch_autorelease_frequency_t /* = kotlin.ULong */
    get() = TODO()

val DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM: platform.darwin.dispatch_autorelease_frequency_t /* = kotlin.ULong */
    get() = TODO()

val DISPATCH_BLOCK_ASSIGN_CURRENT: platform.darwin.dispatch_block_flags_t /* = kotlin.ULong */
    get() = TODO()

val DISPATCH_BLOCK_BARRIER: platform.darwin.dispatch_block_flags_t /* = kotlin.ULong */
    get() = TODO()

val DISPATCH_BLOCK_DETACHED: platform.darwin.dispatch_block_flags_t /* = kotlin.ULong */
    get() = TODO()

val DISPATCH_BLOCK_ENFORCE_QOS_CLASS: platform.darwin.dispatch_block_flags_t /* = kotlin.ULong */
    get() = TODO()

val DISPATCH_BLOCK_INHERIT_QOS_CLASS: platform.darwin.dispatch_block_flags_t /* = kotlin.ULong */
    get() = TODO()

val DISPATCH_BLOCK_NO_QOS_CLASS: platform.darwin.dispatch_block_flags_t /* = kotlin.ULong */
    get() = TODO()

const val DISPATCH_IO_RANDOM: kotlin.Int = 0

const val DISPATCH_IO_STOP: kotlin.Int = 0

const val DISPATCH_IO_STREAM: kotlin.Int = 0

const val DISPATCH_IO_STRICT_INTERVAL: kotlin.Int = 0

const val DISPATCH_MACH_SEND_DEAD: kotlin.Int = 0

const val DISPATCH_MEMORYPRESSURE_CRITICAL: kotlin.Int = 0

const val DISPATCH_MEMORYPRESSURE_NORMAL: kotlin.Int = 0

const val DISPATCH_MEMORYPRESSURE_WARN: kotlin.Int = 0

const val DISPATCH_ONCE_INLINE_FASTPATH: kotlin.Int = 0

const val DISPATCH_PROC_EXEC: kotlin.Int = 0

const val DISPATCH_PROC_EXIT: kotlin.UInt = 0u

const val DISPATCH_PROC_FORK: kotlin.Int = 0

const val DISPATCH_PROC_SIGNAL: kotlin.Int = 0

const val DISPATCH_QUEUE_PRIORITY_BACKGROUND: kotlin.Int = 0

const val DISPATCH_QUEUE_PRIORITY_DEFAULT: kotlin.Int = 0

const val DISPATCH_QUEUE_PRIORITY_HIGH: kotlin.Int = 0

const val DISPATCH_QUEUE_PRIORITY_LOW: kotlin.Int = 0

const val DISPATCH_SWIFT3_OVERLAY: kotlin.Int = 0

const val DISPATCH_TIMER_STRICT: kotlin.Int = 0

const val DISPATCH_TIME_FOREVER: kotlin.ULong = 0u

const val DISPATCH_TIME_NOW: kotlin.ULong = 0u

const val DISPATCH_VNODE_ATTRIB: kotlin.Int = 0

const val DISPATCH_VNODE_DELETE: kotlin.Int = 0

const val DISPATCH_VNODE_EXTEND: kotlin.Int = 0

const val DISPATCH_VNODE_FUNLOCK: kotlin.Int = 0

const val DISPATCH_VNODE_LINK: kotlin.Int = 0

const val DISPATCH_VNODE_RENAME: kotlin.Int = 0

const val DISPATCH_VNODE_REVOKE: kotlin.Int = 0

const val DISPATCH_VNODE_WRITE: kotlin.Int = 0

const val DNS_PRINT_AA: kotlin.Int = 0

const val DNS_PRINT_ADDITIONAL: kotlin.Int = 0

const val DNS_PRINT_ANSWER: kotlin.Int = 0

const val DNS_PRINT_AUTHORITY: kotlin.Int = 0

const val DNS_PRINT_OPCODE: kotlin.Int = 0

const val DNS_PRINT_PR: kotlin.Int = 0

const val DNS_PRINT_QR: kotlin.Int = 0

const val DNS_PRINT_QUESTION: kotlin.Int = 0

const val DNS_PRINT_RA: kotlin.Int = 0

const val DNS_PRINT_RCODE: kotlin.Int = 0

const val DNS_PRINT_RD: kotlin.Int = 0

const val DNS_PRINT_SERVER: kotlin.Int = 0

const val DNS_PRINT_TC: kotlin.Int = 0

const val DNS_PRINT_XID: kotlin.Int = 0

const val DNS_STATUS_BAD_HANDLE: kotlin.Int = 0

const val DNS_STATUS_CONNECTION_FAILED: kotlin.Int = 0

const val DNS_STATUS_MALFORMED_QUERY: kotlin.Int = 0

const val DNS_STATUS_OK: kotlin.Int = 0

const val DNS_STATUS_RECEIVE_FAILED: kotlin.Int = 0

const val DNS_STATUS_SEND_FAILED: kotlin.Int = 0

const val DNS_STATUS_TIMEOUT: kotlin.Int = 0

const val DNS_STATUS_WRONG_QUESTION: kotlin.Int = 0

const val DNS_STATUS_WRONG_SERVER: kotlin.Int = 0

const val DNS_STATUS_WRONG_XID: kotlin.Int = 0

const val D_FMT: kotlin.Int = 0

const val D_MD_ORDER: kotlin.Int = 0

const val D_T_FMT: kotlin.Int = 0

const val EFL_AC: kotlin.Int = 0

const val EFL_AF: kotlin.Int = 0

const val EFL_CF: kotlin.Int = 0

const val EFL_CLR: kotlin.UInt = 0u

const val EFL_DF: kotlin.Int = 0

const val EFL_ID: kotlin.Int = 0

const val EFL_IF: kotlin.Int = 0

const val EFL_IOPL: kotlin.Int = 0

const val EFL_IOPL_KERNEL: kotlin.Int = 0

const val EFL_IOPL_USER: kotlin.Int = 0

const val EFL_NT: kotlin.Int = 0

const val EFL_OF: kotlin.Int = 0

const val EFL_PF: kotlin.Int = 0

const val EFL_RF: kotlin.Int = 0

const val EFL_SET: kotlin.Int = 0

const val EFL_SF: kotlin.Int = 0

const val EFL_TF: kotlin.Int = 0

const val EFL_USER_CLEAR: kotlin.Int = 0

const val EFL_USER_SET: kotlin.Int = 0

const val EFL_VIF: kotlin.Int = 0

const val EFL_VIP: kotlin.Int = 0

const val EFL_VM: kotlin.Int = 0

const val EFL_ZF: kotlin.Int = 0

const val EMPTY: kotlin.Int = 0

const val ENVIRONMENT_SLOT: kotlin.Int = 0

const val ERA: kotlin.Int = 0

const val ERA_D_FMT: kotlin.Int = 0

const val ERA_D_T_FMT: kotlin.Int = 0

const val ERA_T_FMT: kotlin.Int = 0

const val ERR_SUCCESS: platform.darwin.mach_error_t /* = kotlin.Int */ = 0

const val EXCEPTION_CODE_MAX: kotlin.Int = 0

const val EXCEPTION_DEFAULT: kotlin.Int = 0

const val EXCEPTION_STATE: kotlin.Int = 0

const val EXCEPTION_STATE_IDENTITY: kotlin.Int = 0

const val EXC_ARITHMETIC: kotlin.Int = 0

const val EXC_BAD_ACCESS: kotlin.Int = 0

const val EXC_BAD_INSTRUCTION: kotlin.Int = 0

const val EXC_BREAKPOINT: kotlin.Int = 0

const val EXC_CORPSE_NOTIFY: kotlin.Int = 0

const val EXC_CORPSE_VARIANT_BIT: kotlin.Int = 0

const val EXC_CRASH: kotlin.Int = 0

const val EXC_EMULATION: kotlin.Int = 0

const val EXC_GUARD: kotlin.Int = 0

const val EXC_I386_ALIGNFLT: kotlin.Int = 0

const val EXC_I386_BOUND: kotlin.Int = 0

const val EXC_I386_BOUNDFLT: kotlin.Int = 0

const val EXC_I386_BPT: kotlin.Int = 0

const val EXC_I386_BPTFLT: kotlin.Int = 0

const val EXC_I386_DBLFLT: kotlin.Int = 0

const val EXC_I386_DIV: kotlin.Int = 0

const val EXC_I386_DIVERR: kotlin.Int = 0

const val EXC_I386_EMERR: kotlin.Int = 0

const val EXC_I386_ENDPERR: kotlin.Int = 0

const val EXC_I386_ENOEXTFLT: kotlin.Int = 0

const val EXC_I386_EXTERR: kotlin.Int = 0

const val EXC_I386_EXTERRFLT: kotlin.Int = 0

const val EXC_I386_EXTOVR: kotlin.Int = 0

const val EXC_I386_EXTOVRFLT: kotlin.Int = 0

const val EXC_I386_GPFLT: kotlin.Int = 0

const val EXC_I386_INTO: kotlin.Int = 0

const val EXC_I386_INTOFLT: kotlin.Int = 0

const val EXC_I386_INVOP: kotlin.Int = 0

const val EXC_I386_INVOPFLT: kotlin.Int = 0

const val EXC_I386_INVTSSFLT: kotlin.Int = 0

const val EXC_I386_NMIFLT: kotlin.Int = 0

const val EXC_I386_NOEXT: kotlin.Int = 0

const val EXC_I386_NOEXTFLT: kotlin.Int = 0

const val EXC_I386_PGFLT: kotlin.Int = 0

const val EXC_I386_SEGNPFLT: kotlin.Int = 0

const val EXC_I386_SGL: kotlin.Int = 0

const val EXC_I386_SGLSTP: kotlin.Int = 0

const val EXC_I386_SSEEXTERR: kotlin.Int = 0

const val EXC_I386_STKFLT: kotlin.Int = 0

const val EXC_MACF_MAX: kotlin.Int = 0

const val EXC_MACF_MIN: kotlin.Int = 0

const val EXC_MACH_SYSCALL: kotlin.Int = 0

const val EXC_MASK_ALL: kotlin.Int = 0

const val EXC_MASK_ARITHMETIC: kotlin.Int = 0

const val EXC_MASK_BAD_ACCESS: kotlin.Int = 0

const val EXC_MASK_BAD_INSTRUCTION: kotlin.Int = 0

const val EXC_MASK_BREAKPOINT: kotlin.Int = 0

const val EXC_MASK_CORPSE_NOTIFY: kotlin.Int = 0

const val EXC_MASK_CRASH: kotlin.Int = 0

const val EXC_MASK_EMULATION: kotlin.Int = 0

const val EXC_MASK_GUARD: kotlin.Int = 0

const val EXC_MASK_MACHINE: kotlin.Int = 0

const val EXC_MASK_MACH_SYSCALL: kotlin.Int = 0

const val EXC_MASK_RESOURCE: kotlin.Int = 0

const val EXC_MASK_RPC_ALERT: kotlin.Int = 0

const val EXC_MASK_SOFTWARE: kotlin.Int = 0

const val EXC_MASK_SYSCALL: kotlin.Int = 0

const val EXC_RESOURCE: kotlin.Int = 0

const val EXC_RPC_ALERT: kotlin.Int = 0

const val EXC_SOFTWARE: kotlin.Int = 0

const val EXC_SOFT_SIGNAL: kotlin.Int = 0

const val EXC_SYSCALL: kotlin.Int = 0

const val EXC_TYPES_COUNT: kotlin.Int = 0

val EXPIRE_AFTER_CONTROL_ENTRY: kotlin.String
    get() = TODO()

const val EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE: kotlin.Int = 0

const val EXPORT_SYMBOL_FLAGS_KIND_MASK: kotlin.Int = 0

const val EXPORT_SYMBOL_FLAGS_KIND_REGULAR: kotlin.Int = 0

const val EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL: kotlin.Int = 0

const val EXPORT_SYMBOL_FLAGS_REEXPORT: kotlin.Int = 0

const val EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER: kotlin.Int = 0

const val EXPORT_SYMBOL_FLAGS_WEAK_DEFINITION: kotlin.Int = 0

const val EX_CANTCREAT: kotlin.Int = 0

const val EX_CONFIG: kotlin.Int = 0

const val EX_DATAERR: kotlin.Int = 0

const val EX_IOERR: kotlin.Int = 0

const val EX_NOHOST: kotlin.Int = 0

const val EX_NOINPUT: kotlin.Int = 0

const val EX_NOPERM: kotlin.Int = 0

const val EX_NOUSER: kotlin.Int = 0

const val EX_OK: kotlin.Int = 0

const val EX_OSERR: kotlin.Int = 0

const val EX_OSFILE: kotlin.Int = 0

const val EX_PROTOCOL: kotlin.Int = 0

const val EX_SOFTWARE: kotlin.Int = 0

const val EX_TEMPFAIL: kotlin.Int = 0

const val EX_UNAVAILABLE: kotlin.Int = 0

const val EX_USAGE: kotlin.Int = 0

const val EX__BASE: kotlin.Int = 0

const val EX__MAX: kotlin.Int = 0

const val FIFOTYPE: kotlin.Int = 0

val FILESZ_CONTROL_ENTRY: kotlin.String
    get() = TODO()

const val FIRST_EXCEPTION: kotlin.Int = 0

val FLAGS_CONTROL_ENTRY: kotlin.String
    get() = TODO()

const val FPARSELN_UNESCALL: kotlin.Int = 0

const val FPARSELN_UNESCCOMM: kotlin.Int = 0

const val FPARSELN_UNESCCONT: kotlin.Int = 0

const val FPARSELN_UNESCESC: kotlin.Int = 0

const val FPARSELN_UNESCREST: kotlin.Int = 0

const val FPC_DE: kotlin.Int = 0

const val FPC_DM: kotlin.Int = 0

const val FPC_IC: kotlin.Int = 0

const val FPC_IC_AFF: kotlin.Int = 0

const val FPC_IC_PROJ: kotlin.Int = 0

const val FPC_IE: kotlin.Int = 0

const val FPC_IM: kotlin.Int = 0

const val FPC_OE: kotlin.Int = 0

const val FPC_OM: kotlin.Int = 0

const val FPC_PC: kotlin.Int = 0

const val FPC_PC_24: kotlin.Int = 0

const val FPC_PC_53: kotlin.Int = 0

const val FPC_PC_64: kotlin.Int = 0

const val FPC_PE: kotlin.Int = 0

const val FPC_RC: kotlin.Int = 0

const val FPC_RC_CHOP: kotlin.Int = 0

const val FPC_RC_RD: kotlin.Int = 0

const val FPC_RC_RN: kotlin.Int = 0

const val FPC_RC_RU: kotlin.Int = 0

const val FPC_UE: kotlin.Int = 0

const val FPC_ZE: kotlin.Int = 0

const val FPC_ZM: kotlin.Int = 0

const val FPS_BUSY: kotlin.Int = 0

const val FPS_C0: kotlin.Int = 0

const val FPS_C1: kotlin.Int = 0

const val FPS_C2: kotlin.Int = 0

const val FPS_C3: kotlin.Int = 0

const val FPS_DE: kotlin.Int = 0

const val FPS_ES: kotlin.Int = 0

const val FPS_IE: kotlin.Int = 0

const val FPS_OE: kotlin.Int = 0

const val FPS_PE: kotlin.Int = 0

const val FPS_SF: kotlin.Int = 0

const val FPS_TOS: kotlin.Int = 0

const val FPS_TOS_SHIFT: kotlin.Int = 0

const val FPS_UE: kotlin.Int = 0

const val FPS_ZE: kotlin.Int = 0

const val FP_287: kotlin.Int = 0

const val FP_387: kotlin.Int = 0

const val FP_FXSR: kotlin.Int = 0

const val FP_NO: kotlin.Int = 0

const val FP_SOFT: kotlin.Int = 0

const val FUNCTION_DECLSPEC: kotlin.Int = 0

const val FUNCTION_PASCAL: kotlin.Int = 0

const val FUNCTION_WIN32CC: kotlin.Int = 0

const val GLOB_ABEND: kotlin.Int = 0

const val GLOB_ABORTED: kotlin.Int = 0

const val GLOB_ALTDIRFUNC: kotlin.Int = 0

const val GLOB_APPEND: kotlin.Int = 0

const val GLOB_BRACE: kotlin.Int = 0

const val GLOB_DOOFFS: kotlin.Int = 0

const val GLOB_ERR: kotlin.Int = 0

const val GLOB_LIMIT: kotlin.Int = 0

const val GLOB_MAGCHAR: kotlin.Int = 0

const val GLOB_MARK: kotlin.Int = 0

const val GLOB_MAXPATH: kotlin.Int = 0

const val GLOB_NOCHECK: kotlin.Int = 0

const val GLOB_NOESCAPE: kotlin.Int = 0

const val GLOB_NOMAGIC: kotlin.Int = 0

const val GLOB_NOMATCH: kotlin.Int = 0

const val GLOB_NOSORT: kotlin.Int = 0

const val GLOB_NOSPACE: kotlin.Int = 0

const val GLOB_NOSYS: kotlin.Int = 0

const val GLOB_QUOTE: kotlin.Int = 0

const val GLOB_TILDE: kotlin.Int = 0

const val GUARD_TYPE_MACH_PORT: kotlin.Int = 0

const val GUARD_TYPE_VIRT_MEMORY: kotlin.Int = 0

const val HASHMAGIC: kotlin.Int = 0

const val HASHSIZE: kotlin.Int = 0

const val HASHVERSION: kotlin.Int = 0

const val HOST_AMFID_PORT: kotlin.Int = 0

const val HOST_ATM_NOTIFICATION_PORT: kotlin.Int = 0

const val HOST_AUDIT_CONTROL_PORT: kotlin.Int = 0

const val HOST_AUTOMOUNTD_PORT: kotlin.Int = 0

const val HOST_BASIC_INFO: kotlin.Int = 0

const val HOST_BASIC_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val HOST_CALENDAR_CHANGED_REPLYID: kotlin.Int = 0

const val HOST_CALENDAR_SET_REPLYID: kotlin.Int = 0

const val HOST_CAN_HAS_DEBUGGER: kotlin.Int = 0

const val HOST_CAN_HAS_DEBUGGER_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val HOST_CHUD_PORT: kotlin.Int = 0

const val HOST_CLOSURED_PORT: kotlin.Int = 0

const val HOST_COALITION_PORT: kotlin.Int = 0

const val HOST_CONTAINERD_PORT: kotlin.Int = 0

const val HOST_CPU_LOAD_INFO: kotlin.Int = 0

const val HOST_CPU_LOAD_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val HOST_DEBUG_INFO_INTERNAL: kotlin.Int = 0

const val HOST_DYNAMIC_PAGER_PORT: kotlin.Int = 0

const val HOST_EXPIRED_TASK_INFO: kotlin.Int = 0

const val HOST_EXTMOD_INFO64: kotlin.Int = 0

const val HOST_EXTMOD_INFO64_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val HOST_EXTMOD_INFO64_LATEST_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val HOST_GSSD_PORT: kotlin.Int = 0

const val HOST_INFO_MAX: kotlin.Int = 0

const val HOST_IO_MASTER_PORT: kotlin.Int = 0

const val HOST_KEXTD_PORT: kotlin.Int = 0

const val HOST_KTRACE_BACKGROUND_PORT: kotlin.Int = 0

const val HOST_LAST_SPECIAL_KERNEL_PORT: kotlin.Int = 0

const val HOST_LAUNCHCTL_PORT: kotlin.Int = 0

const val HOST_LOAD_INFO: kotlin.Int = 0

const val HOST_LOAD_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val HOST_LOCAL_NODE: kotlin.Int = 0

const val HOST_LOCKD_PORT: kotlin.Int = 0

const val HOST_MACH_MSG_TRAP: kotlin.Int = 0

const val HOST_MAX_SPECIAL_KERNEL_PORT: kotlin.Int = 0

const val HOST_MAX_SPECIAL_PORT: kotlin.Int = 0

const val HOST_MIN_SPECIAL_PORT: kotlin.Int = 0

const val HOST_NODE_PORT: kotlin.Int = 0

const val HOST_NOTIFY_CALENDAR_CHANGE: kotlin.Int = 0

const val HOST_NOTIFY_CALENDAR_SET: kotlin.Int = 0

const val HOST_NOTIFY_TYPE_MAX: kotlin.Int = 0

const val HOST_NULL: platform.darwin.host_t /* = kotlin.UInt */ = 0u

const val HOST_PORT: kotlin.Int = 0

const val HOST_PREFERRED_USER_ARCH: kotlin.Int = 0

const val HOST_PREFERRED_USER_ARCH_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val HOST_PRIORITY_INFO: kotlin.Int = 0

const val HOST_PRIORITY_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val HOST_PRIV_NULL: platform.darwin.host_priv_t /* = kotlin.UInt */ = 0u

const val HOST_PRIV_PORT: kotlin.Int = 0

const val HOST_RESOURCE_NOTIFY_PORT: kotlin.Int = 0

const val HOST_RESOURCE_SIZES: kotlin.Int = 0

const val HOST_RESOURCE_SIZES_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val HOST_SCHED_INFO: kotlin.Int = 0

const val HOST_SCHED_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val HOST_SEATBELT_PORT: kotlin.Int = 0

const val HOST_SECURITY_NULL: platform.darwin.host_security_t /* = kotlin.UInt */ = 0u

const val HOST_SECURITY_PORT: kotlin.Int = 0

const val HOST_SEMAPHORE_TRAPS: kotlin.Int = 0

const val HOST_SYSDIAGNOSE_PORT: kotlin.Int = 0

const val HOST_SYSPOLICYD_PORT: kotlin.Int = 0

const val HOST_TELEMETRY_PORT: kotlin.Int = 0

const val HOST_UNFREED_PORT: kotlin.Int = 0

const val HOST_USER_NOTIFICATION_PORT: kotlin.Int = 0

const val HOST_VM_INFO: kotlin.Int = 0

const val HOST_VM_INFO64: kotlin.Int = 0

const val HOST_VM_INFO64_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val HOST_VM_INFO64_LATEST_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val HOST_VM_INFO64_REV0_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val HOST_VM_INFO64_REV1_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val HOST_VM_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val HOST_VM_INFO_LATEST_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val HOST_VM_INFO_REV0_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val HOST_VM_INFO_REV1_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val HOST_VM_INFO_REV2_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val HOST_VM_PURGABLE: kotlin.Int = 0

const val HOST_VM_PURGABLE_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val HOST_XPC_EXCEPTION_PORT: kotlin.Int = 0

const val I386_EXCEPTION_STATE_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val I386_LPGBYTES: kotlin.Int = 0

const val I386_LPGMASK: kotlin.Int = 0

const val I386_LPGSHIFT: kotlin.Int = 0

const val I386_PGBYTES: kotlin.Int = 0

const val I386_PGSHIFT: kotlin.Int = 0

const val I386_THREAD_STATE_MAX: kotlin.Int = 0

const val ID_TYPE_GID: kotlin.Int = 0

const val ID_TYPE_GROUPNAME: kotlin.Int = 0

const val ID_TYPE_GROUP_NFS: kotlin.Int = 0

const val ID_TYPE_GSS_EXPORT_NAME: kotlin.Int = 0

const val ID_TYPE_KERBEROS: kotlin.Int = 0

const val ID_TYPE_SID: kotlin.Int = 0

const val ID_TYPE_UID: kotlin.Int = 0

const val ID_TYPE_USERNAME: kotlin.Int = 0

const val ID_TYPE_USER_NFS: kotlin.Int = 0

const val ID_TYPE_UUID: kotlin.Int = 0

const val ID_TYPE_X509_DN: kotlin.Int = 0

const val INDIRECT_SYMBOL_ABS: kotlin.Int = 0

const val INDIRECT_SYMBOL_LOCAL: kotlin.UInt = 0u

const val INIT_PROCESS: kotlin.Int = 0

const val IO_NUM_PRIORITIES: kotlin.Int = 0

const val IPC_SPACE_INSPECT_NULL: platform.darwin.ipc_space_inspect_t /* = kotlin.UInt */ = 0u

const val IPC_SPACE_NULL: platform.darwin.ipc_space_t /* = kotlin.UInt */ = 0u

const val IPC_VOUCHER_ATTR_CONTROL_NULL: platform.darwin.ipc_voucher_attr_control_t /* = kotlin.UInt */ = 0u

const val IPC_VOUCHER_ATTR_MANAGER_NULL: platform.darwin.ipc_voucher_attr_manager_t /* = kotlin.UInt */ = 0u

const val IPC_VOUCHER_NULL: platform.darwin.ipc_voucher_t /* = kotlin.UInt */ = 0u

const val IPHONE_SIMULATOR_HOST_MIN_VERSION_REQUIRED: kotlin.Int = 0

const val KERNEL_BOOT_INFO_MAX: kotlin.Int = 0

const val KERNEL_VERSION_MAX: kotlin.Int = 0

const val KERN_ABORTED: kotlin.Int = 0

const val KERN_ALREADY_IN_SET: kotlin.Int = 0

const val KERN_ALREADY_WAITING: kotlin.Int = 0

const val KERN_CODESIGN_ERROR: kotlin.Int = 0

const val KERN_CODE_SELECTOR: kotlin.Int = 0

const val KERN_DATA_SELECTOR: kotlin.Int = 0

const val KERN_DEFAULT_SET: kotlin.Int = 0

const val KERN_EXCEPTION_PROTECTED: kotlin.Int = 0

const val KERN_FAILURE: kotlin.Int = 0

const val KERN_INSUFFICIENT_BUFFER_SIZE: kotlin.Int = 0

const val KERN_INVALID_ADDRESS: kotlin.Int = 0

const val KERN_INVALID_ARGUMENT: kotlin.Int = 0

const val KERN_INVALID_CAPABILITY: kotlin.Int = 0

const val KERN_INVALID_HOST: kotlin.Int = 0

const val KERN_INVALID_LEDGER: kotlin.Int = 0

const val KERN_INVALID_MEMORY_CONTROL: kotlin.Int = 0

const val KERN_INVALID_NAME: kotlin.Int = 0

const val KERN_INVALID_OBJECT: kotlin.Int = 0

const val KERN_INVALID_POLICY: kotlin.Int = 0

const val KERN_INVALID_PROCESSOR_SET: kotlin.Int = 0

const val KERN_INVALID_RIGHT: kotlin.Int = 0

const val KERN_INVALID_SECURITY: kotlin.Int = 0

const val KERN_INVALID_TASK: kotlin.Int = 0

const val KERN_INVALID_VALUE: kotlin.Int = 0

const val KERN_LOCK_OWNED: kotlin.Int = 0

const val KERN_LOCK_OWNED_SELF: kotlin.Int = 0

const val KERN_LOCK_SET_DESTROYED: kotlin.Int = 0

const val KERN_LOCK_UNSTABLE: kotlin.Int = 0

const val KERN_MEMORY_DATA_MOVED: kotlin.Int = 0

const val KERN_MEMORY_ERROR: kotlin.Int = 0

const val KERN_MEMORY_FAILURE: kotlin.Int = 0

const val KERN_MEMORY_PRESENT: kotlin.Int = 0

const val KERN_MEMORY_RESTART_COPY: kotlin.Int = 0

const val KERN_NAME_EXISTS: kotlin.Int = 0

const val KERN_NODE_DOWN: kotlin.Int = 0

const val KERN_NOT_DEPRESSED: kotlin.Int = 0

const val KERN_NOT_IN_SET: kotlin.Int = 0

const val KERN_NOT_RECEIVER: kotlin.Int = 0

const val KERN_NOT_SUPPORTED: kotlin.Int = 0

const val KERN_NOT_WAITING: kotlin.Int = 0

const val KERN_NO_ACCESS: kotlin.Int = 0

const val KERN_NO_SPACE: kotlin.Int = 0

const val KERN_OPERATION_TIMED_OUT: kotlin.Int = 0

const val KERN_POLICY_LIMIT: kotlin.Int = 0

const val KERN_POLICY_STATIC: kotlin.Int = 0

const val KERN_PROTECTION_FAILURE: kotlin.Int = 0

const val KERN_RESOURCE_SHORTAGE: kotlin.Int = 0

const val KERN_RETURN_MAX: kotlin.Int = 0

const val KERN_RIGHT_EXISTS: kotlin.Int = 0

const val KERN_RPC_CONTINUE_ORPHAN: kotlin.Int = 0

const val KERN_RPC_SERVER_TERMINATED: kotlin.Int = 0

const val KERN_RPC_TERMINATE_ORPHAN: kotlin.Int = 0

const val KERN_SEMAPHORE_DESTROYED: kotlin.Int = 0

const val KERN_SUCCESS: kotlin.Int = 0

const val KERN_TERMINATED: kotlin.Int = 0

const val KERN_UREFS_OVERFLOW: kotlin.Int = 0

const val KMOD_INFO_VERSION: kotlin.Int = 0

const val KMOD_MAX_NAME: kotlin.Int = 0

const val KMOD_RETURN_FAILURE: kotlin.Int = 0

const val KMOD_RETURN_SUCCESS: kotlin.Int = 0

const val LATENCY_QOS_LAUNCH_DEFAULT_TIER: kotlin.Int = 0

val LATENCY_QOS_TIER_0: platform.darwin.task_latency_qos /* = kotlin.UInt */
    get() = TODO()

val LATENCY_QOS_TIER_1: platform.darwin.task_latency_qos /* = kotlin.UInt */
    get() = TODO()

val LATENCY_QOS_TIER_2: platform.darwin.task_latency_qos /* = kotlin.UInt */
    get() = TODO()

val LATENCY_QOS_TIER_3: platform.darwin.task_latency_qos /* = kotlin.UInt */
    get() = TODO()

val LATENCY_QOS_TIER_4: platform.darwin.task_latency_qos /* = kotlin.UInt */
    get() = TODO()

val LATENCY_QOS_TIER_5: platform.darwin.task_latency_qos /* = kotlin.UInt */
    get() = TODO()

val LATENCY_QOS_TIER_UNSPECIFIED: platform.darwin.task_latency_qos /* = kotlin.UInt */
    get() = TODO()

val LAUNCH_DATA_ARRAY: platform.darwin.launch_data_type_t /* = kotlin.UInt */
    get() = TODO()

val LAUNCH_DATA_BOOL: platform.darwin.launch_data_type_t /* = kotlin.UInt */
    get() = TODO()

val LAUNCH_DATA_DICTIONARY: platform.darwin.launch_data_type_t /* = kotlin.UInt */
    get() = TODO()

val LAUNCH_DATA_ERRNO: platform.darwin.launch_data_type_t /* = kotlin.UInt */
    get() = TODO()

val LAUNCH_DATA_FD: platform.darwin.launch_data_type_t /* = kotlin.UInt */
    get() = TODO()

val LAUNCH_DATA_INTEGER: platform.darwin.launch_data_type_t /* = kotlin.UInt */
    get() = TODO()

val LAUNCH_DATA_MACHPORT: platform.darwin.launch_data_type_t /* = kotlin.UInt */
    get() = TODO()

val LAUNCH_DATA_OPAQUE: platform.darwin.launch_data_type_t /* = kotlin.UInt */
    get() = TODO()

val LAUNCH_DATA_REAL: platform.darwin.launch_data_type_t /* = kotlin.UInt */
    get() = TODO()

val LAUNCH_DATA_STRING: platform.darwin.launch_data_type_t /* = kotlin.UInt */
    get() = TODO()

val LAUNCH_JOBINETDCOMPATIBILITY_INSTANCES: kotlin.String
    get() = TODO()

val LAUNCH_JOBINETDCOMPATIBILITY_WAIT: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_ABANDONPROCESSGROUP: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_BONJOURFDS: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_CAL_DAY: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_CAL_HOUR: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_CAL_MINUTE: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_CAL_MONTH: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_CAL_WEEKDAY: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_DEBUG: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_DISABLED: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_DISABLED_MACHINETYPE: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_DISABLED_MODELNAME: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_DRAINMESSAGESONFAILEDINIT: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_ENABLEGLOBBING: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_ENABLEPRESSUREDEXIT: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_ENABLETRANSACTIONS: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_ENVIRONMENTVARIABLES: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_EXITTIMEOUT: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_GROUPNAME: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_HARDRESOURCELIMITS: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_HOPEFULLYEXITSFIRST: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_HOPEFULLYEXITSLAST: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_IGNOREPROCESSGROUPATSHUTDOWN: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_INETDCOMPATIBILITY: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_INITGROUPS: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_KEEPALIVE: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_KEEPALIVE_AFTERINITIALDEMAND: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_KEEPALIVE_CRASHED: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_KEEPALIVE_NETWORKSTATE: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_KEEPALIVE_OTHERJOBACTIVE: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_KEEPALIVE_OTHERJOBENABLED: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_KEEPALIVE_PATHSTATE: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_KEEPALIVE_SUCCESSFULEXIT: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_LABEL: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_LASTEXITSTATUS: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_LAUNCHEVENTS: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_LAUNCHONLYONCE: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_LEGACYTIMERS: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_LIMITLOADFROMHARDWARE: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_LIMITLOADFROMHOSTS: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_LIMITLOADTOHARDWARE: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_LIMITLOADTOHOSTS: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_LIMITLOADTOSESSIONTYPE: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_LOWPRIORITYBACKGROUNDIO: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_LOWPRIORITYIO: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_MACHSERVICELOOKUPPOLICIES: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_MACHSERVICES: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_MACH_HIDEUNTILCHECKIN: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_MACH_RESETATCLOSE: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_NICE: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_ONDEMAND: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_PID: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_POLICIES: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_PROCESSTYPE: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_PROGRAM: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_PROGRAMARGUMENTS: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_PUBLISHESEVENTS: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_QUEUEDIRECTORIES: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_RESOURCELIMIT_CORE: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_RESOURCELIMIT_CPU: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_RESOURCELIMIT_DATA: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_RESOURCELIMIT_FSIZE: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_RESOURCELIMIT_MEMLOCK: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_RESOURCELIMIT_NOFILE: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_RESOURCELIMIT_NPROC: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_RESOURCELIMIT_RSS: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_RESOURCELIMIT_STACK: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_ROOTDIRECTORY: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_RUNATLOAD: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_SESSIONCREATE: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_SOCKETS: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_SOFTRESOURCELIMITS: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_STANDARDERRORPATH: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_STANDARDINPATH: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_STANDARDOUTPATH: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_STARTCALENDARINTERVAL: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_STARTINTERVAL: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_STARTONMOUNT: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_THROTTLEINTERVAL: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_TIMEOUT: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_UMASK: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_USERENVIRONMENTVARIABLES: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_USERNAME: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_WAITFORDEBUGGER: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_WATCHPATHS: kotlin.String
    get() = TODO()

val LAUNCH_JOBKEY_WORKINGDIRECTORY: kotlin.String
    get() = TODO()

val LAUNCH_JOBPOLICY_DENYCREATINGOTHERJOBS: kotlin.String
    get() = TODO()

val LAUNCH_JOBSOCKETKEY_BONJOUR: kotlin.String
    get() = TODO()

val LAUNCH_JOBSOCKETKEY_FAMILY: kotlin.String
    get() = TODO()

val LAUNCH_JOBSOCKETKEY_MULTICASTGROUP: kotlin.String
    get() = TODO()

val LAUNCH_JOBSOCKETKEY_NODENAME: kotlin.String
    get() = TODO()

val LAUNCH_JOBSOCKETKEY_PASSIVE: kotlin.String
    get() = TODO()

val LAUNCH_JOBSOCKETKEY_PATHGROUP: kotlin.String
    get() = TODO()

val LAUNCH_JOBSOCKETKEY_PATHMODE: kotlin.String
    get() = TODO()

val LAUNCH_JOBSOCKETKEY_PATHNAME: kotlin.String
    get() = TODO()

val LAUNCH_JOBSOCKETKEY_PATHOWNER: kotlin.String
    get() = TODO()

val LAUNCH_JOBSOCKETKEY_PROTOCOL: kotlin.String
    get() = TODO()

val LAUNCH_JOBSOCKETKEY_SECUREWITHKEY: kotlin.String
    get() = TODO()

val LAUNCH_JOBSOCKETKEY_SERVICENAME: kotlin.String
    get() = TODO()

val LAUNCH_JOBSOCKETKEY_TYPE: kotlin.String
    get() = TODO()

val LAUNCH_KEY_CHECKIN: kotlin.String
    get() = TODO()

val LAUNCH_KEY_GETJOB: kotlin.String
    get() = TODO()

val LAUNCH_KEY_GETJOBS: kotlin.String
    get() = TODO()

val LAUNCH_KEY_PROCESSTYPE_ADAPTIVE: kotlin.String
    get() = TODO()

val LAUNCH_KEY_PROCESSTYPE_APP: kotlin.String
    get() = TODO()

val LAUNCH_KEY_PROCESSTYPE_BACKGROUND: kotlin.String
    get() = TODO()

val LAUNCH_KEY_PROCESSTYPE_INTERACTIVE: kotlin.String
    get() = TODO()

val LAUNCH_KEY_PROCESSTYPE_STANDARD: kotlin.String
    get() = TODO()

val LAUNCH_KEY_PUBLISHESEVENTS_DOMAININTERNAL: kotlin.String
    get() = TODO()

val LAUNCH_KEY_REMOVEJOB: kotlin.String
    get() = TODO()

val LAUNCH_KEY_STARTJOB: kotlin.String
    get() = TODO()

val LAUNCH_KEY_STOPJOB: kotlin.String
    get() = TODO()

val LAUNCH_KEY_SUBMITJOB: kotlin.String
    get() = TODO()

const val LC_BUILD_VERSION: kotlin.Int = 0

const val LC_CODE_SIGNATURE: kotlin.Int = 0

const val LC_DATA_IN_CODE: kotlin.Int = 0

const val LC_DYLD_ENVIRONMENT: kotlin.Int = 0

const val LC_DYLD_INFO: kotlin.Int = 0

const val LC_DYLD_INFO_ONLY: kotlin.UInt = 0u

const val LC_DYLIB_CODE_SIGN_DRS: kotlin.Int = 0

const val LC_DYSYMTAB: kotlin.Int = 0

const val LC_ENCRYPTION_INFO: kotlin.Int = 0

const val LC_ENCRYPTION_INFO_64: kotlin.Int = 0

const val LC_FUNCTION_STARTS: kotlin.Int = 0

const val LC_FVMFILE: kotlin.Int = 0

const val LC_IDENT: kotlin.Int = 0

const val LC_IDFVMLIB: kotlin.Int = 0

const val LC_ID_DYLIB: kotlin.Int = 0

const val LC_ID_DYLINKER: kotlin.Int = 0

const val LC_LAZY_LOAD_DYLIB: kotlin.Int = 0

const val LC_LINKER_OPTIMIZATION_HINT: kotlin.Int = 0

const val LC_LINKER_OPTION: kotlin.Int = 0

const val LC_LOADFVMLIB: kotlin.Int = 0

const val LC_LOAD_DYLIB: kotlin.Int = 0

const val LC_LOAD_DYLINKER: kotlin.Int = 0

const val LC_LOAD_UPWARD_DYLIB: kotlin.UInt = 0u

const val LC_LOAD_WEAK_DYLIB: kotlin.UInt = 0u

const val LC_MAIN: kotlin.UInt = 0u

const val LC_NOTE: kotlin.Int = 0

const val LC_PREBIND_CKSUM: kotlin.Int = 0

const val LC_PREBOUND_DYLIB: kotlin.Int = 0

const val LC_PREPAGE: kotlin.Int = 0

const val LC_REEXPORT_DYLIB: kotlin.UInt = 0u

const val LC_REQ_DYLD: kotlin.UInt = 0u

const val LC_ROUTINES: kotlin.Int = 0

const val LC_ROUTINES_64: kotlin.Int = 0

const val LC_RPATH: kotlin.UInt = 0u

const val LC_SEGMENT: kotlin.Int = 0

const val LC_SEGMENT_64: kotlin.Int = 0

const val LC_SEGMENT_SPLIT_INFO: kotlin.Int = 0

const val LC_SOURCE_VERSION: kotlin.Int = 0

const val LC_SUB_CLIENT: kotlin.Int = 0

const val LC_SUB_FRAMEWORK: kotlin.Int = 0

const val LC_SUB_LIBRARY: kotlin.Int = 0

const val LC_SUB_UMBRELLA: kotlin.Int = 0

const val LC_SYMSEG: kotlin.Int = 0

const val LC_SYMTAB: kotlin.Int = 0

const val LC_THREAD: kotlin.Int = 0

const val LC_TWOLEVEL_HINTS: kotlin.Int = 0

const val LC_UNIXTHREAD: kotlin.Int = 0

const val LC_UUID: kotlin.Int = 0

const val LC_VERSION_MIN_IPHONEOS: kotlin.Int = 0

const val LC_VERSION_MIN_MACOSX: kotlin.Int = 0

const val LC_VERSION_MIN_TVOS: kotlin.Int = 0

const val LC_VERSION_MIN_WATCHOS: kotlin.Int = 0

const val LEDGER_ITEM_INFINITY: platform.darwin.ledger_item_t /* = kotlin.UInt */ = 0u

const val LEDGER_LIMIT_INFINITY: platform.darwin.ledger_amount_t /* = kotlin.Long */ = 0L

const val LEDGER_NULL: platform.darwin.ledger_t /* = kotlin.UInt */ = 0u

const val LIO_NOP: kotlin.Int = 0

const val LIO_NOWAIT: kotlin.Int = 0

const val LIO_READ: kotlin.Int = 0

const val LIO_WAIT: kotlin.Int = 0

const val LIO_WRITE: kotlin.Int = 0

const val LNKTYPE: kotlin.Int = 0

const val LOAD_SCALE: kotlin.Int = 0

const val LOCKGROUP_ATTR_STAT: kotlin.ULong = 0u

const val LOCKGROUP_MAX_NAME: kotlin.Int = 0

const val LOCK_SET_NULL: platform.darwin.lock_set_t /* = kotlin.UInt */ = 0u

const val LOGIN_PROCESS: kotlin.Int = 0

const val MACHINE_THREAD_STATE: kotlin.Int = 0

const val MACHINE_THREAD_STATE_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val MACH_ACTIVITY_ID_COUNT_MAX: kotlin.Int = 0

const val MACH_CORE_FILEHEADER_MAXFILES: kotlin.Int = 0

const val MACH_CORE_FILEHEADER_NAMELEN: kotlin.Int = 0

const val MACH_CORE_FILEHEADER_SIGNATURE: kotlin.ULong = 0u

const val MACH_EXCEPTION_CODES: kotlin.UInt = 0u

const val MACH_MEMORY_INFO_NAME_MAX_LEN: kotlin.Int = 0

const val MACH_MSGH_BITS_CIRCULAR: kotlin.UInt = 0u

const val MACH_MSGH_BITS_COMPLEX: kotlin.UInt = 0u

const val MACH_MSGH_BITS_DENAP: kotlin.UInt = 0u

const val MACH_MSGH_BITS_DENAPHOLDASRT: kotlin.UInt = 0u

const val MACH_MSGH_BITS_IMPHOLDASRT: kotlin.UInt = 0u

const val MACH_MSGH_BITS_LOCAL_MASK: kotlin.Int = 0

const val MACH_MSGH_BITS_PORTS_MASK: kotlin.Int = 0

const val MACH_MSGH_BITS_RAISEIMP: kotlin.UInt = 0u

const val MACH_MSGH_BITS_REMOTE_MASK: kotlin.Int = 0

const val MACH_MSGH_BITS_USED: kotlin.UInt = 0u

const val MACH_MSGH_BITS_USER: kotlin.UInt = 0u

const val MACH_MSGH_BITS_VOUCHER_MASK: kotlin.Int = 0

const val MACH_MSGH_BITS_ZERO: kotlin.Int = 0

const val MACH_MSGH_KIND_NORMAL: kotlin.Int = 0

const val MACH_MSGH_KIND_NOTIFICATION: kotlin.Int = 0

const val MACH_MSG_ALLOCATE: kotlin.Int = 0

const val MACH_MSG_IPC_KERNEL: kotlin.Int = 0

const val MACH_MSG_IPC_SPACE: kotlin.Int = 0

const val MACH_MSG_MASK: kotlin.Int = 0

const val MACH_MSG_OOL_DESCRIPTOR: kotlin.Int = 0

const val MACH_MSG_OOL_PORTS_DESCRIPTOR: kotlin.Int = 0

const val MACH_MSG_OOL_VOLATILE_DESCRIPTOR: kotlin.Int = 0

const val MACH_MSG_OPTION_NONE: kotlin.Int = 0

const val MACH_MSG_OVERWRITE: kotlin.Int = 0

const val MACH_MSG_PHYSICAL_COPY: kotlin.Int = 0

const val MACH_MSG_PORT_DESCRIPTOR: kotlin.Int = 0

const val MACH_MSG_PRIORITY_UNSPECIFIED: platform.darwin.mach_msg_priority_t /* = kotlin.UInt */ = 0u

const val MACH_MSG_SIZE_MAX: platform.darwin.mach_msg_size_t /* = kotlin.UInt */ = 0u

const val MACH_MSG_SIZE_RELIABLE: kotlin.UInt = 0u

const val MACH_MSG_SUCCESS: kotlin.Int = 0

const val MACH_MSG_TIMEOUT_NONE: platform.darwin.mach_msg_timeout_t /* = kotlin.UInt */ = 0u

const val MACH_MSG_TRAILER_FORMAT_0: kotlin.Int = 0

const val MACH_MSG_TRAILER_FORMAT_0_SIZE: kotlin.ULong = 0u

const val MACH_MSG_TRAILER_MINIMUM_SIZE: kotlin.ULong = 0u

const val MACH_MSG_TYPE_COPY_RECEIVE: kotlin.Int = 0

const val MACH_MSG_TYPE_COPY_SEND: kotlin.Int = 0

const val MACH_MSG_TYPE_DISPOSE_RECEIVE: kotlin.Int = 0

const val MACH_MSG_TYPE_DISPOSE_SEND: kotlin.Int = 0

const val MACH_MSG_TYPE_DISPOSE_SEND_ONCE: kotlin.Int = 0

const val MACH_MSG_TYPE_LAST: kotlin.Int = 0

const val MACH_MSG_TYPE_MAKE_SEND: kotlin.Int = 0

const val MACH_MSG_TYPE_MAKE_SEND_ONCE: kotlin.Int = 0

const val MACH_MSG_TYPE_MOVE_RECEIVE: kotlin.Int = 0

const val MACH_MSG_TYPE_MOVE_SEND: kotlin.Int = 0

const val MACH_MSG_TYPE_MOVE_SEND_ONCE: kotlin.Int = 0

const val MACH_MSG_TYPE_POLYMORPHIC: platform.darwin.mach_msg_type_name_t /* = kotlin.UInt */ = 0u

const val MACH_MSG_TYPE_PORT_NAME: kotlin.Int = 0

const val MACH_MSG_TYPE_PORT_NONE: kotlin.Int = 0

const val MACH_MSG_TYPE_PORT_RECEIVE: kotlin.Int = 0

const val MACH_MSG_TYPE_PORT_SEND: kotlin.Int = 0

const val MACH_MSG_TYPE_PORT_SEND_ONCE: kotlin.Int = 0

const val MACH_MSG_VIRTUAL_COPY: kotlin.Int = 0

const val MACH_MSG_VM_KERNEL: kotlin.Int = 0

const val MACH_MSG_VM_SPACE: kotlin.Int = 0

const val MACH_NOTIFY_DEAD_NAME: kotlin.Int = 0

const val MACH_NOTIFY_FIRST: kotlin.Int = 0

const val MACH_NOTIFY_LAST: kotlin.Int = 0

const val MACH_NOTIFY_NO_SENDERS: kotlin.Int = 0

const val MACH_NOTIFY_PORT_DELETED: kotlin.Int = 0

const val MACH_NOTIFY_PORT_DESTROYED: kotlin.Int = 0

const val MACH_NOTIFY_SEND_ONCE: kotlin.Int = 0

const val MACH_NOTIFY_SEND_POSSIBLE: kotlin.Int = 0

const val MACH_PORTS_SLOTS_USED: kotlin.Int = 0

const val MACH_PORT_DEAD: platform.darwin.mach_port_name_t /* = kotlin.UInt */ = 0u

const val MACH_PORT_DENAP_RECEIVER: kotlin.Int = 0

const val MACH_PORT_DNREQUESTS_SIZE: kotlin.Int = 0

const val MACH_PORT_DNREQUESTS_SIZE_COUNT: kotlin.Int = 0

const val MACH_PORT_IMPORTANCE_RECEIVER: kotlin.Int = 0

const val MACH_PORT_INFO_EXT: kotlin.Int = 0

const val MACH_PORT_INFO_EXT_COUNT: platform.darwin.natural_t /* = kotlin.UInt */ = 0u

const val MACH_PORT_LIMITS_INFO: kotlin.Int = 0

const val MACH_PORT_LIMITS_INFO_COUNT: platform.darwin.natural_t /* = kotlin.UInt */ = 0u

const val MACH_PORT_NULL: kotlin.Int = 0

const val MACH_PORT_QLIMIT_BASIC: kotlin.Int = 0

const val MACH_PORT_QLIMIT_DEFAULT: kotlin.Int = 0

const val MACH_PORT_QLIMIT_KERNEL: kotlin.Int = 0

const val MACH_PORT_QLIMIT_LARGE: kotlin.Int = 0

const val MACH_PORT_QLIMIT_MAX: kotlin.Int = 0

const val MACH_PORT_QLIMIT_MIN: kotlin.Int = 0

const val MACH_PORT_QLIMIT_SMALL: kotlin.Int = 0

const val MACH_PORT_QLIMIT_ZERO: kotlin.Int = 0

const val MACH_PORT_RECEIVE_STATUS: kotlin.Int = 0

const val MACH_PORT_RECEIVE_STATUS_COUNT: platform.darwin.natural_t /* = kotlin.UInt */ = 0u

const val MACH_PORT_RIGHT_DEAD_NAME: platform.darwin.mach_port_right_t /* = kotlin.UInt */ = 0u

const val MACH_PORT_RIGHT_LABELH: platform.darwin.mach_port_right_t /* = kotlin.UInt */ = 0u

const val MACH_PORT_RIGHT_NUMBER: platform.darwin.mach_port_right_t /* = kotlin.UInt */ = 0u

const val MACH_PORT_RIGHT_PORT_SET: platform.darwin.mach_port_right_t /* = kotlin.UInt */ = 0u

const val MACH_PORT_RIGHT_RECEIVE: platform.darwin.mach_port_right_t /* = kotlin.UInt */ = 0u

const val MACH_PORT_RIGHT_SEND: platform.darwin.mach_port_right_t /* = kotlin.UInt */ = 0u

const val MACH_PORT_RIGHT_SEND_ONCE: platform.darwin.mach_port_right_t /* = kotlin.UInt */ = 0u

const val MACH_PORT_SRIGHTS_NONE: kotlin.Int = 0

const val MACH_PORT_SRIGHTS_PRESENT: kotlin.Int = 0

const val MACH_PORT_STATUS_FLAG_GUARDED: kotlin.Int = 0

const val MACH_PORT_STATUS_FLAG_IMP_DONATION: kotlin.Int = 0

const val MACH_PORT_STATUS_FLAG_REVIVE: kotlin.Int = 0

const val MACH_PORT_STATUS_FLAG_STRICT_GUARD: kotlin.Int = 0

const val MACH_PORT_STATUS_FLAG_TASKPTR: kotlin.Int = 0

const val MACH_PORT_STATUS_FLAG_TEMPOWNER: kotlin.Int = 0

const val MACH_PORT_TEMPOWNER: kotlin.Int = 0

const val MACH_PORT_TYPE_ALL_RIGHTS: kotlin.UInt = 0u

const val MACH_PORT_TYPE_DEAD_NAME: platform.darwin.mach_port_type_t /* = kotlin.UInt */ = 0u

const val MACH_PORT_TYPE_DNREQUEST: kotlin.UInt = 0u

const val MACH_PORT_TYPE_LABELH: platform.darwin.mach_port_type_t /* = kotlin.UInt */ = 0u

const val MACH_PORT_TYPE_NONE: platform.darwin.mach_port_type_t /* = kotlin.UInt */ = 0u

const val MACH_PORT_TYPE_PORT_OR_DEAD: kotlin.UInt = 0u

const val MACH_PORT_TYPE_PORT_RIGHTS: kotlin.UInt = 0u

const val MACH_PORT_TYPE_PORT_SET: platform.darwin.mach_port_type_t /* = kotlin.UInt */ = 0u

const val MACH_PORT_TYPE_RECEIVE: platform.darwin.mach_port_type_t /* = kotlin.UInt */ = 0u

const val MACH_PORT_TYPE_SEND: platform.darwin.mach_port_type_t /* = kotlin.UInt */ = 0u

const val MACH_PORT_TYPE_SEND_ONCE: platform.darwin.mach_port_type_t /* = kotlin.UInt */ = 0u

const val MACH_PORT_TYPE_SEND_RECEIVE: kotlin.UInt = 0u

const val MACH_PORT_TYPE_SEND_RIGHTS: kotlin.UInt = 0u

const val MACH_PORT_TYPE_SPREQUEST: kotlin.Int = 0

const val MACH_PORT_TYPE_SPREQUEST_DELAYED: kotlin.Int = 0

const val MACH_RCV_BODY_ERROR: kotlin.Int = 0

const val MACH_RCV_HEADER_ERROR: kotlin.Int = 0

const val MACH_RCV_INTERRUPT: kotlin.Int = 0

const val MACH_RCV_INTERRUPTED: kotlin.Int = 0

const val MACH_RCV_INVALID_DATA: kotlin.Int = 0

const val MACH_RCV_INVALID_NAME: kotlin.Int = 0

const val MACH_RCV_INVALID_NOTIFY: kotlin.Int = 0

const val MACH_RCV_INVALID_TRAILER: kotlin.Int = 0

const val MACH_RCV_INVALID_TYPE: kotlin.Int = 0

const val MACH_RCV_IN_PROGRESS: kotlin.Int = 0

const val MACH_RCV_IN_PROGRESS_TIMED: kotlin.Int = 0

const val MACH_RCV_IN_SET: kotlin.Int = 0

const val MACH_RCV_LARGE: kotlin.Int = 0

const val MACH_RCV_LARGE_IDENTITY: kotlin.Int = 0

const val MACH_RCV_MSG: kotlin.Int = 0

const val MACH_RCV_NOTIFY: kotlin.Int = 0

const val MACH_RCV_OVERWRITE: kotlin.Int = 0

const val MACH_RCV_PORT_CHANGED: kotlin.Int = 0

const val MACH_RCV_PORT_DIED: kotlin.Int = 0

const val MACH_RCV_SCATTER_SMALL: kotlin.Int = 0

const val MACH_RCV_SYNC_WAIT: kotlin.Int = 0

const val MACH_RCV_TIMED_OUT: kotlin.Int = 0

const val MACH_RCV_TIMEOUT: kotlin.Int = 0

const val MACH_RCV_TOO_LARGE: kotlin.Int = 0

const val MACH_RCV_TRAILER_AUDIT: kotlin.Int = 0

const val MACH_RCV_TRAILER_AV: kotlin.Int = 0

const val MACH_RCV_TRAILER_CTX: kotlin.Int = 0

const val MACH_RCV_TRAILER_LABELS: kotlin.Int = 0

const val MACH_RCV_TRAILER_MASK: kotlin.Int = 0

const val MACH_RCV_TRAILER_NULL: kotlin.Int = 0

const val MACH_RCV_TRAILER_SENDER: kotlin.Int = 0

const val MACH_RCV_TRAILER_SEQNO: kotlin.Int = 0

const val MACH_RCV_VOUCHER: kotlin.Int = 0

const val MACH_SEND_ALWAYS: kotlin.Int = 0

const val MACH_SEND_IMPORTANCE: kotlin.Int = 0

const val MACH_SEND_INTERRUPT: kotlin.Int = 0

const val MACH_SEND_INTERRUPTED: kotlin.Int = 0

const val MACH_SEND_INVALID_DATA: kotlin.Int = 0

const val MACH_SEND_INVALID_DEST: kotlin.Int = 0

const val MACH_SEND_INVALID_HEADER: kotlin.Int = 0

const val MACH_SEND_INVALID_MEMORY: kotlin.Int = 0

const val MACH_SEND_INVALID_NOTIFY: kotlin.Int = 0

const val MACH_SEND_INVALID_REPLY: kotlin.Int = 0

const val MACH_SEND_INVALID_RIGHT: kotlin.Int = 0

const val MACH_SEND_INVALID_RT_OOL_SIZE: kotlin.Int = 0

const val MACH_SEND_INVALID_TRAILER: kotlin.Int = 0

const val MACH_SEND_INVALID_TYPE: kotlin.Int = 0

const val MACH_SEND_INVALID_VOUCHER: kotlin.Int = 0

const val MACH_SEND_IN_PROGRESS: kotlin.Int = 0

const val MACH_SEND_KERNEL: kotlin.Int = 0

const val MACH_SEND_MSG: kotlin.Int = 0

const val MACH_SEND_MSG_TOO_SMALL: kotlin.Int = 0

const val MACH_SEND_NODENAP: kotlin.Int = 0

const val MACH_SEND_NOIMPORTANCE: kotlin.Int = 0

const val MACH_SEND_NOTIFY: kotlin.Int = 0

const val MACH_SEND_NO_BUFFER: kotlin.Int = 0

const val MACH_SEND_OVERRIDE: kotlin.Int = 0

const val MACH_SEND_PROPAGATE_QOS: kotlin.Int = 0

const val MACH_SEND_SYNC_OVERRIDE: kotlin.Int = 0

const val MACH_SEND_SYNC_USE_THRPRI: kotlin.Int = 0

const val MACH_SEND_TIMED_OUT: kotlin.Int = 0

const val MACH_SEND_TIMEOUT: kotlin.Int = 0

const val MACH_SEND_TOO_LARGE: kotlin.Int = 0

const val MACH_SEND_TRAILER: kotlin.Int = 0

const val MACH_TASK_BASIC_INFO: kotlin.Int = 0

const val MACH_TASK_BASIC_INFO_COUNT: kotlin.ULong = 0u

const val MACH_VM_MAX_ADDRESS: platform.darwin.mach_vm_offset_t /* = kotlin.ULong */ = 0u

const val MACH_VM_MIN_ADDRESS: platform.darwin.mach_vm_offset_t /* = kotlin.ULong */ = 0u

const val MACH_VOUCHER_ATTR_AUTO_REDEEM: platform.darwin.mach_voucher_attr_recipe_command_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_BANK_CREATE: platform.darwin.mach_voucher_attr_recipe_command_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_BANK_NULL: platform.darwin.mach_voucher_attr_recipe_command_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_BITS_STORE: platform.darwin.mach_voucher_attr_recipe_command_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_CONTROL_FLAGS_NONE: platform.darwin.mach_voucher_attr_control_flags_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_CONTROL_NULL: platform.darwin.mach_voucher_attr_control_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_COPY: platform.darwin.mach_voucher_attr_recipe_command_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_IMPORTANCE_SELF: platform.darwin.mach_voucher_attr_recipe_command_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_KEY_ALL: platform.darwin.mach_voucher_attr_key_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_KEY_ATM: platform.darwin.mach_voucher_attr_key_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_KEY_BANK: platform.darwin.mach_voucher_attr_key_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_KEY_BITS: platform.darwin.mach_voucher_attr_key_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_KEY_IMPORTANCE: platform.darwin.mach_voucher_attr_key_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_KEY_NONE: platform.darwin.mach_voucher_attr_key_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_KEY_NUM_WELL_KNOWN: platform.darwin.mach_voucher_attr_key_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_KEY_PTHPRIORITY: platform.darwin.mach_voucher_attr_key_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_KEY_TEST: platform.darwin.mach_voucher_attr_key_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_KEY_USER_DATA: platform.darwin.mach_voucher_attr_key_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_MANAGER_NULL: platform.darwin.mach_voucher_attr_manager_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_MAX_RAW_RECIPE_ARRAY_SIZE: kotlin.Int = 0

const val MACH_VOUCHER_ATTR_NOOP: platform.darwin.mach_voucher_attr_recipe_command_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_REDEEM: platform.darwin.mach_voucher_attr_recipe_command_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_REMOVE: platform.darwin.mach_voucher_attr_recipe_command_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_SEND_PREPROCESS: platform.darwin.mach_voucher_attr_recipe_command_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_SET_VALUE_HANDLE: platform.darwin.mach_voucher_attr_recipe_command_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_TEST_STORE: platform.darwin.mach_voucher_attr_recipe_command_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_USER_DATA_STORE: platform.darwin.mach_voucher_attr_recipe_command_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_VALUE_FLAGS_NONE: platform.darwin.mach_voucher_attr_value_flags_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_VALUE_FLAGS_PERSIST: platform.darwin.mach_voucher_attr_value_flags_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_ATTR_VALUE_MAX_NESTED: platform.darwin.mach_voucher_attr_value_handle_array_size_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_BANK_CONTENT_SIZE: kotlin.Int = 0

const val MACH_VOUCHER_IMPORTANCE_ATTR_ADD_EXTERNAL: kotlin.Int = 0

const val MACH_VOUCHER_IMPORTANCE_ATTR_DROP_EXTERNAL: kotlin.Int = 0

const val MACH_VOUCHER_NAME_NULL: platform.darwin.mach_voucher_name_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_NULL: platform.darwin.mach_voucher_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_SELECTOR_CURRENT: platform.darwin.mach_voucher_selector_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_SELECTOR_EFFECTIVE: platform.darwin.mach_voucher_selector_t /* = kotlin.UInt */ = 0u

const val MACH_VOUCHER_TRAP_STACK_LIMIT: kotlin.Int = 0

const val MACH_ZONE_NAME_MAX_LEN: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_0: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_1: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_10: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_10_2: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_10_3: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_11: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_11_2: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_11_3: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_11_4: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_12: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_12_1: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_12_2: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_12_4: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_13: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_13_1: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_13_2: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_13_4: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_14: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_2: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_3: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_4: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_5: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_6: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_7: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_8: kotlin.Int = 0

const val MAC_OS_X_VERSION_10_9: kotlin.Int = 0

const val MAC_OS_X_VERSION_MAX_ALLOWED: kotlin.Int = 0

const val MAC_OS_X_VERSION_MIN_REQUIRED: kotlin.Int = 0

const val MAP_MEM_4K_DATA_ADDR: kotlin.Int = 0

const val MAP_MEM_COPYBACK: kotlin.Int = 0

const val MAP_MEM_FLAGS_ALL: kotlin.Int = 0

const val MAP_MEM_FLAGS_MASK: kotlin.Int = 0

const val MAP_MEM_FLAGS_USER: kotlin.Int = 0

const val MAP_MEM_GRAB_SECLUDED: kotlin.Int = 0

const val MAP_MEM_INNERWBACK: kotlin.Int = 0

const val MAP_MEM_IO: kotlin.Int = 0

const val MAP_MEM_LEDGER_TAG_NETWORK: kotlin.Int = 0

const val MAP_MEM_NAMED_CREATE: kotlin.Int = 0

const val MAP_MEM_NAMED_REUSE: kotlin.Int = 0

const val MAP_MEM_NOOP: kotlin.Int = 0

const val MAP_MEM_ONLY: kotlin.Int = 0

const val MAP_MEM_POSTED: kotlin.Int = 0

const val MAP_MEM_PURGABLE: kotlin.Int = 0

const val MAP_MEM_PURGABLE_KERNEL_ONLY: kotlin.Int = 0

const val MAP_MEM_USE_DATA_ADDR: kotlin.Int = 0

const val MAP_MEM_VM_COPY: kotlin.Int = 0

const val MAP_MEM_VM_SHARE: kotlin.Int = 0

const val MAP_MEM_WCOMB: kotlin.Int = 0

const val MAP_MEM_WTHRU: kotlin.Int = 0

const val MATTR_CACHE: kotlin.Int = 0

const val MATTR_MIGRATE: kotlin.Int = 0

const val MATTR_REPLICATE: kotlin.Int = 0

const val MATTR_VAL_CACHE_FLUSH: kotlin.Int = 0

const val MATTR_VAL_CACHE_SYNC: kotlin.Int = 0

const val MATTR_VAL_DCACHE_FLUSH: kotlin.Int = 0

const val MATTR_VAL_GET: kotlin.Int = 0

const val MATTR_VAL_GET_INFO: kotlin.Int = 0

const val MATTR_VAL_ICACHE_FLUSH: kotlin.Int = 0

const val MATTR_VAL_OFF: kotlin.Int = 0

const val MATTR_VAL_ON: kotlin.Int = 0

const val MAXAUDITDATA: kotlin.Int = 0

const val MAXTHREADNAMESIZE: kotlin.Int = 0

const val MAX_AUDITSTRING_LEN: kotlin.Int = 0

const val MAX_AUDIT_RECORDS: kotlin.Int = 0

const val MAX_AUDIT_RECORD_SIZE: kotlin.Int = 0

const val MAX_PAGE_NUMBER: kotlin.UInt = 0u

const val MAX_PAGE_OFFSET: kotlin.Int = 0

const val MAX_REC_NUMBER: kotlin.UInt = 0u

const val MAX_TRAILER_SIZE: platform.darwin.mach_msg_size_t /* = kotlin.UInt */ = 0u

const val MAX_ZTRACE_DEPTH: kotlin.Int = 0

val MEMBER_CLEAR_SFLAGS_MASK_CONTROL_ENTRY: kotlin.String
    get() = TODO()

val MEMBER_SET_SFLAGS_MASK_CONTROL_ENTRY: kotlin.String
    get() = TODO()

const val MEMORY_OBJECT_ATTRIBUTE_INFO: kotlin.Int = 0

const val MEMORY_OBJECT_ATTR_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val MEMORY_OBJECT_BEHAVE_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val MEMORY_OBJECT_BEHAVIOR_INFO: kotlin.Int = 0

const val MEMORY_OBJECT_CONTROL_NULL: platform.darwin.memory_object_control_t /* = kotlin.UInt */ = 0u

const val MEMORY_OBJECT_COPY_CALL: kotlin.Int = 0

const val MEMORY_OBJECT_COPY_DELAY: kotlin.Int = 0

const val MEMORY_OBJECT_COPY_INVALID: kotlin.Int = 0

const val MEMORY_OBJECT_COPY_NONE: kotlin.Int = 0

const val MEMORY_OBJECT_COPY_SYMMETRIC: kotlin.Int = 0

const val MEMORY_OBJECT_COPY_SYNC: kotlin.Int = 0

const val MEMORY_OBJECT_COPY_TEMPORARY: kotlin.Int = 0

const val MEMORY_OBJECT_DATA_FLUSH: kotlin.Int = 0

const val MEMORY_OBJECT_DATA_FLUSH_ALL: kotlin.Int = 0

const val MEMORY_OBJECT_DATA_NO_CHANGE: kotlin.Int = 0

const val MEMORY_OBJECT_DATA_PURGE: kotlin.Int = 0

const val MEMORY_OBJECT_DATA_SYNC: kotlin.Int = 0

const val MEMORY_OBJECT_DEFAULT_NULL: platform.darwin.memory_object_default_t /* = kotlin.UInt */ = 0u

const val MEMORY_OBJECT_INFO_MAX: kotlin.Int = 0

const val MEMORY_OBJECT_IO_SYNC: kotlin.Int = 0

const val MEMORY_OBJECT_NAME_NULL: platform.darwin.memory_object_name_t /* = kotlin.UInt */ = 0u

const val MEMORY_OBJECT_NULL: platform.darwin.memory_object_t /* = kotlin.UInt */ = 0u

const val MEMORY_OBJECT_PERFORMANCE_INFO: kotlin.Int = 0

const val MEMORY_OBJECT_PERF_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val MEMORY_OBJECT_RELEASE_NO_OP: kotlin.Int = 0

const val MEMORY_OBJECT_RESPECT_CACHE: kotlin.Int = 0

const val MEMORY_OBJECT_RETURN_ALL: kotlin.Int = 0

const val MEMORY_OBJECT_RETURN_ANYTHING: kotlin.Int = 0

const val MEMORY_OBJECT_RETURN_DIRTY: kotlin.Int = 0

const val MEMORY_OBJECT_RETURN_NONE: kotlin.Int = 0

const val MEMORY_OBJECT_TERMINATE_IDLE: kotlin.Int = 0

const val MH_ALLMODSBOUND: kotlin.Int = 0

const val MH_ALLOW_STACK_EXECUTION: kotlin.Int = 0

const val MH_APP_EXTENSION_SAFE: kotlin.Int = 0

const val MH_BINDATLOAD: kotlin.Int = 0

const val MH_BINDS_TO_WEAK: kotlin.Int = 0

const val MH_BUNDLE: kotlin.Int = 0

const val MH_CANONICAL: kotlin.Int = 0

const val MH_CIGAM: kotlin.UInt = 0u

const val MH_CIGAM_64: kotlin.UInt = 0u

const val MH_CORE: kotlin.Int = 0

const val MH_DEAD_STRIPPABLE_DYLIB: kotlin.Int = 0

const val MH_DSYM: kotlin.Int = 0

const val MH_DYLDLINK: kotlin.Int = 0

const val MH_DYLIB: kotlin.Int = 0

const val MH_DYLIB_STUB: kotlin.Int = 0

const val MH_DYLINKER: kotlin.Int = 0

const val MH_EXECUTE: kotlin.Int = 0

const val MH_FORCE_FLAT: kotlin.Int = 0

const val MH_FVMLIB: kotlin.Int = 0

const val MH_HAS_TLV_DESCRIPTORS: kotlin.Int = 0

const val MH_INCRLINK: kotlin.Int = 0

const val MH_KEXT_BUNDLE: kotlin.Int = 0

const val MH_LAZY_INIT: kotlin.Int = 0

const val MH_MAGIC: kotlin.UInt = 0u

const val MH_MAGIC_64: kotlin.UInt = 0u

const val MH_NLIST_OUTOFSYNC_WITH_DYLDINFO: kotlin.Int = 0

const val MH_NOFIXPREBINDING: kotlin.Int = 0

const val MH_NOMULTIDEFS: kotlin.Int = 0

const val MH_NOUNDEFS: kotlin.Int = 0

const val MH_NO_HEAP_EXECUTION: kotlin.Int = 0

const val MH_NO_REEXPORTED_DYLIBS: kotlin.Int = 0

const val MH_OBJECT: kotlin.Int = 0

const val MH_PIE: kotlin.Int = 0

const val MH_PREBINDABLE: kotlin.Int = 0

const val MH_PREBOUND: kotlin.Int = 0

const val MH_PRELOAD: kotlin.Int = 0

const val MH_ROOT_SAFE: kotlin.Int = 0

const val MH_SETUID_SAFE: kotlin.Int = 0

const val MH_SIM_SUPPORT: kotlin.Int = 0

const val MH_SPLIT_SEGS: kotlin.Int = 0

const val MH_SUBSECTIONS_VIA_SYMBOLS: kotlin.Int = 0

const val MH_TWOLEVEL: kotlin.Int = 0

const val MH_WEAK_DEFINES: kotlin.Int = 0

const val MIG_ARRAY_TOO_LARGE: kotlin.Int = 0

const val MIG_BAD_ARGUMENTS: kotlin.Int = 0

const val MIG_BAD_ID: kotlin.Int = 0

const val MIG_EXCEPTION: kotlin.Int = 0

const val MIG_NO_REPLY: kotlin.Int = 0

const val MIG_REMOTE_ERROR: kotlin.Int = 0

const val MIG_REPLY_MISMATCH: kotlin.Int = 0

const val MIG_SERVER_DIED: kotlin.Int = 0

const val MIG_TRAILER_ERROR: kotlin.Int = 0

const val MIG_TYPE_ERROR: kotlin.Int = 0

val MINFREE_CONTROL_ENTRY: kotlin.String
    get() = TODO()

const val MIN_AUDIT_FILE_SIZE: kotlin.Int = 0

const val MIXEDMODE_CALLS_ARE_FUNCTIONS: kotlin.Int = 0

const val MM_APPL: kotlin.Int = 0

const val MM_CONSOLE: kotlin.Int = 0

const val MM_ERROR: kotlin.Int = 0

const val MM_FIRM: kotlin.Int = 0

const val MM_HALT: kotlin.Int = 0

const val MM_HARD: kotlin.Int = 0

const val MM_INFO: kotlin.Int = 0

const val MM_NOCON: kotlin.Int = 0

const val MM_NOMSG: kotlin.Int = 0

const val MM_NOSEV: kotlin.Int = 0

const val MM_NOTOK: kotlin.Int = 0

const val MM_NRECOV: kotlin.Int = 0

const val MM_NULLMC: kotlin.Long = 0L

const val MM_NULLSEV: kotlin.Int = 0

const val MM_OK: kotlin.Int = 0

const val MM_OPSYS: kotlin.Int = 0

const val MM_PRINT: kotlin.Int = 0

const val MM_RECOVER: kotlin.Int = 0

const val MM_SOFT: kotlin.Int = 0

const val MM_UTIL: kotlin.Int = 0

const val MM_WARNING: kotlin.Int = 0

const val MON_1: kotlin.Int = 0

const val MON_10: kotlin.Int = 0

const val MON_11: kotlin.Int = 0

const val MON_12: kotlin.Int = 0

const val MON_2: kotlin.Int = 0

const val MON_3: kotlin.Int = 0

const val MON_4: kotlin.Int = 0

const val MON_5: kotlin.Int = 0

const val MON_6: kotlin.Int = 0

const val MON_7: kotlin.Int = 0

const val MON_8: kotlin.Int = 0

const val MON_9: kotlin.Int = 0

const val MPOOL_DIRTY: kotlin.Int = 0

const val MPOOL_PINNED: kotlin.Int = 0

const val MPO_CONTEXT_AS_GUARD: kotlin.Int = 0

const val MPO_DENAP_RECEIVER: kotlin.Int = 0

const val MPO_IMPORTANCE_RECEIVER: kotlin.Int = 0

const val MPO_INSERT_SEND_RIGHT: kotlin.Int = 0

const val MPO_QLIMIT: kotlin.Int = 0

const val MPO_STRICT: kotlin.Int = 0

const val MPO_TEMPOWNER: kotlin.Int = 0

const val NAME_SERVER_SLOT: kotlin.Int = 0

val NA_CONTROL_ENTRY: kotlin.String
    get() = TODO()

const val NDR_CHAR_ASCII: kotlin.Int = 0

const val NDR_CHAR_EBCDIC: kotlin.Int = 0

const val NDR_FLOAT_CRAY: kotlin.Int = 0

const val NDR_FLOAT_IBM: kotlin.Int = 0

const val NDR_FLOAT_IEEE: kotlin.Int = 0

const val NDR_FLOAT_VAX: kotlin.Int = 0

const val NDR_INT_BIG_ENDIAN: kotlin.Int = 0

const val NDR_INT_LITTLE_ENDIAN: kotlin.Int = 0

const val NDR_PROTOCOL_2_0: kotlin.Int = 0

val NDR_record: platform.darwin.NDR_record_t
    get() = TODO()

const val NEW_TIME: kotlin.Int = 0

const val NL_CAT_LOCALE: kotlin.Int = 0

const val NL_SETD: kotlin.Int = 0

const val NOEXPR: kotlin.Int = 0

const val NOSTR: kotlin.Int = 0

const val NOTIFY_REUSE: kotlin.Int = 0

const val NOTIFY_STATUS_FAILED: kotlin.Int = 0

const val NOTIFY_STATUS_INVALID_FILE: kotlin.Int = 0

const val NOTIFY_STATUS_INVALID_NAME: kotlin.Int = 0

const val NOTIFY_STATUS_INVALID_PORT: kotlin.Int = 0

const val NOTIFY_STATUS_INVALID_REQUEST: kotlin.Int = 0

const val NOTIFY_STATUS_INVALID_SIGNAL: kotlin.Int = 0

const val NOTIFY_STATUS_INVALID_TOKEN: kotlin.Int = 0

const val NOTIFY_STATUS_NOT_AUTHORIZED: kotlin.Int = 0

const val NOTIFY_STATUS_OK: kotlin.Int = 0

const val NOTIFY_TOKEN_INVALID: kotlin.Int = 0

const val NSEC_PER_MSEC: kotlin.ULong = 0u

const val NSEC_PER_SEC: kotlin.ULong = 0u

const val NSEC_PER_USEC: kotlin.ULong = 0u

const val NSINTEGER_DEFINED: kotlin.Int = 0

const val NSIntegerMax: kotlin.Long = 0L

const val NSIntegerMin: kotlin.Long = 0L

const val NSUIntegerMax: kotlin.ULong = 0u

const val NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER: kotlin.Int = 0

const val NTSID_MAX_AUTHORITIES: kotlin.Int = 0

const val OBJC_API_VERSION: kotlin.Int = 0

const val OBJC_BOOL_IS_BOOL: kotlin.Int = 0

const val OBJC_BOOL_IS_CHAR: kotlin.Int = 0

const val OBJC_NO_GC: kotlin.Int = 0

const val OBJC_OLD_DISPATCH_PROTOTYPES: kotlin.Int = 0

const val OLDROUTINENAMES: kotlin.Int = 0

const val OLD_TIME: kotlin.Int = 0

const val OPAQUE_TOOLBOX_STRUCTS: kotlin.Int = 0

const val OPAQUE_UPP_TYPES: kotlin.Int = 0

const val OPENDEV_BLCK: kotlin.Int = 0

const val OPENDEV_PART: kotlin.Int = 0

val OS_ACTIVITY_FLAG_DEFAULT: platform.darwin.os_activity_flag_t /* = kotlin.UInt */
    get() = TODO()

val OS_ACTIVITY_FLAG_DETACHED: platform.darwin.os_activity_flag_t /* = kotlin.UInt */
    get() = TODO()

val OS_ACTIVITY_FLAG_IF_NONE_PRESENT: platform.darwin.os_activity_flag_t /* = kotlin.UInt */
    get() = TODO()

const val OS_ACTIVITY_NULL: kotlin.Int = 0

const val OS_ACTIVITY_OBJECT_API: kotlin.Int = 0

const val OS_LOCK_API_VERSION: kotlin.Int = 0

const val OS_LOG_TARGET_HAS_10_12_FEATURES: kotlin.Int = 0

const val OS_LOG_TARGET_HAS_10_13_FEATURES: kotlin.Int = 0

const val OS_LOG_TARGET_HAS_10_14_FEATURES: kotlin.Int = 0

val OS_LOG_TYPE_DEBUG: platform.darwin.os_log_type_t /* = kotlin.UByte */
    get() = TODO()

val OS_LOG_TYPE_DEFAULT: platform.darwin.os_log_type_t /* = kotlin.UByte */
    get() = TODO()

val OS_LOG_TYPE_ERROR: platform.darwin.os_log_type_t /* = kotlin.UByte */
    get() = TODO()

val OS_LOG_TYPE_FAULT: platform.darwin.os_log_type_t /* = kotlin.UByte */
    get() = TODO()

val OS_LOG_TYPE_INFO: platform.darwin.os_log_type_t /* = kotlin.UByte */
    get() = TODO()

const val OS_OBJECT_HAVE_OBJC_SUPPORT: kotlin.Int = 0

const val OS_OBJECT_SWIFT3: kotlin.Int = 0

const val OS_OBJECT_USE_OBJC: kotlin.Int = 0

const val OS_OBJECT_USE_OBJC_RETAIN_RELEASE: kotlin.Int = 0

const val OS_TRACE_TYPE_DEBUG: kotlin.UInt = 0u

const val OS_TRACE_TYPE_ERROR: kotlin.UInt = 0u

const val OS_TRACE_TYPE_FAULT: kotlin.UInt = 0u

const val OS_TRACE_TYPE_INFO: kotlin.UInt = 0u

const val OS_TRACE_TYPE_RELEASE: kotlin.UInt = 0u

const val PAD_FAILURE: kotlin.Int = 0

const val PAD_NOTATTR: kotlin.Int = 0

const val PAGE_MASK: kotlin.Int = 0

const val PAGE_MAX_MASK: kotlin.Int = 0

const val PAGE_MAX_SHIFT: kotlin.Int = 0

const val PAGE_MAX_SIZE: kotlin.Int = 0

const val PAGE_MIN_MASK: kotlin.Int = 0

const val PAGE_MIN_SHIFT: kotlin.Int = 0

const val PAGE_MIN_SIZE: kotlin.Int = 0

const val PAGE_SHIFT: kotlin.Int = 0

const val PAGE_SIZE: kotlin.Int = 0

const val PA_FLAG_INTMAX: kotlin.Int = 0

const val PA_FLAG_LONG: kotlin.Int = 0

const val PA_FLAG_LONG_DOUBLE: kotlin.Int = 0

const val PA_FLAG_LONG_LONG: kotlin.Int = 0

const val PA_FLAG_MASK: kotlin.Int = 0

const val PA_FLAG_PTR: kotlin.Int = 0

const val PA_FLAG_PTRDIFF: kotlin.Int = 0

const val PA_FLAG_QUAD: kotlin.Int = 0

const val PA_FLAG_SHORT: kotlin.Int = 0

const val PA_FLAG_SIZE: kotlin.Int = 0

const val PIDLOCK_NONBLOCK: kotlin.Int = 0

const val PIDLOCK_USEHOSTNAME: kotlin.Int = 0

const val PLATFORM_BRIDGEOS: kotlin.Int = 0

const val PLATFORM_IOS: kotlin.Int = 0

const val PLATFORM_IOSMAC: kotlin.Int = 0

const val PLATFORM_IOSSIMULATOR: kotlin.Int = 0

const val PLATFORM_MACOS: kotlin.Int = 0

const val PLATFORM_TVOS: kotlin.Int = 0

const val PLATFORM_TVOSSIMULATOR: kotlin.Int = 0

const val PLATFORM_WATCHOS: kotlin.Int = 0

const val PLATFORM_WATCHOSSIMULATOR: kotlin.Int = 0

const val PM_STR: kotlin.Int = 0

const val POLICYCLASS_FIXEDPRI: kotlin.Int = 0

val POLICY_CONTROL_ENTRY: kotlin.String
    get() = TODO()

const val POLICY_FIFO: kotlin.Int = 0

const val POLICY_FIFO_BASE_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val POLICY_FIFO_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val POLICY_FIFO_LIMIT_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val POLICY_NULL: kotlin.Int = 0

const val POLICY_RR: kotlin.Int = 0

const val POLICY_RR_BASE_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val POLICY_RR_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val POLICY_RR_LIMIT_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val POLICY_TIMESHARE: kotlin.Int = 0

const val POLICY_TIMESHARE_BASE_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val POLICY_TIMESHARE_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val POLICY_TIMESHARE_LIMIT_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val PPNUM_MAX: kotlin.UInt = 0u

const val PRAGMA_ENUM_ALWAYSINT: kotlin.Int = 0

const val PRAGMA_ENUM_OPTIONS: kotlin.Int = 0

const val PRAGMA_ENUM_PACK: kotlin.Int = 0

const val PRAGMA_IMPORT: kotlin.Int = 0

const val PRAGMA_ONCE: kotlin.Int = 0

const val PRAGMA_STRUCT_ALIGN: kotlin.Int = 0

const val PRAGMA_STRUCT_PACK: kotlin.Int = 0

const val PRAGMA_STRUCT_PACKPUSH: kotlin.Int = 0

const val PROCESSOR_BASIC_INFO: kotlin.Int = 0

const val PROCESSOR_BASIC_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val PROCESSOR_CPU_LOAD_INFO: kotlin.Int = 0

const val PROCESSOR_CPU_LOAD_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val PROCESSOR_INFO_MAX: kotlin.Int = 0

const val PROCESSOR_NULL: platform.darwin.processor_t /* = kotlin.UInt */ = 0u

const val PROCESSOR_PM_REGS_INFO: kotlin.Int = 0

const val PROCESSOR_SET_BASIC_INFO: kotlin.Int = 0

const val PROCESSOR_SET_BASIC_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val PROCESSOR_SET_INFO_MAX: kotlin.Int = 0

const val PROCESSOR_SET_LOAD_INFO: kotlin.Int = 0

const val PROCESSOR_SET_LOAD_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val PROCESSOR_SET_NULL: platform.darwin.processor_set_t /* = kotlin.UInt */ = 0u

const val PROCESSOR_TEMPERATURE: kotlin.Int = 0

const val PROC_FLAG_ADAPTIVE: kotlin.Int = 0

const val PROC_FLAG_ADAPTIVE_IMPORTANT: kotlin.Int = 0

const val PROC_FLAG_APPLICATION: kotlin.Int = 0

const val PROC_FLAG_DARWINBG: kotlin.Int = 0

const val PROC_FLAG_EXT_DARWINBG: kotlin.Int = 0

const val PROC_FLAG_IMPORTANCE_DONOR: kotlin.Int = 0

const val PROC_FLAG_IOS_APPLEDAEMON: kotlin.Int = 0

const val PROC_FLAG_IOS_APPLICATION: kotlin.Int = 0

const val PROC_FLAG_IOS_IMPPROMOTION: kotlin.Int = 0

const val PROC_FLAG_SUPPRESSED: kotlin.Int = 0

const val RADIXCHAR: kotlin.Int = 0

const val REALTIME_CLOCK: kotlin.Int = 0

const val REBASE_IMMEDIATE_MASK: kotlin.Int = 0

const val REBASE_OPCODE_ADD_ADDR_IMM_SCALED: kotlin.Int = 0

const val REBASE_OPCODE_ADD_ADDR_ULEB: kotlin.Int = 0

const val REBASE_OPCODE_DONE: kotlin.Int = 0

const val REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB: kotlin.Int = 0

const val REBASE_OPCODE_DO_REBASE_IMM_TIMES: kotlin.Int = 0

const val REBASE_OPCODE_DO_REBASE_ULEB_TIMES: kotlin.Int = 0

const val REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB: kotlin.Int = 0

const val REBASE_OPCODE_MASK: kotlin.Int = 0

const val REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB: kotlin.Int = 0

const val REBASE_OPCODE_SET_TYPE_IMM: kotlin.Int = 0

const val REBASE_TYPE_POINTER: kotlin.Int = 0

const val REBASE_TYPE_TEXT_ABSOLUTE32: kotlin.Int = 0

const val REBASE_TYPE_TEXT_PCREL32: kotlin.Int = 0

const val REGTYPE: kotlin.Int = 0

const val RET_ERROR: kotlin.Int = 0

const val RET_SPECIAL: kotlin.Int = 0

const val RET_SUCCESS: kotlin.Int = 0

const val RPC_SIGBUF_SIZE: kotlin.Int = 0

const val RPP_ECHO_OFF: kotlin.Int = 0

const val RPP_ECHO_ON: kotlin.Int = 0

const val RPP_FORCELOWER: kotlin.Int = 0

const val RPP_FORCEUPPER: kotlin.Int = 0

const val RPP_REQUIRE_TTY: kotlin.Int = 0

const val RPP_SEVENBIT: kotlin.Int = 0

const val RPP_STDIN: kotlin.Int = 0

const val RUN_LVL: kotlin.Int = 0

const val R_CURSOR: kotlin.Int = 0

const val R_DUP: kotlin.Int = 0

const val R_FIRST: kotlin.Int = 0

const val R_FIXEDLEN: kotlin.Int = 0

const val R_IAFTER: kotlin.Int = 0

const val R_IBEFORE: kotlin.Int = 0

const val R_LAST: kotlin.Int = 0

const val R_NEXT: kotlin.Int = 0

const val R_NOKEY: kotlin.Int = 0

const val R_NOOVERWRITE: kotlin.Int = 0

const val R_PREV: kotlin.Int = 0

const val R_RECNOSYNC: kotlin.Int = 0

const val R_SETCURSOR: kotlin.Int = 0

const val R_SNAPSHOT: kotlin.Int = 0

const val SANDBOX_NAMED: kotlin.Int = 0

const val SECTION_ATTRIBUTES: kotlin.UInt = 0u

const val SECTION_ATTRIBUTES_SYS: kotlin.Int = 0

const val SECTION_ATTRIBUTES_USR: kotlin.UInt = 0u

const val SECTION_TYPE: kotlin.Int = 0

const val SEMAPHORE_NULL: platform.darwin.semaphore_t /* = kotlin.UInt */ = 0u

const val SERVICE_SLOT: kotlin.Int = 0

const val SG_FVMLIB: kotlin.Int = 0

const val SG_HIGHVM: kotlin.Int = 0

const val SG_NORELOC: kotlin.Int = 0

const val SG_PROTECTED_VERSION_1: kotlin.Int = 0

const val SHUTDOWN_TIME: kotlin.Int = 0

const val SIGNATURE: kotlin.Int = 0

const val SIMD_COMPILER_HAS_REQUIRED_FEATURES: kotlin.Int = 0

const val SIMD_LIBRARY_VERSION: kotlin.Int = 0

const val SM_COW: kotlin.Int = 0

const val SM_EMPTY: kotlin.Int = 0

const val SM_LARGE_PAGE: kotlin.Int = 0

const val SM_PRIVATE: kotlin.Int = 0

const val SM_PRIVATE_ALIASED: kotlin.Int = 0

const val SM_SHARED: kotlin.Int = 0

const val SM_SHARED_ALIASED: kotlin.Int = 0

const val SM_TRUESHARED: kotlin.Int = 0

const val SUPERPAGE_NONE: kotlin.Int = 0

const val SUPERPAGE_SIZE_2MB: kotlin.Int = 0

const val SUPERPAGE_SIZE_ANY: kotlin.Int = 0

val SUPERUSER_CLEAR_SFLAGS_MASK_CONTROL_ENTRY: kotlin.String
    get() = TODO()

val SUPERUSER_SET_SFLAGS_MASK_CONTROL_ENTRY: kotlin.String
    get() = TODO()

const val SWITCH_OPTION_DEPRESS: kotlin.Int = 0

const val SWITCH_OPTION_NONE: kotlin.Int = 0

const val SWITCH_OPTION_WAIT: kotlin.Int = 0

const val SYMTYPE: kotlin.Int = 0

const val SYNC_POLICY_FIFO: kotlin.Int = 0

const val SYNC_POLICY_FIXED_PRIORITY: kotlin.Int = 0

const val SYNC_POLICY_LIFO: kotlin.Int = 0

const val SYNC_POLICY_MAX: kotlin.Int = 0

const val SYNC_POLICY_ORDER_MASK: kotlin.Int = 0

const val SYNC_POLICY_REVERSED: kotlin.Int = 0

val SYSDIR_DIRECTORY_ADMIN_APPLICATION: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_ALL_APPLICATIONS: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_ALL_LIBRARIES: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_APPLICATION: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_APPLICATION_SUPPORT: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_AUTOSAVED_INFORMATION: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_CACHES: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_CORESERVICE: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_DEMO_APPLICATION: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_DESKTOP: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_DEVELOPER: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_DEVELOPER_APPLICATION: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_DOCUMENT: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_DOCUMENTATION: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_DOWNLOADS: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_INPUT_METHODS: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_LIBRARY: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_MOVIES: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_MUSIC: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_PICTURES: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_PREFERENCE_PANES: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_PRINTER_DESCRIPTION: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_SHARED_PUBLIC: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DIRECTORY_USER: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DOMAIN_MASK_ALL: platform.darwin.sysdir_search_path_domain_mask_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DOMAIN_MASK_LOCAL: platform.darwin.sysdir_search_path_domain_mask_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DOMAIN_MASK_NETWORK: platform.darwin.sysdir_search_path_domain_mask_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DOMAIN_MASK_SYSTEM: platform.darwin.sysdir_search_path_domain_mask_t /* = kotlin.UInt */
    get() = TODO()

val SYSDIR_DOMAIN_MASK_USER: platform.darwin.sysdir_search_path_domain_mask_t /* = kotlin.UInt */
    get() = TODO()

const val SYSTEM_CLOCK: kotlin.Int = 0

const val S_16BYTE_LITERALS: kotlin.Int = 0

const val S_4BYTE_LITERALS: kotlin.Int = 0

const val S_8BYTE_LITERALS: kotlin.Int = 0

const val S_ATTR_DEBUG: kotlin.Int = 0

const val S_ATTR_EXT_RELOC: kotlin.Int = 0

const val S_ATTR_LIVE_SUPPORT: kotlin.Int = 0

const val S_ATTR_LOC_RELOC: kotlin.Int = 0

const val S_ATTR_NO_DEAD_STRIP: kotlin.Int = 0

const val S_ATTR_NO_TOC: kotlin.Int = 0

const val S_ATTR_PURE_INSTRUCTIONS: kotlin.UInt = 0u

const val S_ATTR_SELF_MODIFYING_CODE: kotlin.Int = 0

const val S_ATTR_SOME_INSTRUCTIONS: kotlin.Int = 0

const val S_ATTR_STRIP_STATIC_SYMS: kotlin.Int = 0

const val S_COALESCED: kotlin.Int = 0

const val S_CSTRING_LITERALS: kotlin.Int = 0

const val S_DTRACE_DOF: kotlin.Int = 0

const val S_GB_ZEROFILL: kotlin.Int = 0

const val S_INIT_FUNC_OFFSETS: kotlin.Int = 0

const val S_INTERPOSING: kotlin.Int = 0

const val S_LAZY_DYLIB_SYMBOL_POINTERS: kotlin.Int = 0

const val S_LAZY_SYMBOL_POINTERS: kotlin.Int = 0

const val S_LITERAL_POINTERS: kotlin.Int = 0

const val S_MOD_INIT_FUNC_POINTERS: kotlin.Int = 0

const val S_MOD_TERM_FUNC_POINTERS: kotlin.Int = 0

const val S_NON_LAZY_SYMBOL_POINTERS: kotlin.Int = 0

const val S_REGULAR: kotlin.Int = 0

const val S_SYMBOL_STUBS: kotlin.Int = 0

const val S_THREAD_LOCAL_INIT_FUNCTION_POINTERS: kotlin.Int = 0

const val S_THREAD_LOCAL_REGULAR: kotlin.Int = 0

const val S_THREAD_LOCAL_VARIABLES: kotlin.Int = 0

const val S_THREAD_LOCAL_VARIABLE_POINTERS: kotlin.Int = 0

const val S_THREAD_LOCAL_ZEROFILL: kotlin.Int = 0

const val S_ZEROFILL: kotlin.Int = 0

const val TARGET_API_MAC_CARBON: kotlin.Int = 0

const val TARGET_API_MAC_OS8: kotlin.Int = 0

const val TARGET_API_MAC_OSX: kotlin.Int = 0

const val TARGET_CARBON: kotlin.Int = 0

const val TARGET_CPU_68K: kotlin.Int = 0

const val TARGET_CPU_ALPHA: kotlin.Int = 0

const val TARGET_CPU_ARM: kotlin.Int = 0

const val TARGET_CPU_ARM64: kotlin.Int = 0

const val TARGET_CPU_MIPS: kotlin.Int = 0

const val TARGET_CPU_PPC: kotlin.Int = 0

const val TARGET_CPU_PPC64: kotlin.Int = 0

const val TARGET_CPU_SPARC: kotlin.Int = 0

const val TARGET_CPU_X86: kotlin.Int = 0

const val TARGET_CPU_X86_64: kotlin.Int = 0

const val TARGET_IPHONE_SIMULATOR: kotlin.Int = 0

const val TARGET_OS_EMBEDDED: kotlin.Int = 0

const val TARGET_OS_IOS: kotlin.Int = 0

const val TARGET_OS_IPHONE: kotlin.Int = 0

const val TARGET_OS_MAC: kotlin.Int = 0

const val TARGET_OS_NANO: kotlin.Int = 0

const val TARGET_OS_OSX: kotlin.Int = 0

const val TARGET_OS_RTKIT: kotlin.Int = 0

const val TARGET_OS_SIMULATOR: kotlin.Int = 0

const val TARGET_OS_TV: kotlin.Int = 0

const val TARGET_OS_UNIX: kotlin.Int = 0

const val TARGET_OS_WATCH: kotlin.Int = 0

const val TARGET_OS_WIN32: kotlin.Int = 0

const val TARGET_RT_64_BIT: kotlin.Int = 0

const val TARGET_RT_BIG_ENDIAN: kotlin.Int = 0

const val TARGET_RT_LITTLE_ENDIAN: kotlin.Int = 0

const val TARGET_RT_MAC_CFM: kotlin.Int = 0

const val TARGET_RT_MAC_MACHO: kotlin.Int = 0

const val TASK_ABSOLUTETIME_INFO: kotlin.Int = 0

const val TASK_ABSOLUTETIME_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val TASK_ACCESS_PORT: kotlin.Int = 0

const val TASK_AFFINITY_TAG_INFO: kotlin.Int = 0

const val TASK_AFFINITY_TAG_INFO_COUNT: kotlin.ULong = 0u

const val TASK_AUDIT_TOKEN: kotlin.Int = 0

const val TASK_AUDIT_TOKEN_COUNT: kotlin.ULong = 0u

val TASK_BACKGROUND_APPLICATION: platform.darwin.task_role /* = kotlin.Int */
    get() = TODO()

const val TASK_BASE_LATENCY_QOS_POLICY: kotlin.Int = 0

const val TASK_BASE_QOS_POLICY: kotlin.Int = 0

const val TASK_BASE_THROUGHPUT_QOS_POLICY: kotlin.Int = 0

const val TASK_BASIC2_INFO_32: kotlin.Int = 0

const val TASK_BASIC_INFO: kotlin.Int = 0

const val TASK_BASIC_INFO_32: kotlin.Int = 0

const val TASK_BASIC_INFO_32_COUNT: kotlin.ULong = 0u

const val TASK_BASIC_INFO_64: kotlin.Int = 0

const val TASK_BASIC_INFO_64_COUNT: kotlin.ULong = 0u

const val TASK_BASIC_INFO_COUNT: kotlin.ULong = 0u

const val TASK_BOOTSTRAP_PORT: kotlin.Int = 0

const val TASK_CATEGORY_POLICY: kotlin.Int = 0

const val TASK_CATEGORY_POLICY_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

val TASK_CONTROL_APPLICATION: platform.darwin.task_role /* = kotlin.Int */
    get() = TODO()

val TASK_DARWINBG_APPLICATION: platform.darwin.task_role /* = kotlin.Int */
    get() = TODO()

const val TASK_DEBUG_CONTROL_PORT: kotlin.Int = 0

const val TASK_DEBUG_INFO_INTERNAL: kotlin.Int = 0

val TASK_DEFAULT_APPLICATION: platform.darwin.task_role /* = kotlin.Int */
    get() = TODO()

const val TASK_DYLD_ALL_IMAGE_INFO_32: kotlin.Int = 0

const val TASK_DYLD_ALL_IMAGE_INFO_64: kotlin.Int = 0

const val TASK_DYLD_INFO: kotlin.Int = 0

const val TASK_DYLD_INFO_COUNT: kotlin.ULong = 0u

const val TASK_EVENTS_INFO: kotlin.Int = 0

const val TASK_EVENTS_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val TASK_EXTMOD_INFO: kotlin.Int = 0

const val TASK_EXTMOD_INFO_COUNT: kotlin.ULong = 0u

const val TASK_FLAGS_INFO: kotlin.Int = 0

const val TASK_FLAGS_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

val TASK_FOREGROUND_APPLICATION: platform.darwin.task_role /* = kotlin.Int */
    get() = TODO()

val TASK_GRAPHICS_SERVER: platform.darwin.task_role /* = kotlin.Int */
    get() = TODO()

const val TASK_HOST_PORT: kotlin.Int = 0

const val TASK_INFO_MAX: kotlin.Int = 0

val TASK_INSPECT_BASIC_COUNTS: platform.darwin.task_inspect_flavor /* = kotlin.UInt */
    get() = TODO()

const val TASK_INSPECT_BASIC_COUNTS_COUNT: kotlin.ULong = 0u

const val TASK_INSPECT_NULL: platform.darwin.task_inspect_t /* = kotlin.UInt */ = 0u

const val TASK_KERNELMEMORY_INFO: kotlin.Int = 0

const val TASK_KERNELMEMORY_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val TASK_KERNEL_PORT: kotlin.Int = 0

const val TASK_MAX_SPECIAL_PORT: kotlin.Int = 0

const val TASK_NAME_NULL: platform.darwin.task_name_t /* = kotlin.UInt */ = 0u

const val TASK_NAME_PORT: kotlin.Int = 0

val TASK_NONUI_APPLICATION: platform.darwin.task_role /* = kotlin.Int */
    get() = TODO()

const val TASK_NULL: platform.darwin.task_t /* = kotlin.UInt */ = 0u

const val TASK_OVERRIDE_QOS_POLICY: kotlin.Int = 0

const val TASK_POLICY_STATE: kotlin.Int = 0

const val TASK_POWER_INFO: kotlin.Int = 0

const val TASK_POWER_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val TASK_POWER_INFO_V2: kotlin.Int = 0

const val TASK_POWER_INFO_V2_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val TASK_POWER_INFO_V2_COUNT_OLD: kotlin.ULong = 0u

const val TASK_QOS_POLICY_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

val TASK_RENICED: platform.darwin.task_role /* = kotlin.Int */
    get() = TODO()

const val TASK_RESOURCE_NOTIFY_PORT: kotlin.Int = 0

const val TASK_SCHED_FIFO_INFO: kotlin.Int = 0

const val TASK_SCHED_INFO: kotlin.Int = 0

const val TASK_SCHED_RR_INFO: kotlin.Int = 0

const val TASK_SCHED_TIMESHARE_INFO: kotlin.Int = 0

const val TASK_SEATBELT_PORT: kotlin.Int = 0

const val TASK_SECURITY_TOKEN: kotlin.Int = 0

const val TASK_SECURITY_TOKEN_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val TASK_SUPPRESSION_POLICY: kotlin.Int = 0

const val TASK_THREAD_TIMES_INFO: kotlin.Int = 0

const val TASK_THREAD_TIMES_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

val TASK_THROTTLE_APPLICATION: platform.darwin.task_role /* = kotlin.Int */
    get() = TODO()

const val TASK_TRACE_MEMORY_INFO: kotlin.Int = 0

const val TASK_TRACE_MEMORY_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

val TASK_UNSPECIFIED: platform.darwin.task_role /* = kotlin.Int */
    get() = TODO()

const val TASK_VM_INFO: kotlin.Int = 0

const val TASK_VM_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val TASK_VM_INFO_PURGEABLE: kotlin.Int = 0

const val TASK_VM_INFO_PURGEABLE_ACCOUNT: kotlin.Int = 0

const val TASK_VM_INFO_REV0_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val TASK_VM_INFO_REV1_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val TASK_VM_INFO_REV2_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val TASK_WAIT_STATE_INFO: kotlin.Int = 0

const val TASK_WAIT_STATE_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val TF_64B_DATA: kotlin.Int = 0

const val TF_LP64: kotlin.Int = 0

const val TGEXEC: kotlin.Int = 0

const val TGREAD: kotlin.Int = 0

const val TGWRITE: kotlin.Int = 0

const val THOUSEP: kotlin.Int = 0

const val THREAD_AFFINITY_POLICY: kotlin.Int = 0

const val THREAD_AFFINITY_POLICY_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val THREAD_AFFINITY_TAG_NULL: kotlin.Int = 0

const val THREAD_BACKGROUND_POLICY: kotlin.Int = 0

const val THREAD_BACKGROUND_POLICY_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val THREAD_BACKGROUND_POLICY_DARWIN_BG: kotlin.Int = 0

const val THREAD_BASIC_INFO: kotlin.Int = 0

const val THREAD_BASIC_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val THREAD_DEBUG_INFO_INTERNAL: kotlin.Int = 0

const val THREAD_EXTENDED_INFO: kotlin.Int = 0

const val THREAD_EXTENDED_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val THREAD_EXTENDED_POLICY: kotlin.Int = 0

const val THREAD_EXTENDED_POLICY_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val THREAD_IDENTIFIER_INFO: kotlin.Int = 0

const val THREAD_IDENTIFIER_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val THREAD_INFO_MAX: kotlin.Int = 0

const val THREAD_INSPECT_NULL: platform.darwin.thread_inspect_t /* = kotlin.UInt */ = 0u

const val THREAD_KERNEL_PORT: kotlin.Int = 0

const val THREAD_LATENCY_QOS_POLICY: kotlin.Int = 0

const val THREAD_LATENCY_QOS_POLICY_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val THREAD_MACHINE_STATE_MAX: kotlin.Int = 0

const val THREAD_NULL: platform.darwin.thread_t /* = kotlin.UInt */ = 0u

const val THREAD_PRECEDENCE_POLICY: kotlin.Int = 0

const val THREAD_PRECEDENCE_POLICY_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val THREAD_SCHED_FIFO_INFO: kotlin.Int = 0

const val THREAD_SCHED_RR_INFO: kotlin.Int = 0

const val THREAD_SCHED_TIMESHARE_INFO: kotlin.Int = 0

const val THREAD_STANDARD_POLICY: kotlin.Int = 0

const val THREAD_STANDARD_POLICY_COUNT: kotlin.Int = 0

const val THREAD_STATE_FLAVOR_LIST: kotlin.Int = 0

const val THREAD_STATE_FLAVOR_LIST_10_13: kotlin.Int = 0

const val THREAD_STATE_FLAVOR_LIST_10_9: kotlin.Int = 0

const val THREAD_STATE_FLAVOR_LIST_NEW: kotlin.Int = 0

const val THREAD_STATE_MAX: kotlin.Int = 0

const val THREAD_STATE_NONE: kotlin.Int = 0

const val THREAD_THROUGHPUT_QOS_POLICY: kotlin.Int = 0

const val THREAD_THROUGHPUT_QOS_POLICY_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val THREAD_TIME_CONSTRAINT_POLICY: kotlin.Int = 0

const val THREAD_TIME_CONSTRAINT_POLICY_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val THROUGHPUT_QOS_LAUNCH_DEFAULT_TIER: kotlin.Int = 0

val THROUGHPUT_QOS_TIER_0: platform.darwin.task_throughput_qos /* = kotlin.UInt */
    get() = TODO()

val THROUGHPUT_QOS_TIER_1: platform.darwin.task_throughput_qos /* = kotlin.UInt */
    get() = TODO()

val THROUGHPUT_QOS_TIER_2: platform.darwin.task_throughput_qos /* = kotlin.UInt */
    get() = TODO()

val THROUGHPUT_QOS_TIER_3: platform.darwin.task_throughput_qos /* = kotlin.UInt */
    get() = TODO()

val THROUGHPUT_QOS_TIER_4: platform.darwin.task_throughput_qos /* = kotlin.UInt */
    get() = TODO()

val THROUGHPUT_QOS_TIER_5: platform.darwin.task_throughput_qos /* = kotlin.UInt */
    get() = TODO()

val THROUGHPUT_QOS_TIER_UNSPECIFIED: platform.darwin.task_throughput_qos /* = kotlin.UInt */
    get() = TODO()

const val THR_ACT_NULL: platform.darwin.thread_act_t /* = kotlin.UInt */ = 0u

const val TH_FLAGS_GLOBAL_FORCED_IDLE: kotlin.Int = 0

const val TH_FLAGS_IDLE: kotlin.Int = 0

const val TH_FLAGS_SWAPPED: kotlin.Int = 0

const val TH_STATE_HALTED: kotlin.Int = 0

const val TH_STATE_RUNNING: kotlin.Int = 0

const val TH_STATE_STOPPED: kotlin.Int = 0

const val TH_STATE_UNINTERRUPTIBLE: kotlin.Int = 0

const val TH_STATE_WAITING: kotlin.Int = 0

const val TH_USAGE_SCALE: kotlin.Int = 0

const val TID_NULL: platform.posix.uint64_t /* = kotlin.ULong */ = 0u

const val TIME_ABSOLUTE: kotlin.Int = 0

const val TIME_MICROS_MAX: kotlin.Int = 0

const val TIME_RELATIVE: kotlin.Int = 0

const val TMAGLEN: kotlin.Int = 0

const val TOEXEC: kotlin.Int = 0

const val TOOL_CLANG: kotlin.Int = 0

const val TOOL_LD: kotlin.Int = 0

const val TOOL_SWIFT: kotlin.Int = 0

const val TOREAD: kotlin.Int = 0

const val TOWRITE: kotlin.Int = 0

const val TSGID: kotlin.Int = 0

const val TSUID: kotlin.Int = 0

const val TSVTX: kotlin.Int = 0

const val TTY_ON: kotlin.Int = 0

const val TTY_SECURE: kotlin.Int = 0

const val TUEXEC: kotlin.Int = 0

const val TUREAD: kotlin.Int = 0

const val TUWRITE: kotlin.Int = 0

const val TVERSLEN: kotlin.Int = 0

const val TYPE_EXTENDED: kotlin.Int = 0

const val TYPE_LONGDOUBLE_IS_DOUBLE: kotlin.Int = 0

const val TYPE_LONGLONG: kotlin.Int = 0

const val T_FMT: kotlin.Int = 0

const val T_FMT_AMPM: kotlin.Int = 0

const val UND_SERVER_NULL: platform.darwin.UNDServerRef /* = kotlin.UInt */ = 0u

const val UNIVERSAL_INTERFACES_VERSION: kotlin.Int = 0

const val UNVIS_END: kotlin.Int = 0

const val UNVIS_ERROR: kotlin.Int = 0

const val UNVIS_NOCHAR: kotlin.Int = 0

const val UNVIS_SYNBAD: kotlin.Int = 0

const val UNVIS_VALID: kotlin.Int = 0

const val UNVIS_VALIDPUSH: kotlin.Int = 0

const val UPL_NULL: platform.darwin.upl_t /* = kotlin.UInt */ = 0u

const val USEC_PER_SEC: kotlin.ULong = 0u

const val USER_CODE_SELECTOR: kotlin.Int = 0

const val USER_DATA_SELECTOR: kotlin.Int = 0

const val USER_PROCESS: kotlin.Int = 0

const val UTMPX_AUTOFILL_MASK: kotlin.Int = 0

const val UTMPX_DEAD_IF_CORRESPONDING_MASK: kotlin.Int = 0

val UUID_NULL: platform.posix.uuid_t /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>> */
    get() = TODO()

const val VIS_CSTYLE: kotlin.Int = 0

const val VIS_GLOB: kotlin.Int = 0

const val VIS_HTTP1808: kotlin.Int = 0

const val VIS_HTTP1866: kotlin.Int = 0

const val VIS_HTTPSTYLE: kotlin.Int = 0

const val VIS_MIMESTYLE: kotlin.Int = 0

const val VIS_NL: kotlin.Int = 0

const val VIS_NOESCAPE: kotlin.Int = 0

const val VIS_NOSLASH: kotlin.Int = 0

const val VIS_OCTAL: kotlin.Int = 0

const val VIS_SAFE: kotlin.Int = 0

const val VIS_SP: kotlin.Int = 0

const val VIS_TAB: kotlin.Int = 0

const val VIS_WHITE: kotlin.Int = 0

const val VM_BEHAVIOR_CAN_REUSE: platform.darwin.vm_behavior_t /* = kotlin.Int */ = 0

const val VM_BEHAVIOR_DEFAULT: platform.darwin.vm_behavior_t /* = kotlin.Int */ = 0

const val VM_BEHAVIOR_DONTNEED: platform.darwin.vm_behavior_t /* = kotlin.Int */ = 0

const val VM_BEHAVIOR_FREE: platform.darwin.vm_behavior_t /* = kotlin.Int */ = 0

const val VM_BEHAVIOR_PAGEOUT: platform.darwin.vm_behavior_t /* = kotlin.Int */ = 0

const val VM_BEHAVIOR_RANDOM: platform.darwin.vm_behavior_t /* = kotlin.Int */ = 0

const val VM_BEHAVIOR_REUSABLE: platform.darwin.vm_behavior_t /* = kotlin.Int */ = 0

const val VM_BEHAVIOR_REUSE: platform.darwin.vm_behavior_t /* = kotlin.Int */ = 0

const val VM_BEHAVIOR_RSEQNTL: platform.darwin.vm_behavior_t /* = kotlin.Int */ = 0

const val VM_BEHAVIOR_SEQUENTIAL: platform.darwin.vm_behavior_t /* = kotlin.Int */ = 0

const val VM_BEHAVIOR_WILLNEED: platform.darwin.vm_behavior_t /* = kotlin.Int */ = 0

const val VM_BEHAVIOR_ZERO_WIRED_PAGES: platform.darwin.vm_behavior_t /* = kotlin.Int */ = 0

const val VM_DYLD64: platform.posix.user_addr_t /* = kotlin.ULong */ = 0u

const val VM_FLAGS_4GB_CHUNK: kotlin.Int = 0

const val VM_FLAGS_ALIAS_MASK: kotlin.UInt = 0u

const val VM_FLAGS_ANYWHERE: kotlin.Int = 0

const val VM_FLAGS_FIXED: kotlin.Int = 0

const val VM_FLAGS_NO_CACHE: kotlin.Int = 0

const val VM_FLAGS_OVERWRITE: kotlin.Int = 0

const val VM_FLAGS_PURGABLE: kotlin.Int = 0

const val VM_FLAGS_RANDOM_ADDR: kotlin.Int = 0

const val VM_FLAGS_RESILIENT_CODESIGN: kotlin.Int = 0

const val VM_FLAGS_RESILIENT_MEDIA: kotlin.Int = 0

const val VM_FLAGS_RETURN_4K_DATA_ADDR: kotlin.Int = 0

const val VM_FLAGS_RETURN_DATA_ADDR: kotlin.Int = 0

const val VM_FLAGS_SUPERPAGE_MASK: kotlin.Int = 0

const val VM_FLAGS_SUPERPAGE_NONE: kotlin.Int = 0

const val VM_FLAGS_SUPERPAGE_SHIFT: kotlin.Int = 0

const val VM_FLAGS_SUPERPAGE_SIZE_2MB: kotlin.Int = 0

const val VM_FLAGS_SUPERPAGE_SIZE_ANY: kotlin.Int = 0

const val VM_FLAGS_USER_ALLOCATE: kotlin.UInt = 0u

const val VM_FLAGS_USER_MAP: kotlin.UInt = 0u

const val VM_FLAGS_USER_REMAP: kotlin.Int = 0

const val VM_INHERIT_COPY: platform.darwin.vm_inherit_t /* = kotlin.UInt */ = 0u

const val VM_INHERIT_DEFAULT: platform.darwin.vm_inherit_t /* = kotlin.UInt */ = 0u

const val VM_INHERIT_DONATE_COPY: platform.darwin.vm_inherit_t /* = kotlin.UInt */ = 0u

const val VM_INHERIT_LAST_VALID: platform.darwin.vm_inherit_t /* = kotlin.UInt */ = 0u

const val VM_INHERIT_NONE: platform.darwin.vm_inherit_t /* = kotlin.UInt */ = 0u

const val VM_INHERIT_SHARE: platform.darwin.vm_inherit_t /* = kotlin.UInt */ = 0u

const val VM_LIB64_SHR_DATA: platform.posix.user_addr_t /* = kotlin.ULong */ = 0u

const val VM_LIB64_SHR_TEXT: platform.posix.user_addr_t /* = kotlin.ULong */ = 0u

const val VM_MAP_ENTRY_MAX: kotlin.Int = 0

const val VM_MAP_NULL: platform.darwin.vm_map_t /* = kotlin.UInt */ = 0u

const val VM_MAX_ADDRESS: platform.darwin.vm_offset_t /* = kotlin.ULong */ = 0u

const val VM_MAX_PAGE_ADDRESS: platform.posix.user_addr_t /* = kotlin.ULong */ = 0u

const val VM_MAX_USER_PAGE_ADDRESS: platform.posix.user_addr_t /* = kotlin.ULong */ = 0u

const val VM_MEMORY_ACCELERATE: kotlin.Int = 0

const val VM_MEMORY_ACCOUNTS: kotlin.Int = 0

const val VM_MEMORY_ANALYSIS_TOOL: kotlin.Int = 0

const val VM_MEMORY_APPKIT: kotlin.Int = 0

const val VM_MEMORY_APPLICATION_SPECIFIC_1: kotlin.Int = 0

const val VM_MEMORY_APPLICATION_SPECIFIC_16: kotlin.Int = 0

const val VM_MEMORY_ASL: kotlin.Int = 0

const val VM_MEMORY_ASSETSD: kotlin.Int = 0

const val VM_MEMORY_ATS: kotlin.Int = 0

const val VM_MEMORY_AUDIO: kotlin.Int = 0

const val VM_MEMORY_CARBON: kotlin.Int = 0

const val VM_MEMORY_CGIMAGE: kotlin.Int = 0

const val VM_MEMORY_CM_CRABS: kotlin.Int = 0

const val VM_MEMORY_CM_MEMORYPOOL: kotlin.Int = 0

const val VM_MEMORY_CM_READCACHE: kotlin.Int = 0

const val VM_MEMORY_CM_RPC: kotlin.Int = 0

const val VM_MEMORY_CM_XPC: kotlin.Int = 0

const val VM_MEMORY_COREDATA: kotlin.Int = 0

const val VM_MEMORY_COREDATA_OBJECTIDS: kotlin.Int = 0

const val VM_MEMORY_COREGRAPHICS: kotlin.Int = 0

const val VM_MEMORY_COREGRAPHICS_BACKINGSTORES: kotlin.Int = 0

const val VM_MEMORY_COREGRAPHICS_DATA: kotlin.Int = 0

const val VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS: kotlin.Int = 0

const val VM_MEMORY_COREGRAPHICS_MISC: kotlin.Int = 0

const val VM_MEMORY_COREGRAPHICS_SHARED: kotlin.Int = 0

const val VM_MEMORY_COREGRAPHICS_XALLOC: kotlin.Int = 0

const val VM_MEMORY_COREIMAGE: kotlin.Int = 0

const val VM_MEMORY_COREPROFILE: kotlin.Int = 0

const val VM_MEMORY_CORESERVICES: kotlin.Int = 0

const val VM_MEMORY_COREUI: kotlin.Int = 0

const val VM_MEMORY_COREUIFILE: kotlin.Int = 0

const val VM_MEMORY_CORPSEINFO: kotlin.Int = 0

const val VM_MEMORY_DHMM: kotlin.Int = 0

const val VM_MEMORY_DYLD: kotlin.Int = 0

const val VM_MEMORY_DYLD_MALLOC: kotlin.Int = 0

const val VM_MEMORY_DYLIB: kotlin.Int = 0

const val VM_MEMORY_FOUNDATION: kotlin.Int = 0

const val VM_MEMORY_GENEALOGY: kotlin.Int = 0

const val VM_MEMORY_GLSL: kotlin.Int = 0

const val VM_MEMORY_GUARD: kotlin.Int = 0

const val VM_MEMORY_IMAGEIO: kotlin.Int = 0

const val VM_MEMORY_IOKIT: kotlin.Int = 0

const val VM_MEMORY_IOSURFACE: kotlin.Int = 0

const val VM_MEMORY_JAVA: kotlin.Int = 0

const val VM_MEMORY_JAVASCRIPT_CORE: kotlin.Int = 0

const val VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR: kotlin.Int = 0

const val VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE: kotlin.Int = 0

const val VM_MEMORY_LAYERKIT: kotlin.Int = 0

const val VM_MEMORY_LIBDISPATCH: kotlin.Int = 0

const val VM_MEMORY_LIBNETWORK: kotlin.Int = 0

const val VM_MEMORY_MACH_MSG: kotlin.Int = 0

const val VM_MEMORY_MALLOC: kotlin.Int = 0

const val VM_MEMORY_MALLOC_HUGE: kotlin.Int = 0

const val VM_MEMORY_MALLOC_LARGE: kotlin.Int = 0

const val VM_MEMORY_MALLOC_LARGE_REUSABLE: kotlin.Int = 0

const val VM_MEMORY_MALLOC_LARGE_REUSED: kotlin.Int = 0

const val VM_MEMORY_MALLOC_NANO: kotlin.Int = 0

const val VM_MEMORY_MALLOC_SMALL: kotlin.Int = 0

const val VM_MEMORY_MALLOC_TINY: kotlin.Int = 0

const val VM_MEMORY_OBJC_DISPATCHERS: kotlin.Int = 0

const val VM_MEMORY_OPENCL: kotlin.Int = 0

const val VM_MEMORY_OS_ALLOC_ONCE: kotlin.Int = 0

const val VM_MEMORY_QUICKLOOK_THUMBNAILS: kotlin.Int = 0

const val VM_MEMORY_RAWCAMERA: kotlin.Int = 0

const val VM_MEMORY_REALLOC: kotlin.Int = 0

const val VM_MEMORY_SBRK: kotlin.Int = 0

const val VM_MEMORY_SCENEKIT: kotlin.Int = 0

const val VM_MEMORY_SHARED_PMAP: kotlin.Int = 0

const val VM_MEMORY_SKYWALK: kotlin.Int = 0

const val VM_MEMORY_SQLITE: kotlin.Int = 0

const val VM_MEMORY_STACK: kotlin.Int = 0

const val VM_MEMORY_SWIFT_METADATA: kotlin.Int = 0

const val VM_MEMORY_SWIFT_RUNTIME: kotlin.Int = 0

const val VM_MEMORY_TCMALLOC: kotlin.Int = 0

const val VM_MEMORY_UNSHARED_PMAP: kotlin.Int = 0

const val VM_MEMORY_VIDEOBITSTREAM: kotlin.Int = 0

const val VM_MEMORY_WEBASSEMBLY: kotlin.Int = 0

const val VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS: kotlin.Int = 0

const val VM_MIN_ADDRESS: platform.darwin.vm_offset_t /* = kotlin.ULong */ = 0u

const val VM_MIN_ADDRESS64: platform.posix.user_addr_t /* = kotlin.ULong */ = 0u

const val VM_NAMED_ENTRY_NULL: platform.darwin.vm_named_entry_t /* = kotlin.UInt */ = 0u

const val VM_PAGE_INFO_BASIC: kotlin.Int = 0

const val VM_PAGE_INFO_BASIC_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val VM_PAGE_QUERY_PAGE_COPIED: kotlin.Int = 0

const val VM_PAGE_QUERY_PAGE_CS_NX: kotlin.Int = 0

const val VM_PAGE_QUERY_PAGE_CS_TAINTED: kotlin.Int = 0

const val VM_PAGE_QUERY_PAGE_CS_VALIDATED: kotlin.Int = 0

const val VM_PAGE_QUERY_PAGE_DIRTY: kotlin.Int = 0

const val VM_PAGE_QUERY_PAGE_EXTERNAL: kotlin.Int = 0

const val VM_PAGE_QUERY_PAGE_FICTITIOUS: kotlin.Int = 0

const val VM_PAGE_QUERY_PAGE_PAGED_OUT: kotlin.Int = 0

const val VM_PAGE_QUERY_PAGE_PRESENT: kotlin.Int = 0

const val VM_PAGE_QUERY_PAGE_REF: kotlin.Int = 0

const val VM_PAGE_QUERY_PAGE_SPECULATIVE: kotlin.Int = 0

const val VM_PROT_ALL: kotlin.Int = 0

const val VM_PROT_COPY: platform.darwin.vm_prot_t /* = kotlin.Int */ = 0

const val VM_PROT_DEFAULT: kotlin.Int = 0

const val VM_PROT_EXECUTE: platform.darwin.vm_prot_t /* = kotlin.Int */ = 0

const val VM_PROT_EXECUTE_ONLY: kotlin.Int = 0

const val VM_PROT_IS_MASK: platform.darwin.vm_prot_t /* = kotlin.Int */ = 0

const val VM_PROT_NONE: platform.darwin.vm_prot_t /* = kotlin.Int */ = 0

const val VM_PROT_NO_CHANGE: platform.darwin.vm_prot_t /* = kotlin.Int */ = 0

const val VM_PROT_READ: platform.darwin.vm_prot_t /* = kotlin.Int */ = 0

const val VM_PROT_STRIP_READ: platform.darwin.vm_prot_t /* = kotlin.Int */ = 0

const val VM_PROT_WANTS_COPY: platform.darwin.vm_prot_t /* = kotlin.Int */ = 0

const val VM_PROT_WRITE: platform.darwin.vm_prot_t /* = kotlin.Int */ = 0

const val VM_PURGABLE_ALL_MASKS: kotlin.Int = 0

const val VM_PURGABLE_BEHAVIOR_FIFO: kotlin.Int = 0

const val VM_PURGABLE_BEHAVIOR_LIFO: kotlin.Int = 0

const val VM_PURGABLE_BEHAVIOR_MASK: kotlin.Int = 0

const val VM_PURGABLE_BEHAVIOR_SHIFT: kotlin.Int = 0

const val VM_PURGABLE_DEBUG_EMPTY: kotlin.Int = 0

const val VM_PURGABLE_DEBUG_FAULT: kotlin.Int = 0

const val VM_PURGABLE_DEBUG_MASK: kotlin.Int = 0

const val VM_PURGABLE_DEBUG_SHIFT: kotlin.Int = 0

const val VM_PURGABLE_DENY: kotlin.Int = 0

const val VM_PURGABLE_EMPTY: kotlin.Int = 0

const val VM_PURGABLE_GET_STATE: platform.darwin.vm_purgable_t /* = kotlin.Int */ = 0

const val VM_PURGABLE_NONVOLATILE: kotlin.Int = 0

const val VM_PURGABLE_NO_AGING: kotlin.Int = 0

const val VM_PURGABLE_NO_AGING_MASK: kotlin.Int = 0

const val VM_PURGABLE_NO_AGING_SHIFT: kotlin.Int = 0

const val VM_PURGABLE_ORDERING_MASK: kotlin.Int = 0

const val VM_PURGABLE_ORDERING_NORMAL: kotlin.Int = 0

const val VM_PURGABLE_ORDERING_OBSOLETE: kotlin.Int = 0

const val VM_PURGABLE_ORDERING_SHIFT: kotlin.Int = 0

const val VM_PURGABLE_PURGE_ALL: platform.darwin.vm_purgable_t /* = kotlin.Int */ = 0

const val VM_PURGABLE_SET_STATE: platform.darwin.vm_purgable_t /* = kotlin.Int */ = 0

const val VM_PURGABLE_SET_STATE_FROM_KERNEL: platform.darwin.vm_purgable_t /* = kotlin.Int */ = 0

const val VM_PURGABLE_STATE_MASK: kotlin.Int = 0

const val VM_PURGABLE_STATE_MAX: kotlin.Int = 0

const val VM_PURGABLE_STATE_MIN: kotlin.Int = 0

const val VM_PURGABLE_VOLATILE: kotlin.Int = 0

const val VM_REGION_BASIC_INFO: kotlin.Int = 0

const val VM_REGION_BASIC_INFO_64: kotlin.Int = 0

const val VM_REGION_BASIC_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val VM_REGION_BASIC_INFO_COUNT_64: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val VM_REGION_EXTENDED_INFO: kotlin.Int = 0

const val VM_REGION_EXTENDED_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val VM_REGION_INFO_MAX: kotlin.Int = 0

const val VM_REGION_SUBMAP_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val VM_REGION_SUBMAP_INFO_COUNT_64: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val VM_REGION_SUBMAP_INFO_V0_COUNT_64: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val VM_REGION_SUBMAP_INFO_V0_SIZE: kotlin.ULong = 0u

const val VM_REGION_SUBMAP_INFO_V1_COUNT_64: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val VM_REGION_SUBMAP_INFO_V1_SIZE: kotlin.ULong = 0u

const val VM_REGION_SUBMAP_SHORT_INFO_COUNT_64: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val VM_REGION_TOP_INFO: kotlin.Int = 0

const val VM_REGION_TOP_INFO_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val VM_SYNC_ASYNCHRONOUS: platform.darwin.vm_sync_t /* = kotlin.UInt */ = 0u

const val VM_SYNC_CONTIGUOUS: platform.darwin.vm_sync_t /* = kotlin.UInt */ = 0u

const val VM_SYNC_DEACTIVATE: platform.darwin.vm_sync_t /* = kotlin.UInt */ = 0u

const val VM_SYNC_INVALIDATE: platform.darwin.vm_sync_t /* = kotlin.UInt */ = 0u

const val VM_SYNC_KILLPAGES: platform.darwin.vm_sync_t /* = kotlin.UInt */ = 0u

const val VM_SYNC_REUSABLEPAGES: platform.darwin.vm_sync_t /* = kotlin.UInt */ = 0u

const val VM_SYNC_SYNCHRONOUS: platform.darwin.vm_sync_t /* = kotlin.UInt */ = 0u

const val VM_USRSTACK32: platform.darwin.vm_offset_t /* = kotlin.ULong */ = 0u

const val VM_USRSTACK64: platform.posix.user_addr_t /* = kotlin.ULong */ = 0u

const val VM_VOLATILE_GROUP_0: kotlin.Int = 0

const val VM_VOLATILE_GROUP_1: kotlin.Int = 0

const val VM_VOLATILE_GROUP_2: kotlin.Int = 0

const val VM_VOLATILE_GROUP_3: kotlin.Int = 0

const val VM_VOLATILE_GROUP_4: kotlin.Int = 0

const val VM_VOLATILE_GROUP_5: kotlin.Int = 0

const val VM_VOLATILE_GROUP_6: kotlin.Int = 0

const val VM_VOLATILE_GROUP_7: kotlin.Int = 0

const val VM_VOLATILE_GROUP_DEFAULT: kotlin.Int = 0

const val VM_VOLATILE_GROUP_MASK: kotlin.Int = 0

const val VM_VOLATILE_GROUP_SHIFT: kotlin.Int = 0

const val VM_VOLATILE_MAKE_FIRST_IN_GROUP: kotlin.Int = 0

const val VM_VOLATILE_MAKE_LAST_IN_GROUP: kotlin.Int = 0

const val VM_VOLATILE_ORDER_MASK: kotlin.Int = 0

const val VM_VOLATILE_ORDER_SHIFT: kotlin.Int = 0

const val VOUCHER_MACH_MSG_API_VERSION: kotlin.Int = 0

const val WRDE_APPEND: kotlin.Int = 0

const val WRDE_BADCHAR: kotlin.Int = 0

const val WRDE_BADVAL: kotlin.Int = 0

const val WRDE_CMDSUB: kotlin.Int = 0

const val WRDE_DOOFFS: kotlin.Int = 0

const val WRDE_NOCMD: kotlin.Int = 0

const val WRDE_NOSPACE: kotlin.Int = 0

const val WRDE_NOSYS: kotlin.Int = 0

const val WRDE_REUSE: kotlin.Int = 0

const val WRDE_SHOWERR: kotlin.Int = 0

const val WRDE_SYNTAX: kotlin.Int = 0

const val WRDE_UNDEF: kotlin.Int = 0

const val X86_DEBUG_STATE32_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val X86_DEBUG_STATE64_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val X86_EXCEPTION_STATE64_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val XATTR_FLAG_CONTENT_DEPENDENT: platform.darwin.xattr_flags_t /* = kotlin.ULong */ = 0u

const val XATTR_FLAG_NEVER_PRESERVE: platform.darwin.xattr_flags_t /* = kotlin.ULong */ = 0u

const val XATTR_FLAG_NO_EXPORT: platform.darwin.xattr_flags_t /* = kotlin.ULong */ = 0u

const val XATTR_FLAG_SYNCABLE: platform.darwin.xattr_flags_t /* = kotlin.ULong */ = 0u

const val XATTR_OPERATION_INTENT_COPY: kotlin.Int = 0

const val XATTR_OPERATION_INTENT_SAVE: kotlin.Int = 0

const val XATTR_OPERATION_INTENT_SHARE: kotlin.Int = 0

const val XATTR_OPERATION_INTENT_SYNC: kotlin.Int = 0

val XPC_ACTIVITY_ALLOW_BATTERY: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
    get() = TODO()

val XPC_ACTIVITY_CHECK_IN: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */
    get() = TODO()

val XPC_ACTIVITY_DELAY: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
    get() = TODO()

val XPC_ACTIVITY_GRACE_PERIOD: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
    get() = TODO()

val XPC_ACTIVITY_INTERVAL: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
    get() = TODO()

val XPC_ACTIVITY_INTERVAL_15_MIN: platform.posix.int64_t /* = kotlin.Long */
    get() = TODO()

val XPC_ACTIVITY_INTERVAL_1_DAY: platform.posix.int64_t /* = kotlin.Long */
    get() = TODO()

val XPC_ACTIVITY_INTERVAL_1_HOUR: platform.posix.int64_t /* = kotlin.Long */
    get() = TODO()

val XPC_ACTIVITY_INTERVAL_1_MIN: platform.posix.int64_t /* = kotlin.Long */
    get() = TODO()

val XPC_ACTIVITY_INTERVAL_30_MIN: platform.posix.int64_t /* = kotlin.Long */
    get() = TODO()

val XPC_ACTIVITY_INTERVAL_4_HOURS: platform.posix.int64_t /* = kotlin.Long */
    get() = TODO()

val XPC_ACTIVITY_INTERVAL_5_MIN: platform.posix.int64_t /* = kotlin.Long */
    get() = TODO()

val XPC_ACTIVITY_INTERVAL_7_DAYS: platform.posix.int64_t /* = kotlin.Long */
    get() = TODO()

val XPC_ACTIVITY_INTERVAL_8_HOURS: platform.posix.int64_t /* = kotlin.Long */
    get() = TODO()

val XPC_ACTIVITY_PRIORITY: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
    get() = TODO()

val XPC_ACTIVITY_PRIORITY_MAINTENANCE: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
    get() = TODO()

val XPC_ACTIVITY_PRIORITY_UTILITY: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
    get() = TODO()

val XPC_ACTIVITY_REPEATING: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
    get() = TODO()

val XPC_ACTIVITY_REQUIRE_BATTERY_LEVEL: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
    get() = TODO()

val XPC_ACTIVITY_REQUIRE_HDD_SPINNING: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
    get() = TODO()

val XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
    get() = TODO()

val XPC_ACTIVITY_STATE_CHECK_IN: kotlin.UInt
    get() = TODO()

val XPC_ACTIVITY_STATE_CONTINUE: kotlin.UInt
    get() = TODO()

val XPC_ACTIVITY_STATE_DEFER: kotlin.UInt
    get() = TODO()

val XPC_ACTIVITY_STATE_DONE: kotlin.UInt
    get() = TODO()

val XPC_ACTIVITY_STATE_RUN: kotlin.UInt
    get() = TODO()

val XPC_ACTIVITY_STATE_WAIT: kotlin.UInt
    get() = TODO()

const val XPC_API_VERSION: kotlin.Int = 0

const val XPC_ARRAY_APPEND: platform.posix.size_t /* = kotlin.ULong */ = 0u

const val XPC_CONNECTION_MACH_SERVICE_LISTENER: kotlin.Int = 0

const val XPC_CONNECTION_MACH_SERVICE_PRIVILEGED: kotlin.Int = 0

const val XPC_HOSTING_OLD_MAIN: kotlin.Int = 0

const val YESEXPR: kotlin.Int = 0

const val YESSTR: kotlin.Int = 0

const val ZONE_NAME_MAX_LEN: kotlin.Int = 0

const val ZOP_ALLOC: kotlin.Int = 0

const val ZOP_FREE: kotlin.Int = 0

const val _AppleTextureEncoder_h_: kotlin.Int = 0

const val _CMP_EQ_OQ: kotlin.Int = 0

const val _CMP_EQ_OS: kotlin.Int = 0

const val _CMP_EQ_UQ: kotlin.Int = 0

const val _CMP_EQ_US: kotlin.Int = 0

const val _CMP_FALSE_OQ: kotlin.Int = 0

const val _CMP_FALSE_OS: kotlin.Int = 0

const val _CMP_GE_OQ: kotlin.Int = 0

const val _CMP_GE_OS: kotlin.Int = 0

const val _CMP_GT_OQ: kotlin.Int = 0

const val _CMP_GT_OS: kotlin.Int = 0

const val _CMP_LE_OQ: kotlin.Int = 0

const val _CMP_LE_OS: kotlin.Int = 0

const val _CMP_LT_OQ: kotlin.Int = 0

const val _CMP_LT_OS: kotlin.Int = 0

const val _CMP_NEQ_OQ: kotlin.Int = 0

const val _CMP_NEQ_OS: kotlin.Int = 0

const val _CMP_NEQ_UQ: kotlin.Int = 0

const val _CMP_NEQ_US: kotlin.Int = 0

const val _CMP_NGE_UQ: kotlin.Int = 0

const val _CMP_NGE_US: kotlin.Int = 0

const val _CMP_NGT_UQ: kotlin.Int = 0

const val _CMP_NGT_US: kotlin.Int = 0

const val _CMP_NLE_UQ: kotlin.Int = 0

const val _CMP_NLE_US: kotlin.Int = 0

const val _CMP_NLT_UQ: kotlin.Int = 0

const val _CMP_NLT_US: kotlin.Int = 0

const val _CMP_ORD_Q: kotlin.Int = 0

const val _CMP_ORD_S: kotlin.Int = 0

const val _CMP_TRUE_UQ: kotlin.Int = 0

const val _CMP_TRUE_US: kotlin.Int = 0

const val _CMP_UNORD_Q: kotlin.Int = 0

const val _CMP_UNORD_S: kotlin.Int = 0

const val _DNS_SD_H: kotlin.Int = 0

const val _DNS_SD_LIBDISPATCH: kotlin.Int = 0

const val _EXECINFO_H_: kotlin.Int = 0

const val _GLOB_ERR_BLOCK: kotlin.UInt = 0u

const val _LIBCPPABI_VERSION: kotlin.Int = 0

const val _LIBCXXABI_ARM_EHABI: kotlin.Int = 0

const val _MACH_ERROR_: kotlin.Int = 0

const val _MACH_INIT_: kotlin.Int = 0

const val _MM_CMPINT_GE: kotlin.Int = 0

const val _MM_CMPINT_GT: kotlin.Int = 0

const val _MM_DENORMALS_ZERO_MASK: kotlin.Int = 0

const val _MM_DENORMALS_ZERO_OFF: kotlin.Int = 0

const val _MM_DENORMALS_ZERO_ON: kotlin.Int = 0

const val _MM_EXCEPT_DENORM: kotlin.Int = 0

const val _MM_EXCEPT_DIV_ZERO: kotlin.Int = 0

const val _MM_EXCEPT_INEXACT: kotlin.Int = 0

const val _MM_EXCEPT_INVALID: kotlin.Int = 0

const val _MM_EXCEPT_MASK: kotlin.Int = 0

const val _MM_EXCEPT_OVERFLOW: kotlin.Int = 0

const val _MM_EXCEPT_UNDERFLOW: kotlin.Int = 0

const val _MM_FLUSH_ZERO_MASK: kotlin.Int = 0

const val _MM_FLUSH_ZERO_OFF: kotlin.Int = 0

const val _MM_FLUSH_ZERO_ON: kotlin.Int = 0

const val _MM_FROUND_CEIL: kotlin.Int = 0

const val _MM_FROUND_CUR_DIRECTION: kotlin.Int = 0

const val _MM_FROUND_FLOOR: kotlin.Int = 0

const val _MM_FROUND_NEARBYINT: kotlin.Int = 0

const val _MM_FROUND_NINT: kotlin.Int = 0

const val _MM_FROUND_NO_EXC: kotlin.Int = 0

const val _MM_FROUND_RAISE_EXC: kotlin.Int = 0

const val _MM_FROUND_RINT: kotlin.Int = 0

const val _MM_FROUND_TO_NEAREST_INT: kotlin.Int = 0

const val _MM_FROUND_TO_NEG_INF: kotlin.Int = 0

const val _MM_FROUND_TO_POS_INF: kotlin.Int = 0

const val _MM_FROUND_TO_ZERO: kotlin.Int = 0

const val _MM_FROUND_TRUNC: kotlin.Int = 0

const val _MM_HINT_ET0: kotlin.Int = 0

const val _MM_HINT_ET1: kotlin.Int = 0

const val _MM_HINT_NTA: kotlin.Int = 0

const val _MM_HINT_T0: kotlin.Int = 0

const val _MM_HINT_T1: kotlin.Int = 0

const val _MM_HINT_T2: kotlin.Int = 0

const val _MM_MASK_DENORM: kotlin.Int = 0

const val _MM_MASK_DIV_ZERO: kotlin.Int = 0

const val _MM_MASK_INEXACT: kotlin.Int = 0

const val _MM_MASK_INVALID: kotlin.Int = 0

const val _MM_MASK_MASK: kotlin.Int = 0

const val _MM_MASK_OVERFLOW: kotlin.Int = 0

const val _MM_MASK_UNDERFLOW: kotlin.Int = 0

val _MM_PERM_AAAA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_AAAB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_AAAC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_AAAD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_AABA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_AABB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_AABC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_AABD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_AACA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_AACB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_AACC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_AACD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_AADA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_AADB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_AADC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_AADD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ABAA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ABAB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ABAC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ABAD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ABBA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ABBB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ABBC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ABBD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ABCA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ABCB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ABCC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ABCD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ABDA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ABDB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ABDC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ABDD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ACAA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ACAB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ACAC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ACAD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ACBA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ACBB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ACBC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ACBD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ACCA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ACCB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ACCC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ACCD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ACDA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ACDB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ACDC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ACDD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ADAA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ADAB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ADAC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ADAD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ADBA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ADBB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ADBC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ADBD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ADCA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ADCB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ADCC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ADCD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ADDA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ADDB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ADDC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_ADDD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BAAA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BAAB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BAAC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BAAD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BABA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BABB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BABC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BABD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BACA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BACB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BACC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BACD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BADA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BADB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BADC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BADD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BBAA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BBAB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BBAC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BBAD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BBBA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BBBB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BBBC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BBBD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BBCA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BBCB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BBCC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BBCD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BBDA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BBDB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BBDC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BBDD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BCAA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BCAB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BCAC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BCAD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BCBA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BCBB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BCBC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BCBD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BCCA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BCCB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BCCC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BCCD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BCDA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BCDB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BCDC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BCDD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BDAA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BDAB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BDAC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BDAD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BDBA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BDBB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BDBC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BDBD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BDCA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BDCB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BDCC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BDCD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BDDA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BDDB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BDDC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_BDDD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CAAA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CAAB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CAAC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CAAD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CABA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CABB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CABC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CABD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CACA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CACB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CACC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CACD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CADA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CADB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CADC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CADD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CBAA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CBAB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CBAC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CBAD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CBBA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CBBB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CBBC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CBBD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CBCA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CBCB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CBCC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CBCD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CBDA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CBDB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CBDC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CBDD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CCAA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CCAB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CCAC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CCAD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CCBA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CCBB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CCBC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CCBD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CCCA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CCCB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CCCC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CCCD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CCDA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CCDB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CCDC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CCDD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CDAA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CDAB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CDAC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CDAD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CDBA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CDBB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CDBC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CDBD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CDCA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CDCB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CDCC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CDCD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CDDA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CDDB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CDDC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_CDDD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DAAA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DAAB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DAAC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DAAD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DABA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DABB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DABC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DABD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DACA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DACB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DACC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DACD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DADA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DADB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DADC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DADD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DBAA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DBAB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DBAC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DBAD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DBBA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DBBB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DBBC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DBBD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DBCA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DBCB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DBCC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DBCD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DBDA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DBDB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DBDC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DBDD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DCAA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DCAB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DCAC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DCAD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DCBA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DCBB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DCBC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DCBD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DCCA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DCCB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DCCC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DCCD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DCDA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DCDB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DCDC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DCDD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DDAA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DDAB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DDAC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DDAD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DDBA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DDBB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DDBC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DDBD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DDCA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DDCB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DDCC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DDCD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DDDA: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DDDB: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DDDC: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

val _MM_PERM_DDDD: platform.darwin._MM_PERM_ENUM /* = kotlin.UInt */
    get() = TODO()

const val _MM_ROUND_DOWN: kotlin.Int = 0

const val _MM_ROUND_MASK: kotlin.Int = 0

const val _MM_ROUND_NEAREST: kotlin.Int = 0

const val _MM_ROUND_TOWARD_ZERO: kotlin.Int = 0

const val _MM_ROUND_UP: kotlin.Int = 0

val _NSConcreteGlobalBlock: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */>> */
    get() = TODO()

val _NSConcreteStackBlock: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */>> */
    get() = TODO()

const val _SIDD_BIT_MASK: kotlin.Int = 0

const val _SIDD_CMP_EQUAL_ANY: kotlin.Int = 0

const val _SIDD_CMP_EQUAL_EACH: kotlin.Int = 0

const val _SIDD_CMP_EQUAL_ORDERED: kotlin.Int = 0

const val _SIDD_CMP_RANGES: kotlin.Int = 0

const val _SIDD_LEAST_SIGNIFICANT: kotlin.Int = 0

const val _SIDD_MASKED_NEGATIVE_POLARITY: kotlin.Int = 0

const val _SIDD_MASKED_POSITIVE_POLARITY: kotlin.Int = 0

const val _SIDD_MOST_SIGNIFICANT: kotlin.Int = 0

const val _SIDD_NEGATIVE_POLARITY: kotlin.Int = 0

const val _SIDD_POSITIVE_POLARITY: kotlin.Int = 0

const val _SIDD_SBYTE_OPS: kotlin.Int = 0

const val _SIDD_SWORD_OPS: kotlin.Int = 0

const val _SIDD_UBYTE_OPS: kotlin.Int = 0

const val _SIDD_UNIT_MASK: kotlin.Int = 0

const val _SIDD_UWORD_OPS: kotlin.Int = 0

val _UA_CLEANUP_PHASE: platform.darwin._Unwind_Action /* = kotlin.UInt */
    get() = TODO()

val _UA_END_OF_STACK: platform.darwin._Unwind_Action /* = kotlin.UInt */
    get() = TODO()

val _UA_FORCE_UNWIND: platform.darwin._Unwind_Action /* = kotlin.UInt */
    get() = TODO()

val _UA_HANDLER_FRAME: platform.darwin._Unwind_Action /* = kotlin.UInt */
    get() = TODO()

val _UA_SEARCH_PHASE: platform.darwin._Unwind_Action /* = kotlin.UInt */
    get() = TODO()

val _URC_CONTINUE_UNWIND: platform.darwin._Unwind_Reason_Code /* = kotlin.UInt */
    get() = TODO()

val _URC_END_OF_STACK: platform.darwin._Unwind_Reason_Code /* = kotlin.UInt */
    get() = TODO()

val _URC_FATAL_PHASE1_ERROR: platform.darwin._Unwind_Reason_Code /* = kotlin.UInt */
    get() = TODO()

val _URC_FATAL_PHASE2_ERROR: platform.darwin._Unwind_Reason_Code /* = kotlin.UInt */
    get() = TODO()

val _URC_FOREIGN_EXCEPTION_CAUGHT: platform.darwin._Unwind_Reason_Code /* = kotlin.UInt */
    get() = TODO()

val _URC_HANDLER_FOUND: platform.darwin._Unwind_Reason_Code /* = kotlin.UInt */
    get() = TODO()

val _URC_INSTALL_CONTEXT: platform.darwin._Unwind_Reason_Code /* = kotlin.UInt */
    get() = TODO()

val _URC_NORMAL_STOP: platform.darwin._Unwind_Reason_Code /* = kotlin.UInt */
    get() = TODO()

val _URC_NO_REASON: platform.darwin._Unwind_Reason_Code /* = kotlin.UInt */
    get() = TODO()

const val _UTX_HOSTSIZE: kotlin.Int = 0

const val _UTX_IDSIZE: kotlin.Int = 0

const val _UTX_LINESIZE: kotlin.Int = 0

const val _UTX_USERSIZE: kotlin.Int = 0

const val _VIS_END: kotlin.Int = 0

const val _XABORT_CAPACITY: kotlin.Int = 0

const val _XABORT_CONFLICT: kotlin.Int = 0

const val _XABORT_DEBUG: kotlin.Int = 0

const val _XABORT_EXPLICIT: kotlin.Int = 0

const val _XABORT_NESTED: kotlin.Int = 0

const val _XABORT_RETRY: kotlin.Int = 0

const val _XBEGIN_STARTED: kotlin.UInt = 0u

const val __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES: kotlin.Int = 0

const val __AVAILABILITY_MACROS_USES_AVAILABILITY: kotlin.Int = 0

val __BSM_INTERNAL_NOTIFY_KEY: kotlin.String
    get() = TODO()

const val __MigPackStructs: kotlin.Int = 0

const val __MigTypeCheck: kotlin.Int = 0

const val __NDR_convert__: kotlin.Int = 0

const val __NDR_convert__char_rep__: kotlin.Int = 0

const val __NDR_convert__float_rep__: kotlin.Int = 0

const val __NDR_convert__int_rep__: kotlin.Int = 0

const val __PRINTFMAXARG: kotlin.Int = 0

const val __R_UNUSED: kotlin.Int = 0

val _dispatch_data_destructor_free: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */
    get() = TODO()

val _dispatch_data_destructor_munmap: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */
    get() = TODO()

val _xpc_bool_false: cnames.structs._xpc_bool_s
    get() = TODO()

val _xpc_bool_true: cnames.structs._xpc_bool_s
    get() = TODO()

val _xpc_error_connection_interrupted: cnames.structs._xpc_dictionary_s
    get() = TODO()

val _xpc_error_connection_invalid: cnames.structs._xpc_dictionary_s
    get() = TODO()

val _xpc_error_key_description: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
    get() = TODO()

val _xpc_error_termination_imminent: cnames.structs._xpc_dictionary_s
    get() = TODO()

val _xpc_event_key_name: kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?
    get() = TODO()

val _xpc_type_activity: cnames.structs._xpc_type_s
    get() = TODO()

val _xpc_type_array: cnames.structs._xpc_type_s
    get() = TODO()

val _xpc_type_bool: cnames.structs._xpc_type_s
    get() = TODO()

val _xpc_type_connection: cnames.structs._xpc_type_s
    get() = TODO()

val _xpc_type_data: cnames.structs._xpc_type_s
    get() = TODO()

val _xpc_type_date: cnames.structs._xpc_type_s
    get() = TODO()

val _xpc_type_dictionary: cnames.structs._xpc_type_s
    get() = TODO()

val _xpc_type_double: cnames.structs._xpc_type_s
    get() = TODO()

val _xpc_type_endpoint: cnames.structs._xpc_type_s
    get() = TODO()

val _xpc_type_error: cnames.structs._xpc_type_s
    get() = TODO()

val _xpc_type_fd: cnames.structs._xpc_type_s
    get() = TODO()

val _xpc_type_int64: cnames.structs._xpc_type_s
    get() = TODO()

val _xpc_type_null: cnames.structs._xpc_type_s
    get() = TODO()

val _xpc_type_shmem: cnames.structs._xpc_type_s
    get() = TODO()

val _xpc_type_string: cnames.structs._xpc_type_s
    get() = TODO()

val _xpc_type_uint64: cnames.structs._xpc_type_s
    get() = TODO()

val _xpc_type_uuid: cnames.structs._xpc_type_s
    get() = TODO()

val at_alpha_count: platform.darwin.at_alpha_t /* = kotlin.UInt */
    get() = TODO()

val at_alpha_not_premultiplied: platform.darwin.at_alpha_t /* = kotlin.UInt */
    get() = TODO()

val at_alpha_opaque: platform.darwin.at_alpha_t /* = kotlin.UInt */
    get() = TODO()

val at_alpha_premultiplied: platform.darwin.at_alpha_t /* = kotlin.UInt */
    get() = TODO()

val at_block_format_astc_10x10_ldr: platform.darwin.at_block_format_t /* = kotlin.ULong */
    get() = TODO()

val at_block_format_astc_10x5_ldr: platform.darwin.at_block_format_t /* = kotlin.ULong */
    get() = TODO()

val at_block_format_astc_10x6_ldr: platform.darwin.at_block_format_t /* = kotlin.ULong */
    get() = TODO()

val at_block_format_astc_10x8_ldr: platform.darwin.at_block_format_t /* = kotlin.ULong */
    get() = TODO()

val at_block_format_astc_12x10_ldr: platform.darwin.at_block_format_t /* = kotlin.ULong */
    get() = TODO()

val at_block_format_astc_12x12_ldr: platform.darwin.at_block_format_t /* = kotlin.ULong */
    get() = TODO()

val at_block_format_astc_4x4_ldr: platform.darwin.at_block_format_t /* = kotlin.ULong */
    get() = TODO()

val at_block_format_astc_5x4_ldr: platform.darwin.at_block_format_t /* = kotlin.ULong */
    get() = TODO()

val at_block_format_astc_5x5_ldr: platform.darwin.at_block_format_t /* = kotlin.ULong */
    get() = TODO()

val at_block_format_astc_6x5_ldr: platform.darwin.at_block_format_t /* = kotlin.ULong */
    get() = TODO()

val at_block_format_astc_6x6_ldr: platform.darwin.at_block_format_t /* = kotlin.ULong */
    get() = TODO()

val at_block_format_astc_8x5_ldr: platform.darwin.at_block_format_t /* = kotlin.ULong */
    get() = TODO()

val at_block_format_astc_8x6_ldr: platform.darwin.at_block_format_t /* = kotlin.ULong */
    get() = TODO()

val at_block_format_astc_8x8_ldr: platform.darwin.at_block_format_t /* = kotlin.ULong */
    get() = TODO()

val at_block_format_count: platform.darwin.at_block_format_t /* = kotlin.ULong */
    get() = TODO()

val at_block_format_invalid: platform.darwin.at_block_format_t /* = kotlin.ULong */
    get() = TODO()

val at_error_invalid_flag: platform.darwin.at_error_t /* = kotlin.Long */
    get() = TODO()

val at_error_invalid_parameter: platform.darwin.at_error_t /* = kotlin.Long */
    get() = TODO()

val at_error_invalid_source_data: platform.darwin.at_error_t /* = kotlin.Long */
    get() = TODO()

val at_error_operation_unsupported: platform.darwin.at_error_t /* = kotlin.Long */
    get() = TODO()

val at_error_success: platform.darwin.at_error_t /* = kotlin.Long */
    get() = TODO()

val at_flags_default: platform.darwin.at_flags_t /* = kotlin.ULong */
    get() = TODO()

val at_flags_disable_multithreading: platform.darwin.at_flags_t /* = kotlin.ULong */
    get() = TODO()

val at_flags_flip_texel_region_vertically: platform.darwin.at_flags_t /* = kotlin.ULong */
    get() = TODO()

val at_flags_print_debug_info: platform.darwin.at_flags_t /* = kotlin.ULong */
    get() = TODO()

val at_flags_skip_error_calculation: platform.darwin.at_flags_t /* = kotlin.ULong */
    get() = TODO()

val at_flags_skip_parameter_checking: platform.darwin.at_flags_t /* = kotlin.ULong */
    get() = TODO()

val at_flags_srgb_linear_texels: platform.darwin.at_flags_t /* = kotlin.ULong */
    get() = TODO()

val at_flags_weight_channels_equally: platform.darwin.at_flags_t /* = kotlin.ULong */
    get() = TODO()

val at_texel_format_bgra8_unorm: platform.darwin.at_texel_format_t /* = kotlin.ULong */
    get() = TODO()

val at_texel_format_count: platform.darwin.at_texel_format_t /* = kotlin.ULong */
    get() = TODO()

val at_texel_format_invalid: platform.darwin.at_texel_format_t /* = kotlin.ULong */
    get() = TODO()

val at_texel_format_l16_float: platform.darwin.at_texel_format_t /* = kotlin.ULong */
    get() = TODO()

val at_texel_format_l16_unorm: platform.darwin.at_texel_format_t /* = kotlin.ULong */
    get() = TODO()

val at_texel_format_l8_unorm: platform.darwin.at_texel_format_t /* = kotlin.ULong */
    get() = TODO()

val at_texel_format_la16_float: platform.darwin.at_texel_format_t /* = kotlin.ULong */
    get() = TODO()

val at_texel_format_la16_unorm: platform.darwin.at_texel_format_t /* = kotlin.ULong */
    get() = TODO()

val at_texel_format_la8_unorm: platform.darwin.at_texel_format_t /* = kotlin.ULong */
    get() = TODO()

val at_texel_format_rgba16_float: platform.darwin.at_texel_format_t /* = kotlin.ULong */
    get() = TODO()

val at_texel_format_rgba16_unorm: platform.darwin.at_texel_format_t /* = kotlin.ULong */
    get() = TODO()

val at_texel_format_rgba8_unorm: platform.darwin.at_texel_format_t /* = kotlin.ULong */
    get() = TODO()

var bootstrap_port: platform.darwin.mach_port_t /* = kotlin.UInt */
    get() = TODO()
    set(value: platform.darwin.mach_port_t /* = kotlin.UInt */) = TODO()

const val clock_priv_MSG_COUNT: kotlin.Int = 0

const val code_emask: kotlin.Int = 0

const val err_dipc: kotlin.Int = 0

const val err_ipc: kotlin.Int = 0

const val err_ipc_compat: kotlin.Int = 0

const val err_kern: kotlin.Int = 0

const val err_local: kotlin.Int = 0

const val err_mach_ipc: kotlin.Int = 0

const val err_max_system: kotlin.Int = 0

const val err_none: platform.darwin.mach_error_t /* = kotlin.Int */ = 0

const val err_server: kotlin.Int = 0

const val err_us: kotlin.Int = 0

const val host_priv_MSG_COUNT: kotlin.Int = 0

const val host_security_MSG_COUNT: kotlin.Int = 0

const val i386_EXCEPTION_STATE: kotlin.Int = 0

const val i386_EXCEPTION_STATE_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val i386_FLOAT_STATE: kotlin.Int = 0

const val i386_FLOAT_STATE_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val i386_THREAD_STATE: kotlin.Int = 0

const val i386_THREAD_STATE_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

val kAUBadParamErr: kotlin.Int
    get() = TODO()

val kAUCloseErr: kotlin.Int
    get() = TODO()

val kAULastErr: kotlin.Int
    get() = TODO()

val kAUMakeReturnTokErr: kotlin.Int
    get() = TODO()

val kAUMakeSubjectTokErr: kotlin.Int
    get() = TODO()

val kAUMakeTextTokErr: kotlin.Int
    get() = TODO()

val kAUNoErr: kotlin.Int
    get() = TODO()

val kAUOpenErr: kotlin.Int
    get() = TODO()

val kAUStatErr: kotlin.Int
    get() = TODO()

val kAUSysctlErr: kotlin.Int
    get() = TODO()

val kAUWriteCallerTokErr: kotlin.Int
    get() = TODO()

val kAUWriteReturnTokErr: kotlin.Int
    get() = TODO()

val kAUWriteSubjectTokErr: kotlin.Int
    get() = TODO()

const val kDNSServiceInterfaceIndexAny: kotlin.Int = 0

const val kDNSServiceInterfaceIndexBLE: platform.posix.uint32_t /* = kotlin.UInt */ = 0u

const val kDNSServiceInterfaceIndexLocalOnly: platform.posix.uint32_t /* = kotlin.UInt */ = 0u

const val kDNSServiceInterfaceIndexP2P: platform.posix.uint32_t /* = kotlin.UInt */ = 0u

const val kDNSServiceInterfaceIndexUnicast: platform.posix.uint32_t /* = kotlin.UInt */ = 0u

const val kDNSServiceMaxDomainName: kotlin.Int = 0

const val kDNSServiceMaxServiceName: kotlin.Int = 0

const val kDNSServiceOutputFlags: kotlin.Int = 0

val kGUARD_EXC_DEALLOC_GAP: platform.darwin.virtual_memory_guard_exception_codes /* = kotlin.UInt */
    get() = TODO()

val kGUARD_EXC_DESTROY: platform.darwin.mach_port_guard_exception_codes /* = kotlin.UInt */
    get() = TODO()

val kGUARD_EXC_INCORRECT_GUARD: platform.darwin.mach_port_guard_exception_codes /* = kotlin.UInt */
    get() = TODO()

val kGUARD_EXC_INVALID_ARGUMENT: platform.darwin.mach_port_guard_exception_codes /* = kotlin.UInt */
    get() = TODO()

val kGUARD_EXC_INVALID_NAME: platform.darwin.mach_port_guard_exception_codes /* = kotlin.UInt */
    get() = TODO()

val kGUARD_EXC_INVALID_RIGHT: platform.darwin.mach_port_guard_exception_codes /* = kotlin.UInt */
    get() = TODO()

val kGUARD_EXC_INVALID_VALUE: platform.darwin.mach_port_guard_exception_codes /* = kotlin.UInt */
    get() = TODO()

val kGUARD_EXC_KERN_FAILURE: platform.darwin.mach_port_guard_exception_codes /* = kotlin.UInt */
    get() = TODO()

val kGUARD_EXC_KERN_NO_SPACE: platform.darwin.mach_port_guard_exception_codes /* = kotlin.UInt */
    get() = TODO()

val kGUARD_EXC_KERN_RESOURCE: platform.darwin.mach_port_guard_exception_codes /* = kotlin.UInt */
    get() = TODO()

val kGUARD_EXC_MOD_REFS: platform.darwin.mach_port_guard_exception_codes /* = kotlin.UInt */
    get() = TODO()

val kGUARD_EXC_RCV_INVALID_NAME: platform.darwin.mach_port_guard_exception_codes /* = kotlin.UInt */
    get() = TODO()

val kGUARD_EXC_RCV_INVALID_NOTIFY: platform.darwin.mach_port_guard_exception_codes /* = kotlin.UInt */
    get() = TODO()

val kGUARD_EXC_RIGHT_EXISTS: platform.darwin.mach_port_guard_exception_codes /* = kotlin.UInt */
    get() = TODO()

val kGUARD_EXC_SEND_INVALID_REPLY: platform.darwin.mach_port_guard_exception_codes /* = kotlin.UInt */
    get() = TODO()

val kGUARD_EXC_SEND_INVALID_RIGHT: platform.darwin.mach_port_guard_exception_codes /* = kotlin.UInt */
    get() = TODO()

val kGUARD_EXC_SEND_INVALID_VOUCHER: platform.darwin.mach_port_guard_exception_codes /* = kotlin.UInt */
    get() = TODO()

val kGUARD_EXC_SET_CONTEXT: platform.darwin.mach_port_guard_exception_codes /* = kotlin.UInt */
    get() = TODO()

val kGUARD_EXC_UNGUARDED: platform.darwin.mach_port_guard_exception_codes /* = kotlin.UInt */
    get() = TODO()

const val kInvalidID: kotlin.Int = 0

val kSBXProfileNoInternet: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
    get() = TODO()

val kSBXProfileNoNetwork: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
    get() = TODO()

val kSBXProfileNoWrite: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
    get() = TODO()

val kSBXProfileNoWriteExceptTemporary: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
    get() = TODO()

val kSBXProfilePureComputation: kotlinx.cinterop.CArrayPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>> */
    get() = TODO()

const val lock_set_MSG_COUNT: kotlin.Int = 0

const val mach_host_MSG_COUNT: kotlin.Int = 0

const val mach_port_MSG_COUNT: kotlin.Int = 0

var mach_task_self_: platform.darwin.mach_port_t /* = kotlin.UInt */
    get() = TODO()
    set(value: platform.darwin.mach_port_t /* = kotlin.UInt */) = TODO()

const val processor_MSG_COUNT: kotlin.Int = 0

const val processor_set_MSG_COUNT: kotlin.Int = 0

const val sub_emask: kotlin.Int = 0

const val system_emask: kotlin.Int = 0

const val task_MSG_COUNT: kotlin.Int = 0

const val thread_act_MSG_COUNT: kotlin.Int = 0

var vm_kernel_page_mask: platform.darwin.vm_size_t /* = kotlin.ULong */
    get() = TODO()
    set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

var vm_kernel_page_shift: kotlin.Int
    get() = TODO()
    set(value: kotlin.Int) = TODO()

var vm_kernel_page_size: platform.darwin.vm_size_t /* = kotlin.ULong */
    get() = TODO()
    set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

const val vm_map_MSG_COUNT: kotlin.Int = 0

var vm_page_mask: platform.darwin.vm_size_t /* = kotlin.ULong */
    get() = TODO()
    set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

var vm_page_shift: kotlin.Int
    get() = TODO()
    set(value: kotlin.Int) = TODO()

var vm_page_size: platform.darwin.vm_size_t /* = kotlin.ULong */
    get() = TODO()
    set(value: platform.darwin.vm_size_t /* = kotlin.ULong */) = TODO()

var vprintf_stderr_func: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, platform.posix.va_list? /* = kotlinx.cinterop.CPointer<platform.posix.__va_list_tag>? */) -> kotlin.Int>>?
    get() = TODO()
    set(value: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, platform.posix.va_list? /* = kotlinx.cinterop.CPointer<platform.posix.__va_list_tag>? */) -> kotlin.Int>>?) = TODO()

const val x86_AVX512_STATE: kotlin.Int = 0

const val x86_AVX512_STATE32: kotlin.Int = 0

const val x86_AVX512_STATE32_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val x86_AVX512_STATE64: kotlin.Int = 0

const val x86_AVX512_STATE64_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val x86_AVX512_STATE_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val x86_AVX_STATE: kotlin.Int = 0

const val x86_AVX_STATE32: kotlin.Int = 0

const val x86_AVX_STATE32_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val x86_AVX_STATE64: kotlin.Int = 0

const val x86_AVX_STATE64_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val x86_AVX_STATE_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val x86_DEBUG_STATE: kotlin.Int = 0

const val x86_DEBUG_STATE32: kotlin.Int = 0

const val x86_DEBUG_STATE32_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val x86_DEBUG_STATE64: kotlin.Int = 0

const val x86_DEBUG_STATE64_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val x86_DEBUG_STATE_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val x86_EXCEPTION_STATE: kotlin.Int = 0

const val x86_EXCEPTION_STATE32: kotlin.Int = 0

const val x86_EXCEPTION_STATE32_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val x86_EXCEPTION_STATE64: kotlin.Int = 0

const val x86_EXCEPTION_STATE64_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val x86_EXCEPTION_STATE_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val x86_FLOAT_STATE: kotlin.Int = 0

const val x86_FLOAT_STATE32: kotlin.Int = 0

const val x86_FLOAT_STATE32_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val x86_FLOAT_STATE64: kotlin.Int = 0

const val x86_FLOAT_STATE64_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val x86_FLOAT_STATE_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val x86_THREAD_STATE: kotlin.Int = 0

const val x86_THREAD_STATE32: kotlin.Int = 0

const val x86_THREAD_STATE32_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val x86_THREAD_STATE64: kotlin.Int = 0

const val x86_THREAD_STATE64_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

const val x86_THREAD_STATE_COUNT: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */ = 0u

fun BZ2_bzBuffToBuffCompress(/*0*/ dest: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ destLen: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVar /* = kotlinx.cinterop.UIntVarOf<kotlin.UInt> */>?, /*2*/ source: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*3*/ sourceLen: kotlin.UInt, /*4*/ blockSize100k: kotlin.Int, /*5*/ verbosity: kotlin.Int, /*6*/ workFactor: kotlin.Int): kotlin.Int { TODO() }

fun BZ2_bzBuffToBuffDecompress(/*0*/ dest: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ destLen: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVar /* = kotlinx.cinterop.UIntVarOf<kotlin.UInt> */>?, /*2*/ source: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*3*/ sourceLen: kotlin.UInt, /*4*/ small: kotlin.Int, /*5*/ verbosity: kotlin.Int): kotlin.Int { TODO() }

fun BZ2_bzRead(/*0*/ bzerror: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?, /*1*/ b: kotlinx.cinterop.CValuesRef<*>?, /*2*/ buf: kotlinx.cinterop.CValuesRef<*>?, /*3*/ len: kotlin.Int): kotlin.Int { TODO() }

fun BZ2_bzReadClose(/*0*/ bzerror: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?, /*1*/ b: kotlinx.cinterop.CValuesRef<*>?) { TODO() }

fun BZ2_bzReadGetUnused(/*0*/ bzerror: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?, /*1*/ b: kotlinx.cinterop.CValuesRef<*>?, /*2*/ unused: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?, /*3*/ nUnused: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?) { TODO() }

fun BZ2_bzReadOpen(/*0*/ bzerror: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?, /*1*/ f: kotlinx.cinterop.CValuesRef<platform.posix.FILE /* = platform.posix.__sFILE */>?, /*2*/ verbosity: kotlin.Int, /*3*/ small: kotlin.Int, /*4*/ unused: kotlinx.cinterop.CValuesRef<*>?, /*5*/ nUnused: kotlin.Int): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun BZ2_bzWrite(/*0*/ bzerror: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?, /*1*/ b: kotlinx.cinterop.CValuesRef<*>?, /*2*/ buf: kotlinx.cinterop.CValuesRef<*>?, /*3*/ len: kotlin.Int) { TODO() }

fun BZ2_bzWriteClose(/*0*/ bzerror: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?, /*1*/ b: kotlinx.cinterop.CValuesRef<*>?, /*2*/ abandon: kotlin.Int, /*3*/ nbytes_in: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVar /* = kotlinx.cinterop.UIntVarOf<kotlin.UInt> */>?, /*4*/ nbytes_out: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVar /* = kotlinx.cinterop.UIntVarOf<kotlin.UInt> */>?) { TODO() }

fun BZ2_bzWriteClose64(/*0*/ bzerror: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?, /*1*/ b: kotlinx.cinterop.CValuesRef<*>?, /*2*/ abandon: kotlin.Int, /*3*/ nbytes_in_lo32: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVar /* = kotlinx.cinterop.UIntVarOf<kotlin.UInt> */>?, /*4*/ nbytes_in_hi32: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVar /* = kotlinx.cinterop.UIntVarOf<kotlin.UInt> */>?, /*5*/ nbytes_out_lo32: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVar /* = kotlinx.cinterop.UIntVarOf<kotlin.UInt> */>?, /*6*/ nbytes_out_hi32: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVar /* = kotlinx.cinterop.UIntVarOf<kotlin.UInt> */>?) { TODO() }

fun BZ2_bzWriteOpen(/*0*/ bzerror: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?, /*1*/ f: kotlinx.cinterop.CValuesRef<platform.posix.FILE /* = platform.posix.__sFILE */>?, /*2*/ blockSize100k: kotlin.Int, /*3*/ verbosity: kotlin.Int, /*4*/ workFactor: kotlin.Int): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun BZ2_bzdopen(/*0*/ fd: kotlin.Int, /*1*/ mode: kotlin.String?): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun BZ2_bzerror(/*0*/ b: kotlinx.cinterop.CValuesRef<*>?, /*1*/ errnum: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun BZ2_bzlibVersion(): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun BZ2_bzopen(/*0*/ path: kotlin.String?, /*1*/ mode: kotlin.String?): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun DNSServiceAddRecord(/*0*/ sdRef: platform.darwin.DNSServiceRef? /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t>? */, /*1*/ RecordRef: kotlinx.cinterop.CValuesRef<platform.darwin.DNSRecordRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSRecordRef /* = kotlinx.cinterop.CPointer<cnames.structs._DNSRecordRef_t> */> */>?, /*2*/ flags: platform.darwin.DNSServiceFlags /* = kotlin.UInt */, /*3*/ rrtype: platform.posix.uint16_t /* = kotlin.UShort */, /*4*/ rdlen: platform.posix.uint16_t /* = kotlin.UShort */, /*5*/ rdata: kotlinx.cinterop.CValuesRef<*>?, /*6*/ ttl: platform.posix.uint32_t /* = kotlin.UInt */): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun DNSServiceBrowse(/*0*/ sdRef: kotlinx.cinterop.CValuesRef<platform.darwin.DNSServiceRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSServiceRef /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t> */> */>?, /*1*/ flags: platform.darwin.DNSServiceFlags /* = kotlin.UInt */, /*2*/ interfaceIndex: platform.posix.uint32_t /* = kotlin.UInt */, /*3*/ regtype: kotlin.String?, /*4*/ domain: kotlin.String?, /*5*/ callBack: platform.darwin.DNSServiceBrowseReply? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.DNSServiceRef? /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t>? */, platform.darwin.DNSServiceFlags /* = kotlin.UInt */, platform.posix.uint32_t /* = kotlin.UInt */, platform.darwin.DNSServiceErrorType /* = kotlin.Int */, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*6*/ context: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun DNSServiceConstructFullName(/*0*/ fullName: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ service: kotlin.String?, /*2*/ regtype: kotlin.String?, /*3*/ domain: kotlin.String?): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun DNSServiceCreateConnection(/*0*/ sdRef: kotlinx.cinterop.CValuesRef<platform.darwin.DNSServiceRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSServiceRef /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t> */> */>?): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun DNSServiceEnumerateDomains(/*0*/ sdRef: kotlinx.cinterop.CValuesRef<platform.darwin.DNSServiceRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSServiceRef /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t> */> */>?, /*1*/ flags: platform.darwin.DNSServiceFlags /* = kotlin.UInt */, /*2*/ interfaceIndex: platform.posix.uint32_t /* = kotlin.UInt */, /*3*/ callBack: platform.darwin.DNSServiceDomainEnumReply? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.DNSServiceRef? /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t>? */, platform.darwin.DNSServiceFlags /* = kotlin.UInt */, platform.posix.uint32_t /* = kotlin.UInt */, platform.darwin.DNSServiceErrorType /* = kotlin.Int */, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*4*/ context: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun DNSServiceGetAddrInfo(/*0*/ sdRef: kotlinx.cinterop.CValuesRef<platform.darwin.DNSServiceRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSServiceRef /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t> */> */>?, /*1*/ flags: platform.darwin.DNSServiceFlags /* = kotlin.UInt */, /*2*/ interfaceIndex: platform.posix.uint32_t /* = kotlin.UInt */, /*3*/ protocol: platform.darwin.DNSServiceProtocol /* = kotlin.UInt */, /*4*/ hostname: kotlin.String?, /*5*/ callBack: platform.darwin.DNSServiceGetAddrInfoReply? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.DNSServiceRef? /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t>? */, platform.darwin.DNSServiceFlags /* = kotlin.UInt */, platform.posix.uint32_t /* = kotlin.UInt */, platform.darwin.DNSServiceErrorType /* = kotlin.Int */, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<platform.posix.sockaddr>?, platform.posix.uint32_t /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*6*/ context: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun DNSServiceGetProperty(/*0*/ property: kotlin.String?, /*1*/ result: kotlinx.cinterop.CValuesRef<*>?, /*2*/ size: kotlinx.cinterop.CValuesRef<platform.posix.uint32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.uint32_t /* = kotlin.UInt */> */>?): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun DNSServiceNATPortMappingCreate(/*0*/ sdRef: kotlinx.cinterop.CValuesRef<platform.darwin.DNSServiceRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSServiceRef /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t> */> */>?, /*1*/ flags: platform.darwin.DNSServiceFlags /* = kotlin.UInt */, /*2*/ interfaceIndex: platform.posix.uint32_t /* = kotlin.UInt */, /*3*/ protocol: platform.darwin.DNSServiceProtocol /* = kotlin.UInt */, /*4*/ internalPort: platform.posix.uint16_t /* = kotlin.UShort */, /*5*/ externalPort: platform.posix.uint16_t /* = kotlin.UShort */, /*6*/ ttl: platform.posix.uint32_t /* = kotlin.UInt */, /*7*/ callBack: platform.darwin.DNSServiceNATPortMappingReply? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.DNSServiceRef? /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t>? */, platform.darwin.DNSServiceFlags /* = kotlin.UInt */, platform.posix.uint32_t /* = kotlin.UInt */, platform.darwin.DNSServiceErrorType /* = kotlin.Int */, platform.posix.uint32_t /* = kotlin.UInt */, platform.darwin.DNSServiceProtocol /* = kotlin.UInt */, platform.posix.uint16_t /* = kotlin.UShort */, platform.posix.uint16_t /* = kotlin.UShort */, platform.posix.uint32_t /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*8*/ context: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun DNSServiceProcessResult(/*0*/ sdRef: platform.darwin.DNSServiceRef? /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t>? */): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun DNSServiceQueryRecord(/*0*/ sdRef: kotlinx.cinterop.CValuesRef<platform.darwin.DNSServiceRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSServiceRef /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t> */> */>?, /*1*/ flags: platform.darwin.DNSServiceFlags /* = kotlin.UInt */, /*2*/ interfaceIndex: platform.posix.uint32_t /* = kotlin.UInt */, /*3*/ fullname: kotlin.String?, /*4*/ rrtype: platform.posix.uint16_t /* = kotlin.UShort */, /*5*/ rrclass: platform.posix.uint16_t /* = kotlin.UShort */, /*6*/ callBack: platform.darwin.DNSServiceQueryRecordReply? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.DNSServiceRef? /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t>? */, platform.darwin.DNSServiceFlags /* = kotlin.UInt */, platform.posix.uint32_t /* = kotlin.UInt */, platform.darwin.DNSServiceErrorType /* = kotlin.Int */, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, platform.posix.uint16_t /* = kotlin.UShort */, platform.posix.uint16_t /* = kotlin.UShort */, platform.posix.uint16_t /* = kotlin.UShort */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.posix.uint32_t /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*7*/ context: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun DNSServiceReconfirmRecord(/*0*/ flags: platform.darwin.DNSServiceFlags /* = kotlin.UInt */, /*1*/ interfaceIndex: platform.posix.uint32_t /* = kotlin.UInt */, /*2*/ fullname: kotlin.String?, /*3*/ rrtype: platform.posix.uint16_t /* = kotlin.UShort */, /*4*/ rrclass: platform.posix.uint16_t /* = kotlin.UShort */, /*5*/ rdlen: platform.posix.uint16_t /* = kotlin.UShort */, /*6*/ rdata: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun DNSServiceRefDeallocate(/*0*/ sdRef: platform.darwin.DNSServiceRef? /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t>? */) { TODO() }

fun DNSServiceRefSockFD(/*0*/ sdRef: platform.darwin.DNSServiceRef? /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t>? */): platform.darwin.dnssd_sock_t /* = kotlin.Int */ { TODO() }

fun DNSServiceRegister(/*0*/ sdRef: kotlinx.cinterop.CValuesRef<platform.darwin.DNSServiceRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSServiceRef /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t> */> */>?, /*1*/ flags: platform.darwin.DNSServiceFlags /* = kotlin.UInt */, /*2*/ interfaceIndex: platform.posix.uint32_t /* = kotlin.UInt */, /*3*/ name: kotlin.String?, /*4*/ regtype: kotlin.String?, /*5*/ domain: kotlin.String?, /*6*/ host: kotlin.String?, /*7*/ port: platform.posix.uint16_t /* = kotlin.UShort */, /*8*/ txtLen: platform.posix.uint16_t /* = kotlin.UShort */, /*9*/ txtRecord: kotlinx.cinterop.CValuesRef<*>?, /*10*/ callBack: platform.darwin.DNSServiceRegisterReply? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.DNSServiceRef? /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t>? */, platform.darwin.DNSServiceFlags /* = kotlin.UInt */, platform.darwin.DNSServiceErrorType /* = kotlin.Int */, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*11*/ context: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun DNSServiceRegisterRecord(/*0*/ sdRef: platform.darwin.DNSServiceRef? /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t>? */, /*1*/ RecordRef: kotlinx.cinterop.CValuesRef<platform.darwin.DNSRecordRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSRecordRef /* = kotlinx.cinterop.CPointer<cnames.structs._DNSRecordRef_t> */> */>?, /*2*/ flags: platform.darwin.DNSServiceFlags /* = kotlin.UInt */, /*3*/ interfaceIndex: platform.posix.uint32_t /* = kotlin.UInt */, /*4*/ fullname: kotlin.String?, /*5*/ rrtype: platform.posix.uint16_t /* = kotlin.UShort */, /*6*/ rrclass: platform.posix.uint16_t /* = kotlin.UShort */, /*7*/ rdlen: platform.posix.uint16_t /* = kotlin.UShort */, /*8*/ rdata: kotlinx.cinterop.CValuesRef<*>?, /*9*/ ttl: platform.posix.uint32_t /* = kotlin.UInt */, /*10*/ callBack: platform.darwin.DNSServiceRegisterRecordReply? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.DNSServiceRef? /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t>? */, platform.darwin.DNSRecordRef? /* = kotlinx.cinterop.CPointer<cnames.structs._DNSRecordRef_t>? */, platform.darwin.DNSServiceFlags /* = kotlin.UInt */, platform.darwin.DNSServiceErrorType /* = kotlin.Int */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*11*/ context: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun DNSServiceRemoveRecord(/*0*/ sdRef: platform.darwin.DNSServiceRef? /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t>? */, /*1*/ RecordRef: platform.darwin.DNSRecordRef? /* = kotlinx.cinterop.CPointer<cnames.structs._DNSRecordRef_t>? */, /*2*/ flags: platform.darwin.DNSServiceFlags /* = kotlin.UInt */): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun DNSServiceResolve(/*0*/ sdRef: kotlinx.cinterop.CValuesRef<platform.darwin.DNSServiceRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSServiceRef /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t> */> */>?, /*1*/ flags: platform.darwin.DNSServiceFlags /* = kotlin.UInt */, /*2*/ interfaceIndex: platform.posix.uint32_t /* = kotlin.UInt */, /*3*/ name: kotlin.String?, /*4*/ regtype: kotlin.String?, /*5*/ domain: kotlin.String?, /*6*/ callBack: platform.darwin.DNSServiceResolveReply? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.DNSServiceRef? /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t>? */, platform.darwin.DNSServiceFlags /* = kotlin.UInt */, platform.posix.uint32_t /* = kotlin.UInt */, platform.darwin.DNSServiceErrorType /* = kotlin.Int */, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, platform.posix.uint16_t /* = kotlin.UShort */, platform.posix.uint16_t /* = kotlin.UShort */, kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>?, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*7*/ context: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun DNSServiceSetDispatchQueue(/*0*/ service: platform.darwin.DNSServiceRef? /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t>? */, /*1*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun DNSServiceSleepKeepalive(/*0*/ sdRef: kotlinx.cinterop.CValuesRef<platform.darwin.DNSServiceRefVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.DNSServiceRef /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t> */> */>?, /*1*/ flags: platform.darwin.DNSServiceFlags /* = kotlin.UInt */, /*2*/ fd: kotlin.Int, /*3*/ timeout: kotlin.UInt, /*4*/ callBack: platform.darwin.DNSServiceSleepKeepaliveReply? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.DNSServiceRef? /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t>? */, platform.darwin.DNSServiceErrorType /* = kotlin.Int */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*5*/ context: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun DNSServiceUpdateRecord(/*0*/ sdRef: platform.darwin.DNSServiceRef? /* = kotlinx.cinterop.CPointer<cnames.structs._DNSServiceRef_t>? */, /*1*/ RecordRef: platform.darwin.DNSRecordRef? /* = kotlinx.cinterop.CPointer<cnames.structs._DNSRecordRef_t>? */, /*2*/ flags: platform.darwin.DNSServiceFlags /* = kotlin.UInt */, /*3*/ rdlen: platform.posix.uint16_t /* = kotlin.UShort */, /*4*/ rdata: kotlinx.cinterop.CValuesRef<*>?, /*5*/ ttl: platform.posix.uint32_t /* = kotlin.UInt */): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun DebugStr(/*0*/ debuggerMsg: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */) { TODO() }

fun Debugger() { TODO() }

fun NXConvertHostDoubleToSwapped(/*0*/ x: kotlin.Double): platform.darwin.NXSwappedDouble /* = kotlin.ULong */ { TODO() }

fun NXConvertHostFloatToSwapped(/*0*/ x: kotlin.Float): platform.darwin.NXSwappedFloat /* = kotlin.ULong */ { TODO() }

fun NXConvertSwappedDoubleToHost(/*0*/ x: platform.darwin.NXSwappedDouble /* = kotlin.ULong */): kotlin.Double { TODO() }

fun NXConvertSwappedFloatToHost(/*0*/ x: platform.darwin.NXSwappedFloat /* = kotlin.ULong */): kotlin.Float { TODO() }

fun NXSwapBigDoubleToHost(/*0*/ x: platform.darwin.NXSwappedDouble /* = kotlin.ULong */): kotlin.Double { TODO() }

fun NXSwapBigFloatToHost(/*0*/ x: platform.darwin.NXSwappedFloat /* = kotlin.ULong */): kotlin.Float { TODO() }

fun NXSwapDouble(/*0*/ x: platform.darwin.NXSwappedDouble /* = kotlin.ULong */): platform.darwin.NXSwappedDouble /* = kotlin.ULong */ { TODO() }

fun NXSwapFloat(/*0*/ x: platform.darwin.NXSwappedFloat /* = kotlin.ULong */): platform.darwin.NXSwappedFloat /* = kotlin.ULong */ { TODO() }

fun NXSwapHostDoubleToBig(/*0*/ x: kotlin.Double): platform.darwin.NXSwappedDouble /* = kotlin.ULong */ { TODO() }

fun NXSwapHostDoubleToLittle(/*0*/ x: kotlin.Double): platform.darwin.NXSwappedDouble /* = kotlin.ULong */ { TODO() }

fun NXSwapHostFloatToBig(/*0*/ x: kotlin.Float): platform.darwin.NXSwappedFloat /* = kotlin.ULong */ { TODO() }

fun NXSwapHostFloatToLittle(/*0*/ x: kotlin.Float): platform.darwin.NXSwappedFloat /* = kotlin.ULong */ { TODO() }

fun NXSwapLittleDoubleToHost(/*0*/ x: platform.darwin.NXSwappedDouble /* = kotlin.ULong */): kotlin.Double { TODO() }

fun NXSwapLittleFloatToHost(/*0*/ x: platform.darwin.NXSwappedFloat /* = kotlin.ULong */): kotlin.Float { TODO() }

fun OSHostByteOrder(): platform.posix.int32_t /* = kotlin.Int */ { TODO() }

fun OSReadSwapInt16(/*0*/ base: kotlinx.cinterop.CValuesRef<*>?, /*1*/ byteOffset: platform.posix.uintptr_t /* = kotlin.ULong */): platform.posix.uint16_t /* = kotlin.UShort */ { TODO() }

fun OSReadSwapInt32(/*0*/ base: kotlinx.cinterop.CValuesRef<*>?, /*1*/ byteOffset: platform.posix.uintptr_t /* = kotlin.ULong */): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun OSReadSwapInt64(/*0*/ base: kotlinx.cinterop.CValuesRef<*>?, /*1*/ byteOffset: platform.posix.uintptr_t /* = kotlin.ULong */): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun OSWriteSwapInt16(/*0*/ base: kotlinx.cinterop.CValuesRef<*>?, /*1*/ byteOffset: platform.posix.uintptr_t /* = kotlin.ULong */, /*2*/ data: platform.posix.uint16_t /* = kotlin.UShort */) { TODO() }

fun OSWriteSwapInt32(/*0*/ base: kotlinx.cinterop.CValuesRef<*>?, /*1*/ byteOffset: platform.posix.uintptr_t /* = kotlin.ULong */, /*2*/ data: platform.posix.uint32_t /* = kotlin.UInt */) { TODO() }

fun OSWriteSwapInt64(/*0*/ base: kotlinx.cinterop.CValuesRef<*>?, /*1*/ byteOffset: platform.posix.uintptr_t /* = kotlin.ULong */, /*2*/ data: platform.posix.uint64_t /* = kotlin.ULong */) { TODO() }

fun PeerConnectionRelease(/*0*/ flags: platform.darwin.DNSServiceFlags /* = kotlin.UInt */, /*1*/ name: kotlin.String?, /*2*/ regtype: kotlin.String?, /*3*/ domain: kotlin.String?): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun SysBreak() { TODO() }

fun SysBreakFunc(/*0*/ debuggerMsg: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */) { TODO() }

fun SysBreakStr(/*0*/ debuggerMsg: platform.darwin.ConstStr255Param? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>? */) { TODO() }

fun TXTRecordContainsKey(/*0*/ txtLen: platform.posix.uint16_t /* = kotlin.UShort */, /*1*/ txtRecord: kotlinx.cinterop.CValuesRef<*>?, /*2*/ key: kotlin.String?): kotlin.Int { TODO() }

fun TXTRecordCreate(/*0*/ txtRecord: kotlinx.cinterop.CValuesRef<platform.darwin.TXTRecordRef /* = platform.darwin._TXTRecordRef_t */>?, /*1*/ bufferLen: platform.posix.uint16_t /* = kotlin.UShort */, /*2*/ buffer: kotlinx.cinterop.CValuesRef<*>?) { TODO() }

fun TXTRecordGetBytesPtr(/*0*/ txtRecord: kotlinx.cinterop.CValuesRef<platform.darwin.TXTRecordRef /* = platform.darwin._TXTRecordRef_t */>?): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun TXTRecordGetCount(/*0*/ txtLen: platform.posix.uint16_t /* = kotlin.UShort */, /*1*/ txtRecord: kotlinx.cinterop.CValuesRef<*>?): platform.posix.uint16_t /* = kotlin.UShort */ { TODO() }

fun TXTRecordGetItemAtIndex(/*0*/ txtLen: platform.posix.uint16_t /* = kotlin.UShort */, /*1*/ txtRecord: kotlinx.cinterop.CValuesRef<*>?, /*2*/ itemIndex: platform.posix.uint16_t /* = kotlin.UShort */, /*3*/ keyBufLen: platform.posix.uint16_t /* = kotlin.UShort */, /*4*/ key: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*5*/ valueLen: kotlinx.cinterop.CValuesRef<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>?, /*6*/ value: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun TXTRecordGetLength(/*0*/ txtRecord: kotlinx.cinterop.CValuesRef<platform.darwin.TXTRecordRef /* = platform.darwin._TXTRecordRef_t */>?): platform.posix.uint16_t /* = kotlin.UShort */ { TODO() }

fun TXTRecordGetValuePtr(/*0*/ txtLen: platform.posix.uint16_t /* = kotlin.UShort */, /*1*/ txtRecord: kotlinx.cinterop.CValuesRef<*>?, /*2*/ key: kotlin.String?, /*3*/ valueLen: kotlinx.cinterop.CValuesRef<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>?): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun TXTRecordRemoveValue(/*0*/ txtRecord: kotlinx.cinterop.CValuesRef<platform.darwin.TXTRecordRef /* = platform.darwin._TXTRecordRef_t */>?, /*1*/ key: kotlin.String?): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun TXTRecordSetValue(/*0*/ txtRecord: kotlinx.cinterop.CValuesRef<platform.darwin.TXTRecordRef /* = platform.darwin._TXTRecordRef_t */>?, /*1*/ key: kotlin.String?, /*2*/ valueSize: platform.posix.uint8_t /* = kotlin.UByte */, /*3*/ value: kotlinx.cinterop.CValuesRef<*>?): platform.darwin.DNSServiceErrorType /* = kotlin.Int */ { TODO() }

fun _Block_copy(/*0*/ aBlock: kotlinx.cinterop.CValuesRef<*>?): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun _OSReadInt16(/*0*/ base: kotlinx.cinterop.CValuesRef<*>?, /*1*/ byteOffset: platform.posix.uintptr_t /* = kotlin.ULong */): platform.posix.uint16_t /* = kotlin.UShort */ { TODO() }

fun _OSReadInt32(/*0*/ base: kotlinx.cinterop.CValuesRef<*>?, /*1*/ byteOffset: platform.posix.uintptr_t /* = kotlin.ULong */): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun _OSReadInt64(/*0*/ base: kotlinx.cinterop.CValuesRef<*>?, /*1*/ byteOffset: platform.posix.uintptr_t /* = kotlin.ULong */): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun _OSWriteInt16(/*0*/ base: kotlinx.cinterop.CValuesRef<*>?, /*1*/ byteOffset: platform.posix.uintptr_t /* = kotlin.ULong */, /*2*/ data: platform.posix.uint16_t /* = kotlin.UShort */) { TODO() }

fun _OSWriteInt32(/*0*/ base: kotlinx.cinterop.CValuesRef<*>?, /*1*/ byteOffset: platform.posix.uintptr_t /* = kotlin.ULong */, /*2*/ data: platform.posix.uint32_t /* = kotlin.UInt */) { TODO() }

fun _OSWriteInt64(/*0*/ base: kotlinx.cinterop.CValuesRef<*>?, /*1*/ byteOffset: platform.posix.uintptr_t /* = kotlin.ULong */, /*2*/ data: platform.posix.uint64_t /* = kotlin.ULong */) { TODO() }

fun _Unwind_Backtrace(/*0*/ arg0: platform.darwin._Unwind_Trace_Fn? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<cnames.structs._Unwind_Context>?, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin._Unwind_Reason_Code /* = kotlin.UInt */>>? */, /*1*/ arg1: kotlinx.cinterop.CValuesRef<*>?): platform.darwin._Unwind_Reason_Code /* = kotlin.UInt */ { TODO() }

fun _Unwind_FindEnclosingFunction(/*0*/ pc: kotlinx.cinterop.CValuesRef<*>?): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun _Unwind_Find_FDE(/*0*/ pc: kotlinx.cinterop.CValuesRef<*>?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<platform.darwin.dwarf_eh_bases>?): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun _Unwind_ForcedUnwind(/*0*/ exception_object: kotlinx.cinterop.CValuesRef<platform.darwin._Unwind_Exception>?, /*1*/ stop: platform.darwin._Unwind_Stop_Fn? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlin.Int, platform.darwin._Unwind_Action /* = kotlin.UInt */, platform.posix.uint64_t /* = kotlin.ULong */, kotlinx.cinterop.CPointer<platform.darwin._Unwind_Exception>?, kotlinx.cinterop.CPointer<cnames.structs._Unwind_Context>?, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> platform.darwin._Unwind_Reason_Code /* = kotlin.UInt */>>? */, /*2*/ stop_parameter: kotlinx.cinterop.CValuesRef<*>?): platform.darwin._Unwind_Reason_Code /* = kotlin.UInt */ { TODO() }

fun _Unwind_GetCFA(/*0*/ arg0: kotlinx.cinterop.CValuesRef<cnames.structs._Unwind_Context>?): platform.posix.uintptr_t /* = kotlin.ULong */ { TODO() }

fun _Unwind_GetGR(/*0*/ context: kotlinx.cinterop.CValuesRef<cnames.structs._Unwind_Context>?, /*1*/ index: kotlin.Int): platform.posix.uintptr_t /* = kotlin.ULong */ { TODO() }

fun _Unwind_GetIP(/*0*/ context: kotlinx.cinterop.CValuesRef<cnames.structs._Unwind_Context>?): platform.posix.uintptr_t /* = kotlin.ULong */ { TODO() }

fun _Unwind_GetIPInfo(/*0*/ context: kotlinx.cinterop.CValuesRef<cnames.structs._Unwind_Context>?, /*1*/ ipBefore: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): platform.posix.uintptr_t /* = kotlin.ULong */ { TODO() }

fun _Unwind_GetLanguageSpecificData(/*0*/ context: kotlinx.cinterop.CValuesRef<cnames.structs._Unwind_Context>?): platform.posix.uintptr_t /* = kotlin.ULong */ { TODO() }

fun _Unwind_GetRegionStart(/*0*/ context: kotlinx.cinterop.CValuesRef<cnames.structs._Unwind_Context>?): platform.posix.uintptr_t /* = kotlin.ULong */ { TODO() }

fun _Unwind_RaiseException(/*0*/ exception_object: kotlinx.cinterop.CValuesRef<platform.darwin._Unwind_Exception>?): platform.darwin._Unwind_Reason_Code /* = kotlin.UInt */ { TODO() }

fun _Unwind_Resume_or_Rethrow(/*0*/ exception_object: kotlinx.cinterop.CValuesRef<platform.darwin._Unwind_Exception>?): platform.darwin._Unwind_Reason_Code /* = kotlin.UInt */ { TODO() }

fun _Unwind_SetGR(/*0*/ context: kotlinx.cinterop.CValuesRef<cnames.structs._Unwind_Context>?, /*1*/ index: kotlin.Int, /*2*/ new_value: platform.posix.uintptr_t /* = kotlin.ULong */) { TODO() }

fun _Unwind_SetIP(/*0*/ arg0: kotlinx.cinterop.CValuesRef<cnames.structs._Unwind_Context>?, /*1*/ new_value: platform.posix.uintptr_t /* = kotlin.ULong */) { TODO() }

fun __NDR_convert__mig_reply_error_t(/*0*/ x: kotlinx.cinterop.CValuesRef<platform.darwin.mig_reply_error_t>?) { TODO() }

fun __checkint_int32_add(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int32_t /* = kotlin.Int */ { TODO() }

fun __checkint_int32_div_signed_signed(/*0*/ x: platform.posix.int32_t /* = kotlin.Int */, /*1*/ y: platform.posix.int32_t /* = kotlin.Int */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int32_t /* = kotlin.Int */ { TODO() }

fun __checkint_int32_div_signed_unsigned(/*0*/ x: platform.posix.int32_t /* = kotlin.Int */, /*1*/ y: platform.posix.uint32_t /* = kotlin.UInt */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int32_t /* = kotlin.Int */ { TODO() }

fun __checkint_int32_div_unsigned_signed(/*0*/ x: platform.posix.uint32_t /* = kotlin.UInt */, /*1*/ y: platform.posix.int32_t /* = kotlin.Int */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int32_t /* = kotlin.Int */ { TODO() }

fun __checkint_int32_div_unsigned_unsigned(/*0*/ x: platform.posix.uint32_t /* = kotlin.UInt */, /*1*/ y: platform.posix.uint32_t /* = kotlin.UInt */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int32_t /* = kotlin.Int */ { TODO() }

fun __checkint_int32_mul(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int32_t /* = kotlin.Int */ { TODO() }

fun __checkint_int32_sub(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int32_t /* = kotlin.Int */ { TODO() }

fun __checkint_int32_type_error(/*0*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int32_t /* = kotlin.Int */ { TODO() }

fun __checkint_int64_add_signed_signed(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun __checkint_int64_add_signed_unsigned(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.uint64_t /* = kotlin.ULong */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun __checkint_int64_add_unsigned_signed(/*0*/ x: platform.posix.uint64_t /* = kotlin.ULong */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun __checkint_int64_add_unsigned_unsigned(/*0*/ x: platform.posix.uint64_t /* = kotlin.ULong */, /*1*/ y: platform.posix.uint64_t /* = kotlin.ULong */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun __checkint_int64_div_signed_signed(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun __checkint_int64_div_signed_unsigned(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.uint64_t /* = kotlin.ULong */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun __checkint_int64_div_unsigned_signed(/*0*/ x: platform.posix.uint64_t /* = kotlin.ULong */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun __checkint_int64_div_unsigned_unsigned(/*0*/ x: platform.posix.uint64_t /* = kotlin.ULong */, /*1*/ y: platform.posix.uint64_t /* = kotlin.ULong */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun __checkint_int64_mul_signed_signed(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun __checkint_int64_mul_signed_unsigned(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.uint64_t /* = kotlin.ULong */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun __checkint_int64_mul_unsigned_signed(/*0*/ x: platform.posix.uint64_t /* = kotlin.ULong */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun __checkint_int64_mul_unsigned_unsigned(/*0*/ x: platform.posix.uint64_t /* = kotlin.ULong */, /*1*/ y: platform.posix.uint64_t /* = kotlin.ULong */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun __checkint_int64_sub_signed_signed(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun __checkint_int64_sub_signed_unsigned(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.uint64_t /* = kotlin.ULong */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun __checkint_int64_sub_unsigned_signed(/*0*/ x: platform.posix.uint64_t /* = kotlin.ULong */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun __checkint_int64_sub_unsigned_unsigned(/*0*/ x: platform.posix.uint64_t /* = kotlin.ULong */, /*1*/ y: platform.posix.uint64_t /* = kotlin.ULong */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun __checkint_int64_type_error(/*0*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int32_t /* = kotlin.Int */ { TODO() }

fun __checkint_is_mixed_sign32(/*0*/ x: platform.posix.int32_t /* = kotlin.Int */, /*1*/ y: platform.posix.int32_t /* = kotlin.Int */): platform.posix.int32_t /* = kotlin.Int */ { TODO() }

fun __checkint_is_mixed_sign64(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */): platform.posix.int32_t /* = kotlin.Int */ { TODO() }

fun __checkint_uint32_add(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun __checkint_uint32_div_signed_signed(/*0*/ x: platform.posix.int32_t /* = kotlin.Int */, /*1*/ y: platform.posix.int32_t /* = kotlin.Int */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun __checkint_uint32_div_signed_unsigned(/*0*/ x: platform.posix.int32_t /* = kotlin.Int */, /*1*/ y: platform.posix.uint32_t /* = kotlin.UInt */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun __checkint_uint32_div_unsigned_signed(/*0*/ x: platform.posix.uint32_t /* = kotlin.UInt */, /*1*/ y: platform.posix.int32_t /* = kotlin.Int */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun __checkint_uint32_div_unsigned_unsigned(/*0*/ x: platform.posix.uint32_t /* = kotlin.UInt */, /*1*/ y: platform.posix.uint32_t /* = kotlin.UInt */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun __checkint_uint32_mul(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun __checkint_uint32_sub(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun __checkint_uint32_type_error(/*0*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int32_t /* = kotlin.Int */ { TODO() }

fun __checkint_uint64_add_signed_signed(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun __checkint_uint64_add_signed_unsigned(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.uint64_t /* = kotlin.ULong */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun __checkint_uint64_add_unsigned_signed(/*0*/ x: platform.posix.uint64_t /* = kotlin.ULong */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun __checkint_uint64_add_unsigned_unsigned(/*0*/ x: platform.posix.uint64_t /* = kotlin.ULong */, /*1*/ y: platform.posix.uint64_t /* = kotlin.ULong */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun __checkint_uint64_div_signed_signed(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun __checkint_uint64_div_signed_unsigned(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.uint64_t /* = kotlin.ULong */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun __checkint_uint64_div_unsigned_signed(/*0*/ x: platform.posix.uint64_t /* = kotlin.ULong */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun __checkint_uint64_div_unsigned_unsigned(/*0*/ x: platform.posix.uint64_t /* = kotlin.ULong */, /*1*/ y: platform.posix.uint64_t /* = kotlin.ULong */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun __checkint_uint64_mul_signed_signed(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun __checkint_uint64_mul_signed_unsigned(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.uint64_t /* = kotlin.ULong */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun __checkint_uint64_mul_unsigned_signed(/*0*/ x: platform.posix.uint64_t /* = kotlin.ULong */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun __checkint_uint64_mul_unsigned_unsigned(/*0*/ x: platform.posix.uint64_t /* = kotlin.ULong */, /*1*/ y: platform.posix.uint64_t /* = kotlin.ULong */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun __checkint_uint64_sub_signed_signed(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun __checkint_uint64_sub_signed_unsigned(/*0*/ x: platform.posix.int64_t /* = kotlin.Long */, /*1*/ y: platform.posix.uint64_t /* = kotlin.ULong */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun __checkint_uint64_sub_unsigned_signed(/*0*/ x: platform.posix.uint64_t /* = kotlin.ULong */, /*1*/ y: platform.posix.int64_t /* = kotlin.Long */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun __checkint_uint64_sub_unsigned_unsigned(/*0*/ x: platform.posix.uint64_t /* = kotlin.ULong */, /*1*/ y: platform.posix.uint64_t /* = kotlin.ULong */, /*2*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun __checkint_uint64_type_error(/*0*/ err: kotlinx.cinterop.CValuesRef<platform.posix.int32_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.int32_t /* = kotlin.Int */> */>?): platform.posix.int32_t /* = kotlin.Int */ { TODO() }

fun __tg_frexp(/*0*/ __x: kotlin.Double, /*1*/ __y: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Double { TODO() }

fun __tg_frexp(/*0*/ __x: kotlin.Float, /*1*/ __y: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Float { TODO() }

fun __tg_remquo(/*0*/ __x: kotlin.Double, /*1*/ __y: kotlin.Double, /*2*/ __z: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Double { TODO() }

fun __tg_remquo(/*0*/ __x: kotlin.Float, /*1*/ __y: kotlin.Float, /*2*/ __z: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Float { TODO() }

fun _addcarry_u32(/*0*/ __cf: kotlin.UByte, /*1*/ __x: kotlin.UInt, /*2*/ __y: kotlin.UInt, /*3*/ __p: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVar /* = kotlinx.cinterop.UIntVarOf<kotlin.UInt> */>?): kotlin.UByte { TODO() }

fun _addcarry_u64(/*0*/ __cf: kotlin.UByte, /*1*/ __x: kotlin.ULong, /*2*/ __y: kotlin.ULong, /*3*/ __p: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ULongVar /* = kotlinx.cinterop.ULongVarOf<kotlin.ULong> */>?): kotlin.UByte { TODO() }

fun _asl_evaluate_send(/*0*/ client: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ msg: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*2*/ level: kotlin.Int): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun _asl_lib_log(/*0*/ client: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ eval: platform.posix.uint32_t /* = kotlin.UInt */, /*2*/ msg: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*3*/ format: kotlin.String?, /*4*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): kotlin.Int { TODO() }

fun _dispatch_once(/*0*/ predicate: kotlinx.cinterop.CValuesRef<platform.darwin.dispatch_once_tVar /* = kotlinx.cinterop.LongVarOf<platform.darwin.dispatch_once_t /* = kotlin.Long */> */>?, /*1*/ block: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */) { TODO() }

fun _dispatch_once_f(/*0*/ predicate: kotlinx.cinterop.CValuesRef<platform.darwin.dispatch_once_tVar /* = kotlinx.cinterop.LongVarOf<platform.darwin.dispatch_once_t /* = kotlin.Long */> */>?, /*1*/ context: kotlinx.cinterop.CValuesRef<*>?, /*2*/ function: platform.darwin.dispatch_function_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun _host_page_size(/*0*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ out_page_size: kotlinx.cinterop.CValuesRef<platform.darwin.vm_size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_size_t /* = kotlin.ULong */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun _kernelrpc_mach_port_allocate_trap(/*0*/ target: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ right: platform.darwin.mach_port_right_t /* = kotlin.UInt */, /*2*/ name: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_name_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_name_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun _kernelrpc_mach_port_construct_trap(/*0*/ target: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ options: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_options_t /* = platform.darwin.mach_port_options */>?, /*2*/ context: platform.posix.uint64_t /* = kotlin.ULong */, /*3*/ name: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_name_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_name_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun _kernelrpc_mach_port_deallocate_trap(/*0*/ target: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun _kernelrpc_mach_port_destroy_trap(/*0*/ target: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun _kernelrpc_mach_port_destruct_trap(/*0*/ target: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ srdelta: platform.darwin.mach_port_delta_t /* = kotlin.Int */, /*3*/ guard: platform.posix.uint64_t /* = kotlin.ULong */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun _kernelrpc_mach_port_extract_member_trap(/*0*/ target: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ pset: platform.darwin.mach_port_name_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun _kernelrpc_mach_port_get_attributes_trap(/*0*/ target: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ flavor: platform.darwin.mach_port_flavor_t /* = kotlin.Int */, /*3*/ port_info_out: platform.darwin.mach_port_info_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*4*/ port_info_outCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun _kernelrpc_mach_port_guard_trap(/*0*/ target: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ guard: platform.posix.uint64_t /* = kotlin.ULong */, /*3*/ strict: platform.posix.boolean_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun _kernelrpc_mach_port_insert_member_trap(/*0*/ target: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ pset: platform.darwin.mach_port_name_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun _kernelrpc_mach_port_insert_right_trap(/*0*/ target: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ poly: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*3*/ polyPoly: platform.darwin.mach_msg_type_name_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun _kernelrpc_mach_port_mod_refs_trap(/*0*/ target: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ right: platform.darwin.mach_port_right_t /* = kotlin.UInt */, /*3*/ delta: platform.darwin.mach_port_delta_t /* = kotlin.Int */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun _kernelrpc_mach_port_move_member_trap(/*0*/ target: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ member: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ after: platform.darwin.mach_port_name_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun _kernelrpc_mach_port_unguard_trap(/*0*/ target: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ guard: platform.posix.uint64_t /* = kotlin.ULong */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun _kernelrpc_mach_vm_allocate_trap(/*0*/ target: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ addr: kotlinx.cinterop.CValuesRef<platform.darwin.mach_vm_offset_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.mach_vm_offset_t /* = kotlin.ULong */> */>?, /*2*/ size: platform.darwin.mach_vm_size_t /* = kotlin.ULong */, /*3*/ flags: kotlin.Int): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun _kernelrpc_mach_vm_deallocate_trap(/*0*/ target: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ address: platform.darwin.mach_vm_address_t /* = kotlin.ULong */, /*2*/ size: platform.darwin.mach_vm_size_t /* = kotlin.ULong */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun _kernelrpc_mach_vm_map_trap(/*0*/ target: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.mach_vm_offset_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.mach_vm_offset_t /* = kotlin.ULong */> */>?, /*2*/ size: platform.darwin.mach_vm_size_t /* = kotlin.ULong */, /*3*/ mask: platform.darwin.mach_vm_offset_t /* = kotlin.ULong */, /*4*/ flags: kotlin.Int, /*5*/ cur_protection: platform.darwin.vm_prot_t /* = kotlin.Int */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun _kernelrpc_mach_vm_protect_trap(/*0*/ target: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ address: platform.darwin.mach_vm_address_t /* = kotlin.ULong */, /*2*/ size: platform.darwin.mach_vm_size_t /* = kotlin.ULong */, /*3*/ set_maximum: platform.posix.boolean_t /* = kotlin.UInt */, /*4*/ new_protection: platform.darwin.vm_prot_t /* = kotlin.Int */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun _kernelrpc_mach_vm_purgable_control_trap(/*0*/ target: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ address: platform.darwin.mach_vm_offset_t /* = kotlin.ULong */, /*2*/ control: platform.darwin.vm_purgable_t /* = kotlin.Int */, /*3*/ state: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun _mm_malloc(/*0*/ __size: platform.posix.size_t /* = kotlin.ULong */, /*1*/ __align: platform.posix.size_t /* = kotlin.ULong */): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun _os_activity_initiate(/*0*/ dso: kotlinx.cinterop.CValuesRef<*>?, /*1*/ description: kotlin.String?, /*2*/ flags: platform.darwin.os_activity_flag_t /* = kotlin.UInt */, /*3*/ activity_block: platform.darwin.os_block_t? /* = (() -> kotlin.Unit)? */) { TODO() }

fun _os_activity_initiate_f(/*0*/ dso: kotlinx.cinterop.CValuesRef<*>?, /*1*/ description: kotlin.String?, /*2*/ flags: platform.darwin.os_activity_flag_t /* = kotlin.UInt */, /*3*/ context: kotlinx.cinterop.CValuesRef<*>?, /*4*/ function: platform.darwin.os_function_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun _os_activity_start(/*0*/ dso: kotlinx.cinterop.CValuesRef<*>?, /*1*/ description: kotlin.String?, /*2*/ flags: platform.darwin.os_activity_flag_t /* = kotlin.UInt */): platform.darwin.os_activity_t /* = kotlin.ULong */ { TODO() }

fun _os_log_error_impl(/*0*/ dso: kotlinx.cinterop.CValuesRef<*>?, /*1*/ log: platform.darwin.os_log_t? /* = platform.darwin.NSObject? */, /*2*/ type: platform.darwin.os_log_type_t /* = kotlin.UByte */, /*3*/ format: kotlin.String?, /*4*/ buf: kotlinx.cinterop.CValuesRef<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>?, /*5*/ size: platform.posix.uint32_t /* = kotlin.UInt */) { TODO() }

fun _os_log_fault_impl(/*0*/ dso: kotlinx.cinterop.CValuesRef<*>?, /*1*/ log: platform.darwin.os_log_t? /* = platform.darwin.NSObject? */, /*2*/ type: platform.darwin.os_log_type_t /* = kotlin.UByte */, /*3*/ format: kotlin.String?, /*4*/ buf: kotlinx.cinterop.CValuesRef<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>?, /*5*/ size: platform.posix.uint32_t /* = kotlin.UInt */) { TODO() }

fun _os_log_impl(/*0*/ dso: kotlinx.cinterop.CValuesRef<*>?, /*1*/ log: platform.darwin.os_log_t? /* = platform.darwin.NSObject? */, /*2*/ type: platform.darwin.os_log_type_t /* = kotlin.UByte */, /*3*/ format: kotlin.String?, /*4*/ buf: kotlinx.cinterop.CValuesRef<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>?, /*5*/ size: platform.posix.uint32_t /* = kotlin.UInt */) { TODO() }

fun _os_log_internal(/*0*/ dso: kotlinx.cinterop.CValuesRef<*>?, /*1*/ log: platform.darwin.os_log_t? /* = platform.darwin.NSObject? */, /*2*/ type: platform.darwin.os_log_type_t /* = kotlin.UByte */, /*3*/ message: kotlin.String?, /*4*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/) { TODO() }

fun _os_trace_with_buffer(/*0*/ dso: kotlinx.cinterop.CValuesRef<*>?, /*1*/ message: kotlin.String?, /*2*/ type: platform.posix.uint8_t /* = kotlin.UByte */, /*3*/ buffer: kotlinx.cinterop.CValuesRef<*>?, /*4*/ buffer_size: platform.posix.size_t /* = kotlin.ULong */, /*5*/ payload: platform.darwin.os_trace_payload_t? /* = ((platform.darwin.os_trace_payload_object_t? /* = platform.darwin.NSObject? */) -> kotlin.Unit)? */) { TODO() }

fun _subborrow_u32(/*0*/ __cf: kotlin.UByte, /*1*/ __x: kotlin.UInt, /*2*/ __y: kotlin.UInt, /*3*/ __p: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVar /* = kotlinx.cinterop.UIntVarOf<kotlin.UInt> */>?): kotlin.UByte { TODO() }

fun _subborrow_u64(/*0*/ __cf: kotlin.UByte, /*1*/ __x: kotlin.ULong, /*2*/ __y: kotlin.ULong, /*3*/ __p: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ULongVar /* = kotlinx.cinterop.ULongVarOf<kotlin.ULong> */>?): kotlin.UByte { TODO() }

fun _xpc_object_validate(/*0*/ `object`: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */) { TODO() }

fun act_get_state(/*0*/ target_act: platform.darwin.thread_act_t /* = kotlin.UInt */, /*1*/ flavor: kotlin.Int, /*2*/ old_state: platform.darwin.thread_state_t? /* = kotlinx.cinterop.CPointer<platform.darwin.natural_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */> */>? */, /*3*/ old_stateCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun act_set_state(/*0*/ target_act: platform.darwin.thread_act_t /* = kotlin.UInt */, /*1*/ flavor: kotlin.Int, /*2*/ new_state: platform.darwin.thread_state_t? /* = kotlinx.cinterop.CPointer<platform.darwin.natural_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */> */>? */, /*3*/ new_stateCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun addr2ascii(/*0*/ arg0: kotlin.Int, /*1*/ arg1: kotlinx.cinterop.CValuesRef<*>?, /*2*/ arg2: kotlin.Int, /*3*/ arg3: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun aio_return(/*0*/ aiocbp: kotlinx.cinterop.CValuesRef<platform.darwin.aiocb>?): platform.posix.ssize_t /* = kotlin.Long */ { TODO() }

fun aio_suspend(/*0*/ aiocblist: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<platform.darwin.aiocb> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin.aiocb>> */>?, /*1*/ nent: kotlin.Int, /*2*/ timeoutp: kotlinx.cinterop.CValuesRef<platform.posix.timespec>?): kotlin.Int { TODO() }

fun asl_add_log_file(/*0*/ client: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ descriptor: kotlin.Int): kotlin.Int { TODO() }

fun asl_add_output_file(/*0*/ client: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ fd: kotlin.Int, /*2*/ mfmt: kotlin.String?, /*3*/ tfmt: kotlin.String?, /*4*/ filter: kotlin.Int, /*5*/ text_encoding: kotlin.Int): kotlin.Int { TODO() }

fun asl_append(/*0*/ obj: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ obj_to_add: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */) { TODO() }

fun asl_close(/*0*/ obj: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */) { TODO() }

fun asl_count(/*0*/ obj: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */): platform.posix.size_t /* = kotlin.ULong */ { TODO() }

fun asl_create_auxiliary_file(/*0*/ msg: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ title: kotlin.String?, /*2*/ uti: kotlin.String?, /*3*/ out_descriptor: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Int { TODO() }

fun asl_decode_buffer(/*0*/ `in`: kotlin.String?, /*1*/ buf: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?, /*2*/ len: kotlinx.cinterop.CValuesRef<platform.posix.size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.size_t /* = kotlin.ULong */> */>?): kotlin.Int { TODO() }

fun asl_encode_buffer(/*0*/ buf: kotlin.String?, /*1*/ len: platform.posix.size_t /* = kotlin.ULong */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun asl_fetch_key_val_op(/*0*/ msg: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ n: platform.posix.uint32_t /* = kotlin.UInt */, /*2*/ key: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?, /*3*/ `val`: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?, /*4*/ op: kotlinx.cinterop.CValuesRef<platform.posix.uint32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.uint32_t /* = kotlin.UInt */> */>?): kotlin.Int { TODO() }

fun asl_format(/*0*/ msg: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ msg_fmt: kotlin.String?, /*2*/ time_fmt: kotlin.String?, /*3*/ text_encoding: platform.posix.uint32_t /* = kotlin.UInt */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun asl_free(/*0*/ obj: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */) { TODO() }

fun asl_get(/*0*/ msg: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ key: kotlin.String?): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun asl_get_index(/*0*/ list: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */): platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */ { TODO() }

fun asl_get_type(/*0*/ obj: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun asl_key(/*0*/ msg: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ n: platform.posix.uint32_t /* = kotlin.UInt */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun asl_log(/*0*/ client: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ msg: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*2*/ level: kotlin.Int, /*3*/ format: kotlin.String?, /*4*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): kotlin.Int { TODO() }

fun asl_log_auxiliary_location(/*0*/ msg: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ title: kotlin.String?, /*2*/ uti: kotlin.String?, /*3*/ url: kotlin.String?): kotlin.Int { TODO() }

fun asl_log_descriptor(/*0*/ asl: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ msg: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*2*/ level: kotlin.Int, /*3*/ descriptor: kotlin.Int, /*4*/ fd_type: platform.posix.uint32_t /* = kotlin.UInt */): kotlin.Int { TODO() }

fun asl_match(/*0*/ data: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ querylist: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*2*/ last: kotlinx.cinterop.CValuesRef<platform.posix.size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.size_t /* = kotlin.ULong */> */>?, /*3*/ start: platform.posix.size_t /* = kotlin.ULong */, /*4*/ count: platform.posix.size_t /* = kotlin.ULong */, /*5*/ duration: platform.posix.uint32_t /* = kotlin.UInt */, /*6*/ direction: platform.posix.int32_t /* = kotlin.Int */): platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */ { TODO() }

fun asl_new(/*0*/ type: platform.posix.uint32_t /* = kotlin.UInt */): platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */ { TODO() }

fun asl_next(/*0*/ obj: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */): platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */ { TODO() }

fun asl_open(/*0*/ ident: kotlin.String?, /*1*/ facility: kotlin.String?, /*2*/ opts: platform.posix.uint32_t /* = kotlin.UInt */): platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */ { TODO() }

fun asl_open_from_file(/*0*/ descriptor: kotlin.Int, /*1*/ ident: kotlin.String?, /*2*/ facility: kotlin.String?): platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */ { TODO() }

fun asl_open_path(/*0*/ path: kotlin.String?, /*1*/ opts: platform.posix.uint32_t /* = kotlin.UInt */): platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */ { TODO() }

fun asl_prepend(/*0*/ obj: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ obj_to_add: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */) { TODO() }

fun asl_prev(/*0*/ obj: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */): platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */ { TODO() }

fun asl_release(/*0*/ obj: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */) { TODO() }

fun asl_remove_index(/*0*/ list: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */) { TODO() }

fun asl_remove_log_file(/*0*/ client: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ descriptor: kotlin.Int): kotlin.Int { TODO() }

fun asl_reset_iteration(/*0*/ obj: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ position: platform.posix.size_t /* = kotlin.ULong */) { TODO() }

fun asl_retain(/*0*/ obj: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */): platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */ { TODO() }

fun asl_search(/*0*/ obj: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ query: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */): platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */ { TODO() }

fun asl_send(/*0*/ obj: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ msg: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */): kotlin.Int { TODO() }

fun asl_set(/*0*/ obj: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ key: kotlin.String?, /*2*/ value: kotlin.String?): kotlin.Int { TODO() }

fun asl_set_filter(/*0*/ client: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ f: kotlin.Int): kotlin.Int { TODO() }

fun asl_set_output_file_filter(/*0*/ client: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ fd: kotlin.Int, /*2*/ filter: kotlin.Int): kotlin.Int { TODO() }

fun asl_set_query(/*0*/ msg: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ key: kotlin.String?, /*2*/ value: kotlin.String?, /*3*/ op: platform.posix.uint32_t /* = kotlin.UInt */): kotlin.Int { TODO() }

fun asl_unset(/*0*/ obj: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ key: kotlin.String?): kotlin.Int { TODO() }

fun asl_vlog(/*0*/ obj: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*1*/ msg: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */, /*2*/ level: kotlin.Int, /*3*/ format: kotlin.String?, /*4*/ ap: platform.posix.va_list? /* = kotlinx.cinterop.CPointer<platform.posix.__va_list_tag>? */): kotlin.Int { TODO() }

fun aslresponse_free(/*0*/ obj: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */) { TODO() }

fun aslresponse_next(/*0*/ obj: platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */): platform.darwin.asl_object_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__asl_object_s>? */ { TODO() }

fun asxprintf(/*0*/ __ret: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?, /*1*/ __domain: platform.darwin.printf_domain_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_domain>? */, /*2*/ __loc: platform.posix.locale_t? /* = kotlinx.cinterop.CPointer<cnames.structs._xlocale>? */, /*3*/ __format: kotlin.String?, /*4*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): kotlin.Int { TODO() }

fun asxprintf_exec(/*0*/ __ret: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?, /*1*/ __pc: platform.darwin.printf_comp_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_compiled>? */, /*2*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): kotlin.Int { TODO() }

fun at_block_format_to_MTLPixelFormat(/*0*/ arg0: platform.darwin.at_block_format_t /* = kotlin.ULong */): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun at_encoder_compress_texels(/*0*/ encoder: platform.darwin.at_encoder_t? /* = platform.darwin.NSObject? */, /*1*/ src: kotlinx.cinterop.CValuesRef<platform.darwin.at_texel_region_t>?, /*2*/ dest: kotlinx.cinterop.CValuesRef<platform.darwin.at_block_buffer_t>?, /*3*/ errorThreshold: kotlin.Float, /*4*/ flags: platform.darwin.at_flags_t /* = kotlin.ULong */): kotlin.Float { TODO() }

fun at_encoder_create(/*0*/ texelType: platform.darwin.at_texel_format_t /* = kotlin.ULong */, /*1*/ texelAlphaType: platform.darwin.at_alpha_t /* = kotlin.UInt */, /*2*/ blockType: platform.darwin.at_block_format_t /* = kotlin.ULong */, /*3*/ blockAlphaType: platform.darwin.at_alpha_t /* = kotlin.UInt */, /*4*/ backgroundColor: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVar /* = kotlinx.cinterop.FloatVarOf<kotlin.Float> */>?): platform.darwin.at_encoder_t? /* = platform.darwin.NSObject? */ { TODO() }

fun at_encoder_decompress_texels(/*0*/ encoder: platform.darwin.at_encoder_t? /* = platform.darwin.NSObject? */, /*1*/ src: kotlinx.cinterop.CValuesRef<platform.darwin.at_block_buffer_t>?, /*2*/ dest: kotlinx.cinterop.CValuesRef<platform.darwin.at_texel_region_t>?, /*3*/ flags: platform.darwin.at_flags_t /* = kotlin.ULong */): platform.darwin.at_error_t /* = kotlin.Long */ { TODO() }

fun at_encoder_get_block_address(/*0*/ encoder: platform.darwin.at_encoder_t? /* = platform.darwin.NSObject? */, /*1*/ texelPosition: kotlinx.cinterop.CValue<platform.darwin.at_size_t>, /*2*/ imageSize: kotlinx.cinterop.CValue<platform.darwin.at_size_t>, /*3*/ blockInfo: kotlinx.cinterop.CValuesRef<platform.darwin.at_block_buffer_t>?): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun at_encoder_get_block_alpha(/*0*/ encoder: platform.darwin.at_encoder_t? /* = platform.darwin.NSObject? */): platform.darwin.at_alpha_t /* = kotlin.UInt */ { TODO() }

fun at_encoder_get_block_format(/*0*/ encoder: platform.darwin.at_encoder_t? /* = platform.darwin.NSObject? */): platform.darwin.at_block_format_t /* = kotlin.ULong */ { TODO() }

fun at_encoder_get_block_size(/*0*/ encoder: platform.darwin.at_encoder_t? /* = platform.darwin.NSObject? */): platform.posix.size_t /* = kotlin.ULong */ { TODO() }

fun at_encoder_get_texel_alpha(/*0*/ encoder: platform.darwin.at_encoder_t? /* = platform.darwin.NSObject? */): platform.darwin.at_alpha_t /* = kotlin.UInt */ { TODO() }

fun at_encoder_get_texel_format(/*0*/ encoder: platform.darwin.at_encoder_t? /* = platform.darwin.NSObject? */): platform.darwin.at_texel_format_t /* = kotlin.ULong */ { TODO() }

fun at_encoder_get_version(): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun at_encoder_is_compression_monolithic(/*0*/ encoder: platform.darwin.at_encoder_t? /* = platform.darwin.NSObject? */, /*1*/ flags: platform.darwin.at_flags_t /* = kotlin.ULong */): kotlin.Boolean { TODO() }

fun at_encoder_is_decompression_monolithic(/*0*/ encoder: platform.darwin.at_encoder_t? /* = platform.darwin.NSObject? */, /*1*/ flags: platform.darwin.at_flags_t /* = kotlin.ULong */): kotlin.Boolean { TODO() }

fun at_texel_format_to_MTLPixelFormat(/*0*/ arg0: platform.darwin.at_texel_format_t /* = kotlin.ULong */): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun au_bsm_to_domain(/*0*/ bsm_domain: platform.posix.u_short /* = kotlin.UShort */, /*1*/ local_domainp: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Int { TODO() }

fun au_bsm_to_errno(/*0*/ bsm_error: platform.posix.u_char /* = kotlin.UByte */, /*1*/ errorp: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Int { TODO() }

fun au_bsm_to_fcntl_cmd(/*0*/ bsm_fcntl_cmd: platform.posix.u_short /* = kotlin.UShort */, /*1*/ local_fcntl_cmdp: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Int { TODO() }

fun au_bsm_to_socket_type(/*0*/ bsm_socket_type: platform.posix.u_short /* = kotlin.UShort */, /*1*/ local_socket_typep: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Int { TODO() }

fun au_close(/*0*/ d: kotlin.Int, /*1*/ keep: kotlin.Int, /*2*/ event: kotlin.Short): kotlin.Int { TODO() }

fun au_close_buffer(/*0*/ d: kotlin.Int, /*1*/ event: kotlin.Short, /*2*/ buffer: kotlinx.cinterop.CValuesRef<platform.posix.u_charVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.u_char /* = kotlin.UByte */> */>?, /*3*/ buflen: kotlinx.cinterop.CValuesRef<platform.posix.size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.size_t /* = kotlin.ULong */> */>?): kotlin.Int { TODO() }

fun au_close_token(/*0*/ tok: kotlinx.cinterop.CValuesRef<platform.darwin.token_t /* = cnames.structs.au_token */>?, /*1*/ buffer: kotlinx.cinterop.CValuesRef<platform.posix.u_charVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.u_char /* = kotlin.UByte */> */>?, /*2*/ buflen: kotlinx.cinterop.CValuesRef<platform.posix.size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.size_t /* = kotlin.ULong */> */>?): kotlin.Int { TODO() }

fun au_domain_to_bsm(/*0*/ local_domain: kotlin.Int): platform.posix.u_short /* = kotlin.UShort */ { TODO() }

fun au_errno_to_bsm(/*0*/ local_errno: kotlin.Int): platform.posix.u_char /* = kotlin.UByte */ { TODO() }

fun au_fcntl_cmd_to_bsm(/*0*/ local_fcntl_command: kotlin.Int): platform.posix.u_short /* = kotlin.UShort */ { TODO() }

fun au_fetch_tok(/*0*/ tok: kotlinx.cinterop.CValuesRef<platform.darwin.tokenstr_t /* = platform.darwin.tokenstr */>?, /*1*/ buf: kotlinx.cinterop.CValuesRef<platform.posix.u_charVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.u_char /* = kotlin.UByte */> */>?, /*2*/ len: kotlin.Int): kotlin.Int { TODO() }

fun au_free_token(/*0*/ tok: kotlinx.cinterop.CValuesRef<platform.darwin.token_t /* = cnames.structs.au_token */>?) { TODO() }

fun au_get_state(): kotlin.Int { TODO() }

fun au_notify_initialize(): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun au_notify_terminate(): kotlin.Int { TODO() }

fun au_open(): kotlin.Int { TODO() }

fun au_poltostr(/*0*/ policy: kotlin.Int, /*1*/ maxsize: platform.posix.size_t /* = kotlin.ULong */, /*2*/ buf: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?): platform.posix.ssize_t /* = kotlin.Long */ { TODO() }

fun au_preselect(/*0*/ event: platform.darwin.au_event_t /* = kotlin.UShort */, /*1*/ mask_p: kotlinx.cinterop.CValuesRef<platform.darwin.au_mask_t /* = platform.darwin.au_mask */>?, /*2*/ sorf: kotlin.Int, /*3*/ flag: kotlin.Int): kotlin.Int { TODO() }

fun au_print_flags_tok(/*0*/ outfp: kotlinx.cinterop.CValuesRef<platform.posix.FILE /* = platform.posix.__sFILE */>?, /*1*/ tok: kotlinx.cinterop.CValuesRef<platform.darwin.tokenstr_t /* = platform.darwin.tokenstr */>?, /*2*/ del: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*3*/ oflags: kotlin.Int) { TODO() }

fun au_print_tok(/*0*/ outfp: kotlinx.cinterop.CValuesRef<platform.posix.FILE /* = platform.posix.__sFILE */>?, /*1*/ tok: kotlinx.cinterop.CValuesRef<platform.darwin.tokenstr_t /* = platform.darwin.tokenstr */>?, /*2*/ del: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*3*/ raw: kotlin.Byte, /*4*/ sfrm: kotlin.Byte) { TODO() }

fun au_print_tok_xml(/*0*/ outfp: kotlinx.cinterop.CValuesRef<platform.posix.FILE /* = platform.posix.__sFILE */>?, /*1*/ tok: kotlinx.cinterop.CValuesRef<platform.darwin.tokenstr_t /* = platform.darwin.tokenstr */>?, /*2*/ del: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*3*/ raw: kotlin.Byte, /*4*/ sfrm: kotlin.Byte) { TODO() }

fun au_print_xml_footer(/*0*/ outfp: kotlinx.cinterop.CValuesRef<platform.posix.FILE /* = platform.posix.__sFILE */>?) { TODO() }

fun au_print_xml_header(/*0*/ outfp: kotlinx.cinterop.CValuesRef<platform.posix.FILE /* = platform.posix.__sFILE */>?) { TODO() }

fun au_read_rec(/*0*/ fp: kotlinx.cinterop.CValuesRef<platform.posix.FILE /* = platform.posix.__sFILE */>?, /*1*/ buf: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<platform.posix.u_charVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.u_char /* = kotlin.UByte */> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<platform.posix.u_char /* = kotlin.UByte */>>> */>?): kotlin.Int { TODO() }

fun au_sflagstostr(/*0*/ flags: platform.posix.uint64_t /* = kotlin.ULong */, /*1*/ maxsize: platform.posix.size_t /* = kotlin.ULong */, /*2*/ buf: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?): platform.posix.ssize_t /* = kotlin.Long */ { TODO() }

fun au_socket_type_to_bsm(/*0*/ local_socket_type: kotlin.Int): platform.posix.u_short /* = kotlin.UShort */ { TODO() }

fun au_strerror(/*0*/ bsm_error: platform.posix.u_char /* = kotlin.UByte */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun au_strtopol(/*0*/ polstr: kotlin.String?, /*1*/ policy: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Int { TODO() }

fun au_strtosflags(/*0*/ sflagsstr: kotlin.String?, /*1*/ flags: kotlinx.cinterop.CValuesRef<platform.posix.uint64_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.uint64_t /* = kotlin.ULong */> */>?): kotlin.Int { TODO() }

fun au_to_arg(/*0*/ n: kotlin.Byte, /*1*/ text: kotlin.String?, /*2*/ v: platform.posix.uint32_t /* = kotlin.UInt */): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_arg32(/*0*/ n: kotlin.Byte, /*1*/ text: kotlin.String?, /*2*/ v: platform.posix.uint32_t /* = kotlin.UInt */): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_arg64(/*0*/ n: kotlin.Byte, /*1*/ text: kotlin.String?, /*2*/ v: platform.posix.uint64_t /* = kotlin.ULong */): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_certificate_hash(/*0*/ hash: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_data(/*0*/ unit_print: kotlin.Byte, /*1*/ unit_type: kotlin.Byte, /*2*/ unit_count: kotlin.Byte, /*3*/ p: kotlin.String?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_exec_args(/*0*/ argv: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_exec_env(/*0*/ envp: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_exit(/*0*/ retval: kotlin.Int, /*1*/ err: kotlin.Int): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_file(/*0*/ file: kotlin.String?, /*1*/ tm: kotlinx.cinterop.CValue<platform.posix.timeval>): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_groups(/*0*/ groups: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_header(/*0*/ rec_size: kotlin.Int, /*1*/ e_type: platform.darwin.au_event_t /* = kotlin.UShort */, /*2*/ e_mod: platform.darwin.au_emod_t /* = kotlin.UShort */): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_header32(/*0*/ rec_size: kotlin.Int, /*1*/ e_type: platform.darwin.au_event_t /* = kotlin.UShort */, /*2*/ e_mod: platform.darwin.au_emod_t /* = kotlin.UShort */): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_header32_ex(/*0*/ rec_size: kotlin.Int, /*1*/ e_type: platform.darwin.au_event_t /* = kotlin.UShort */, /*2*/ e_mod: platform.darwin.au_emod_t /* = kotlin.UShort */): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_header32_ex_tm(/*0*/ rec_size: kotlin.Int, /*1*/ e_type: platform.darwin.au_event_t /* = kotlin.UShort */, /*2*/ e_mod: platform.darwin.au_emod_t /* = kotlin.UShort */, /*3*/ tm: kotlinx.cinterop.CValue<platform.posix.timeval>, /*4*/ aia: kotlinx.cinterop.CValuesRef<platform.darwin.auditinfo_addr>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_header32_tm(/*0*/ rec_size: kotlin.Int, /*1*/ e_type: platform.darwin.au_event_t /* = kotlin.UShort */, /*2*/ e_mod: platform.darwin.au_emod_t /* = kotlin.UShort */, /*3*/ tm: kotlinx.cinterop.CValue<platform.posix.timeval>): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_header64(/*0*/ rec_size: kotlin.Int, /*1*/ e_type: platform.darwin.au_event_t /* = kotlin.UShort */, /*2*/ e_mod: platform.darwin.au_emod_t /* = kotlin.UShort */): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_header64_tm(/*0*/ rec_size: kotlin.Int, /*1*/ e_type: platform.darwin.au_event_t /* = kotlin.UShort */, /*2*/ e_mod: platform.darwin.au_emod_t /* = kotlin.UShort */, /*3*/ tm: kotlinx.cinterop.CValue<platform.posix.timeval>): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_header_ex(/*0*/ rec_size: kotlin.Int, /*1*/ e_type: platform.darwin.au_event_t /* = kotlin.UShort */, /*2*/ e_mod: platform.darwin.au_emod_t /* = kotlin.UShort */): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_identity(/*0*/ signer_type: platform.posix.uint32_t /* = kotlin.UInt */, /*1*/ signing_id: kotlin.String?, /*2*/ signing_id_trunc: platform.posix.u_char /* = kotlin.UByte */, /*3*/ team_id: kotlin.String?, /*4*/ team_id_trunc: platform.posix.u_char /* = kotlin.UByte */, /*5*/ cdhash: kotlinx.cinterop.CValuesRef<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>?, /*6*/ cdhash_len: platform.posix.uint16_t /* = kotlin.UShort */): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_in_addr(/*0*/ internet_addr: kotlinx.cinterop.CValuesRef<platform.posix.in_addr>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_in_addr_ex(/*0*/ internet_addr: kotlinx.cinterop.CValuesRef<platform.posix.in6_addr>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_ip(/*0*/ ip: kotlinx.cinterop.CValuesRef<platform.posix.ip>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_ipc(/*0*/ type: kotlin.Byte, /*1*/ id: kotlin.Int): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_ipc_perm(/*0*/ perm: kotlinx.cinterop.CValuesRef<platform.posix.ipc_perm>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_iport(/*0*/ iport: platform.posix.uint16_t /* = kotlin.UShort */): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_kevent(/*0*/ kev: kotlinx.cinterop.CValuesRef<platform.osx.kevent>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_krb5_principal(/*0*/ principal: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_me(): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_newgroups(/*0*/ n: platform.posix.uint16_t /* = kotlin.UShort */, /*1*/ groups: kotlinx.cinterop.CValuesRef<platform.posix.gid_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.gid_t /* = kotlin.UInt */> */>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_opaque(/*0*/ data: kotlin.String?, /*1*/ bytes: platform.posix.uint16_t /* = kotlin.UShort */): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_path(/*0*/ path: kotlin.String?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_process(/*0*/ auid: platform.darwin.au_id_t /* = kotlin.UInt */, /*1*/ euid: platform.posix.uid_t /* = kotlin.UInt */, /*2*/ egid: platform.posix.gid_t /* = kotlin.UInt */, /*3*/ ruid: platform.posix.uid_t /* = kotlin.UInt */, /*4*/ rgid: platform.posix.gid_t /* = kotlin.UInt */, /*5*/ pid: platform.posix.pid_t /* = kotlin.Int */, /*6*/ sid: platform.darwin.au_asid_t /* = kotlin.Int */, /*7*/ tid: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_t /* = platform.darwin.au_tid */>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_process32(/*0*/ auid: platform.darwin.au_id_t /* = kotlin.UInt */, /*1*/ euid: platform.posix.uid_t /* = kotlin.UInt */, /*2*/ egid: platform.posix.gid_t /* = kotlin.UInt */, /*3*/ ruid: platform.posix.uid_t /* = kotlin.UInt */, /*4*/ rgid: platform.posix.gid_t /* = kotlin.UInt */, /*5*/ pid: platform.posix.pid_t /* = kotlin.Int */, /*6*/ sid: platform.darwin.au_asid_t /* = kotlin.Int */, /*7*/ tid: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_t /* = platform.darwin.au_tid */>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_process32_ex(/*0*/ auid: platform.darwin.au_id_t /* = kotlin.UInt */, /*1*/ euid: platform.posix.uid_t /* = kotlin.UInt */, /*2*/ egid: platform.posix.gid_t /* = kotlin.UInt */, /*3*/ ruid: platform.posix.uid_t /* = kotlin.UInt */, /*4*/ rgid: platform.posix.gid_t /* = kotlin.UInt */, /*5*/ pid: platform.posix.pid_t /* = kotlin.Int */, /*6*/ sid: platform.darwin.au_asid_t /* = kotlin.Int */, /*7*/ tid: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_addr_t /* = platform.darwin.au_tid_addr */>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_process64(/*0*/ auid: platform.darwin.au_id_t /* = kotlin.UInt */, /*1*/ euid: platform.posix.uid_t /* = kotlin.UInt */, /*2*/ egid: platform.posix.gid_t /* = kotlin.UInt */, /*3*/ ruid: platform.posix.uid_t /* = kotlin.UInt */, /*4*/ rgid: platform.posix.gid_t /* = kotlin.UInt */, /*5*/ pid: platform.posix.pid_t /* = kotlin.Int */, /*6*/ sid: platform.darwin.au_asid_t /* = kotlin.Int */, /*7*/ tid: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_t /* = platform.darwin.au_tid */>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_process64_ex(/*0*/ auid: platform.darwin.au_id_t /* = kotlin.UInt */, /*1*/ euid: platform.posix.uid_t /* = kotlin.UInt */, /*2*/ egid: platform.posix.gid_t /* = kotlin.UInt */, /*3*/ ruid: platform.posix.uid_t /* = kotlin.UInt */, /*4*/ rgid: platform.posix.gid_t /* = kotlin.UInt */, /*5*/ pid: platform.posix.pid_t /* = kotlin.Int */, /*6*/ sid: platform.darwin.au_asid_t /* = kotlin.Int */, /*7*/ tid: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_addr_t /* = platform.darwin.au_tid_addr */>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_process_ex(/*0*/ auid: platform.darwin.au_id_t /* = kotlin.UInt */, /*1*/ euid: platform.posix.uid_t /* = kotlin.UInt */, /*2*/ egid: platform.posix.gid_t /* = kotlin.UInt */, /*3*/ ruid: platform.posix.uid_t /* = kotlin.UInt */, /*4*/ rgid: platform.posix.gid_t /* = kotlin.UInt */, /*5*/ pid: platform.posix.pid_t /* = kotlin.Int */, /*6*/ sid: platform.darwin.au_asid_t /* = kotlin.Int */, /*7*/ tid: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_addr_t /* = platform.darwin.au_tid_addr */>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_return(/*0*/ status: kotlin.Byte, /*1*/ ret: platform.posix.uint32_t /* = kotlin.UInt */): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_return32(/*0*/ status: kotlin.Byte, /*1*/ ret: platform.posix.uint32_t /* = kotlin.UInt */): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_return64(/*0*/ status: kotlin.Byte, /*1*/ ret: platform.posix.uint64_t /* = kotlin.ULong */): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_seq(/*0*/ audit_count: kotlin.Long): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_sock_inet(/*0*/ so: kotlinx.cinterop.CValuesRef<platform.darwin.sockaddr_in>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_sock_inet128(/*0*/ so: kotlinx.cinterop.CValuesRef<platform.darwin.sockaddr_in6>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_sock_inet32(/*0*/ so: kotlinx.cinterop.CValuesRef<platform.darwin.sockaddr_in>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_sock_unix(/*0*/ so: kotlinx.cinterop.CValuesRef<platform.osx.sockaddr_un>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_socket_ex(/*0*/ so_domain: platform.posix.u_short /* = kotlin.UShort */, /*1*/ so_type: platform.posix.u_short /* = kotlin.UShort */, /*2*/ sa_local: kotlinx.cinterop.CValuesRef<platform.posix.sockaddr>?, /*3*/ sa_remote: kotlinx.cinterop.CValuesRef<platform.posix.sockaddr>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_subject(/*0*/ auid: platform.darwin.au_id_t /* = kotlin.UInt */, /*1*/ euid: platform.posix.uid_t /* = kotlin.UInt */, /*2*/ egid: platform.posix.gid_t /* = kotlin.UInt */, /*3*/ ruid: platform.posix.uid_t /* = kotlin.UInt */, /*4*/ rgid: platform.posix.gid_t /* = kotlin.UInt */, /*5*/ pid: platform.posix.pid_t /* = kotlin.Int */, /*6*/ sid: platform.darwin.au_asid_t /* = kotlin.Int */, /*7*/ tid: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_t /* = platform.darwin.au_tid */>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_subject32(/*0*/ auid: platform.darwin.au_id_t /* = kotlin.UInt */, /*1*/ euid: platform.posix.uid_t /* = kotlin.UInt */, /*2*/ egid: platform.posix.gid_t /* = kotlin.UInt */, /*3*/ ruid: platform.posix.uid_t /* = kotlin.UInt */, /*4*/ rgid: platform.posix.gid_t /* = kotlin.UInt */, /*5*/ pid: platform.posix.pid_t /* = kotlin.Int */, /*6*/ sid: platform.darwin.au_asid_t /* = kotlin.Int */, /*7*/ tid: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_t /* = platform.darwin.au_tid */>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_subject32_ex(/*0*/ auid: platform.darwin.au_id_t /* = kotlin.UInt */, /*1*/ euid: platform.posix.uid_t /* = kotlin.UInt */, /*2*/ egid: platform.posix.gid_t /* = kotlin.UInt */, /*3*/ ruid: platform.posix.uid_t /* = kotlin.UInt */, /*4*/ rgid: platform.posix.gid_t /* = kotlin.UInt */, /*5*/ pid: platform.posix.pid_t /* = kotlin.Int */, /*6*/ sid: platform.darwin.au_asid_t /* = kotlin.Int */, /*7*/ tid: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_addr_t /* = platform.darwin.au_tid_addr */>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_subject64(/*0*/ auid: platform.darwin.au_id_t /* = kotlin.UInt */, /*1*/ euid: platform.posix.uid_t /* = kotlin.UInt */, /*2*/ egid: platform.posix.gid_t /* = kotlin.UInt */, /*3*/ ruid: platform.posix.uid_t /* = kotlin.UInt */, /*4*/ rgid: platform.posix.gid_t /* = kotlin.UInt */, /*5*/ pid: platform.posix.pid_t /* = kotlin.Int */, /*6*/ sid: platform.darwin.au_asid_t /* = kotlin.Int */, /*7*/ tid: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_t /* = platform.darwin.au_tid */>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_subject64_ex(/*0*/ auid: platform.darwin.au_id_t /* = kotlin.UInt */, /*1*/ euid: platform.posix.uid_t /* = kotlin.UInt */, /*2*/ egid: platform.posix.gid_t /* = kotlin.UInt */, /*3*/ ruid: platform.posix.uid_t /* = kotlin.UInt */, /*4*/ rgid: platform.posix.gid_t /* = kotlin.UInt */, /*5*/ pid: platform.posix.pid_t /* = kotlin.Int */, /*6*/ sid: platform.darwin.au_asid_t /* = kotlin.Int */, /*7*/ tid: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_addr_t /* = platform.darwin.au_tid_addr */>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_subject_ex(/*0*/ auid: platform.darwin.au_id_t /* = kotlin.UInt */, /*1*/ euid: platform.posix.uid_t /* = kotlin.UInt */, /*2*/ egid: platform.posix.gid_t /* = kotlin.UInt */, /*3*/ ruid: platform.posix.uid_t /* = kotlin.UInt */, /*4*/ rgid: platform.posix.gid_t /* = kotlin.UInt */, /*5*/ pid: platform.posix.pid_t /* = kotlin.Int */, /*6*/ sid: platform.darwin.au_asid_t /* = kotlin.Int */, /*7*/ tid: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_addr_t /* = platform.darwin.au_tid_addr */>?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_text(/*0*/ text: kotlin.String?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_trailer(/*0*/ rec_size: kotlin.Int): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_to_zonename(/*0*/ zonename: kotlin.String?): kotlinx.cinterop.CPointer<platform.darwin.token_t /* = cnames.structs.au_token */>? { TODO() }

fun au_user_mask(/*0*/ username: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ mask_p: kotlinx.cinterop.CValuesRef<platform.darwin.au_mask_t /* = platform.darwin.au_mask */>?): kotlin.Int { TODO() }

fun au_write(/*0*/ d: kotlin.Int, /*1*/ m: kotlinx.cinterop.CValuesRef<platform.darwin.token_t /* = cnames.structs.au_token */>?): kotlin.Int { TODO() }

fun audit_get_car(/*0*/ path: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_get_class(/*0*/ evc_map: kotlinx.cinterop.CValuesRef<platform.darwin.au_evclass_map_t /* = platform.darwin.au_evclass_map */>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_get_cond(/*0*/ cond: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Int { TODO() }

fun audit_get_ctlmode(/*0*/ mode: kotlinx.cinterop.CValuesRef<platform.darwin.au_ctlmode_tVar /* = kotlinx.cinterop.UByteVarOf<platform.darwin.au_ctlmode_t /* = kotlin.UByte */> */>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_get_cwd(/*0*/ path: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_get_expire_after(/*0*/ expire: kotlinx.cinterop.CValuesRef<platform.darwin.au_expire_after_t /* = platform.darwin.au_expire_after */>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_get_fsize(/*0*/ fstat: kotlinx.cinterop.CValuesRef<platform.darwin.au_fstat_t /* = platform.darwin.audit_fstat */>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_get_kaudit(/*0*/ aia: kotlinx.cinterop.CValuesRef<platform.darwin.auditinfo_addr_t /* = platform.darwin.auditinfo_addr */>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_get_kmask(/*0*/ kmask: kotlinx.cinterop.CValuesRef<platform.darwin.au_mask_t /* = platform.darwin.au_mask */>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_get_pinfo(/*0*/ api: kotlinx.cinterop.CValuesRef<platform.darwin.auditpinfo_t /* = platform.darwin.auditpinfo */>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_get_pinfo_addr(/*0*/ apia: kotlinx.cinterop.CValuesRef<platform.darwin.auditpinfo_addr_t /* = platform.darwin.auditpinfo_addr */>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_get_policy(/*0*/ policy: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Int { TODO() }

fun audit_get_qctrl(/*0*/ qctrl: kotlinx.cinterop.CValuesRef<platform.darwin.au_qctrl_t /* = platform.darwin.au_qctrl */>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_get_sflags(/*0*/ flags: kotlinx.cinterop.CValuesRef<platform.posix.uint64_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.uint64_t /* = kotlin.ULong */> */>?): kotlin.Int { TODO() }

fun audit_get_sflags_mask(/*0*/ which: kotlin.String?, /*1*/ mask: kotlinx.cinterop.CValuesRef<platform.posix.uint64_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.uint64_t /* = kotlin.ULong */> */>?): kotlin.Int { TODO() }

fun audit_get_sinfo_addr(/*0*/ aia: kotlinx.cinterop.CValuesRef<platform.darwin.auditinfo_addr_t /* = platform.darwin.auditinfo_addr */>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_get_stat(/*0*/ stats: kotlinx.cinterop.CValuesRef<platform.darwin.au_stat_t /* = platform.darwin.audit_stat */>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_send_trigger(/*0*/ trigger: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Int { TODO() }

fun audit_session_join(/*0*/ port: platform.darwin.mach_port_name_t /* = kotlin.UInt */): platform.darwin.au_asid_t /* = kotlin.Int */ { TODO() }

fun audit_session_port(/*0*/ asid: platform.darwin.au_asid_t /* = kotlin.Int */, /*1*/ portname: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_name_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_name_t /* = kotlin.UInt */> */>?): kotlin.Int { TODO() }

fun audit_session_self(): platform.darwin.mach_port_name_t /* = kotlin.UInt */ { TODO() }

fun audit_set_class(/*0*/ evc_map: kotlinx.cinterop.CValuesRef<platform.darwin.au_evclass_map_t /* = platform.darwin.au_evclass_map */>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_set_cond(/*0*/ cond: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Int { TODO() }

fun audit_set_fsize(/*0*/ fstat: kotlinx.cinterop.CValuesRef<platform.darwin.au_fstat_t /* = platform.darwin.audit_fstat */>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_set_kaudit(/*0*/ aia: kotlinx.cinterop.CValuesRef<platform.darwin.auditinfo_addr_t /* = platform.darwin.auditinfo_addr */>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_set_kmask(/*0*/ kmask: kotlinx.cinterop.CValuesRef<platform.darwin.au_mask_t /* = platform.darwin.au_mask */>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_set_pmask(/*0*/ api: kotlinx.cinterop.CValuesRef<platform.darwin.auditpinfo_t /* = platform.darwin.auditpinfo */>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_set_policy(/*0*/ policy: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Int { TODO() }

fun audit_set_qctrl(/*0*/ qctrl: kotlinx.cinterop.CValuesRef<platform.darwin.au_qctrl_t /* = platform.darwin.au_qctrl */>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_set_sflags(/*0*/ flags: platform.posix.uint64_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_set_sflags_mask(/*0*/ which: kotlin.String?, /*1*/ mask: platform.posix.uint64_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_set_stat(/*0*/ stats: kotlinx.cinterop.CValuesRef<platform.darwin.au_stat_t /* = platform.darwin.audit_stat */>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun audit_set_terminal_id(/*0*/ tid: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_t /* = platform.darwin.au_tid */>?): kotlin.Int { TODO() }

fun audit_set_terminal_id_ex(/*0*/ tid: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_addr_t /* = platform.darwin.au_tid_addr */>?): kotlin.Int { TODO() }

fun audit_submit(/*0*/ au_event: kotlin.Short, /*1*/ auid: platform.darwin.au_id_t /* = kotlin.UInt */, /*2*/ status: kotlin.Byte, /*3*/ reterr: kotlin.Int, /*4*/ fmt: kotlin.String?, /*5*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): kotlin.Int { TODO() }

fun audit_token_to_asid(/*0*/ atoken: kotlinx.cinterop.CValue<platform.darwin.audit_token_t>): platform.darwin.au_asid_t /* = kotlin.Int */ { TODO() }

fun audit_token_to_au32(/*0*/ atoken: kotlinx.cinterop.CValue<platform.darwin.audit_token_t>, /*1*/ auidp: kotlinx.cinterop.CValuesRef<platform.posix.uid_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.uid_t /* = kotlin.UInt */> */>?, /*2*/ euidp: kotlinx.cinterop.CValuesRef<platform.posix.uid_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.uid_t /* = kotlin.UInt */> */>?, /*3*/ egidp: kotlinx.cinterop.CValuesRef<platform.posix.gid_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.gid_t /* = kotlin.UInt */> */>?, /*4*/ ruidp: kotlinx.cinterop.CValuesRef<platform.posix.uid_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.uid_t /* = kotlin.UInt */> */>?, /*5*/ rgidp: kotlinx.cinterop.CValuesRef<platform.posix.gid_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.gid_t /* = kotlin.UInt */> */>?, /*6*/ pidp: kotlinx.cinterop.CValuesRef<platform.posix.pid_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.pid_t /* = kotlin.Int */> */>?, /*7*/ asidp: kotlinx.cinterop.CValuesRef<platform.darwin.au_asid_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.au_asid_t /* = kotlin.Int */> */>?, /*8*/ tidp: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_t /* = platform.darwin.au_tid */>?) { TODO() }

fun audit_token_to_auid(/*0*/ atoken: kotlinx.cinterop.CValue<platform.darwin.audit_token_t>): platform.posix.uid_t /* = kotlin.UInt */ { TODO() }

fun audit_token_to_egid(/*0*/ atoken: kotlinx.cinterop.CValue<platform.darwin.audit_token_t>): platform.posix.gid_t /* = kotlin.UInt */ { TODO() }

fun audit_token_to_euid(/*0*/ atoken: kotlinx.cinterop.CValue<platform.darwin.audit_token_t>): platform.posix.uid_t /* = kotlin.UInt */ { TODO() }

fun audit_token_to_pid(/*0*/ atoken: kotlinx.cinterop.CValue<platform.darwin.audit_token_t>): platform.posix.pid_t /* = kotlin.Int */ { TODO() }

fun audit_token_to_pidversion(/*0*/ atoken: kotlinx.cinterop.CValue<platform.darwin.audit_token_t>): kotlin.Int { TODO() }

fun audit_token_to_rgid(/*0*/ atoken: kotlinx.cinterop.CValue<platform.darwin.audit_token_t>): platform.posix.gid_t /* = kotlin.UInt */ { TODO() }

fun audit_token_to_ruid(/*0*/ atoken: kotlinx.cinterop.CValue<platform.darwin.audit_token_t>): platform.posix.uid_t /* = kotlin.UInt */ { TODO() }

fun audit_write(/*0*/ event_code: kotlin.Short, /*1*/ subject: kotlinx.cinterop.CValuesRef<platform.darwin.token_t /* = cnames.structs.au_token */>?, /*2*/ misctok: kotlinx.cinterop.CValuesRef<platform.darwin.token_t /* = cnames.structs.au_token */>?, /*3*/ retval: kotlin.Byte, /*4*/ errcode: kotlin.Int): kotlin.Int { TODO() }

fun audit_write_failure(/*0*/ event_code: kotlin.Short, /*1*/ errmsg: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*2*/ errret: kotlin.Int, /*3*/ auid: platform.darwin.au_id_t /* = kotlin.UInt */, /*4*/ euid: platform.posix.uid_t /* = kotlin.UInt */, /*5*/ egid: platform.posix.gid_t /* = kotlin.UInt */, /*6*/ ruid: platform.posix.uid_t /* = kotlin.UInt */, /*7*/ rgid: platform.posix.gid_t /* = kotlin.UInt */, /*8*/ pid: platform.posix.pid_t /* = kotlin.Int */, /*9*/ sid: platform.darwin.au_asid_t /* = kotlin.Int */, /*10*/ tid: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_t /* = platform.darwin.au_tid */>?): kotlin.Int { TODO() }

fun audit_write_failure_ex(/*0*/ event_code: kotlin.Short, /*1*/ errmsg: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*2*/ errret: kotlin.Int, /*3*/ auid: platform.darwin.au_id_t /* = kotlin.UInt */, /*4*/ euid: platform.posix.uid_t /* = kotlin.UInt */, /*5*/ egid: platform.posix.gid_t /* = kotlin.UInt */, /*6*/ ruid: platform.posix.uid_t /* = kotlin.UInt */, /*7*/ rgid: platform.posix.gid_t /* = kotlin.UInt */, /*8*/ pid: platform.posix.pid_t /* = kotlin.Int */, /*9*/ sid: platform.darwin.au_asid_t /* = kotlin.Int */, /*10*/ tid: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_addr_t /* = platform.darwin.au_tid_addr */>?): kotlin.Int { TODO() }

fun audit_write_failure_na(/*0*/ event_code: kotlin.Short, /*1*/ errmsg: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*2*/ errret: kotlin.Int, /*3*/ euid: platform.posix.uid_t /* = kotlin.UInt */, /*4*/ egid: platform.posix.gid_t /* = kotlin.UInt */, /*5*/ pid: platform.posix.pid_t /* = kotlin.Int */, /*6*/ tid: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_t /* = platform.darwin.au_tid */>?): kotlin.Int { TODO() }

fun audit_write_failure_na_ex(/*0*/ event_code: kotlin.Short, /*1*/ errmsg: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*2*/ errret: kotlin.Int, /*3*/ euid: platform.posix.uid_t /* = kotlin.UInt */, /*4*/ egid: platform.posix.gid_t /* = kotlin.UInt */, /*5*/ pid: platform.posix.pid_t /* = kotlin.Int */, /*6*/ tid: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_addr_t /* = platform.darwin.au_tid_addr */>?): kotlin.Int { TODO() }

fun audit_write_failure_self(/*0*/ event_code: kotlin.Short, /*1*/ errmsg: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*2*/ errret: kotlin.Int): kotlin.Int { TODO() }

fun audit_write_success(/*0*/ event_code: kotlin.Short, /*1*/ misctok: kotlinx.cinterop.CValuesRef<platform.darwin.token_t /* = cnames.structs.au_token */>?, /*2*/ auid: platform.darwin.au_id_t /* = kotlin.UInt */, /*3*/ euid: platform.posix.uid_t /* = kotlin.UInt */, /*4*/ egid: platform.posix.gid_t /* = kotlin.UInt */, /*5*/ ruid: platform.posix.uid_t /* = kotlin.UInt */, /*6*/ rgid: platform.posix.gid_t /* = kotlin.UInt */, /*7*/ pid: platform.posix.pid_t /* = kotlin.Int */, /*8*/ sid: platform.darwin.au_asid_t /* = kotlin.Int */, /*9*/ tid: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_t /* = platform.darwin.au_tid */>?): kotlin.Int { TODO() }

fun audit_write_success_ex(/*0*/ event_code: kotlin.Short, /*1*/ misctok: kotlinx.cinterop.CValuesRef<platform.darwin.token_t /* = cnames.structs.au_token */>?, /*2*/ auid: platform.darwin.au_id_t /* = kotlin.UInt */, /*3*/ euid: platform.posix.uid_t /* = kotlin.UInt */, /*4*/ egid: platform.posix.gid_t /* = kotlin.UInt */, /*5*/ ruid: platform.posix.uid_t /* = kotlin.UInt */, /*6*/ rgid: platform.posix.gid_t /* = kotlin.UInt */, /*7*/ pid: platform.posix.pid_t /* = kotlin.Int */, /*8*/ sid: platform.darwin.au_asid_t /* = kotlin.Int */, /*9*/ tid: kotlinx.cinterop.CValuesRef<platform.darwin.au_tid_addr_t /* = platform.darwin.au_tid_addr */>?): kotlin.Int { TODO() }

fun audit_write_success_self(/*0*/ event_code: kotlin.Short, /*1*/ misctok: kotlinx.cinterop.CValuesRef<platform.darwin.token_t /* = cnames.structs.au_token */>?): kotlin.Int { TODO() }

fun backtrace(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?, /*1*/ arg1: kotlin.Int): kotlin.Int { TODO() }

fun backtrace_from_fp(/*0*/ startfp: kotlinx.cinterop.CValuesRef<*>?, /*1*/ array: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?, /*2*/ size: kotlin.Int): kotlin.Int { TODO() }

fun backtrace_image_offsets(/*0*/ array: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?, /*1*/ image_offsets: kotlinx.cinterop.CValuesRef<platform.darwin.image_offset>?, /*2*/ size: kotlin.Int) { TODO() }

fun backtrace_symbols(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?, /*1*/ arg1: kotlin.Int): kotlinx.cinterop.CPointer<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>? { TODO() }

fun backtrace_symbols_fd(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?, /*1*/ arg1: kotlin.Int, /*2*/ arg2: kotlin.Int) { TODO() }

fun cache_create(/*0*/ name: kotlin.String?, /*1*/ attrs: kotlinx.cinterop.CValuesRef<platform.darwin.cache_attributes_t /* = platform.darwin.cache_attributes_s */>?, /*2*/ cache_out: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<platform.darwin.cache_t /* = cnames.structs.cache_s */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin.cache_t /* = cnames.structs.cache_s */>> */>?): kotlin.Int { TODO() }

fun cache_get_and_retain(/*0*/ cache: kotlinx.cinterop.CValuesRef<platform.darwin.cache_t /* = cnames.structs.cache_s */>?, /*1*/ key: kotlinx.cinterop.CValuesRef<*>?, /*2*/ value_out: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?): kotlin.Int { TODO() }

fun cache_hash_byte_string(/*0*/ data: kotlin.String?, /*1*/ bytes: platform.posix.size_t /* = kotlin.ULong */): platform.posix.uintptr_t /* = kotlin.ULong */ { TODO() }

fun cache_key_hash_cb_cstring(/*0*/ key: kotlinx.cinterop.CValuesRef<*>?, /*1*/ unused: kotlinx.cinterop.CValuesRef<*>?): platform.posix.uintptr_t /* = kotlin.ULong */ { TODO() }

fun cache_key_hash_cb_integer(/*0*/ key: kotlinx.cinterop.CValuesRef<*>?, /*1*/ unused: kotlinx.cinterop.CValuesRef<*>?): platform.posix.uintptr_t /* = kotlin.ULong */ { TODO() }

fun cache_set_and_retain(/*0*/ cache: kotlinx.cinterop.CValuesRef<platform.darwin.cache_t /* = cnames.structs.cache_s */>?, /*1*/ key: kotlinx.cinterop.CValuesRef<*>?, /*2*/ value: kotlinx.cinterop.CValuesRef<*>?, /*3*/ cost: platform.darwin.cache_cost_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun cannot_audit(/*0*/ arg0: kotlin.Int): kotlin.Int { TODO() }

fun catclose(/*0*/ arg0: platform.darwin.nl_catd? /* = kotlinx.cinterop.CPointer<platform.darwin.__nl_cat_d>? */): kotlin.Int { TODO() }

fun catgets(/*0*/ arg0: platform.darwin.nl_catd? /* = kotlinx.cinterop.CPointer<platform.darwin.__nl_cat_d>? */, /*1*/ arg1: kotlin.Int, /*2*/ arg2: kotlin.Int, /*3*/ arg3: kotlin.String?): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun catopen(/*0*/ arg0: kotlin.String?, /*1*/ arg1: kotlin.Int): platform.darwin.nl_catd? /* = kotlinx.cinterop.CPointer<platform.darwin.__nl_cat_d>? */ { TODO() }

fun clock_get_res(/*0*/ arg0: platform.darwin.mach_port_t /* = kotlin.UInt */, /*1*/ arg1: kotlinx.cinterop.CValuesRef<platform.darwin.clock_res_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.clock_res_t /* = kotlin.Int */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun clock_set_attributes(/*0*/ clock_ctrl: platform.darwin.clock_ctrl_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.clock_flavor_t /* = kotlin.Int */, /*2*/ clock_attr: platform.darwin.clock_attr_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>? */, /*3*/ clock_attrCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun clock_set_res(/*0*/ arg0: platform.darwin.mach_port_t /* = kotlin.UInt */, /*1*/ arg1: platform.darwin.clock_res_t /* = kotlin.Int */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun clock_set_time(/*0*/ clock_ctrl: platform.darwin.clock_ctrl_t /* = kotlin.UInt */, /*1*/ new_time: kotlinx.cinterop.CValue<platform.darwin.mach_timespec_t /* = platform.darwin.mach_timespec */>): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun clock_sleep(/*0*/ arg0: platform.darwin.mach_port_t /* = kotlin.UInt */, /*1*/ arg1: kotlin.Int, /*2*/ arg2: kotlinx.cinterop.CValue<platform.darwin.mach_timespec_t /* = platform.darwin.mach_timespec */>, /*3*/ arg3: kotlinx.cinterop.CValuesRef<platform.darwin.mach_timespec_t /* = platform.darwin.mach_timespec */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun clock_sleep_trap(/*0*/ clock_name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ sleep_type: platform.darwin.sleep_type_t /* = kotlin.Int */, /*2*/ sleep_sec: kotlin.Int, /*3*/ sleep_nsec: kotlin.Int, /*4*/ wakeup_time: kotlinx.cinterop.CValuesRef<platform.darwin.mach_timespec_t /* = platform.darwin.mach_timespec */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun compression_decode_buffer(/*0*/ dst_buffer: kotlinx.cinterop.CValuesRef<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>?, /*1*/ dst_size: platform.posix.size_t /* = kotlin.ULong */, /*2*/ src_buffer: kotlinx.cinterop.CValuesRef<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>?, /*3*/ src_size: platform.posix.size_t /* = kotlin.ULong */, /*4*/ scratch_buffer: kotlinx.cinterop.CValuesRef<*>?, /*5*/ algorithm: platform.darwin.compression_algorithm /* = kotlin.UInt */): platform.posix.size_t /* = kotlin.ULong */ { TODO() }

fun compression_decode_scratch_buffer_size(/*0*/ algorithm: platform.darwin.compression_algorithm /* = kotlin.UInt */): platform.posix.size_t /* = kotlin.ULong */ { TODO() }

fun compression_encode_buffer(/*0*/ dst_buffer: kotlinx.cinterop.CValuesRef<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>?, /*1*/ dst_size: platform.posix.size_t /* = kotlin.ULong */, /*2*/ src_buffer: kotlinx.cinterop.CValuesRef<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>?, /*3*/ src_size: platform.posix.size_t /* = kotlin.ULong */, /*4*/ scratch_buffer: kotlinx.cinterop.CValuesRef<*>?, /*5*/ algorithm: platform.darwin.compression_algorithm /* = kotlin.UInt */): platform.posix.size_t /* = kotlin.ULong */ { TODO() }

fun compression_encode_scratch_buffer_size(/*0*/ algorithm: platform.darwin.compression_algorithm /* = kotlin.UInt */): platform.posix.size_t /* = kotlin.ULong */ { TODO() }

fun compression_stream_destroy(/*0*/ stream: kotlinx.cinterop.CValuesRef<platform.darwin.compression_stream>?): platform.darwin.compression_status /* = kotlin.Int */ { TODO() }

fun compression_stream_init(/*0*/ stream: kotlinx.cinterop.CValuesRef<platform.darwin.compression_stream>?, /*1*/ operation: platform.darwin.compression_stream_operation /* = kotlin.UInt */, /*2*/ algorithm: platform.darwin.compression_algorithm /* = kotlin.UInt */): platform.darwin.compression_status /* = kotlin.Int */ { TODO() }

fun compression_stream_process(/*0*/ stream: kotlinx.cinterop.CValuesRef<platform.darwin.compression_stream>?, /*1*/ flags: kotlin.Int): platform.darwin.compression_status /* = kotlin.Int */ { TODO() }

fun copy_printf_domain(/*0*/ __domain: platform.darwin.printf_domain_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_domain>? */): platform.darwin.printf_domain_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_domain>? */ { TODO() }

fun copyfile(/*0*/ from: kotlin.String?, /*1*/ to: kotlin.String?, /*2*/ state: platform.darwin.copyfile_state_t? /* = kotlinx.cinterop.CPointer<cnames.structs._copyfile_state>? */, /*3*/ flags: platform.darwin.copyfile_flags_t /* = kotlin.UInt */): kotlin.Int { TODO() }

fun copyfile_state_alloc(): platform.darwin.copyfile_state_t? /* = kotlinx.cinterop.CPointer<cnames.structs._copyfile_state>? */ { TODO() }

fun copyfile_state_free(/*0*/ arg0: platform.darwin.copyfile_state_t? /* = kotlinx.cinterop.CPointer<cnames.structs._copyfile_state>? */): kotlin.Int { TODO() }

fun copyfile_state_get(/*0*/ s: platform.darwin.copyfile_state_t? /* = kotlinx.cinterop.CPointer<cnames.structs._copyfile_state>? */, /*1*/ flag: platform.posix.uint32_t /* = kotlin.UInt */, /*2*/ dst: kotlinx.cinterop.CValuesRef<*>?): kotlin.Int { TODO() }

fun copyfile_state_set(/*0*/ s: platform.darwin.copyfile_state_t? /* = kotlinx.cinterop.CPointer<cnames.structs._copyfile_state>? */, /*1*/ flag: platform.posix.uint32_t /* = kotlin.UInt */, /*2*/ src: kotlinx.cinterop.CValuesRef<*>?): kotlin.Int { TODO() }

fun dbm_open(/*0*/ arg0: kotlin.String?, /*1*/ arg1: kotlin.Int, /*2*/ arg2: platform.posix.mode_t /* = kotlin.UShort */): kotlinx.cinterop.CPointer<platform.darwin.DBM>? { TODO() }

fun dispatch_after(/*0*/ `when`: platform.darwin.dispatch_time_t /* = kotlin.ULong */, /*1*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*2*/ block: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */) { TODO() }

fun dispatch_after_f(/*0*/ `when`: platform.darwin.dispatch_time_t /* = kotlin.ULong */, /*1*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*2*/ context: kotlinx.cinterop.CValuesRef<*>?, /*3*/ work: platform.darwin.dispatch_function_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun dispatch_apply(/*0*/ iterations: platform.posix.size_t /* = kotlin.ULong */, /*1*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*2*/ block: (platform.posix.size_t /* = kotlin.ULong */) -> kotlin.Unit) { TODO() }

fun dispatch_apply_f(/*0*/ iterations: platform.posix.size_t /* = kotlin.ULong */, /*1*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*2*/ context: kotlinx.cinterop.CValuesRef<*>?, /*3*/ work: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.posix.size_t /* = kotlin.ULong */) -> kotlin.Unit>>?) { TODO() }

fun dispatch_async(/*0*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*1*/ block: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */) { TODO() }

fun dispatch_async_f(/*0*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*1*/ context: kotlinx.cinterop.CValuesRef<*>?, /*2*/ work: platform.darwin.dispatch_function_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun dispatch_barrier_async(/*0*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*1*/ block: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */) { TODO() }

fun dispatch_barrier_async_f(/*0*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*1*/ context: kotlinx.cinterop.CValuesRef<*>?, /*2*/ work: platform.darwin.dispatch_function_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun dispatch_barrier_sync(/*0*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*1*/ block: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */) { TODO() }

fun dispatch_barrier_sync_f(/*0*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*1*/ context: kotlinx.cinterop.CValuesRef<*>?, /*2*/ work: platform.darwin.dispatch_function_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun dispatch_block_cancel(/*0*/ block: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */) { TODO() }

fun dispatch_block_create(/*0*/ flags: platform.darwin.dispatch_block_flags_t /* = kotlin.ULong */, /*1*/ block: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */): platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */ { TODO() }

fun dispatch_block_create_with_qos_class(/*0*/ flags: platform.darwin.dispatch_block_flags_t /* = kotlin.ULong */, /*1*/ qos_class: platform.darwin.dispatch_qos_class_t /* = kotlin.UInt */, /*2*/ relative_priority: kotlin.Int, /*3*/ block: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */): platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */ { TODO() }

fun dispatch_block_notify(/*0*/ block: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */, /*1*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*2*/ notification_block: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */) { TODO() }

fun dispatch_block_perform(/*0*/ flags: platform.darwin.dispatch_block_flags_t /* = kotlin.ULong */, /*1*/ block: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */) { TODO() }

fun dispatch_block_testcancel(/*0*/ block: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */): kotlin.Long { TODO() }

fun dispatch_block_wait(/*0*/ block: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */, /*1*/ timeout: platform.darwin.dispatch_time_t /* = kotlin.ULong */): kotlin.Long { TODO() }

fun dispatch_data_apply(/*0*/ data: platform.darwin.dispatch_data_t? /* = platform.darwin.NSObject? */, /*1*/ applier: platform.darwin.dispatch_data_applier_t? /* = ((platform.darwin.dispatch_data_t? /* = platform.darwin.NSObject? */, platform.posix.size_t /* = kotlin.ULong */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.posix.size_t /* = kotlin.ULong */) -> kotlin.Boolean)? */): kotlin.Boolean { TODO() }

fun dispatch_data_copy_region(/*0*/ data: platform.darwin.dispatch_data_t? /* = platform.darwin.NSObject? */, /*1*/ location: platform.posix.size_t /* = kotlin.ULong */, /*2*/ offset_ptr: kotlinx.cinterop.CValuesRef<platform.posix.size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.size_t /* = kotlin.ULong */> */>?): platform.darwin.dispatch_data_t? /* = platform.darwin.NSObject? */ { TODO() }

fun dispatch_data_create(/*0*/ buffer: kotlinx.cinterop.CValuesRef<*>?, /*1*/ size: platform.posix.size_t /* = kotlin.ULong */, /*2*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*3*/ destructor: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */): platform.darwin.dispatch_data_t? /* = platform.darwin.NSObject? */ { TODO() }

fun dispatch_data_create_map(/*0*/ data: platform.darwin.dispatch_data_t? /* = platform.darwin.NSObject? */, /*1*/ buffer_ptr: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?, /*2*/ size_ptr: kotlinx.cinterop.CValuesRef<platform.posix.size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.size_t /* = kotlin.ULong */> */>?): platform.darwin.dispatch_data_t? /* = platform.darwin.NSObject? */ { TODO() }

fun dispatch_data_create_subrange(/*0*/ data: platform.darwin.dispatch_data_t? /* = platform.darwin.NSObject? */, /*1*/ offset: platform.posix.size_t /* = kotlin.ULong */, /*2*/ length: platform.posix.size_t /* = kotlin.ULong */): platform.darwin.dispatch_data_t? /* = platform.darwin.NSObject? */ { TODO() }

fun dispatch_data_get_size(/*0*/ data: platform.darwin.dispatch_data_t? /* = platform.darwin.NSObject? */): platform.posix.size_t /* = kotlin.ULong */ { TODO() }

fun dispatch_debugv(/*0*/ `object`: platform.darwin.dispatch_object_t? /* = platform.darwin.NSObject? */, /*1*/ message: kotlin.String?, /*2*/ ap: platform.posix.va_list? /* = kotlinx.cinterop.CPointer<platform.posix.__va_list_tag>? */) { TODO() }

fun dispatch_get_context(/*0*/ `object`: platform.darwin.dispatch_object_t? /* = platform.darwin.NSObject? */): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun dispatch_get_specific(/*0*/ key: kotlinx.cinterop.CValuesRef<*>?): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun dispatch_group_async(/*0*/ group: platform.darwin.dispatch_group_t? /* = platform.darwin.NSObject? */, /*1*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*2*/ block: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */) { TODO() }

fun dispatch_group_async_f(/*0*/ group: platform.darwin.dispatch_group_t? /* = platform.darwin.NSObject? */, /*1*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*2*/ context: kotlinx.cinterop.CValuesRef<*>?, /*3*/ work: platform.darwin.dispatch_function_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun dispatch_group_notify(/*0*/ group: platform.darwin.dispatch_group_t? /* = platform.darwin.NSObject? */, /*1*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*2*/ block: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */) { TODO() }

fun dispatch_group_notify_f(/*0*/ group: platform.darwin.dispatch_group_t? /* = platform.darwin.NSObject? */, /*1*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*2*/ context: kotlinx.cinterop.CValuesRef<*>?, /*3*/ work: platform.darwin.dispatch_function_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun dispatch_group_wait(/*0*/ group: platform.darwin.dispatch_group_t? /* = platform.darwin.NSObject? */, /*1*/ timeout: platform.darwin.dispatch_time_t /* = kotlin.ULong */): kotlin.Long { TODO() }

fun dispatch_io_barrier(/*0*/ channel: platform.darwin.dispatch_io_t? /* = platform.darwin.NSObject? */, /*1*/ barrier: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */) { TODO() }

fun dispatch_io_close(/*0*/ channel: platform.darwin.dispatch_io_t? /* = platform.darwin.NSObject? */, /*1*/ flags: platform.darwin.dispatch_io_close_flags_t /* = kotlin.ULong */) { TODO() }

fun dispatch_io_create(/*0*/ type: platform.darwin.dispatch_io_type_t /* = kotlin.ULong */, /*1*/ fd: platform.darwin.dispatch_fd_t /* = kotlin.Int */, /*2*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*3*/ cleanup_handler: (kotlin.Int) -> kotlin.Unit): platform.darwin.dispatch_io_t? /* = platform.darwin.NSObject? */ { TODO() }

fun dispatch_io_create_with_io(/*0*/ type: platform.darwin.dispatch_io_type_t /* = kotlin.ULong */, /*1*/ io: platform.darwin.dispatch_io_t? /* = platform.darwin.NSObject? */, /*2*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*3*/ cleanup_handler: (kotlin.Int) -> kotlin.Unit): platform.darwin.dispatch_io_t? /* = platform.darwin.NSObject? */ { TODO() }

fun dispatch_io_create_with_path(/*0*/ type: platform.darwin.dispatch_io_type_t /* = kotlin.ULong */, /*1*/ path: kotlin.String?, /*2*/ oflag: kotlin.Int, /*3*/ mode: platform.posix.mode_t /* = kotlin.UShort */, /*4*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*5*/ cleanup_handler: (kotlin.Int) -> kotlin.Unit): platform.darwin.dispatch_io_t? /* = platform.darwin.NSObject? */ { TODO() }

fun dispatch_io_get_descriptor(/*0*/ channel: platform.darwin.dispatch_io_t? /* = platform.darwin.NSObject? */): platform.darwin.dispatch_fd_t /* = kotlin.Int */ { TODO() }

fun dispatch_io_read(/*0*/ channel: platform.darwin.dispatch_io_t? /* = platform.darwin.NSObject? */, /*1*/ offset: platform.posix.off_t /* = kotlin.Long */, /*2*/ length: platform.posix.size_t /* = kotlin.ULong */, /*3*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*4*/ io_handler: platform.darwin.dispatch_io_handler_t? /* = ((kotlin.Boolean, platform.darwin.dispatch_data_t? /* = platform.darwin.NSObject? */, kotlin.Int) -> kotlin.Unit)? */) { TODO() }

fun dispatch_io_set_high_water(/*0*/ channel: platform.darwin.dispatch_io_t? /* = platform.darwin.NSObject? */, /*1*/ high_water: platform.posix.size_t /* = kotlin.ULong */) { TODO() }

fun dispatch_io_set_interval(/*0*/ channel: platform.darwin.dispatch_io_t? /* = platform.darwin.NSObject? */, /*1*/ interval: platform.posix.uint64_t /* = kotlin.ULong */, /*2*/ flags: platform.darwin.dispatch_io_interval_flags_t /* = kotlin.ULong */) { TODO() }

fun dispatch_io_set_low_water(/*0*/ channel: platform.darwin.dispatch_io_t? /* = platform.darwin.NSObject? */, /*1*/ low_water: platform.posix.size_t /* = kotlin.ULong */) { TODO() }

fun dispatch_io_write(/*0*/ channel: platform.darwin.dispatch_io_t? /* = platform.darwin.NSObject? */, /*1*/ offset: platform.posix.off_t /* = kotlin.Long */, /*2*/ data: platform.darwin.dispatch_data_t? /* = platform.darwin.NSObject? */, /*3*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*4*/ io_handler: platform.darwin.dispatch_io_handler_t? /* = ((kotlin.Boolean, platform.darwin.dispatch_data_t? /* = platform.darwin.NSObject? */, kotlin.Int) -> kotlin.Unit)? */) { TODO() }

fun dispatch_once(/*0*/ predicate: kotlinx.cinterop.CValuesRef<platform.darwin.dispatch_once_tVar /* = kotlinx.cinterop.LongVarOf<platform.darwin.dispatch_once_t /* = kotlin.Long */> */>?, /*1*/ block: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */) { TODO() }

fun dispatch_once_f(/*0*/ predicate: kotlinx.cinterop.CValuesRef<platform.darwin.dispatch_once_tVar /* = kotlinx.cinterop.LongVarOf<platform.darwin.dispatch_once_t /* = kotlin.Long */> */>?, /*1*/ context: kotlinx.cinterop.CValuesRef<*>?, /*2*/ function: platform.darwin.dispatch_function_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun dispatch_queue_attr_make_with_autorelease_frequency(/*0*/ attr: platform.darwin.dispatch_queue_attr_t? /* = platform.darwin.NSObject? */, /*1*/ frequency: platform.darwin.dispatch_autorelease_frequency_t /* = kotlin.ULong */): platform.darwin.dispatch_queue_attr_t? /* = platform.darwin.NSObject? */ { TODO() }

fun dispatch_queue_attr_make_with_qos_class(/*0*/ attr: platform.darwin.dispatch_queue_attr_t? /* = platform.darwin.NSObject? */, /*1*/ qos_class: platform.darwin.dispatch_qos_class_t /* = kotlin.UInt */, /*2*/ relative_priority: kotlin.Int): platform.darwin.dispatch_queue_attr_t? /* = platform.darwin.NSObject? */ { TODO() }

fun dispatch_queue_get_label(/*0*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun dispatch_queue_get_qos_class(/*0*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*1*/ relative_priority_ptr: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): platform.darwin.dispatch_qos_class_t /* = kotlin.UInt */ { TODO() }

fun dispatch_queue_get_specific(/*0*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlinx.cinterop.CValuesRef<*>?): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun dispatch_queue_set_specific(/*0*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlinx.cinterop.CValuesRef<*>?, /*2*/ context: kotlinx.cinterop.CValuesRef<*>?, /*3*/ destructor: platform.darwin.dispatch_function_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun dispatch_read(/*0*/ fd: platform.darwin.dispatch_fd_t /* = kotlin.Int */, /*1*/ length: platform.posix.size_t /* = kotlin.ULong */, /*2*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*3*/ handler: (platform.darwin.dispatch_data_t? /* = platform.darwin.NSObject? */, kotlin.Int) -> kotlin.Unit) { TODO() }

fun dispatch_semaphore_wait(/*0*/ dsema: platform.darwin.dispatch_semaphore_t? /* = platform.darwin.NSObject? */, /*1*/ timeout: platform.darwin.dispatch_time_t /* = kotlin.ULong */): kotlin.Long { TODO() }

fun dispatch_set_finalizer_f(/*0*/ `object`: platform.darwin.dispatch_object_t? /* = platform.darwin.NSObject? */, /*1*/ finalizer: platform.darwin.dispatch_function_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun dispatch_source_create(/*0*/ type: platform.darwin.dispatch_source_type_t? /* = kotlinx.cinterop.CPointer<cnames.structs.dispatch_source_type_s>? */, /*1*/ handle: platform.posix.uintptr_t /* = kotlin.ULong */, /*2*/ mask: kotlin.ULong, /*3*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */): platform.darwin.dispatch_source_t? /* = platform.darwin.NSObject? */ { TODO() }

fun dispatch_source_get_handle(/*0*/ source: platform.darwin.dispatch_source_t? /* = platform.darwin.NSObject? */): platform.posix.uintptr_t /* = kotlin.ULong */ { TODO() }

fun dispatch_source_set_cancel_handler(/*0*/ source: platform.darwin.dispatch_source_t? /* = platform.darwin.NSObject? */, /*1*/ handler: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */) { TODO() }

fun dispatch_source_set_cancel_handler_f(/*0*/ source: platform.darwin.dispatch_source_t? /* = platform.darwin.NSObject? */, /*1*/ handler: platform.darwin.dispatch_function_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun dispatch_source_set_event_handler(/*0*/ source: platform.darwin.dispatch_source_t? /* = platform.darwin.NSObject? */, /*1*/ handler: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */) { TODO() }

fun dispatch_source_set_event_handler_f(/*0*/ source: platform.darwin.dispatch_source_t? /* = platform.darwin.NSObject? */, /*1*/ handler: platform.darwin.dispatch_function_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun dispatch_source_set_registration_handler(/*0*/ source: platform.darwin.dispatch_source_t? /* = platform.darwin.NSObject? */, /*1*/ handler: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */) { TODO() }

fun dispatch_source_set_registration_handler_f(/*0*/ source: platform.darwin.dispatch_source_t? /* = platform.darwin.NSObject? */, /*1*/ handler: platform.darwin.dispatch_function_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun dispatch_source_set_timer(/*0*/ source: platform.darwin.dispatch_source_t? /* = platform.darwin.NSObject? */, /*1*/ start: platform.darwin.dispatch_time_t /* = kotlin.ULong */, /*2*/ interval: platform.posix.uint64_t /* = kotlin.ULong */, /*3*/ leeway: platform.posix.uint64_t /* = kotlin.ULong */) { TODO() }

fun dispatch_sync(/*0*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*1*/ block: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */) { TODO() }

fun dispatch_sync_f(/*0*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*1*/ context: kotlinx.cinterop.CValuesRef<*>?, /*2*/ work: platform.darwin.dispatch_function_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun dispatch_time(/*0*/ `when`: platform.darwin.dispatch_time_t /* = kotlin.ULong */, /*1*/ delta: platform.posix.int64_t /* = kotlin.Long */): platform.darwin.dispatch_time_t /* = kotlin.ULong */ { TODO() }

fun dispatch_walltime(/*0*/ `when`: kotlinx.cinterop.CValuesRef<platform.posix.timespec>?, /*1*/ delta: platform.posix.int64_t /* = kotlin.Long */): platform.darwin.dispatch_time_t /* = kotlin.ULong */ { TODO() }

fun dispatch_write(/*0*/ fd: platform.darwin.dispatch_fd_t /* = kotlin.Int */, /*1*/ data: platform.darwin.dispatch_data_t? /* = platform.darwin.NSObject? */, /*2*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*3*/ handler: (platform.darwin.dispatch_data_t? /* = platform.darwin.NSObject? */, kotlin.Int) -> kotlin.Unit) { TODO() }

fun dns_class_number(/*0*/ c: kotlin.String?, /*1*/ n: kotlinx.cinterop.CValuesRef<platform.posix.uint16_tVar /* = kotlinx.cinterop.UShortVarOf<platform.posix.uint16_t /* = kotlin.UShort */> */>?): platform.posix.int32_t /* = kotlin.Int */ { TODO() }

fun dns_class_string(/*0*/ dnsclass: platform.posix.uint16_t /* = kotlin.UShort */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun dns_free(/*0*/ dns: platform.darwin.dns_handle_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__dns_handle_private_struct>? */) { TODO() }

fun dns_get_buffer_size(/*0*/ d: platform.darwin.dns_handle_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__dns_handle_private_struct>? */): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun dns_lookup(/*0*/ dns: platform.darwin.dns_handle_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__dns_handle_private_struct>? */, /*1*/ name: kotlin.String?, /*2*/ dnsclass: platform.posix.uint32_t /* = kotlin.UInt */, /*3*/ dnstype: platform.posix.uint32_t /* = kotlin.UInt */): kotlinx.cinterop.CPointer<platform.darwin.dns_reply_t>? { TODO() }

fun dns_open(/*0*/ name: kotlin.String?): platform.darwin.dns_handle_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__dns_handle_private_struct>? */ { TODO() }

fun dns_parse_packet(/*0*/ buf: kotlin.String?, /*1*/ len: platform.posix.uint32_t /* = kotlin.UInt */): kotlinx.cinterop.CPointer<platform.darwin.dns_reply_t>? { TODO() }

fun dns_parse_question(/*0*/ buf: kotlin.String?, /*1*/ len: platform.posix.uint32_t /* = kotlin.UInt */): kotlinx.cinterop.CPointer<platform.darwin.dns_question_t>? { TODO() }

fun dns_parse_resource_record(/*0*/ buf: kotlin.String?, /*1*/ len: platform.posix.uint32_t /* = kotlin.UInt */): kotlinx.cinterop.CPointer<platform.darwin.dns_resource_record_t>? { TODO() }

fun dns_print_handle(/*0*/ d: platform.darwin.dns_handle_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__dns_handle_private_struct>? */, /*1*/ f: kotlinx.cinterop.CValuesRef<platform.posix.FILE /* = platform.posix.__sFILE */>?) { TODO() }

fun dns_print_reply(/*0*/ r: kotlinx.cinterop.CValuesRef<platform.darwin.dns_reply_t>?, /*1*/ f: kotlinx.cinterop.CValuesRef<platform.posix.FILE /* = platform.posix.__sFILE */>?, /*2*/ mask: platform.posix.uint16_t /* = kotlin.UShort */) { TODO() }

fun dns_query(/*0*/ dns: platform.darwin.dns_handle_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__dns_handle_private_struct>? */, /*1*/ name: kotlin.String?, /*2*/ dnsclass: platform.posix.uint32_t /* = kotlin.UInt */, /*3*/ dnstype: platform.posix.uint32_t /* = kotlin.UInt */, /*4*/ buf: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*5*/ len: platform.posix.uint32_t /* = kotlin.UInt */, /*6*/ from: kotlinx.cinterop.CValuesRef<platform.posix.sockaddr>?, /*7*/ fromlen: kotlinx.cinterop.CValuesRef<platform.posix.uint32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.uint32_t /* = kotlin.UInt */> */>?): platform.posix.int32_t /* = kotlin.Int */ { TODO() }

fun dns_search(/*0*/ dns: platform.darwin.dns_handle_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__dns_handle_private_struct>? */, /*1*/ name: kotlin.String?, /*2*/ dnsclass: platform.posix.uint32_t /* = kotlin.UInt */, /*3*/ dnstype: platform.posix.uint32_t /* = kotlin.UInt */, /*4*/ buf: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*5*/ len: platform.posix.uint32_t /* = kotlin.UInt */, /*6*/ from: kotlinx.cinterop.CValuesRef<platform.posix.sockaddr>?, /*7*/ fromlen: kotlinx.cinterop.CValuesRef<platform.posix.uint32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.uint32_t /* = kotlin.UInt */> */>?): platform.posix.int32_t /* = kotlin.Int */ { TODO() }

fun dns_search_list_count(/*0*/ dns: platform.darwin.dns_handle_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__dns_handle_private_struct>? */): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun dns_search_list_domain(/*0*/ dns: platform.darwin.dns_handle_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__dns_handle_private_struct>? */, /*1*/ i: platform.posix.uint32_t /* = kotlin.UInt */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun dns_set_buffer_size(/*0*/ d: platform.darwin.dns_handle_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__dns_handle_private_struct>? */, /*1*/ len: platform.posix.uint32_t /* = kotlin.UInt */) { TODO() }

fun dns_set_debug(/*0*/ dns: platform.darwin.dns_handle_t? /* = kotlinx.cinterop.CPointer<cnames.structs.__dns_handle_private_struct>? */, /*1*/ flag: platform.posix.uint32_t /* = kotlin.UInt */) { TODO() }

fun dns_type_number(/*0*/ t: kotlin.String?, /*1*/ n: kotlinx.cinterop.CValuesRef<platform.posix.uint16_tVar /* = kotlinx.cinterop.UShortVarOf<platform.posix.uint16_t /* = kotlin.UShort */> */>?): platform.posix.int32_t /* = kotlin.Int */ { TODO() }

fun dns_type_string(/*0*/ dnstype: platform.posix.uint16_t /* = kotlin.UShort */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun dxprintf(/*0*/ __fd: kotlin.Int, /*1*/ __domain: platform.darwin.printf_domain_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_domain>? */, /*2*/ __loc: platform.posix.locale_t? /* = kotlinx.cinterop.CPointer<cnames.structs._xlocale>? */, /*3*/ __format: kotlin.String?, /*4*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): kotlin.Int { TODO() }

fun dxprintf_exec(/*0*/ __fd: kotlin.Int, /*1*/ __pc: platform.darwin.printf_comp_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_compiled>? */, /*2*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): kotlin.Int { TODO() }

fun endac() { TODO() }

fun endauclass() { TODO() }

fun endauevent() { TODO() }

fun endauuser() { TODO() }

fun etap_trace_thread(/*0*/ target_act: platform.darwin.thread_act_t /* = kotlin.UInt */, /*1*/ trace_status: platform.posix.boolean_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun fcopyfile(/*0*/ from_fd: kotlin.Int, /*1*/ to_fd: kotlin.Int, /*2*/ arg2: platform.darwin.copyfile_state_t? /* = kotlinx.cinterop.CPointer<cnames.structs._copyfile_state>? */, /*3*/ flags: platform.darwin.copyfile_flags_t /* = kotlin.UInt */): kotlin.Int { TODO() }

fun forkpty(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*2*/ arg2: kotlinx.cinterop.CValuesRef<platform.posix.termios>?, /*3*/ arg3: kotlinx.cinterop.CValuesRef<platform.posix.winsize>?): platform.posix.pid_t /* = kotlin.Int */ { TODO() }

fun fparseln(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.posix.FILE /* = platform.posix.__sFILE */>?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<platform.posix.size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.size_t /* = kotlin.ULong */> */>?, /*2*/ arg2: kotlinx.cinterop.CValuesRef<platform.posix.size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.size_t /* = kotlin.ULong */> */>?, /*3*/ arg3: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*4*/ arg4: kotlin.Int): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun free_printf_comp(/*0*/ __pc: platform.darwin.printf_comp_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_compiled>? */) { TODO() }

fun free_printf_domain(/*0*/ __domain: platform.darwin.printf_domain_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_domain>? */) { TODO() }

fun fxprintf(/*0*/ __stream: kotlinx.cinterop.CValuesRef<platform.posix.FILE /* = platform.posix.__sFILE */>?, /*1*/ __domain: platform.darwin.printf_domain_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_domain>? */, /*2*/ __loc: platform.posix.locale_t? /* = kotlinx.cinterop.CPointer<cnames.structs._xlocale>? */, /*3*/ __format: kotlin.String?, /*4*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): kotlin.Int { TODO() }

fun fxprintf_exec(/*0*/ __stream: kotlinx.cinterop.CValuesRef<platform.posix.FILE /* = platform.posix.__sFILE */>?, /*1*/ __pc: platform.darwin.printf_comp_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_compiled>? */, /*2*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): kotlin.Int { TODO() }

fun getacdir(/*0*/ name: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ len: kotlin.Int): kotlin.Int { TODO() }

fun getacexpire(/*0*/ andflg: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?, /*1*/ age: kotlinx.cinterop.CValuesRef<platform.posix.time_tVar /* = kotlinx.cinterop.LongVarOf<platform.posix.time_t /* = kotlin.Long */> */>?, /*2*/ size: kotlinx.cinterop.CValuesRef<platform.posix.size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.size_t /* = kotlin.ULong */> */>?): kotlin.Int { TODO() }

fun getacfilesz(/*0*/ size_val: kotlinx.cinterop.CValuesRef<platform.posix.size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.size_t /* = kotlin.ULong */> */>?): kotlin.Int { TODO() }

fun getacflg(/*0*/ auditstr: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ len: kotlin.Int): kotlin.Int { TODO() }

fun getachost(/*0*/ auditstr: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ len: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun getacmin(/*0*/ min_val: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Int { TODO() }

fun getacna(/*0*/ auditstr: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ len: kotlin.Int): kotlin.Int { TODO() }

fun getacpol(/*0*/ auditstr: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ len: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun getacsflagsmask(/*0*/ which: kotlin.String?, /*1*/ auditstr: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*2*/ len: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun getauclassent(): kotlinx.cinterop.CPointer<platform.darwin.au_class_ent>? { TODO() }

fun getauclassent_r(/*0*/ class_int: kotlinx.cinterop.CValuesRef<platform.darwin.au_class_ent_t /* = platform.darwin.au_class_ent */>?): kotlinx.cinterop.CPointer<platform.darwin.au_class_ent>? { TODO() }

fun getauclassnam(/*0*/ name: kotlin.String?): kotlinx.cinterop.CPointer<platform.darwin.au_class_ent>? { TODO() }

fun getauclassnam_r(/*0*/ class_int: kotlinx.cinterop.CValuesRef<platform.darwin.au_class_ent_t /* = platform.darwin.au_class_ent */>?, /*1*/ name: kotlin.String?): kotlinx.cinterop.CPointer<platform.darwin.au_class_ent>? { TODO() }

fun getauclassnum(/*0*/ class_number: platform.darwin.au_class_t /* = kotlin.UInt */): kotlinx.cinterop.CPointer<platform.darwin.au_class_ent>? { TODO() }

fun getauclassnum_r(/*0*/ class_int: kotlinx.cinterop.CValuesRef<platform.darwin.au_class_ent_t /* = platform.darwin.au_class_ent */>?, /*1*/ class_number: platform.darwin.au_class_t /* = kotlin.UInt */): kotlinx.cinterop.CPointer<platform.darwin.au_class_ent>? { TODO() }

fun getauditflagsbin(/*0*/ auditstr: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ masks: kotlinx.cinterop.CValuesRef<platform.darwin.au_mask_t /* = platform.darwin.au_mask */>?): kotlin.Int { TODO() }

fun getauditflagschar(/*0*/ auditstr: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ masks: kotlinx.cinterop.CValuesRef<platform.darwin.au_mask_t /* = platform.darwin.au_mask */>?, /*2*/ verbose: kotlin.Int): kotlin.Int { TODO() }

fun getauevent(): kotlinx.cinterop.CPointer<platform.darwin.au_event_ent>? { TODO() }

fun getauevent_r(/*0*/ e: kotlinx.cinterop.CValuesRef<platform.darwin.au_event_ent>?): kotlinx.cinterop.CPointer<platform.darwin.au_event_ent>? { TODO() }

fun getauevnam(/*0*/ name: kotlin.String?): kotlinx.cinterop.CPointer<platform.darwin.au_event_ent>? { TODO() }

fun getauevnam_r(/*0*/ e: kotlinx.cinterop.CValuesRef<platform.darwin.au_event_ent>?, /*1*/ name: kotlin.String?): kotlinx.cinterop.CPointer<platform.darwin.au_event_ent>? { TODO() }

fun getauevnonam(/*0*/ event_name: kotlin.String?): kotlinx.cinterop.CPointer<platform.darwin.au_event_tVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.au_event_t /* = kotlin.UShort */> */>? { TODO() }

fun getauevnonam_r(/*0*/ ev: kotlinx.cinterop.CValuesRef<platform.darwin.au_event_tVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.au_event_t /* = kotlin.UShort */> */>?, /*1*/ event_name: kotlin.String?): kotlinx.cinterop.CPointer<platform.darwin.au_event_tVar /* = kotlinx.cinterop.UShortVarOf<platform.darwin.au_event_t /* = kotlin.UShort */> */>? { TODO() }

fun getauevnum(/*0*/ event_number: platform.darwin.au_event_t /* = kotlin.UShort */): kotlinx.cinterop.CPointer<platform.darwin.au_event_ent>? { TODO() }

fun getauevnum_r(/*0*/ e: kotlinx.cinterop.CValuesRef<platform.darwin.au_event_ent>?, /*1*/ event_number: platform.darwin.au_event_t /* = kotlin.UShort */): kotlinx.cinterop.CPointer<platform.darwin.au_event_ent>? { TODO() }

fun getauid(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.au_id_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.au_id_t /* = kotlin.UInt */> */>?): kotlin.Int { TODO() }

fun getauuserent(): kotlinx.cinterop.CPointer<platform.darwin.au_user_ent>? { TODO() }

fun getauuserent_r(/*0*/ u: kotlinx.cinterop.CValuesRef<platform.darwin.au_user_ent>?): kotlinx.cinterop.CPointer<platform.darwin.au_user_ent>? { TODO() }

fun getauusernam(/*0*/ name: kotlin.String?): kotlinx.cinterop.CPointer<platform.darwin.au_user_ent>? { TODO() }

fun getauusernam_r(/*0*/ u: kotlinx.cinterop.CValuesRef<platform.darwin.au_user_ent>?, /*1*/ name: kotlin.String?): kotlinx.cinterop.CPointer<platform.darwin.au_user_ent>? { TODO() }

fun getfauditflags(/*0*/ usremask: kotlinx.cinterop.CValuesRef<platform.darwin.au_mask_t /* = platform.darwin.au_mask */>?, /*1*/ usrdmask: kotlinx.cinterop.CValuesRef<platform.darwin.au_mask_t /* = platform.darwin.au_mask */>?, /*2*/ lastmask: kotlinx.cinterop.CValuesRef<platform.darwin.au_mask_t /* = platform.darwin.au_mask */>?): kotlin.Int { TODO() }

fun getifaddrs(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<platform.darwin.ifaddrs> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin.ifaddrs>> */>?): kotlin.Int { TODO() }

fun getifmaddrs(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<platform.darwin.ifmaddrs> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin.ifmaddrs>> */>?): kotlin.Int { TODO() }

fun getlastlogx(/*0*/ arg0: platform.posix.uid_t /* = kotlin.UInt */, /*1*/ arg1: kotlinx.cinterop.CValuesRef<platform.darwin.lastlogx>?): kotlinx.cinterop.CPointer<platform.darwin.lastlogx>? { TODO() }

fun getutmp(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.utmpx>?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<platform.darwin.utmp>?) { TODO() }

fun getutmpx(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.utmp>?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<platform.darwin.utmpx>?) { TODO() }

fun glob(/*0*/ arg0: kotlin.String?, /*1*/ arg1: kotlin.Int, /*2*/ arg2: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlin.Int) -> kotlin.Int>>?, /*3*/ arg3: kotlinx.cinterop.CValuesRef<platform.darwin.glob_t>?): kotlin.Int { TODO() }

fun glob_b(/*0*/ arg0: kotlin.String?, /*1*/ arg1: kotlin.Int, /*2*/ arg2: ((kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlin.Int) -> kotlin.Int)?, /*3*/ arg3: kotlinx.cinterop.CValuesRef<platform.darwin.glob_t>?): kotlin.Int { TODO() }

fun host_check_multiuser_mode(/*0*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ multiuser_mode: kotlinx.cinterop.CValuesRef<platform.posix.uint32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.uint32_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_create_mach_voucher(/*0*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ recipes: platform.darwin.mach_voucher_attr_raw_recipe_array_t? /* = kotlinx.cinterop.CPointer<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>? */, /*2*/ recipesCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */, /*3*/ voucher: kotlinx.cinterop.CValuesRef<platform.darwin.ipc_voucher_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.ipc_voucher_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_create_mach_voucher_trap(/*0*/ host: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ recipes: platform.darwin.mach_voucher_attr_raw_recipe_array_t? /* = kotlinx.cinterop.CPointer<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>? */, /*2*/ recipes_size: kotlin.Int, /*3*/ voucher: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_name_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_name_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_default_memory_manager(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ default_manager: kotlinx.cinterop.CValuesRef<platform.darwin.memory_object_default_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.memory_object_default_t /* = kotlin.UInt */> */>?, /*2*/ cluster_size: platform.darwin.memory_object_cluster_size_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_get_UNDServer(/*0*/ host: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ server: kotlinx.cinterop.CValuesRef<platform.darwin.UNDServerRefVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.UNDServerRef /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_get_atm_diagnostic_flag(/*0*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ diagnostic_flag: kotlinx.cinterop.CValuesRef<platform.posix.uint32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.uint32_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_get_boot_info(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ boot_info: platform.darwin.kernel_boot_info_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>? */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_get_clock_control(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ clock_id: platform.darwin.clock_id_t /* = kotlin.Int */, /*2*/ clock_ctrl: kotlinx.cinterop.CValuesRef<platform.darwin.clock_ctrl_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.clock_ctrl_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_get_clock_service(/*0*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ clock_id: platform.darwin.clock_id_t /* = kotlin.Int */, /*2*/ clock_serv: kotlinx.cinterop.CValuesRef<platform.darwin.clock_serv_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.clock_serv_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_get_exception_ports(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ exception_mask: platform.darwin.exception_mask_t /* = kotlin.UInt */, /*2*/ masks: platform.darwin.exception_mask_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.exception_mask_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_mask_t /* = kotlin.UInt */> */>? */, /*3*/ masksCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?, /*4*/ old_handlers: platform.darwin.exception_handler_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.exception_handler_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_handler_t /* = kotlin.UInt */> */>? */, /*5*/ old_behaviors: platform.darwin.exception_behavior_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.exception_behavior_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.exception_behavior_t /* = kotlin.Int */> */>? */, /*6*/ old_flavors: platform.darwin.exception_flavor_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.thread_state_flavor_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.thread_state_flavor_t /* = kotlin.Int */> */>? */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_get_io_master(/*0*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ io_master: kotlinx.cinterop.CValuesRef<platform.darwin.io_master_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.io_master_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_get_multiuser_config_flags(/*0*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ multiuser_flags: kotlinx.cinterop.CValuesRef<platform.posix.uint32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.uint32_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_get_special_port(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ node: kotlin.Int, /*2*/ which: kotlin.Int, /*3*/ port: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_info(/*0*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.host_flavor_t /* = kotlin.Int */, /*2*/ host_info_out: platform.darwin.host_info_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*3*/ host_info_outCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_kernel_version(/*0*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ kernel_version: platform.darwin.kernel_version_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>? */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_lockgroup_info(/*0*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ lockgroup_info: kotlinx.cinterop.CValuesRef<platform.darwin.lockgroup_info_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.lockgroup_info_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.lockgroup_info_t /* = platform.darwin.lockgroup_info */> */> */>?, /*2*/ lockgroup_infoCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_page_size(/*0*/ arg0: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ arg1: kotlinx.cinterop.CValuesRef<platform.darwin.vm_size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_size_t /* = kotlin.ULong */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_priv_statistics(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.host_flavor_t /* = kotlin.Int */, /*2*/ host_info_out: platform.darwin.host_info_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*3*/ host_info_outCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_processor_info(/*0*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.processor_flavor_t /* = kotlin.Int */, /*2*/ out_processor_count: kotlinx.cinterop.CValuesRef<platform.darwin.natural_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */> */>?, /*3*/ out_processor_info: kotlinx.cinterop.CValuesRef<platform.darwin.processor_info_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.processor_info_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */> */> */>?, /*4*/ out_processor_infoCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_processor_set_priv(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ set_name: platform.darwin.processor_set_name_t /* = kotlin.UInt */, /*2*/ set: kotlinx.cinterop.CValuesRef<platform.darwin.processor_set_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.processor_set_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_processor_sets(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ processor_sets: kotlinx.cinterop.CValuesRef<platform.darwin.processor_set_name_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.processor_set_name_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.processor_set_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.processor_set_t /* = kotlin.UInt */> */> */> */>?, /*2*/ processor_setsCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_processors(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ out_processor_list: kotlinx.cinterop.CValuesRef<platform.darwin.processor_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.processor_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.processor_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.processor_t /* = kotlin.UInt */> */> */> */>?, /*2*/ out_processor_listCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_reboot(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ options: kotlin.Int): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_register_mach_voucher_attr_manager(/*0*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ attr_manager: platform.darwin.mach_voucher_attr_manager_t /* = kotlin.UInt */, /*2*/ default_value: platform.darwin.mach_voucher_attr_value_handle_t /* = kotlin.ULong */, /*3*/ new_key: kotlinx.cinterop.CValuesRef<platform.darwin.mach_voucher_attr_key_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_voucher_attr_key_t /* = kotlin.UInt */> */>?, /*4*/ new_attr_control: kotlinx.cinterop.CValuesRef<platform.darwin.ipc_voucher_attr_control_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.ipc_voucher_attr_control_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_register_well_known_mach_voucher_attr_manager(/*0*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ attr_manager: platform.darwin.mach_voucher_attr_manager_t /* = kotlin.UInt */, /*2*/ default_value: platform.darwin.mach_voucher_attr_value_handle_t /* = kotlin.ULong */, /*3*/ key: platform.darwin.mach_voucher_attr_key_t /* = kotlin.UInt */, /*4*/ new_attr_control: kotlinx.cinterop.CValuesRef<platform.darwin.ipc_voucher_attr_control_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.ipc_voucher_attr_control_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_request_notification(/*0*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ notify_type: platform.darwin.host_flavor_t /* = kotlin.Int */, /*2*/ notify_port: platform.darwin.mach_port_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_security_create_task_token(/*0*/ host_security: platform.darwin.host_security_t /* = kotlin.UInt */, /*1*/ parent_task: platform.darwin.task_t /* = kotlin.UInt */, /*2*/ sec_token: kotlinx.cinterop.CValue<platform.darwin.security_token_t>, /*3*/ audit_token: kotlinx.cinterop.CValue<platform.darwin.audit_token_t>, /*4*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*5*/ ledgers: platform.darwin.ledger_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.ledger_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.ledger_t /* = kotlin.UInt */> */>? */, /*6*/ ledgersCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */, /*7*/ inherit_memory: platform.posix.boolean_t /* = kotlin.UInt */, /*8*/ child_task: kotlinx.cinterop.CValuesRef<platform.darwin.task_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.task_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_security_set_task_token(/*0*/ host_security: platform.darwin.host_security_t /* = kotlin.UInt */, /*1*/ target_task: platform.darwin.task_t /* = kotlin.UInt */, /*2*/ sec_token: kotlinx.cinterop.CValue<platform.darwin.security_token_t>, /*3*/ audit_token: kotlinx.cinterop.CValue<platform.darwin.audit_token_t>, /*4*/ host: platform.darwin.host_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_set_UNDServer(/*0*/ host: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ server: platform.darwin.UNDServerRef /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_set_atm_diagnostic_flag(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ diagnostic_flag: platform.posix.uint32_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_set_exception_ports(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ exception_mask: platform.darwin.exception_mask_t /* = kotlin.UInt */, /*2*/ new_port: platform.darwin.mach_port_t /* = kotlin.UInt */, /*3*/ behavior: platform.darwin.exception_behavior_t /* = kotlin.Int */, /*4*/ new_flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_set_multiuser_config_flags(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ multiuser_flags: platform.posix.uint32_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_set_special_port(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ which: kotlin.Int, /*2*/ port: platform.darwin.mach_port_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_statistics(/*0*/ host_priv: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.host_flavor_t /* = kotlin.Int */, /*2*/ host_info_out: platform.darwin.host_info_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*3*/ host_info_outCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_statistics64(/*0*/ host_priv: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.host_flavor_t /* = kotlin.Int */, /*2*/ host_info64_out: platform.darwin.host_info64_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*3*/ host_info64_outCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_swap_exception_ports(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ exception_mask: platform.darwin.exception_mask_t /* = kotlin.UInt */, /*2*/ new_port: platform.darwin.mach_port_t /* = kotlin.UInt */, /*3*/ behavior: platform.darwin.exception_behavior_t /* = kotlin.Int */, /*4*/ new_flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */, /*5*/ masks: platform.darwin.exception_mask_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.exception_mask_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_mask_t /* = kotlin.UInt */> */>? */, /*6*/ masksCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?, /*7*/ old_handlerss: platform.darwin.exception_handler_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.exception_handler_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_handler_t /* = kotlin.UInt */> */>? */, /*8*/ old_behaviors: platform.darwin.exception_behavior_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.exception_behavior_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.exception_behavior_t /* = kotlin.Int */> */>? */, /*9*/ old_flavors: platform.darwin.exception_flavor_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.thread_state_flavor_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.thread_state_flavor_t /* = kotlin.Int */> */>? */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun host_virtual_physical_table_info(/*0*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ info: kotlinx.cinterop.CValuesRef<platform.darwin.hash_info_bucket_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.hash_info_bucket_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.hash_info_bucket_t /* = platform.darwin.hash_info_bucket */> */> */>?, /*2*/ infoCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun inet_addr(/*0*/ arg0: kotlin.String?): platform.posix.in_addr_t /* = kotlin.UInt */ { TODO() }

fun inet_lnaof(/*0*/ arg0: kotlinx.cinterop.CValue<platform.posix.in_addr>): platform.posix.in_addr_t /* = kotlin.UInt */ { TODO() }

fun inet_makeaddr(/*0*/ arg0: platform.posix.in_addr_t /* = kotlin.UInt */, /*1*/ arg1: platform.posix.in_addr_t /* = kotlin.UInt */): kotlinx.cinterop.CValue<platform.posix.in_addr> { TODO() }

fun inet_net_ntop(/*0*/ arg0: kotlin.Int, /*1*/ arg1: kotlinx.cinterop.CValuesRef<*>?, /*2*/ arg2: kotlin.Int, /*3*/ arg3: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*4*/ arg4: platform.posix.__darwin_size_t /* = kotlin.ULong */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun inet_net_pton(/*0*/ arg0: kotlin.Int, /*1*/ arg1: kotlin.String?, /*2*/ arg2: kotlinx.cinterop.CValuesRef<*>?, /*3*/ arg3: platform.posix.__darwin_size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun inet_neta(/*0*/ arg0: platform.posix.in_addr_t /* = kotlin.UInt */, /*1*/ arg1: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*2*/ arg2: platform.posix.__darwin_size_t /* = kotlin.ULong */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun inet_netof(/*0*/ arg0: kotlinx.cinterop.CValue<platform.posix.in_addr>): platform.posix.in_addr_t /* = kotlin.UInt */ { TODO() }

fun inet_network(/*0*/ arg0: kotlin.String?): platform.posix.in_addr_t /* = kotlin.UInt */ { TODO() }

fun inet_nsap_addr(/*0*/ arg0: kotlin.String?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>?, /*2*/ arg2: kotlin.Int): kotlin.UInt { TODO() }

fun inet_nsap_ntoa(/*0*/ arg0: kotlin.Int, /*1*/ arg1: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>?, /*2*/ arg2: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun inet_ntoa(/*0*/ arg0: kotlinx.cinterop.CValue<platform.posix.in_addr>): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun inet_ntop(/*0*/ arg0: kotlin.Int, /*1*/ arg1: kotlinx.cinterop.CValuesRef<*>?, /*2*/ arg2: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*3*/ arg3: platform.posix.socklen_t /* = kotlin.UInt */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun kext_request(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ user_log_flags: platform.posix.uint32_t /* = kotlin.UInt */, /*2*/ request_data: platform.darwin.vm_offset_t /* = kotlin.ULong */, /*3*/ request_dataCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */, /*4*/ response_data: kotlinx.cinterop.CValuesRef<platform.darwin.vm_offset_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_offset_t /* = kotlin.ULong */> */>?, /*5*/ response_dataCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?, /*6*/ log_data: kotlinx.cinterop.CValuesRef<platform.darwin.vm_offset_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_offset_t /* = kotlin.ULong */> */>?, /*7*/ log_dataCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?, /*8*/ op_result: kotlinx.cinterop.CValuesRef<platform.darwin.kern_return_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.kern_return_t /* = kotlin.Int */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun kmod_control(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ module: platform.darwin.kmod_t /* = kotlin.Int */, /*2*/ flavor: platform.darwin.kmod_control_flavor_t /* = kotlin.Int */, /*3*/ data: kotlinx.cinterop.CValuesRef<platform.darwin.kmod_args_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.kmod_args_t /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?, /*4*/ dataCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun kmod_create(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ info: platform.darwin.vm_address_t /* = kotlin.ULong */, /*2*/ module: kotlinx.cinterop.CValuesRef<platform.darwin.kmod_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.kmod_t /* = kotlin.Int */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun kmod_destroy(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ module: platform.darwin.kmod_t /* = kotlin.Int */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun kmod_get_info(/*0*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ modules: kotlinx.cinterop.CValuesRef<platform.darwin.kmod_args_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.kmod_args_t /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?, /*2*/ modulesCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge0")private external fun kniBridge0(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1")private external fun kniBridge1(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge10")private external fun kniBridge10(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Float, /*4*/ p4: kotlin.ULong): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge100")private external fun kniBridge100(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1000")private external fun kniBridge1000(/*0*/ p0: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1001")private external fun kniBridge1001(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1002")private external fun kniBridge1002()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1003")private external fun kniBridge1003()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1004")private external fun kniBridge1004(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1005")private external fun kniBridge1005(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1006")private external fun kniBridge1006(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1007")private external fun kniBridge1007(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1008")private external fun kniBridge1008(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1009")private external fun kniBridge1009(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge101")private external fun kniBridge101(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1010")private external fun kniBridge1010(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1011")private external fun kniBridge1011(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1012")private external fun kniBridge1012(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1013")private external fun kniBridge1013(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1014")private external fun kniBridge1014(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1015")private external fun kniBridge1015(/*0*/ p0: kotlin.UShort, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1016")private external fun kniBridge1016(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1017")private external fun kniBridge1017(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1018")private external fun kniBridge1018(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1019")private external fun kniBridge1019(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge102")private external fun kniBridge102(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1020")private external fun kniBridge1020()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1021")private external fun kniBridge1021()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1022")private external fun kniBridge1022(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1023")private external fun kniBridge1023(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1024")private external fun kniBridge1024(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1025")private external fun kniBridge1025(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1026")private external fun kniBridge1026(/*0*/ p0: kotlin.UShort): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1027")private external fun kniBridge1027(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UShort): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1028")private external fun kniBridge1028(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1029")private external fun kniBridge1029(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge103")private external fun kniBridge103(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1030")private external fun kniBridge1030()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1031")private external fun kniBridge1031()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1032")private external fun kniBridge1032(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1033")private external fun kniBridge1033(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1034")private external fun kniBridge1034(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1035")private external fun kniBridge1035(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1036")private external fun kniBridge1036(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1037")private external fun kniBridge1037(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1038")private external fun kniBridge1038(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1039")private external fun kniBridge1039(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge104")private external fun kniBridge104(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1040")private external fun kniBridge1040(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Byte, /*4*/ p4: kotlin.Byte)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1041")private external fun kniBridge1041(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Int)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1042")private external fun kniBridge1042(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Byte, /*4*/ p4: kotlin.Byte)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1043")private external fun kniBridge1043(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1044")private external fun kniBridge1044(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1045")private external fun kniBridge1045(/*0*/ p0: kotlin.UByte): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1046")private external fun kniBridge1046(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1047")private external fun kniBridge1047(): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1048")private external fun kniBridge1048(): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1049")private external fun kniBridge1049(): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge105")private external fun kniBridge105(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1050")private external fun kniBridge1050(/*0*/ p0: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1051")private external fun kniBridge1051(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1052")private external fun kniBridge1052(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1053")private external fun kniBridge1053(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Byte, /*4*/ p4: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1054")private external fun kniBridge1054(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlin.UInt, /*7*/ p7: kotlin.Int, /*8*/ p8: kotlin.Int, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1055")private external fun kniBridge1055(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlin.UInt, /*7*/ p7: kotlin.Int, /*8*/ p8: kotlin.Int, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1056")private external fun kniBridge1056(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1057")private external fun kniBridge1057(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlin.UInt, /*7*/ p7: kotlin.UInt, /*8*/ p8: kotlin.Int, /*9*/ p9: kotlin.Int, /*10*/ p10: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1058")private external fun kniBridge1058(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlin.UInt, /*7*/ p7: kotlin.UInt, /*8*/ p8: kotlin.Int, /*9*/ p9: kotlin.Int, /*10*/ p10: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1059")private external fun kniBridge1059(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge106")private external fun kniBridge106(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1060")private external fun kniBridge1060(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.Int, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1061")private external fun kniBridge1061(/*0*/ p0: kotlin.Short, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.Int, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1062")private external fun kniBridge1062(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1063")private external fun kniBridge1063(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1064")private external fun kniBridge1064(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1065")private external fun kniBridge1065(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1066")private external fun kniBridge1066(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1067")private external fun kniBridge1067(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1068")private external fun kniBridge1068(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1069")private external fun kniBridge1069(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge107")private external fun kniBridge107(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1070")private external fun kniBridge1070(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1071")private external fun kniBridge1071(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1072")private external fun kniBridge1072(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1073")private external fun kniBridge1073(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1074")private external fun kniBridge1074(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1075")private external fun kniBridge1075(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1076")private external fun kniBridge1076(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1077")private external fun kniBridge1077(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1078")private external fun kniBridge1078(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1079")private external fun kniBridge1079(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge108")private external fun kniBridge108(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1080")private external fun kniBridge1080(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1081")private external fun kniBridge1081(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1082")private external fun kniBridge1082(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1083")private external fun kniBridge1083(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1084")private external fun kniBridge1084(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1085")private external fun kniBridge1085(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1086")private external fun kniBridge1086(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1087")private external fun kniBridge1087(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1088")private external fun kniBridge1088(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1089")private external fun kniBridge1089(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge109")private external fun kniBridge109(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1090")private external fun kniBridge1090(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1091")private external fun kniBridge1091(/*0*/ p0: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1092")private external fun kniBridge1092(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1093")private external fun kniBridge1093(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1094")private external fun kniBridge1094(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1095")private external fun kniBridge1095(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1096")private external fun kniBridge1096(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1097")private external fun kniBridge1097(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1098")private external fun kniBridge1098(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1099")private external fun kniBridge1099(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge11")private external fun kniBridge11(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.ULong): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge110")private external fun kniBridge110(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1100")private external fun kniBridge1100(/*0*/ p0: kotlin.UShort): kotlin.UShort

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1101")private external fun kniBridge1101(/*0*/ p0: kotlin.UInt): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1102")private external fun kniBridge1102(/*0*/ p0: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1103")private external fun kniBridge1103(/*0*/ p0: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1104")private external fun kniBridge1104(/*0*/ p0: kotlin.Float): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1105")private external fun kniBridge1105(/*0*/ p0: kotlin.ULong): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1106")private external fun kniBridge1106(/*0*/ p0: kotlin.Double): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1107")private external fun kniBridge1107(/*0*/ p0: kotlin.ULong): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1108")private external fun kniBridge1108(/*0*/ p0: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1109")private external fun kniBridge1109(/*0*/ p0: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge111")private external fun kniBridge111(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1110")private external fun kniBridge1110(): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1111")private external fun kniBridge1111(/*0*/ p0: kotlin.UShort): kotlin.UShort

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1112")private external fun kniBridge1112(/*0*/ p0: kotlin.UInt): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1113")private external fun kniBridge1113(/*0*/ p0: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1114")private external fun kniBridge1114(/*0*/ p0: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1115")private external fun kniBridge1115(/*0*/ p0: kotlin.ULong): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1116")private external fun kniBridge1116(/*0*/ p0: kotlin.ULong): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1117")private external fun kniBridge1117(/*0*/ p0: kotlin.UShort): kotlin.UShort

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1118")private external fun kniBridge1118(/*0*/ p0: kotlin.UInt): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1119")private external fun kniBridge1119(/*0*/ p0: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge112")private external fun kniBridge112(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1120")private external fun kniBridge1120(/*0*/ p0: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1121")private external fun kniBridge1121(/*0*/ p0: kotlin.Double): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1122")private external fun kniBridge1122(/*0*/ p0: kotlin.Float): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1123")private external fun kniBridge1123(/*0*/ p0: kotlin.UShort): kotlin.UShort

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1124")private external fun kniBridge1124(/*0*/ p0: kotlin.UInt): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1125")private external fun kniBridge1125(/*0*/ p0: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1126")private external fun kniBridge1126(/*0*/ p0: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1127")private external fun kniBridge1127(/*0*/ p0: kotlin.ULong): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1128")private external fun kniBridge1128(/*0*/ p0: kotlin.ULong): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1129")private external fun kniBridge1129(/*0*/ p0: kotlin.UShort): kotlin.UShort

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge113")private external fun kniBridge113(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1130")private external fun kniBridge1130(/*0*/ p0: kotlin.UInt): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1131")private external fun kniBridge1131(/*0*/ p0: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1132")private external fun kniBridge1132(/*0*/ p0: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1133")private external fun kniBridge1133(/*0*/ p0: kotlin.Double): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1134")private external fun kniBridge1134(/*0*/ p0: kotlin.Float): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1135")private external fun kniBridge1135(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1136")private external fun kniBridge1136(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1137")private fun kniBridge1137(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1138")private external fun kniBridge1138(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1139")private external fun kniBridge1139(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge114")private external fun kniBridge114(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1140")private external fun kniBridge1140(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1141")private external fun kniBridge1141(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1142")private external fun kniBridge1142(/*0*/ p0: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1143")private external fun kniBridge1143(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1144")private external fun kniBridge1144(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1145")private external fun kniBridge1145(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1146")private external fun kniBridge1146(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1147")private external fun kniBridge1147(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1148")private external fun kniBridge1148(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1149")private external fun kniBridge1149(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge115")private external fun kniBridge115(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1150")private external fun kniBridge1150(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1151")private external fun kniBridge1151(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1152")private external fun kniBridge1152(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1153")private external fun kniBridge1153(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1154")private external fun kniBridge1154(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1155")private external fun kniBridge1155(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1156")private external fun kniBridge1156(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1157")private fun kniBridge1157(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1158")private external fun kniBridge1158(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1159")private external fun kniBridge1159(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge116")private external fun kniBridge116(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1160")private external fun kniBridge1160(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1161")private external fun kniBridge1161(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1162")private external fun kniBridge1162(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1163")private fun kniBridge1163(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1164")private external fun kniBridge1164(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1165")private fun kniBridge1165(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1166")private external fun kniBridge1166(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1167")private external fun kniBridge1167(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1168")private external fun kniBridge1168(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1169")private external fun kniBridge1169(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge117")private external fun kniBridge117(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1170")private external fun kniBridge1170(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1171")private external fun kniBridge1171(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1172")private external fun kniBridge1172(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1173")private external fun kniBridge1173(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1174")private external fun kniBridge1174(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1175")private external fun kniBridge1175(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1176")private external fun kniBridge1176(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1177")private fun kniBridge1177(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1178")private external fun kniBridge1178(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1179")private external fun kniBridge1179(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge118")private external fun kniBridge118(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1180")private external fun kniBridge1180(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1181")private external fun kniBridge1181(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1182")private external fun kniBridge1182(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1183")private external fun kniBridge1183(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1184")private external fun kniBridge1184(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1185")private external fun kniBridge1185(/*0*/ p0: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1186")private external fun kniBridge1186(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1187")private external fun kniBridge1187(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1188")private external fun kniBridge1188(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1189")private external fun kniBridge1189(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge119")private external fun kniBridge119(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1190")private external fun kniBridge1190(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1191")private external fun kniBridge1191(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1192")private external fun kniBridge1192(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1193")private external fun kniBridge1193(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1194")private external fun kniBridge1194(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1195")private external fun kniBridge1195(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1196")private external fun kniBridge1196(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1197")private external fun kniBridge1197(/*0*/ p0: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1198")private external fun kniBridge1198(/*0*/ p0: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1199")private external fun kniBridge1199(/*0*/ p0: kotlin.Long): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge12")private external fun kniBridge12(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge120")private external fun kniBridge120(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1200")private external fun kniBridge1200(/*0*/ p0: kotlin.Byte): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1201")private external fun kniBridge1201(/*0*/ p0: kotlin.Double): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1202")private external fun kniBridge1202(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1203")private external fun kniBridge1203(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1204")private external fun kniBridge1204(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1205")private external fun kniBridge1205(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1206")private external fun kniBridge1206(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1207")private external fun kniBridge1207(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Byte): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1208")private external fun kniBridge1208(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Double): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1209")private external fun kniBridge1209(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge121")private external fun kniBridge121(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1210")private external fun kniBridge1210(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1211")private external fun kniBridge1211(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1212")private external fun kniBridge1212(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1213")private external fun kniBridge1213(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1214")private external fun kniBridge1214(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1215")private external fun kniBridge1215(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1216")private external fun kniBridge1216(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1217")private external fun kniBridge1217(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1218")private external fun kniBridge1218(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1219")private external fun kniBridge1219(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge122")private external fun kniBridge122(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1220")private external fun kniBridge1220(): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1221")private external fun kniBridge1221(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1224")private external fun kniBridge1224(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1225")private external fun kniBridge1225(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1226")private external fun kniBridge1226(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1227")private external fun kniBridge1227(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1228")private external fun kniBridge1228(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1229")private external fun kniBridge1229(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge123")private external fun kniBridge123(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1230")private external fun kniBridge1230(/*0*/ p0: kotlin.Byte): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1231")private external fun kniBridge1231(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1232")private external fun kniBridge1232(/*0*/ p0: kotlin.Long): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1233")private external fun kniBridge1233(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1234")private external fun kniBridge1234(/*0*/ p0: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1235")private external fun kniBridge1235(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1236")private external fun kniBridge1236(/*0*/ p0: kotlin.Double): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1237")private external fun kniBridge1237(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1238")private external fun kniBridge1238(/*0*/ p0: kotlin.Long): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1239")private external fun kniBridge1239(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge124")private external fun kniBridge124(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1240")private external fun kniBridge1240(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1241")private external fun kniBridge1241(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1242")private external fun kniBridge1242(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1243")private external fun kniBridge1243(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1244")private external fun kniBridge1244(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1245")private external fun kniBridge1245(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1246")private external fun kniBridge1246(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1247")private external fun kniBridge1247(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1248")private external fun kniBridge1248(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1249")private external fun kniBridge1249(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge125")private external fun kniBridge125(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1250")private external fun kniBridge1250(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1251")private external fun kniBridge1251(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1252")private external fun kniBridge1252(/*0*/ p0: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1253")private external fun kniBridge1253(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1254")private external fun kniBridge1254(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1255")private external fun kniBridge1255(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1257")private external fun kniBridge1257(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1258")private external fun kniBridge1258(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1259")private external fun kniBridge1259(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge126")private external fun kniBridge126(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1260")private external fun kniBridge1260(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1261")private external fun kniBridge1261(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1262")private fun kniBridge1262(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1263")private external fun kniBridge1263(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.Byte)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1264")private external fun kniBridge1264(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.Long)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1265")private external fun kniBridge1265(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1266")private external fun kniBridge1266(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.Double)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1267")private external fun kniBridge1267(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.Long)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1268")private external fun kniBridge1268(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1269")private external fun kniBridge1269(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge127")private external fun kniBridge127(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1270")private external fun kniBridge1270(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1271")private external fun kniBridge1271(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.Int)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1272")private external fun kniBridge1272(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1273")private external fun kniBridge1273(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1274")private external fun kniBridge1274(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1275")private external fun kniBridge1275(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1276")private external fun kniBridge1276(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1277")private external fun kniBridge1277(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1278")private external fun kniBridge1278(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1279")private external fun kniBridge1279(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge128")private external fun kniBridge128(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1280")private external fun kniBridge1280(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1281")private external fun kniBridge1281(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1282")private external fun kniBridge1282(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1283")private external fun kniBridge1283(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1284")private external fun kniBridge1284(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1286")private external fun kniBridge1286(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1287")private external fun kniBridge1287(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1288")private external fun kniBridge1288(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1289")private external fun kniBridge1289(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge129")private external fun kniBridge129(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1290")private external fun kniBridge1290(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1291")private fun kniBridge1291(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1292")private external fun kniBridge1292(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1293")private external fun kniBridge1293(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Byte)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1294")private external fun kniBridge1294(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Long)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1295")private external fun kniBridge1295(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1296")private external fun kniBridge1296(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1297")private external fun kniBridge1297(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Long)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1298")private external fun kniBridge1298(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1299")private external fun kniBridge1299(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge13")private external fun kniBridge13(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge130")private external fun kniBridge130(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1300")private external fun kniBridge1300(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1301")private external fun kniBridge1301(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1302")private external fun kniBridge1302(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1303")private external fun kniBridge1303(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1304")private external fun kniBridge1304(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1305")private external fun kniBridge1305(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1306")private external fun kniBridge1306(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1307")private external fun kniBridge1307(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1308")private external fun kniBridge1308(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1309")private external fun kniBridge1309(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge131")private external fun kniBridge131(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1310")private external fun kniBridge1310(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1311")private external fun kniBridge1311(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1312")private external fun kniBridge1312(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1313")private external fun kniBridge1313(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1314")private external fun kniBridge1314(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1315")private external fun kniBridge1315(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1316")private external fun kniBridge1316()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1317")private external fun kniBridge1317()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1318")private external fun kniBridge1318(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1319")private fun kniBridge1319(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge132")private external fun kniBridge132(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1320")private external fun kniBridge1320(): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1321")private external fun kniBridge1321(): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1322")private external fun kniBridge1322(/*0*/ p0: kotlin.UByte): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1323")private external fun kniBridge1323(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1324")private external fun kniBridge1324(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UByte, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.ULong, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1325")private fun kniBridge1325(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1326")private external fun kniBridge1326(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1327")private external fun kniBridge1327(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UByte): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1328")private external fun kniBridge1328(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UByte, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.UInt)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1329")private external fun kniBridge1329(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UByte, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.UInt)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge133")private external fun kniBridge133(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1330")private external fun kniBridge1330(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UByte, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.UInt)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1331")private external fun kniBridge1331(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1332")private external fun kniBridge1332(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1333")private external fun kniBridge1333(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1334")private external fun kniBridge1334(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1335")private external fun kniBridge1335()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1336")private external fun kniBridge1336(/*0*/ p0: kotlin.Byte): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1337")private external fun kniBridge1337(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1338")private external fun kniBridge1338(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1339")private external fun kniBridge1339(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge134")private external fun kniBridge134(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1340")private external fun kniBridge1340()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1341")private external fun kniBridge1341(): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1342")private external fun kniBridge1342(/*0*/ p0: kotlin.UInt)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1343")private external fun kniBridge1343(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1344")private external fun kniBridge1344()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1345")private external fun kniBridge1345()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1346")private external fun kniBridge1346()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1347")private external fun kniBridge1347(/*0*/ p0: kotlin.UShort): kotlin.UShort

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1348")private external fun kniBridge1348(/*0*/ p0: kotlin.UInt): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1349")private external fun kniBridge1349(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge135")private external fun kniBridge135(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1350")private external fun kniBridge1350(/*0*/ p0: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1351")private external fun kniBridge1351(/*0*/ p0: kotlin.ULong): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1352")private external fun kniBridge1352(/*0*/ p0: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1353")private external fun kniBridge1353(/*0*/ p0: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1354")private external fun kniBridge1354(/*0*/ p0: kotlin.UByte, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UByte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1355")private external fun kniBridge1355(/*0*/ p0: kotlin.UByte, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UByte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1356")private external fun kniBridge1356(/*0*/ p0: kotlin.UByte, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UByte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1357")private external fun kniBridge1357(/*0*/ p0: kotlin.UByte, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UByte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1358")private external fun kniBridge1358(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float, /*2*/ p2: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1359")private external fun kniBridge1359(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double, /*2*/ p2: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge136")private external fun kniBridge136(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1360")private external fun kniBridge1360(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1361")private external fun kniBridge1361(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1362")private external fun kniBridge1362(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1363")private external fun kniBridge1363(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1364")private external fun kniBridge1364(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1365")private external fun kniBridge1365(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1366")private external fun kniBridge1366(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1367")private external fun kniBridge1367(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1368")private external fun kniBridge1368(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1369")private external fun kniBridge1369(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge137")private external fun kniBridge137(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1370")private external fun kniBridge1370(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1371")private external fun kniBridge1371(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1372")private external fun kniBridge1372(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1373")private external fun kniBridge1373(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1374")private external fun kniBridge1374(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1375")private external fun kniBridge1375(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1376")private external fun kniBridge1376(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1377")private external fun kniBridge1377(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1378")private external fun kniBridge1378(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1379")private external fun kniBridge1379(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge138")private external fun kniBridge138(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1380")private external fun kniBridge1380(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1381")private external fun kniBridge1381(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1382")private external fun kniBridge1382(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1383")private external fun kniBridge1383(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1384")private external fun kniBridge1384(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1385")private external fun kniBridge1385(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1386")private external fun kniBridge1386(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1387")private external fun kniBridge1387(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1388")private external fun kniBridge1388(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1389")private external fun kniBridge1389(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge139")private external fun kniBridge139(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1390")private external fun kniBridge1390(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1391")private external fun kniBridge1391(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1392")private external fun kniBridge1392(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1393")private external fun kniBridge1393(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1394")private external fun kniBridge1394(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1395")private external fun kniBridge1395(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1396")private external fun kniBridge1396(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1397")private external fun kniBridge1397(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1398")private external fun kniBridge1398(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1399")private external fun kniBridge1399(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge14")private external fun kniBridge14(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge140")private external fun kniBridge140(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1400")private external fun kniBridge1400(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1401")private external fun kniBridge1401(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1402")private external fun kniBridge1402(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1403")private external fun kniBridge1403(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1404")private external fun kniBridge1404(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1405")private external fun kniBridge1405(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1406")private external fun kniBridge1406(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1407")private external fun kniBridge1407(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1408")private external fun kniBridge1408(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1409")private external fun kniBridge1409(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge141")private external fun kniBridge141(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1410")private external fun kniBridge1410(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1411")private external fun kniBridge1411(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1412")private external fun kniBridge1412(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1413")private external fun kniBridge1413(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1414")private external fun kniBridge1414(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float, /*2*/ p2: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1415")private external fun kniBridge1415(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double, /*2*/ p2: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1416")private external fun kniBridge1416(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1417")private external fun kniBridge1417(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1418")private external fun kniBridge1418(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1419")private external fun kniBridge1419(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge142")private external fun kniBridge142(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1420")private external fun kniBridge1420(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1421")private external fun kniBridge1421(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1422")private external fun kniBridge1422(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1423")private external fun kniBridge1423(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1424")private external fun kniBridge1424(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1425")private external fun kniBridge1425(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1426")private external fun kniBridge1426(/*0*/ p0: kotlin.Float): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1427")private external fun kniBridge1427(/*0*/ p0: kotlin.Double): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1428")private external fun kniBridge1428(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Int): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1429")private external fun kniBridge1429(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Int): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge143")private external fun kniBridge143(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1430")private external fun kniBridge1430(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1431")private external fun kniBridge1431(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1432")private external fun kniBridge1432(/*0*/ p0: kotlin.Float): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1433")private external fun kniBridge1433(/*0*/ p0: kotlin.Double): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1434")private external fun kniBridge1434(/*0*/ p0: kotlin.Float): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1435")private external fun kniBridge1435(/*0*/ p0: kotlin.Double): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1436")private external fun kniBridge1436(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1437")private external fun kniBridge1437(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1438")private external fun kniBridge1438(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1439")private external fun kniBridge1439(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge144")private external fun kniBridge144(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1440")private external fun kniBridge1440(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1441")private external fun kniBridge1441(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1442")private external fun kniBridge1442(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1443")private external fun kniBridge1443(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1444")private external fun kniBridge1444(/*0*/ p0: kotlin.Float): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1445")private external fun kniBridge1445(/*0*/ p0: kotlin.Double): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1446")private external fun kniBridge1446(/*0*/ p0: kotlin.Float): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1447")private external fun kniBridge1447(/*0*/ p0: kotlin.Double): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1448")private external fun kniBridge1448(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1449")private external fun kniBridge1449(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge145")private external fun kniBridge145(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1450")private external fun kniBridge1450(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1451")private external fun kniBridge1451(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1452")private external fun kniBridge1452(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1453")private external fun kniBridge1453(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1454")private external fun kniBridge1454(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1455")private external fun kniBridge1455(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1456")private external fun kniBridge1456(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1457")private external fun kniBridge1457(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1458")private external fun kniBridge1458(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1459")private external fun kniBridge1459(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge146")private external fun kniBridge146(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1460")private external fun kniBridge1460(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Int): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1461")private external fun kniBridge1461(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Int): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1462")private external fun kniBridge1462(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Long): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1463")private external fun kniBridge1463(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Long): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1464")private external fun kniBridge1464(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1465")private external fun kniBridge1465(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1466")private external fun kniBridge1466(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1467")private external fun kniBridge1467(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1468")private external fun kniBridge1468(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1469")private external fun kniBridge1469(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge147")private external fun kniBridge147(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1470")private external fun kniBridge1470(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1471")private external fun kniBridge1471(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1472")private external fun kniBridge1472(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1473")private external fun kniBridge1473(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1474")private external fun kniBridge1474(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1475")private external fun kniBridge1475(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1476")private external fun kniBridge1476(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1477")private external fun kniBridge1477(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1478")private external fun kniBridge1478(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1479")private external fun kniBridge1479(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge148")private external fun kniBridge148(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1480")private external fun kniBridge1480(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1481")private external fun kniBridge1481(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1482")private external fun kniBridge1482(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1483")private external fun kniBridge1483(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1484")private external fun kniBridge1484(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1485")private external fun kniBridge1485(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1486")private external fun kniBridge1486(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float, /*2*/ p2: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1487")private external fun kniBridge1487(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double, /*2*/ p2: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1488")private external fun kniBridge1488(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1489")private external fun kniBridge1489(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge149")private external fun kniBridge149(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1490")private external fun kniBridge1490(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float, /*2*/ p2: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1491")private external fun kniBridge1491(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double, /*2*/ p2: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1492")private external fun kniBridge1492(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1493")private external fun kniBridge1493(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1494")private external fun kniBridge1494(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1495")private external fun kniBridge1495(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1496")private external fun kniBridge1496(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1497")private external fun kniBridge1497(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1498")private external fun kniBridge1498(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1499")private external fun kniBridge1499(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge15")private external fun kniBridge15(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge150")private external fun kniBridge150(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1500")private external fun kniBridge1500(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1501")private external fun kniBridge1501(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1502")private external fun kniBridge1502(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1503")private external fun kniBridge1503(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1504")private external fun kniBridge1504(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1505")private external fun kniBridge1505(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1506")private external fun kniBridge1506(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1507")private external fun kniBridge1507(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1508")private external fun kniBridge1508(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float, /*2*/ p2: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1509")private external fun kniBridge1509(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double, /*2*/ p2: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge151")private external fun kniBridge151(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1510")private external fun kniBridge1510(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1511")private external fun kniBridge1511(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1512")private external fun kniBridge1512(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1513")private external fun kniBridge1513(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1514")private external fun kniBridge1514(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1515")private external fun kniBridge1515(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1516")private external fun kniBridge1516(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1517")private external fun kniBridge1517(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1518")private external fun kniBridge1518(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1519")private external fun kniBridge1519(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge152")private external fun kniBridge152(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1520")private external fun kniBridge1520(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1521")private external fun kniBridge1521(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1522")private external fun kniBridge1522(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1523")private external fun kniBridge1523(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1524")private external fun kniBridge1524(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1525")private external fun kniBridge1525(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1526")private external fun kniBridge1526(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1527")private external fun kniBridge1527(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1528")private external fun kniBridge1528(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1529")private external fun kniBridge1529(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge153")private external fun kniBridge153(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1530")private external fun kniBridge1530(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1531")private external fun kniBridge1531(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1532")private external fun kniBridge1532(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1533")private external fun kniBridge1533(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1534")private external fun kniBridge1534(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1535")private external fun kniBridge1535(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1536")private external fun kniBridge1536(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1537")private external fun kniBridge1537(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1538")private external fun kniBridge1538(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1539")private external fun kniBridge1539(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge154")private external fun kniBridge154(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1540")private external fun kniBridge1540(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1541")private external fun kniBridge1541(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1542")private external fun kniBridge1542(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1543")private external fun kniBridge1543(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1544")private external fun kniBridge1544(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1545")private external fun kniBridge1545(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1546")private external fun kniBridge1546(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1547")private external fun kniBridge1547(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1548")private external fun kniBridge1548(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1549")private external fun kniBridge1549(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge155")private external fun kniBridge155(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1550")private external fun kniBridge1550(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1551")private external fun kniBridge1551(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1552")private external fun kniBridge1552(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1553")private external fun kniBridge1553(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1554")private external fun kniBridge1554(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1555")private external fun kniBridge1555(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1556")private external fun kniBridge1556(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1557")private external fun kniBridge1557(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1558")private external fun kniBridge1558(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1559")private external fun kniBridge1559(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge156")private external fun kniBridge156(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1560")private external fun kniBridge1560(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1561")private external fun kniBridge1561(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1562")private external fun kniBridge1562(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1563")private external fun kniBridge1563(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1564")private external fun kniBridge1564(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1565")private external fun kniBridge1565(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1566")private external fun kniBridge1566(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1567")private external fun kniBridge1567(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1568")private external fun kniBridge1568(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1569")private external fun kniBridge1569(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge157")private external fun kniBridge157(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1570")private external fun kniBridge1570(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1571")private external fun kniBridge1571(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1572")private external fun kniBridge1572(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1573")private external fun kniBridge1573(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1574")private external fun kniBridge1574(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1575")private external fun kniBridge1575(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1576")private external fun kniBridge1576(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1577")private external fun kniBridge1577(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1578")private external fun kniBridge1578(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1579")private external fun kniBridge1579(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge158")private external fun kniBridge158(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1580")private external fun kniBridge1580(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1581")private external fun kniBridge1581(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1582")private external fun kniBridge1582(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1583")private external fun kniBridge1583(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1584")private external fun kniBridge1584(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1585")private external fun kniBridge1585(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1586")private external fun kniBridge1586(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1587")private external fun kniBridge1587(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1588")private external fun kniBridge1588(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1589")private external fun kniBridge1589(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge159")private external fun kniBridge159(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1590")private external fun kniBridge1590(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1591")private external fun kniBridge1591(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1592")private external fun kniBridge1592(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1593")private external fun kniBridge1593(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1594")private external fun kniBridge1594(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1595")private external fun kniBridge1595(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1596")private external fun kniBridge1596(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1597")private external fun kniBridge1597(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1598")private external fun kniBridge1598(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1599")private external fun kniBridge1599(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge16")private external fun kniBridge16(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge160")private external fun kniBridge160(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1600")private external fun kniBridge1600(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1601")private external fun kniBridge1601(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1602")private external fun kniBridge1602(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1603")private external fun kniBridge1603(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1604")private external fun kniBridge1604(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1605")private external fun kniBridge1605(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1606")private external fun kniBridge1606(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1607")private external fun kniBridge1607(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1608")private external fun kniBridge1608(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1609")private external fun kniBridge1609(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge161")private external fun kniBridge161(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1610")private external fun kniBridge1610(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1611")private external fun kniBridge1611(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1612")private external fun kniBridge1612(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1613")private external fun kniBridge1613(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1614")private external fun kniBridge1614(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1615")private external fun kniBridge1615(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1616")private external fun kniBridge1616(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1617")private external fun kniBridge1617(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1618")private external fun kniBridge1618(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1619")private external fun kniBridge1619(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge162")private external fun kniBridge162(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1620")private external fun kniBridge1620(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1621")private external fun kniBridge1621(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1622")private external fun kniBridge1622(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1623")private external fun kniBridge1623(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1624")private external fun kniBridge1624(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1625")private external fun kniBridge1625(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1626")private external fun kniBridge1626(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1627")private external fun kniBridge1627(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1628")private external fun kniBridge1628(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1629")private external fun kniBridge1629(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge163")private external fun kniBridge163(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1630")private external fun kniBridge1630(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1631")private external fun kniBridge1631(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1632")private external fun kniBridge1632(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1633")private external fun kniBridge1633(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1634")private external fun kniBridge1634(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1635")private external fun kniBridge1635(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1636")private external fun kniBridge1636(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1637")private external fun kniBridge1637(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1638")private external fun kniBridge1638(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1639")private external fun kniBridge1639(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge164")private external fun kniBridge164(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1640")private external fun kniBridge1640(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1641")private external fun kniBridge1641(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1642")private external fun kniBridge1642(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1643")private external fun kniBridge1643(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1644")private external fun kniBridge1644(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1645")private external fun kniBridge1645(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1646")private external fun kniBridge1646(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1647")private external fun kniBridge1647(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1648")private external fun kniBridge1648(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1649")private external fun kniBridge1649(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge165")private external fun kniBridge165(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1650")private external fun kniBridge1650(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1651")private external fun kniBridge1651(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1652")private external fun kniBridge1652(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1653")private external fun kniBridge1653(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1654")private external fun kniBridge1654(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1655")private external fun kniBridge1655(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1656")private external fun kniBridge1656(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1657")private external fun kniBridge1657(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1658")private external fun kniBridge1658(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1659")private external fun kniBridge1659(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge166")private external fun kniBridge166(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1660")private external fun kniBridge1660(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1661")private external fun kniBridge1661(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1662")private external fun kniBridge1662(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1663")private external fun kniBridge1663(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1664")private external fun kniBridge1664(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1665")private external fun kniBridge1665(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1666")private external fun kniBridge1666(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1667")private external fun kniBridge1667(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1668")private external fun kniBridge1668(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1669")private external fun kniBridge1669(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge167")private external fun kniBridge167(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1670")private external fun kniBridge1670(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1671")private external fun kniBridge1671(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1672")private external fun kniBridge1672(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1673")private external fun kniBridge1673(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1674")private external fun kniBridge1674(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1675")private external fun kniBridge1675(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1676")private external fun kniBridge1676(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1677")private external fun kniBridge1677(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1678")private external fun kniBridge1678(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1679")private external fun kniBridge1679(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge168")private external fun kniBridge168(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1680")private external fun kniBridge1680(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1681")private external fun kniBridge1681(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1682")private external fun kniBridge1682(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1683")private external fun kniBridge1683(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1684")private external fun kniBridge1684(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1685")private external fun kniBridge1685(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1686")private external fun kniBridge1686(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1687")private external fun kniBridge1687(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1688")private external fun kniBridge1688(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1689")private external fun kniBridge1689(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge169")private external fun kniBridge169(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1690")private external fun kniBridge1690(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1691")private external fun kniBridge1691(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1692")private external fun kniBridge1692(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1693")private external fun kniBridge1693(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1694")private external fun kniBridge1694(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1695")private external fun kniBridge1695(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1696")private external fun kniBridge1696(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1697")private external fun kniBridge1697(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1698")private external fun kniBridge1698(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1699")private external fun kniBridge1699(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge17")private external fun kniBridge17(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge170")private external fun kniBridge170(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1700")private external fun kniBridge1700(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1701")private external fun kniBridge1701(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1702")private external fun kniBridge1702(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1703")private external fun kniBridge1703(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1704")private external fun kniBridge1704(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1705")private external fun kniBridge1705(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1706")private external fun kniBridge1706(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1707")private external fun kniBridge1707(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1708")private external fun kniBridge1708(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1709")private external fun kniBridge1709(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge171")private external fun kniBridge171(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1710")private external fun kniBridge1710(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1711")private external fun kniBridge1711(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1712")private external fun kniBridge1712(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1713")private external fun kniBridge1713(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1714")private external fun kniBridge1714(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1715")private external fun kniBridge1715(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1716")private external fun kniBridge1716(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1717")private external fun kniBridge1717(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1718")private external fun kniBridge1718(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1719")private external fun kniBridge1719(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge172")private external fun kniBridge172(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1720")private external fun kniBridge1720(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1721")private external fun kniBridge1721(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1722")private external fun kniBridge1722(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1723")private external fun kniBridge1723(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1724")private external fun kniBridge1724(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1725")private external fun kniBridge1725(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1726")private external fun kniBridge1726(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1727")private external fun kniBridge1727(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1728")private external fun kniBridge1728(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1729")private external fun kniBridge1729(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge173")private external fun kniBridge173(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1730")private external fun kniBridge1730(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1731")private external fun kniBridge1731(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1732")private external fun kniBridge1732(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1733")private external fun kniBridge1733(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1734")private external fun kniBridge1734(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1735")private external fun kniBridge1735(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1736")private external fun kniBridge1736(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1737")private external fun kniBridge1737(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1738")private external fun kniBridge1738(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1739")private external fun kniBridge1739(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge174")private external fun kniBridge174(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1740")private external fun kniBridge1740(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1741")private external fun kniBridge1741(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1742")private external fun kniBridge1742(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1743")private external fun kniBridge1743(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1744")private external fun kniBridge1744(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1745")private external fun kniBridge1745(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1746")private external fun kniBridge1746(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1747")private external fun kniBridge1747(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1748")private external fun kniBridge1748(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1749")private external fun kniBridge1749(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge175")private external fun kniBridge175(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1750")private external fun kniBridge1750(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1751")private external fun kniBridge1751(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1752")private external fun kniBridge1752(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1753")private external fun kniBridge1753(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1754")private external fun kniBridge1754(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1755")private external fun kniBridge1755(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1756")private external fun kniBridge1756(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1757")private external fun kniBridge1757(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1758")private external fun kniBridge1758(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1759")private external fun kniBridge1759(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge176")private external fun kniBridge176(/*0*/ p0: kotlin.UInt): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1760")private external fun kniBridge1760(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1761")private external fun kniBridge1761(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1762")private external fun kniBridge1762(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1763")private external fun kniBridge1763(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1764")private external fun kniBridge1764(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1765")private external fun kniBridge1765(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1766")private external fun kniBridge1766(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1767")private external fun kniBridge1767(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1768")private external fun kniBridge1768(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1769")private external fun kniBridge1769(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge177")private external fun kniBridge177(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.UInt): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1770")private external fun kniBridge1770(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1771")private external fun kniBridge1771(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1772")private external fun kniBridge1772(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1773")private external fun kniBridge1773(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1774")private external fun kniBridge1774(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1775")private external fun kniBridge1775(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1776")private external fun kniBridge1776(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1777")private external fun kniBridge1777(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1778")private external fun kniBridge1778(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1779")private external fun kniBridge1779(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge178")private external fun kniBridge178(/*0*/ p0: kotlin.UInt): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1780")private external fun kniBridge1780(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1781")private external fun kniBridge1781(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1782")private external fun kniBridge1782(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1783")private external fun kniBridge1783(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1784")private external fun kniBridge1784(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1785")private external fun kniBridge1785(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1786")private external fun kniBridge1786(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1787")private external fun kniBridge1787(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1788")private external fun kniBridge1788(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1789")private external fun kniBridge1789(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge179")private external fun kniBridge179(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.UInt): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1790")private external fun kniBridge1790(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1791")private external fun kniBridge1791(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1792")private external fun kniBridge1792(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1793")private external fun kniBridge1793(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1794")private external fun kniBridge1794(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1795")private external fun kniBridge1795(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1796")private external fun kniBridge1796(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1797")private external fun kniBridge1797(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1798")private external fun kniBridge1798(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1799")private external fun kniBridge1799(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge18")private external fun kniBridge18(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge180")private external fun kniBridge180(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1800")private external fun kniBridge1800(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1801")private external fun kniBridge1801(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1802")private external fun kniBridge1802(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float, /*2*/ p2: kotlin.Float, /*3*/ p3: kotlin.Float, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1804")private external fun kniBridge1804(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1805")private external fun kniBridge1805(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1806")private external fun kniBridge1806(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1807")private external fun kniBridge1807(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1808")private external fun kniBridge1808(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1809")private external fun kniBridge1809(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge181")private external fun kniBridge181(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1810")private external fun kniBridge1810(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1811")private external fun kniBridge1811(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Float, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1812")private external fun kniBridge1812(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1813")private external fun kniBridge1813(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1814")private external fun kniBridge1814(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1815")private external fun kniBridge1815(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1816")private external fun kniBridge1816(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1817")private external fun kniBridge1817(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1818")private external fun kniBridge1818(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1819")private external fun kniBridge1819(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge182")private external fun kniBridge182(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1820")private external fun kniBridge1820(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1821")private external fun kniBridge1821(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1822")private external fun kniBridge1822(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1823")private external fun kniBridge1823(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Float, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1824")private external fun kniBridge1824(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Float, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1825")private external fun kniBridge1825(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1826")private external fun kniBridge1826(/*0*/ p0: kotlin.Float): kotlin.Float

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1827")private external fun kniBridge1827(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Float, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1828")private external fun kniBridge1828(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1829")private external fun kniBridge1829(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Float, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge183")private external fun kniBridge183(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1830")private external fun kniBridge1830(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double, /*2*/ p2: kotlin.Double, /*3*/ p3: kotlin.Double, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1832")private external fun kniBridge1832(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1833")private external fun kniBridge1833(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1834")private external fun kniBridge1834(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1835")private external fun kniBridge1835(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1836")private external fun kniBridge1836(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1837")private external fun kniBridge1837(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1838")private external fun kniBridge1838(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1839")private external fun kniBridge1839(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Double, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge184")private external fun kniBridge184(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1840")private external fun kniBridge1840(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1841")private external fun kniBridge1841(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1842")private external fun kniBridge1842(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1843")private external fun kniBridge1843(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1844")private external fun kniBridge1844(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1845")private external fun kniBridge1845(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1846")private external fun kniBridge1846(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1847")private external fun kniBridge1847(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1848")private external fun kniBridge1848(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1849")private external fun kniBridge1849(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge185")private external fun kniBridge185(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1850")private external fun kniBridge1850(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1851")private external fun kniBridge1851(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Double, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1852")private external fun kniBridge1852(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Double, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1853")private external fun kniBridge1853(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1854")private external fun kniBridge1854(/*0*/ p0: kotlin.Double): kotlin.Double

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1855")private external fun kniBridge1855(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Double, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1856")private external fun kniBridge1856(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1857")private external fun kniBridge1857(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Double, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1858")private external fun kniBridge1858(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1859")private fun kniBridge1859(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge186")private external fun kniBridge186(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1860")private external fun kniBridge1860(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1861")private fun kniBridge1861(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1862")private external fun kniBridge1862(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1863")private fun kniBridge1863(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1864")private external fun kniBridge1864(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1865")private fun kniBridge1865(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1866")private external fun kniBridge1866(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1867")private fun kniBridge1867(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1868")private external fun kniBridge1868(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1869")private fun kniBridge1869(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge187")private external fun kniBridge187(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1870")private external fun kniBridge1870(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1871")private fun kniBridge1871(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1872")private external fun kniBridge1872(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1873")private fun kniBridge1873(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1874")private external fun kniBridge1874(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1875")private fun kniBridge1875(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1876")private external fun kniBridge1876(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1877")private fun kniBridge1877(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1878")private external fun kniBridge1878(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1879")private fun kniBridge1879(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge188")private external fun kniBridge188(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1880")private external fun kniBridge1880(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1881")private fun kniBridge1881(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1882")private external fun kniBridge1882(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1883")private fun kniBridge1883(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1884")private external fun kniBridge1884(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1885")private fun kniBridge1885(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1886")private external fun kniBridge1886(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1887")private fun kniBridge1887(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1888")private external fun kniBridge1888(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1889")private fun kniBridge1889(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge189")private external fun kniBridge189(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1890")private external fun kniBridge1890(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1891")private fun kniBridge1891(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1892")private external fun kniBridge1892(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1893")private fun kniBridge1893(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1894")private external fun kniBridge1894(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1895")private fun kniBridge1895(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1896")private external fun kniBridge1896(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1897")private fun kniBridge1897(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1898")private external fun kniBridge1898(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1899")private fun kniBridge1899(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge19")private external fun kniBridge19(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge190")private external fun kniBridge190(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1900")private external fun kniBridge1900(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1901")private fun kniBridge1901(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1902")private external fun kniBridge1902(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1903")private fun kniBridge1903(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1904")private external fun kniBridge1904(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1905")private fun kniBridge1905(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1906")private external fun kniBridge1906(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1907")private fun kniBridge1907(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1908")private external fun kniBridge1908(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1909")private fun kniBridge1909(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge191")private external fun kniBridge191(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1910")private external fun kniBridge1910(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1911")private fun kniBridge1911(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1912")private external fun kniBridge1912(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1913")private fun kniBridge1913(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1914")private external fun kniBridge1914(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1915")private fun kniBridge1915(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1916")private external fun kniBridge1916(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1917")private fun kniBridge1917(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1918")private external fun kniBridge1918(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1919")private fun kniBridge1919(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge192")private external fun kniBridge192(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1920")private external fun kniBridge1920(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1921")private fun kniBridge1921(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1922")private external fun kniBridge1922(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1923")private fun kniBridge1923(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1924")private external fun kniBridge1924(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1925")private fun kniBridge1925(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1926")private external fun kniBridge1926(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1927")private fun kniBridge1927(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1928")private external fun kniBridge1928(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1929")private fun kniBridge1929(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge193")private external fun kniBridge193(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1930")private external fun kniBridge1930(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1931")private fun kniBridge1931(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1932")private external fun kniBridge1932(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1933")private fun kniBridge1933(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1934")private external fun kniBridge1934(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1935")private fun kniBridge1935(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1936")private external fun kniBridge1936(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1937")private fun kniBridge1937(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1938")private external fun kniBridge1938(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1939")private fun kniBridge1939(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge194")private external fun kniBridge194(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1940")private external fun kniBridge1940(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1941")private fun kniBridge1941(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1942")private external fun kniBridge1942(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1943")private fun kniBridge1943(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1944")private external fun kniBridge1944(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1945")private fun kniBridge1945(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1946")private external fun kniBridge1946(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1947")private fun kniBridge1947(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1948")private external fun kniBridge1948(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1949")private fun kniBridge1949(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge195")private external fun kniBridge195(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1950")private external fun kniBridge1950(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1951")private fun kniBridge1951(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1952")private external fun kniBridge1952(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1953")private fun kniBridge1953(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1954")private external fun kniBridge1954(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1955")private fun kniBridge1955(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1956")private external fun kniBridge1956(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1957")private fun kniBridge1957(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1958")private external fun kniBridge1958(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1959")private fun kniBridge1959(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge196")private external fun kniBridge196(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1960")private external fun kniBridge1960(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1961")private fun kniBridge1961(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1962")private external fun kniBridge1962(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge1963")private fun kniBridge1963(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */ { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1964")private external fun kniBridge1964(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1965")private external fun kniBridge1965(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1966")private external fun kniBridge1966(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1967")private external fun kniBridge1967(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1968")private external fun kniBridge1968(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1969")private external fun kniBridge1969(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge197")private external fun kniBridge197(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.Long): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1970")private external fun kniBridge1970(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1971")private external fun kniBridge1971(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1972")private external fun kniBridge1972(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1973")private external fun kniBridge1973(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1974")private external fun kniBridge1974(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1975")private external fun kniBridge1975(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1976")private external fun kniBridge1976(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1977")private external fun kniBridge1977(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1978")private external fun kniBridge1978(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1979")private external fun kniBridge1979(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge198")private external fun kniBridge198(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1980")private external fun kniBridge1980(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1981")private external fun kniBridge1981(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1982")private external fun kniBridge1982(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1983")private external fun kniBridge1983(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1984")private external fun kniBridge1984(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1985")private external fun kniBridge1985(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1986")private external fun kniBridge1986(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1987")private external fun kniBridge1987(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1988")private external fun kniBridge1988(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1989")private external fun kniBridge1989(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge199")private external fun kniBridge199(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1990")private external fun kniBridge1990(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1991")private external fun kniBridge1991(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1992")private external fun kniBridge1992(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1993")private external fun kniBridge1993(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1994")private external fun kniBridge1994(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1995")private external fun kniBridge1995(/*0*/ p0: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1996")private external fun kniBridge1996(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1997")private external fun kniBridge1997(/*0*/ p0: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1998")private external fun kniBridge1998(): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge1999")private external fun kniBridge1999(/*0*/ p0: kotlin.Int)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2")private external fun kniBridge2(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge20")private external fun kniBridge20(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2000")private external fun kniBridge2000(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2001")private external fun kniBridge2001(/*0*/ p0: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2002")private external fun kniBridge2002(): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2003")private external fun kniBridge2003(/*0*/ p0: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2004")private external fun kniBridge2004(): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2005")private external fun kniBridge2005(/*0*/ p0: kotlin.Int)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2006")private external fun kniBridge2006(): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2007")private external fun kniBridge2007(/*0*/ p0: kotlin.UInt)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2008")private external fun kniBridge2008(): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2009")private external fun kniBridge2009(/*0*/ p0: kotlin.UInt)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2010")private external fun kniBridge2010(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2011")private external fun kniBridge2011(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2012")private external fun kniBridge2012(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2013")private external fun kniBridge2013(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2014")private external fun kniBridge2014(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2015")private external fun kniBridge2015(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2016")private external fun kniBridge2016(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2017")private external fun kniBridge2017(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2018")private external fun kniBridge2018(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2019")private external fun kniBridge2019(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge202")private external fun kniBridge202(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2020")private external fun kniBridge2020(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2021")private external fun kniBridge2021(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2022")private external fun kniBridge2022(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2023")private external fun kniBridge2023(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2024")private external fun kniBridge2024(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2025")private external fun kniBridge2025(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2026")private external fun kniBridge2026(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2027")private external fun kniBridge2027(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2028")private external fun kniBridge2028(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2029")private external fun kniBridge2029(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge203")private external fun kniBridge203(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2030")private external fun kniBridge2030(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2031")private external fun kniBridge2031(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2032")private external fun kniBridge2032(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2033")private external fun kniBridge2033(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2034")private external fun kniBridge2034(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2035")private external fun kniBridge2035(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2036")private external fun kniBridge2036(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2037")private external fun kniBridge2037(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2038")private external fun kniBridge2038(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2039")private external fun kniBridge2039(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge204")private external fun kniBridge204(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2040")private external fun kniBridge2040(): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2041")private external fun kniBridge2041(): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2042")private external fun kniBridge2042(): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2043")private external fun kniBridge2043(): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2044")private external fun kniBridge2044(): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2045")private external fun kniBridge2045(): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2046")private external fun kniBridge2046(): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2047")private external fun kniBridge2047(): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2048")private external fun kniBridge2048(): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2049")private external fun kniBridge2049(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge205")private external fun kniBridge205(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2050")private external fun kniBridge2050(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2051")private external fun kniBridge2051(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2052")private external fun kniBridge2052(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2053")private external fun kniBridge2053(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2054")private external fun kniBridge2054(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2055")private external fun kniBridge2055(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2056")private external fun kniBridge2056(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2057")private external fun kniBridge2057(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2058")private external fun kniBridge2058(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2059")private external fun kniBridge2059(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge206")private external fun kniBridge206(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2060")private external fun kniBridge2060(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2061")private external fun kniBridge2061(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2062")private external fun kniBridge2062(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2063")private external fun kniBridge2063(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge2064")private external fun kniBridge2064(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge207")private external fun kniBridge207(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge208")private external fun kniBridge208(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge209")private external fun kniBridge209(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge21")private external fun kniBridge21(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge210")private external fun kniBridge210(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge211")private fun kniBridge211(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge212")private external fun kniBridge212(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge213")private external fun kniBridge213(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge214")private fun kniBridge214(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge215")private external fun kniBridge215(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge216")private external fun kniBridge216(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge217")private fun kniBridge217(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge218")private external fun kniBridge218(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge219")private external fun kniBridge219(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge22")private external fun kniBridge22(): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge220")private external fun kniBridge220(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge221")private external fun kniBridge221(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge222")private external fun kniBridge222(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge223")private external fun kniBridge223(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge224")private external fun kniBridge224(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge225")private external fun kniBridge225(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge226")private external fun kniBridge226(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge227")private external fun kniBridge227(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge228")private external fun kniBridge228(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge229")private external fun kniBridge229(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge23")private external fun kniBridge23(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge230")private external fun kniBridge230()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge231")private external fun kniBridge231(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge232")private fun kniBridge232(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge233")private external fun kniBridge233(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge234")private external fun kniBridge234(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge235")private fun kniBridge235(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge236")private external fun kniBridge236(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge237")private external fun kniBridge237(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge238")private fun kniBridge238(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge239")private external fun kniBridge239(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge24")private external fun kniBridge24(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge240")private external fun kniBridge240(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge241")private external fun kniBridge241(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge242")private external fun kniBridge242(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge243")private external fun kniBridge243(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge244")private external fun kniBridge244(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge245")private external fun kniBridge245(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge246")private external fun kniBridge246(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge247")private fun kniBridge247(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge248")private external fun kniBridge248(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge249")private external fun kniBridge249(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge25")private external fun kniBridge25(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge250")private fun kniBridge250(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge251")private external fun kniBridge251(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge252")private external fun kniBridge252(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge253")private fun kniBridge253(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge254")private external fun kniBridge254(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Long

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge255")private fun kniBridge255(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge256")private external fun kniBridge256(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge257")private fun kniBridge257(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge258")private fun kniBridge258(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge259")private external fun kniBridge259(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge26")private external fun kniBridge26(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge260")private fun kniBridge260(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge261")private external fun kniBridge261(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge262")private fun kniBridge262(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge263")private external fun kniBridge263(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlin.UInt, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge264")private external fun kniBridge264(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge265")private external fun kniBridge265(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge266")private external fun kniBridge266(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge267")private external fun kniBridge267(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge268")private fun kniBridge268(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge269")private external fun kniBridge269(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge27")private external fun kniBridge27()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge270")private external fun kniBridge270(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge271")private fun kniBridge271(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge272")private external fun kniBridge272(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge273")private external fun kniBridge273(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge274")private external fun kniBridge274(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge275")private external fun kniBridge275(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge276")private external fun kniBridge276(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge277")private external fun kniBridge277(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge278")private external fun kniBridge278(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge279")private external fun kniBridge279(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge28")private external fun kniBridge28(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge280")private external fun kniBridge280(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge281")private fun kniBridge281(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge282")private external fun kniBridge282(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge283")private external fun kniBridge283(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge284")private external fun kniBridge284(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge285")private fun kniBridge285(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge286")private external fun kniBridge286(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge287")private external fun kniBridge287(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge288")private external fun kniBridge288(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge289")private fun kniBridge289(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge29")private external fun kniBridge29()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge290")private external fun kniBridge290(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge291")private external fun kniBridge291(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge292")private external fun kniBridge292(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge293")private external fun kniBridge293(/*0*/ p0: kotlin.Long): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge294")private external fun kniBridge294(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge295")private external fun kniBridge295(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge296")private external fun kniBridge296(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge297")private fun kniBridge297(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge298")private external fun kniBridge298(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge299")private fun kniBridge299(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge3")private external fun kniBridge3(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge30")private external fun kniBridge30(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge300")private external fun kniBridge300(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge301")private external fun kniBridge301(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge302")private external fun kniBridge302(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge303")private fun kniBridge303(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge304")private external fun kniBridge304(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge305")private external fun kniBridge305(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge306")private external fun kniBridge306(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge307")private external fun kniBridge307(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge308")private external fun kniBridge308(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge309")private fun kniBridge309(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Byte { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge31")private external fun kniBridge31(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge310")private external fun kniBridge310(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge311")private external fun kniBridge311(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge312")private fun kniBridge312(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge313")private external fun kniBridge313(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge314")private fun kniBridge314(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge315")private external fun kniBridge315(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge316")private fun kniBridge316(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge317")private external fun kniBridge317(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.UShort, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge318")private fun kniBridge318(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge319")private external fun kniBridge319(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge32")private external fun kniBridge32(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge320")private fun kniBridge320(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge321")private external fun kniBridge321(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge322")private fun kniBridge322(/*0*/ p0: kotlin.Byte, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge323")private external fun kniBridge323(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge324")private fun kniBridge324(/*0*/ p0: kotlin.Byte, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge325")private external fun kniBridge325(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge326")private external fun kniBridge326(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge327")private fun kniBridge327(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge328")private external fun kniBridge328(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge329")private external fun kniBridge329(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge33")private external fun kniBridge33(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge330")private external fun kniBridge330(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge331")private external fun kniBridge331(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge332")private external fun kniBridge332(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge333")private external fun kniBridge333(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge334")private external fun kniBridge334(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge335")private external fun kniBridge335(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge336")private external fun kniBridge336(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge337")private external fun kniBridge337(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlin.UShort, /*8*/ p8: kotlin.UShort, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*10*/ p10: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*11*/ p11: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge338")private external fun kniBridge338(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UShort, /*4*/ p4: kotlin.UShort, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge339")private external fun kniBridge339(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UShort, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge34")private external fun kniBridge34(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge340")private external fun kniBridge340(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge341")private external fun kniBridge341(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge342")private external fun kniBridge342(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge343")private external fun kniBridge343(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.UShort, /*5*/ p5: kotlin.UShort, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge344")private external fun kniBridge344(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge345")private external fun kniBridge345(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge346")private external fun kniBridge346(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.UShort, /*6*/ p6: kotlin.UShort, /*7*/ p7: kotlin.UShort, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*9*/ p9: kotlin.UInt, /*10*/ p10: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*11*/ p11: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge347")private external fun kniBridge347(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UShort, /*4*/ p4: kotlin.UShort, /*5*/ p5: kotlin.UShort, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge348")private external fun kniBridge348(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge349")private external fun kniBridge349(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UShort, /*5*/ p5: kotlin.UShort, /*6*/ p6: kotlin.UInt, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge35")private external fun kniBridge35(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge350")private external fun kniBridge350(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge351")private external fun kniBridge351(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge352")private external fun kniBridge352(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge353")private external fun kniBridge353(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UByte, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge354")private external fun kniBridge354(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge355")private external fun kniBridge355(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UShort

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge356")private external fun kniBridge356(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge357")private external fun kniBridge357(/*0*/ p0: kotlin.UShort, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge358")private external fun kniBridge358(/*0*/ p0: kotlin.UShort, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge359")private external fun kniBridge359(/*0*/ p0: kotlin.UShort, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UShort

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge36")private external fun kniBridge36(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge360")private external fun kniBridge360(/*0*/ p0: kotlin.UShort, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UShort, /*3*/ p3: kotlin.UShort, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge361")private external fun kniBridge361(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge362")private external fun kniBridge362(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge363")private external fun kniBridge363(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge364")private external fun kniBridge364(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge365")private external fun kniBridge365(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge366")private external fun kniBridge366(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge367")private external fun kniBridge367(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge368")private external fun kniBridge368(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge369")private external fun kniBridge369(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge37")private external fun kniBridge37(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge370")private external fun kniBridge370(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge371")private external fun kniBridge371(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge372")private external fun kniBridge372(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge373")private external fun kniBridge373(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge374")private external fun kniBridge374(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge375")private external fun kniBridge375(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge376")private external fun kniBridge376(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge377")private external fun kniBridge377(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge378")private external fun kniBridge378(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge379")private external fun kniBridge379(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge38")private external fun kniBridge38(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge380")private external fun kniBridge380(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge381")private external fun kniBridge381(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge382")private external fun kniBridge382(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge383")private external fun kniBridge383(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge384")private external fun kniBridge384(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge385")private external fun kniBridge385(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge386")private external fun kniBridge386(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge387")private external fun kniBridge387(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge388")private external fun kniBridge388(/*0*/ p0: kotlin.UShort): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge389")private external fun kniBridge389(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge39")private external fun kniBridge39(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge390")private external fun kniBridge390(/*0*/ p0: kotlin.UShort): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge391")private external fun kniBridge391(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge392")private external fun kniBridge392(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge393")private external fun kniBridge393(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge394")private external fun kniBridge394(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge395")private external fun kniBridge395(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UShort)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge396")private external fun kniBridge396(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge397")private external fun kniBridge397(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge398")private external fun kniBridge398(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge399")private external fun kniBridge399(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge4")private external fun kniBridge4(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge40")private external fun kniBridge40(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge400")private external fun kniBridge400(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge401")private external fun kniBridge401(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge402")private external fun kniBridge402(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge403")private external fun kniBridge403(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge404")private external fun kniBridge404(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge405")private external fun kniBridge405(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge406")private external fun kniBridge406(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge407")private external fun kniBridge407(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge408")private external fun kniBridge408(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge409")private external fun kniBridge409(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge41")private external fun kniBridge41(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge410")private external fun kniBridge410(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge411")private external fun kniBridge411(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge412")private external fun kniBridge412(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge413")private external fun kniBridge413(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge414")private external fun kniBridge414(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge415")private external fun kniBridge415(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge416")private external fun kniBridge416(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge417")private external fun kniBridge417(): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge418")private external fun kniBridge418()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge419")private external fun kniBridge419(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge42")private external fun kniBridge42(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge420")private external fun kniBridge420(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge421")private fun kniBridge421(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge422")private external fun kniBridge422(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge423")private external fun kniBridge423(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge424")private external fun kniBridge424(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge425")private external fun kniBridge425(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge426")private external fun kniBridge426(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge427")private external fun kniBridge427(/*0*/ p0: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge428")private external fun kniBridge428(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge429")private external fun kniBridge429(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge43")private external fun kniBridge43(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge430")private external fun kniBridge430(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge431")private external fun kniBridge431(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge432")private external fun kniBridge432(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge433")private external fun kniBridge433(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge434")private external fun kniBridge434(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Double): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge435")private external fun kniBridge435(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge436")private external fun kniBridge436(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge437")private external fun kniBridge437(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge438")private external fun kniBridge438(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge439")private external fun kniBridge439(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge44")private external fun kniBridge44(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge440")private external fun kniBridge440(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge441")private external fun kniBridge441(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge442")private external fun kniBridge442(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge443")private external fun kniBridge443(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge444")private external fun kniBridge444(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge445")private external fun kniBridge445(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge446")private external fun kniBridge446(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge447")private external fun kniBridge447(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge448")private external fun kniBridge448(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge449")private external fun kniBridge449(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge45")private external fun kniBridge45(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge450")private external fun kniBridge450(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge451")private external fun kniBridge451(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge452")private external fun kniBridge452(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge453")private external fun kniBridge453(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge454")private external fun kniBridge454(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge455")private external fun kniBridge455(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge456")private external fun kniBridge456(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge457")private external fun kniBridge457(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge458")private external fun kniBridge458(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge459")private external fun kniBridge459(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge46")private external fun kniBridge46(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge460")private external fun kniBridge460(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge461")private external fun kniBridge461(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge462")private external fun kniBridge462(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge463")private external fun kniBridge463(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge464")private external fun kniBridge464(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge465")private external fun kniBridge465(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge466")private external fun kniBridge466(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Long

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge467")private external fun kniBridge467(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge468")private external fun kniBridge468(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.UShort): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge469")private external fun kniBridge469(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge47")private external fun kniBridge47(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge470")private external fun kniBridge470(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge471")private external fun kniBridge471(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge472")private external fun kniBridge472(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge473")private external fun kniBridge473(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge474")private external fun kniBridge474(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.internal.ExportForCppRuntime(name = "platform_darwin_kniBridge475")private fun kniBridge475(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge476")private external fun kniBridge476(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge477")private external fun kniBridge477(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge478")private external fun kniBridge478(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge479")private external fun kniBridge479(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge48")private external fun kniBridge48(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge480")private external fun kniBridge480(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge481")private external fun kniBridge481(/*0*/ p0: kotlin.Int): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge482")private external fun kniBridge482(/*0*/ p0: kotlin.Int): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge483")private external fun kniBridge483(/*0*/ p0: kotlin.Int): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge484")private external fun kniBridge484(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.ULong): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge485")private external fun kniBridge485(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge486")private external fun kniBridge486(/*0*/ p0: kotlin.Int): kotlin.Byte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge487")private external fun kniBridge487(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge488")private external fun kniBridge488(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge489")private external fun kniBridge489(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge49")private external fun kniBridge49(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge490")private external fun kniBridge490(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge491")private external fun kniBridge491(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge492")private external fun kniBridge492(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge493")private external fun kniBridge493(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge494")private external fun kniBridge494(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge495")private external fun kniBridge495(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge496")private external fun kniBridge496(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge497")private external fun kniBridge497(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge498")private external fun kniBridge498(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge499")private external fun kniBridge499(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge50")private external fun kniBridge50(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge500")private external fun kniBridge500(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge501")private external fun kniBridge501(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge502")private external fun kniBridge502(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge503")private external fun kniBridge503(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge504")private external fun kniBridge504(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge505")private external fun kniBridge505(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge506")private external fun kniBridge506(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge507")private external fun kniBridge507(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge508")private external fun kniBridge508(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge509")private external fun kniBridge509(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge51")private external fun kniBridge51(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge510")private external fun kniBridge510(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge511")private external fun kniBridge511(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge512")private external fun kniBridge512(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge513")private external fun kniBridge513(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge514")private external fun kniBridge514(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge515")private external fun kniBridge515(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge516")private external fun kniBridge516(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge517")private external fun kniBridge517(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge518")private external fun kniBridge518(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge519")private external fun kniBridge519(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge52")private external fun kniBridge52(/*0*/ p0: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge520")private external fun kniBridge520(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge521")private external fun kniBridge521(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge522")private external fun kniBridge522(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge523")private external fun kniBridge523(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge524")private external fun kniBridge524(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge525")private external fun kniBridge525(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge526")private external fun kniBridge526(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge527")private external fun kniBridge527(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge528")private external fun kniBridge528(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge529")private external fun kniBridge529(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge53")private external fun kniBridge53(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge530")private external fun kniBridge530(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge531")private external fun kniBridge531(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge532")private external fun kniBridge532(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge533")private external fun kniBridge533(): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge534")private external fun kniBridge534(): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge535")private external fun kniBridge535(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge536")private external fun kniBridge536(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge537")private external fun kniBridge537(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge538")private external fun kniBridge538(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge539")private external fun kniBridge539(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge54")private external fun kniBridge54(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge540")private external fun kniBridge540(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge541")private external fun kniBridge541(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge542")private external fun kniBridge542(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge543")private external fun kniBridge543(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge544")private external fun kniBridge544(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge545")private external fun kniBridge545(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge546")private external fun kniBridge546(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge547")private external fun kniBridge547(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge548")private external fun kniBridge548(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge549")private external fun kniBridge549(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge55")private external fun kniBridge55(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge550")private external fun kniBridge550(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge551")private external fun kniBridge551(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge552")private external fun kniBridge552(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge553")private external fun kniBridge553(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge554")private external fun kniBridge554(/*0*/ p0: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge555")private external fun kniBridge555(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge556")private external fun kniBridge556(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge557")private external fun kniBridge557(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge558")private external fun kniBridge558(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge559")private external fun kniBridge559(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge56")private external fun kniBridge56(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge560")private external fun kniBridge560(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge561")private external fun kniBridge561(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge562")private external fun kniBridge562(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge563")private external fun kniBridge563(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge564")private external fun kniBridge564(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge565")private external fun kniBridge565(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge566")private external fun kniBridge566()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge567")private external fun kniBridge567()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge568")private external fun kniBridge568(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge569")private external fun kniBridge569(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge57")private external fun kniBridge57(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge570")private external fun kniBridge570(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge571")private external fun kniBridge571(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge572")private external fun kniBridge572(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge573")private external fun kniBridge573(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge574")private external fun kniBridge574(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge575")private external fun kniBridge575(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge576")private external fun kniBridge576(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge577")private external fun kniBridge577()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge578")private external fun kniBridge578(/*0*/ p0: kotlin.Int)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge579")private external fun kniBridge579(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge58")private external fun kniBridge58(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge580")private external fun kniBridge580(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge581")private external fun kniBridge581(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge582")private external fun kniBridge582(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge583")private external fun kniBridge583(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge584")private external fun kniBridge584(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge585")private external fun kniBridge585(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge586")private external fun kniBridge586(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge587")private external fun kniBridge587(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge588")private external fun kniBridge588(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge589")private external fun kniBridge589(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge59")private external fun kniBridge59(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge590")private external fun kniBridge590(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge591")private external fun kniBridge591(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge592")private external fun kniBridge592(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge593")private external fun kniBridge593(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge594")private external fun kniBridge594(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge595")private external fun kniBridge595(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge596")private external fun kniBridge596(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge597")private external fun kniBridge597(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge598")private external fun kniBridge598(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge599")private external fun kniBridge599(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge60")private external fun kniBridge60(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge600")private external fun kniBridge600(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge601")private external fun kniBridge601(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge602")private external fun kniBridge602(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge603")private external fun kniBridge603(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge604")private external fun kniBridge604(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge605")private external fun kniBridge605(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge606")private external fun kniBridge606(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge607")private external fun kniBridge607(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge608")private external fun kniBridge608(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge609")private external fun kniBridge609(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge61")private external fun kniBridge61(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge610")private external fun kniBridge610(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge611")private external fun kniBridge611(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge612")private external fun kniBridge612(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge613")private external fun kniBridge613(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge614")private external fun kniBridge614(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge615")private external fun kniBridge615(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge616")private external fun kniBridge616(): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge617")private external fun kniBridge617(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge618")private external fun kniBridge618(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge619")private external fun kniBridge619(): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge62")private external fun kniBridge62(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge620")private external fun kniBridge620(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge621")private external fun kniBridge621(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Short): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge622")private external fun kniBridge622(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Short, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge623")private external fun kniBridge623(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge624")private external fun kniBridge624(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge625")private external fun kniBridge625(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlin.UShort, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge626")private external fun kniBridge626(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlin.UShort, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge627")private external fun kniBridge627(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlin.UShort, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge628")private external fun kniBridge628(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlin.UShort): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge629")private external fun kniBridge629(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlin.UShort): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge63")private external fun kniBridge63(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge630")private external fun kniBridge630(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlin.UShort): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge631")private external fun kniBridge631(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlin.UShort): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge632")private external fun kniBridge632(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlin.UShort): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge633")private external fun kniBridge633(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge634")private external fun kniBridge634(/*0*/ p0: kotlin.Byte, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge635")private external fun kniBridge635(/*0*/ p0: kotlin.Byte, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge636")private external fun kniBridge636(/*0*/ p0: kotlin.Byte, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge637")private external fun kniBridge637(/*0*/ p0: kotlin.Byte, /*1*/ p1: kotlin.Byte, /*2*/ p2: kotlin.Byte, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge638")private external fun kniBridge638(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge639")private external fun kniBridge639(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge64")private external fun kniBridge64(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge640")private external fun kniBridge640(/*0*/ p0: kotlin.UShort, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge641")private external fun kniBridge641(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge642")private external fun kniBridge642(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge643")private external fun kniBridge643(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge644")private external fun kniBridge644(/*0*/ p0: kotlin.Byte, /*1*/ p1: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge645")private external fun kniBridge645(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge646")private external fun kniBridge646(/*0*/ p0: kotlin.UShort): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge647")private external fun kniBridge647(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UShort): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge648")private external fun kniBridge648(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge649")private external fun kniBridge649(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.Int, /*6*/ p6: kotlin.Int, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge65")private external fun kniBridge65(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge650")private external fun kniBridge650(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.Int, /*6*/ p6: kotlin.Int, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge651")private external fun kniBridge651(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.Int, /*6*/ p6: kotlin.Int, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge652")private external fun kniBridge652(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.Int, /*6*/ p6: kotlin.Int, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge653")private external fun kniBridge653(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.Int, /*6*/ p6: kotlin.Int, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge654")private external fun kniBridge654(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.Int, /*6*/ p6: kotlin.Int, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge655")private external fun kniBridge655(/*0*/ p0: kotlin.Byte, /*1*/ p1: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge656")private external fun kniBridge656(/*0*/ p0: kotlin.Byte, /*1*/ p1: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge657")private external fun kniBridge657(/*0*/ p0: kotlin.Byte, /*1*/ p1: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge658")private external fun kniBridge658(/*0*/ p0: kotlin.Long): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge659")private external fun kniBridge659(/*0*/ p0: kotlin.UShort, /*1*/ p1: kotlin.UShort, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge66")private external fun kniBridge66(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge660")private external fun kniBridge660(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge661")private external fun kniBridge661(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge662")private external fun kniBridge662(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge663")private external fun kniBridge663(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge664")private external fun kniBridge664(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.Int, /*6*/ p6: kotlin.Int, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge665")private external fun kniBridge665(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.Int, /*6*/ p6: kotlin.Int, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge666")private external fun kniBridge666(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.Int, /*6*/ p6: kotlin.Int, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge667")private external fun kniBridge667(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.Int, /*6*/ p6: kotlin.Int, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge668")private external fun kniBridge668(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.Int, /*6*/ p6: kotlin.Int, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge669")private external fun kniBridge669(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.Int, /*6*/ p6: kotlin.Int, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge67")private external fun kniBridge67(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge670")private external fun kniBridge670(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge671")private external fun kniBridge671(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge672")private external fun kniBridge672(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge673")private external fun kniBridge673(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge674")private external fun kniBridge674(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge675")private external fun kniBridge675(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge676")private external fun kniBridge676(/*0*/ p0: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge677")private external fun kniBridge677(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge678")private external fun kniBridge678(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UByte, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.UByte, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlin.UShort): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge679")private external fun kniBridge679(/*0*/ p0: kotlin.UShort, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge68")private external fun kniBridge68(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge680")private external fun kniBridge680(/*0*/ p0: kotlin.UByte, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge681")private external fun kniBridge681(/*0*/ p0: kotlin.UShort, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge682")private external fun kniBridge682(/*0*/ p0: kotlin.UShort, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge683")private external fun kniBridge683(/*0*/ p0: kotlin.Int): kotlin.UShort

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge684")private external fun kniBridge684(/*0*/ p0: kotlin.Int): kotlin.UByte

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge685")private external fun kniBridge685(/*0*/ p0: kotlin.Int): kotlin.UShort

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge686")private external fun kniBridge686(/*0*/ p0: kotlin.Int): kotlin.UShort

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge687")private external fun kniBridge687(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.UShort

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge688")private external fun kniBridge688(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge689")private external fun kniBridge689(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge69")private external fun kniBridge69(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge690")private external fun kniBridge690(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.UShort)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge691")private external fun kniBridge691(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.UInt)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge692")private external fun kniBridge692(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge693")private external fun kniBridge693(): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge694")private external fun kniBridge694(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.UShort

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge695")private external fun kniBridge695(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge696")private external fun kniBridge696(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge697")private external fun kniBridge697(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.UShort)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge698")private external fun kniBridge698(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.UInt)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge699")private external fun kniBridge699(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge7")private external fun kniBridge7(/*0*/ p0: kotlin.ULong): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge70")private external fun kniBridge70(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.ULong

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge700")private external fun kniBridge700(): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge701")private external fun kniBridge701(/*0*/ p0: kotlin.UInt)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge702")private external fun kniBridge702(/*0*/ p0: kotlin.UInt)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge703")private external fun kniBridge703(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge704")private external fun kniBridge704(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge705")private external fun kniBridge705(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge706")private external fun kniBridge706(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge707")private external fun kniBridge707(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge708")private external fun kniBridge708(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge709")private external fun kniBridge709(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge71")private external fun kniBridge71(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge710")private external fun kniBridge710(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge711")private external fun kniBridge711(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge712")private external fun kniBridge712(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge713")private external fun kniBridge713(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge714")private external fun kniBridge714(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge715")private external fun kniBridge715(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge716")private external fun kniBridge716(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge717")private external fun kniBridge717(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge718")private external fun kniBridge718(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge719")private external fun kniBridge719(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge72")private external fun kniBridge72(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge720")private external fun kniBridge720(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge721")private external fun kniBridge721(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge722")private external fun kniBridge722(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge723")private external fun kniBridge723(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge724")private external fun kniBridge724(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge725")private external fun kniBridge725(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge726")private external fun kniBridge726(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge727")private external fun kniBridge727(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge728")private external fun kniBridge728(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge729")private external fun kniBridge729(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge73")private external fun kniBridge73(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge730")private external fun kniBridge730(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge731")private external fun kniBridge731(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge732")private external fun kniBridge732(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge733")private external fun kniBridge733(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlin.UInt, /*7*/ p7: kotlin.UInt, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge734")private external fun kniBridge734(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge735")private external fun kniBridge735(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge736")private external fun kniBridge736(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge737")private external fun kniBridge737(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge738")private external fun kniBridge738(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge739")private external fun kniBridge739(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge74")private external fun kniBridge74(/*0*/ p0: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge740")private external fun kniBridge740(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge741")private external fun kniBridge741(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge742")private external fun kniBridge742(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge743")private external fun kniBridge743(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge744")private external fun kniBridge744(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge745")private external fun kniBridge745(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge746")private external fun kniBridge746(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge747")private external fun kniBridge747(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge748")private external fun kniBridge748(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge749")private external fun kniBridge749(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge75")private external fun kniBridge75(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge750")private external fun kniBridge750(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge751")private external fun kniBridge751(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge752")private external fun kniBridge752(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge753")private external fun kniBridge753(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge754")private external fun kniBridge754(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge755")private external fun kniBridge755(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge756")private external fun kniBridge756(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge757")private external fun kniBridge757(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge758")private external fun kniBridge758(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge759")private external fun kniBridge759(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge76")private external fun kniBridge76(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge760")private external fun kniBridge760(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge761")private external fun kniBridge761(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge762")private external fun kniBridge762(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge763")private external fun kniBridge763(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge764")private external fun kniBridge764(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge765")private external fun kniBridge765(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge766")private external fun kniBridge766(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge767")private external fun kniBridge767(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge768")private external fun kniBridge768(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge769")private external fun kniBridge769(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge77")private external fun kniBridge77(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge770")private external fun kniBridge770(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge771")private external fun kniBridge771(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge772")private external fun kniBridge772(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge773")private external fun kniBridge773(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge774")private external fun kniBridge774(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge775")private external fun kniBridge775(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge776")private external fun kniBridge776(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge777")private external fun kniBridge777(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge778")private external fun kniBridge778(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge779")private external fun kniBridge779(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge78")private external fun kniBridge78(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge780")private external fun kniBridge780(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge781")private external fun kniBridge781(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge782")private external fun kniBridge782(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge783")private external fun kniBridge783(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge784")private external fun kniBridge784(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge785")private external fun kniBridge785(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge786")private external fun kniBridge786(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge787")private external fun kniBridge787(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge788")private external fun kniBridge788(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge789")private external fun kniBridge789(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge79")private external fun kniBridge79(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge790")private external fun kniBridge790(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge791")private external fun kniBridge791(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge792")private external fun kniBridge792(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge793")private external fun kniBridge793(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge794")private external fun kniBridge794(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge795")private external fun kniBridge795(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge796")private external fun kniBridge796(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlin.UInt, /*7*/ p7: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge797")private external fun kniBridge797(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge798")private external fun kniBridge798(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge799")private external fun kniBridge799(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge8")private external fun kniBridge8(/*0*/ p0: kotlin.ULong): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge80")private external fun kniBridge80(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge800")private external fun kniBridge800(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge801")private external fun kniBridge801(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge802")private external fun kniBridge802(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge803")private external fun kniBridge803(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge804")private external fun kniBridge804(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge805")private external fun kniBridge805(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge806")private external fun kniBridge806(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge807")private external fun kniBridge807(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge808")private external fun kniBridge808(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge809")private external fun kniBridge809(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge81")private external fun kniBridge81(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge810")private external fun kniBridge810(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge811")private external fun kniBridge811(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge812")private external fun kniBridge812(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UByte): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge813")private external fun kniBridge813(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge814")private external fun kniBridge814(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge815")private external fun kniBridge815(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge816")private external fun kniBridge816(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge817")private external fun kniBridge817(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge818")private external fun kniBridge818(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge819")private external fun kniBridge819(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge82")private external fun kniBridge82(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge820")private external fun kniBridge820(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge821")private external fun kniBridge821(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge822")private external fun kniBridge822(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge823")private external fun kniBridge823(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge824")private external fun kniBridge824(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge825")private external fun kniBridge825(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge826")private external fun kniBridge826(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge827")private external fun kniBridge827(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge828")private external fun kniBridge828(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge829")private external fun kniBridge829(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge83")private external fun kniBridge83(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.ULong)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge830")private external fun kniBridge830(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge831")private external fun kniBridge831(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge832")private external fun kniBridge832(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge833")private external fun kniBridge833(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge834")private external fun kniBridge834(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge835")private external fun kniBridge835(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge836")private external fun kniBridge836(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge837")private external fun kniBridge837(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge838")private external fun kniBridge838(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge839")private external fun kniBridge839(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge84")private external fun kniBridge84(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlin.ULong, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge840")private external fun kniBridge840(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge841")private external fun kniBridge841(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge842")private external fun kniBridge842(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge843")private external fun kniBridge843(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge844")private external fun kniBridge844(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge845")private external fun kniBridge845(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge846")private external fun kniBridge846(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge847")private external fun kniBridge847(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge848")private external fun kniBridge848(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge849")private external fun kniBridge849(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge85")private external fun kniBridge85(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge850")private external fun kniBridge850(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge851")private external fun kniBridge851(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge852")private external fun kniBridge852(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge853")private external fun kniBridge853(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge854")private external fun kniBridge854(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge855")private external fun kniBridge855(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge856")private external fun kniBridge856(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlin.ULong, /*7*/ p7: kotlin.UInt, /*8*/ p8: kotlin.Int, /*9*/ p9: kotlin.Int, /*10*/ p10: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge857")private external fun kniBridge857(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge858")private external fun kniBridge858(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlin.ULong, /*7*/ p7: kotlin.UInt, /*8*/ p8: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*9*/ p9: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*10*/ p10: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge859")private external fun kniBridge859(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge86")private external fun kniBridge86(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge860")private external fun kniBridge860(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge861")private external fun kniBridge861(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge862")private external fun kniBridge862(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge863")private external fun kniBridge863(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge864")private external fun kniBridge864(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge865")private external fun kniBridge865(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge866")private external fun kniBridge866(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge867")private external fun kniBridge867(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge868")private external fun kniBridge868(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge869")private external fun kniBridge869(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlin.ULong, /*7*/ p7: kotlin.UInt, /*8*/ p8: kotlin.Int, /*9*/ p9: kotlin.Int, /*10*/ p10: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge87")private external fun kniBridge87(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge870")private external fun kniBridge870(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge871")private external fun kniBridge871(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge872")private external fun kniBridge872(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge873")private external fun kniBridge873(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge874")private external fun kniBridge874(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge875")private external fun kniBridge875(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge876")private external fun kniBridge876(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge877")private external fun kniBridge877(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge878")private external fun kniBridge878(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge879")private external fun kniBridge879(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge88")private external fun kniBridge88(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge880")private external fun kniBridge880(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge881")private external fun kniBridge881(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*7*/ p7: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge882")private external fun kniBridge882(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge883")private external fun kniBridge883(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge884")private external fun kniBridge884(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge885")private external fun kniBridge885(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlin.UInt, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge886")private external fun kniBridge886(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge887")private external fun kniBridge887(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge888")private external fun kniBridge888(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge889")private external fun kniBridge889(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge89")private external fun kniBridge89(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge890")private external fun kniBridge890(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge891")private external fun kniBridge891(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge892")private external fun kniBridge892(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge893")private external fun kniBridge893(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge894")private external fun kniBridge894(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge895")private external fun kniBridge895(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge896")private external fun kniBridge896(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge897")private external fun kniBridge897(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge898")private external fun kniBridge898(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge899")private external fun kniBridge899(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge9")private external fun kniBridge9(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge90")private external fun kniBridge90(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge900")private external fun kniBridge900(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge901")private external fun kniBridge901(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge902")private external fun kniBridge902(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge903")private external fun kniBridge903(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge904")private external fun kniBridge904(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge905")private external fun kniBridge905(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge906")private external fun kniBridge906(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge907")private external fun kniBridge907(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge908")private external fun kniBridge908(): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge909")private external fun kniBridge909(): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge91")private external fun kniBridge91(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge910")private external fun kniBridge910(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge911")private external fun kniBridge911(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge912")private external fun kniBridge912(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge913")private external fun kniBridge913(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge914")private external fun kniBridge914(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge915")private external fun kniBridge915(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.ULong, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge916")private external fun kniBridge916(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.ULong, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge917")private external fun kniBridge917(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge918")private external fun kniBridge918(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge919")private external fun kniBridge919(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge92")private external fun kniBridge92(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge920")private external fun kniBridge920(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge921")private external fun kniBridge921(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge922")private external fun kniBridge922(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge923")private external fun kniBridge923(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge924")private external fun kniBridge924(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge925")private external fun kniBridge925(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge926")private external fun kniBridge926(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge927")private external fun kniBridge927(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge928")private external fun kniBridge928(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge929")private external fun kniBridge929(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.ULong): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge93")private external fun kniBridge93(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge930")private external fun kniBridge930(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge931")private external fun kniBridge931(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge932")private external fun kniBridge932(/*0*/ p0: kotlin.ULong, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge933")private external fun kniBridge933(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge934")private external fun kniBridge934(/*0*/ p0: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge935")private external fun kniBridge935(/*0*/ p0: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge936")private external fun kniBridge936(/*0*/ p0: kotlin.Int): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge937")private external fun kniBridge937(): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge938")private external fun kniBridge938(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge939")private external fun kniBridge939(): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge94")private external fun kniBridge94(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge940")private external fun kniBridge940(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge941")private external fun kniBridge941(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge942")private external fun kniBridge942(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge943")private external fun kniBridge943(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge944")private external fun kniBridge944(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge945")private external fun kniBridge945(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge946")private external fun kniBridge946(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge947")private external fun kniBridge947(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge948")private external fun kniBridge948(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge949")private external fun kniBridge949(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge95")private external fun kniBridge95(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge950")private external fun kniBridge950(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge951")private external fun kniBridge951(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge952")private external fun kniBridge952(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge953")private external fun kniBridge953(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge954")private external fun kniBridge954(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge955")private external fun kniBridge955(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge956")private external fun kniBridge956(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.UInt, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge957")private external fun kniBridge957(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge958")private external fun kniBridge958(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge959")private external fun kniBridge959(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge96")private external fun kniBridge96(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.Int)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge960")private external fun kniBridge960(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge961")private external fun kniBridge961(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge962")private external fun kniBridge962(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge963")private external fun kniBridge963(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge964")private external fun kniBridge964(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.ULong, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge965")private external fun kniBridge965(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge966")private external fun kniBridge966(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge967")private external fun kniBridge967(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge968")private external fun kniBridge968(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.UInt): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge969")private external fun kniBridge969(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge97")private external fun kniBridge97(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge970")private external fun kniBridge970(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge971")private external fun kniBridge971(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge972")private external fun kniBridge972(/*0*/ p0: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge973")private external fun kniBridge973(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.Int)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge974")private external fun kniBridge974(/*0*/ p0: kotlin.Int): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge975")private external fun kniBridge975(/*0*/ p0: kotlin.UInt)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge976")private external fun kniBridge976(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge977")private external fun kniBridge977(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge978")private external fun kniBridge978(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge979")private external fun kniBridge979(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge98")private external fun kniBridge98(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*4*/ p4: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*5*/ p5: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*6*/ p6: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge980")private external fun kniBridge980(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge981")private external fun kniBridge981(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge982")private external fun kniBridge982(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge983")private external fun kniBridge983(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge984")private external fun kniBridge984(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge985")private external fun kniBridge985(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlin.UInt, /*2*/ p2: kotlin.UInt, /*3*/ p3: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge986")private external fun kniBridge986(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge987")private external fun kniBridge987(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge988")private external fun kniBridge988(/*0*/ p0: kotlin.UInt, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge989")private external fun kniBridge989(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.UInt

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge99")private external fun kniBridge99(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ p2: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*3*/ p3: kotlin.UInt, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.Int, /*6*/ p6: kotlin.Int): kotlin.Int

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge990")private external fun kniBridge990(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge991")private external fun kniBridge991(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge992")private external fun kniBridge992(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */)

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge993")private external fun kniBridge993(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge994")private external fun kniBridge994()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge995")private external fun kniBridge995()

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge996")private external fun kniBridge996(): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge997")private external fun kniBridge997(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge998")private external fun kniBridge998(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

@kotlin.native.SymbolName(name = "platform_darwin_kniBridge999")private external fun kniBridge999(/*0*/ p0: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ p1: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */

fun launch_activate_socket(/*0*/ name: kotlin.String?, /*1*/ fds: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVarOf<kotlin.Int>>> */>?, /*2*/ cnt: kotlinx.cinterop.CValuesRef<platform.posix.size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.size_t /* = kotlin.ULong */> */>?): kotlin.Int { TODO() }

fun launch_data_alloc(/*0*/ type: platform.darwin.launch_data_type_t /* = kotlin.UInt */): platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */ { TODO() }

fun launch_data_array_get_count(/*0*/ larray: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */): platform.posix.size_t /* = kotlin.ULong */ { TODO() }

fun launch_data_array_get_index(/*0*/ larray: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */, /*1*/ idx: platform.posix.size_t /* = kotlin.ULong */): platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */ { TODO() }

fun launch_data_array_set_index(/*0*/ larray: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */, /*1*/ lval: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */, /*2*/ idx: platform.posix.size_t /* = kotlin.ULong */): kotlin.Boolean { TODO() }

fun launch_data_copy(/*0*/ ld: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */): platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */ { TODO() }

fun launch_data_dict_get_count(/*0*/ ldict: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */): platform.posix.size_t /* = kotlin.ULong */ { TODO() }

fun launch_data_dict_insert(/*0*/ ldict: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */, /*1*/ lval: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */, /*2*/ key: kotlin.String?): kotlin.Boolean { TODO() }

fun launch_data_dict_iterate(/*0*/ ldict: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */, /*1*/ iterator: platform.darwin.launch_data_dict_iterator_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */, kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */, /*2*/ ctx: kotlinx.cinterop.CValuesRef<*>?) { TODO() }

fun launch_data_dict_lookup(/*0*/ ldict: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */, /*1*/ key: kotlin.String?): platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */ { TODO() }

fun launch_data_dict_remove(/*0*/ ldict: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */, /*1*/ key: kotlin.String?): kotlin.Boolean { TODO() }

fun launch_data_free(/*0*/ ld: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */) { TODO() }

fun launch_data_get_bool(/*0*/ ld: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */): kotlin.Boolean { TODO() }

fun launch_data_get_errno(/*0*/ ld: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */): kotlin.Int { TODO() }

fun launch_data_get_fd(/*0*/ ld: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */): kotlin.Int { TODO() }

fun launch_data_get_integer(/*0*/ ld: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */): kotlin.Long { TODO() }

fun launch_data_get_machport(/*0*/ ld: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */): platform.darwin.mach_port_t /* = kotlin.UInt */ { TODO() }

fun launch_data_get_opaque(/*0*/ ld: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun launch_data_get_opaque_size(/*0*/ ld: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */): platform.posix.size_t /* = kotlin.ULong */ { TODO() }

fun launch_data_get_real(/*0*/ ld: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */): kotlin.Double { TODO() }

fun launch_data_get_string(/*0*/ ld: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun launch_data_get_type(/*0*/ ld: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */): platform.darwin.launch_data_type_t /* = kotlin.UInt */ { TODO() }

fun launch_data_new_bool(/*0*/ `val`: kotlin.Boolean): platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */ { TODO() }

fun launch_data_new_fd(/*0*/ fd: kotlin.Int): platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */ { TODO() }

fun launch_data_new_integer(/*0*/ `val`: kotlin.Long): platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */ { TODO() }

fun launch_data_new_machport(/*0*/ `val`: platform.darwin.mach_port_t /* = kotlin.UInt */): platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */ { TODO() }

fun launch_data_new_opaque(/*0*/ bytes: kotlinx.cinterop.CValuesRef<*>?, /*1*/ sz: platform.posix.size_t /* = kotlin.ULong */): platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */ { TODO() }

fun launch_data_new_real(/*0*/ `val`: kotlin.Double): platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */ { TODO() }

fun launch_data_new_string(/*0*/ `val`: kotlin.String?): platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */ { TODO() }

fun launch_data_set_bool(/*0*/ ld: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */, /*1*/ `val`: kotlin.Boolean): kotlin.Boolean { TODO() }

fun launch_data_set_fd(/*0*/ ld: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */, /*1*/ fd: kotlin.Int): kotlin.Boolean { TODO() }

fun launch_data_set_integer(/*0*/ ld: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */, /*1*/ `val`: kotlin.Long): kotlin.Boolean { TODO() }

fun launch_data_set_machport(/*0*/ ld: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */, /*1*/ mp: platform.darwin.mach_port_t /* = kotlin.UInt */): kotlin.Boolean { TODO() }

fun launch_data_set_opaque(/*0*/ ld: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */, /*1*/ bytes: kotlinx.cinterop.CValuesRef<*>?, /*2*/ sz: platform.posix.size_t /* = kotlin.ULong */): kotlin.Boolean { TODO() }

fun launch_data_set_real(/*0*/ ld: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */, /*1*/ `val`: kotlin.Double): kotlin.Boolean { TODO() }

fun launch_data_set_string(/*0*/ ld: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */, /*1*/ `val`: kotlin.String?): kotlin.Boolean { TODO() }

fun launch_get_fd(): kotlin.Int { TODO() }

fun launch_msg(/*0*/ request: platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */): platform.darwin.launch_data_t? /* = kotlinx.cinterop.CPointer<cnames.structs._launch_data>? */ { TODO() }

fun lio_listio(/*0*/ mode: kotlin.Int, /*1*/ aiocblist: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<platform.darwin.aiocb> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<platform.darwin.aiocb>> */>?, /*2*/ nent: kotlin.Int, /*3*/ sigp: kotlinx.cinterop.CValuesRef<platform.posix.sigevent>?): kotlin.Int { TODO() }

fun lock_acquire(/*0*/ lock_set: platform.darwin.lock_set_t /* = kotlin.UInt */, /*1*/ lock_id: kotlin.Int): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun lock_handoff(/*0*/ lock_set: platform.darwin.lock_set_t /* = kotlin.UInt */, /*1*/ lock_id: kotlin.Int): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun lock_handoff_accept(/*0*/ lock_set: platform.darwin.lock_set_t /* = kotlin.UInt */, /*1*/ lock_id: kotlin.Int): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun lock_make_stable(/*0*/ lock_set: platform.darwin.lock_set_t /* = kotlin.UInt */, /*1*/ lock_id: kotlin.Int): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun lock_release(/*0*/ lock_set: platform.darwin.lock_set_t /* = kotlin.UInt */, /*1*/ lock_id: kotlin.Int): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun lock_set_create(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ new_lock_set: kotlinx.cinterop.CValuesRef<platform.darwin.lock_set_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.lock_set_t /* = kotlin.UInt */> */>?, /*2*/ n_ulocks: kotlin.Int, /*3*/ policy: kotlin.Int): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun lock_set_destroy(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ lock_set: platform.darwin.lock_set_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun lock_try(/*0*/ lock_set: platform.darwin.lock_set_t /* = kotlin.UInt */, /*1*/ lock_id: kotlin.Int): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun login(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.utmp>?) { TODO() }

fun logout(/*0*/ arg0: kotlin.String?): kotlin.Int { TODO() }

fun mach_error(/*0*/ str: kotlin.String?, /*1*/ error_value: platform.darwin.mach_error_t /* = kotlin.Int */) { TODO() }

fun mach_error_string(/*0*/ error_value: platform.darwin.mach_error_t /* = kotlin.Int */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun mach_error_type(/*0*/ error_value: platform.darwin.mach_error_t /* = kotlin.Int */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun mach_generate_activity_id(/*0*/ target: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ count: kotlin.Int, /*2*/ activity_id: kotlinx.cinterop.CValuesRef<platform.posix.uint64_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.uint64_t /* = kotlin.ULong */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_host_self(): platform.darwin.mach_port_t /* = kotlin.UInt */ { TODO() }

fun mach_make_memory_entry(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ size: kotlinx.cinterop.CValuesRef<platform.darwin.vm_size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_size_t /* = kotlin.ULong */> */>?, /*2*/ offset: platform.darwin.vm_offset_t /* = kotlin.ULong */, /*3*/ permission: platform.darwin.vm_prot_t /* = kotlin.Int */, /*4*/ object_handle: kotlinx.cinterop.CValuesRef<platform.darwin.mem_entry_name_port_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mem_entry_name_port_t /* = kotlin.UInt */> */>?, /*5*/ parent_entry: platform.darwin.mem_entry_name_port_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_make_memory_entry_64(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ size: kotlinx.cinterop.CValuesRef<platform.darwin.memory_object_size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.memory_object_size_t /* = kotlin.ULong */> */>?, /*2*/ offset: platform.darwin.memory_object_offset_t /* = kotlin.ULong */, /*3*/ permission: platform.darwin.vm_prot_t /* = kotlin.Int */, /*4*/ object_handle: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_t /* = kotlin.UInt */> */>?, /*5*/ parent_entry: platform.darwin.mem_entry_name_port_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_memory_info(/*0*/ host: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ names: kotlinx.cinterop.CValuesRef<platform.darwin.mach_zone_name_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_zone_name_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.mach_zone_name_t /* = platform.darwin.mach_zone_name */> */> */>?, /*2*/ namesCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?, /*3*/ info: kotlinx.cinterop.CValuesRef<platform.darwin.mach_zone_info_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_zone_info_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.mach_zone_info_t /* = platform.darwin.mach_zone_info_data */> */> */>?, /*4*/ infoCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?, /*5*/ memory_info: kotlinx.cinterop.CValuesRef<platform.darwin.mach_memory_info_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_memory_info_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.mach_memory_info_t /* = platform.darwin.mach_memory_info */> */> */>?, /*6*/ memory_infoCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_memory_object_memory_entry(/*0*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ internal: platform.posix.boolean_t /* = kotlin.UInt */, /*2*/ size: platform.darwin.vm_size_t /* = kotlin.ULong */, /*3*/ permission: platform.darwin.vm_prot_t /* = kotlin.Int */, /*4*/ pager: platform.darwin.memory_object_t /* = kotlin.UInt */, /*5*/ entry_handle: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_memory_object_memory_entry_64(/*0*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ internal: platform.posix.boolean_t /* = kotlin.UInt */, /*2*/ size: platform.darwin.memory_object_size_t /* = kotlin.ULong */, /*3*/ permission: platform.darwin.vm_prot_t /* = kotlin.Int */, /*4*/ pager: platform.darwin.memory_object_t /* = kotlin.UInt */, /*5*/ entry_handle: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_msg(/*0*/ msg: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_header_t>?, /*1*/ option: platform.darwin.mach_msg_option_t /* = kotlin.Int */, /*2*/ send_size: platform.darwin.mach_msg_size_t /* = kotlin.UInt */, /*3*/ rcv_size: platform.darwin.mach_msg_size_t /* = kotlin.UInt */, /*4*/ rcv_name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*5*/ timeout: platform.darwin.mach_msg_timeout_t /* = kotlin.UInt */, /*6*/ notify: platform.darwin.mach_port_name_t /* = kotlin.UInt */): platform.darwin.mach_msg_return_t /* = kotlin.Int */ { TODO() }

fun mach_msg_destroy(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_header_t>?) { TODO() }

fun mach_msg_overwrite(/*0*/ msg: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_header_t>?, /*1*/ option: platform.darwin.mach_msg_option_t /* = kotlin.Int */, /*2*/ send_size: platform.darwin.mach_msg_size_t /* = kotlin.UInt */, /*3*/ rcv_size: platform.darwin.mach_msg_size_t /* = kotlin.UInt */, /*4*/ rcv_name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*5*/ timeout: platform.darwin.mach_msg_timeout_t /* = kotlin.UInt */, /*6*/ notify: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*7*/ rcv_msg: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_header_t>?, /*8*/ rcv_limit: platform.darwin.mach_msg_size_t /* = kotlin.UInt */): platform.darwin.mach_msg_return_t /* = kotlin.Int */ { TODO() }

fun mach_msg_receive(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_header_t>?): platform.darwin.mach_msg_return_t /* = kotlin.Int */ { TODO() }

fun mach_msg_send(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_header_t>?): platform.darwin.mach_msg_return_t /* = kotlin.Int */ { TODO() }

fun mach_msg_server(/*0*/ arg0: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?, kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?) -> platform.posix.boolean_t /* = kotlin.UInt */>>?, /*1*/ arg1: platform.darwin.mach_msg_size_t /* = kotlin.UInt */, /*2*/ arg2: platform.darwin.mach_port_t /* = kotlin.UInt */, /*3*/ arg3: platform.darwin.mach_msg_options_t /* = kotlin.Int */): platform.darwin.mach_msg_return_t /* = kotlin.Int */ { TODO() }

fun mach_msg_server_importance(/*0*/ arg0: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?, kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?) -> platform.posix.boolean_t /* = kotlin.UInt */>>?, /*1*/ arg1: platform.darwin.mach_msg_size_t /* = kotlin.UInt */, /*2*/ arg2: platform.darwin.mach_port_t /* = kotlin.UInt */, /*3*/ arg3: platform.darwin.mach_msg_options_t /* = kotlin.Int */): platform.darwin.mach_msg_return_t /* = kotlin.Int */ { TODO() }

fun mach_msg_server_once(/*0*/ arg0: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?, kotlinx.cinterop.CPointer<platform.darwin.mach_msg_header_t>?) -> platform.posix.boolean_t /* = kotlin.UInt */>>?, /*1*/ arg1: platform.darwin.mach_msg_size_t /* = kotlin.UInt */, /*2*/ arg2: platform.darwin.mach_port_t /* = kotlin.UInt */, /*3*/ arg3: platform.darwin.mach_msg_options_t /* = kotlin.Int */): platform.darwin.mach_msg_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_allocate(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ right: platform.darwin.mach_port_right_t /* = kotlin.UInt */, /*2*/ name: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_name_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_name_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_allocate_full(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ right: platform.darwin.mach_port_right_t /* = kotlin.UInt */, /*2*/ proto: platform.darwin.mach_port_t /* = kotlin.UInt */, /*3*/ qos: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_qos_t /* = platform.darwin.mach_port_qos */>?, /*4*/ name: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_name_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_name_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_allocate_name(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ right: platform.darwin.mach_port_right_t /* = kotlin.UInt */, /*2*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_allocate_qos(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ right: platform.darwin.mach_port_right_t /* = kotlin.UInt */, /*2*/ qos: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_qos_t /* = platform.darwin.mach_port_qos */>?, /*3*/ name: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_name_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_name_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_construct(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ options: platform.darwin.mach_port_options_ptr_t? /* = kotlinx.cinterop.CPointer<platform.darwin.mach_port_options_t /* = platform.darwin.mach_port_options */>? */, /*2*/ context: platform.darwin.mach_port_context_t /* = kotlin.ULong */, /*3*/ name: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_name_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_name_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_deallocate(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_destroy(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_destruct(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ srdelta: platform.darwin.mach_port_delta_t /* = kotlin.Int */, /*3*/ guard: platform.darwin.mach_port_context_t /* = kotlin.ULong */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_dnrequest_info(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ dnr_total: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVar /* = kotlinx.cinterop.UIntVarOf<kotlin.UInt> */>?, /*3*/ dnr_used: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVar /* = kotlinx.cinterop.UIntVarOf<kotlin.UInt> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_extract_member(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ pset: platform.darwin.mach_port_name_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_extract_right(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ msgt_name: platform.darwin.mach_msg_type_name_t /* = kotlin.UInt */, /*3*/ poly: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_t /* = kotlin.UInt */> */>?, /*4*/ polyPoly: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_name_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_name_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_get_attributes(/*0*/ task: platform.darwin.ipc_space_inspect_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ flavor: platform.darwin.mach_port_flavor_t /* = kotlin.Int */, /*3*/ port_info_out: platform.darwin.mach_port_info_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*4*/ port_info_outCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_get_context(/*0*/ task: platform.darwin.ipc_space_inspect_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ context: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_context_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.mach_port_context_t /* = kotlin.ULong */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_get_refs(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ right: platform.darwin.mach_port_right_t /* = kotlin.UInt */, /*3*/ refs: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_urefs_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_urefs_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_get_set_status(/*0*/ task: platform.darwin.ipc_space_inspect_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ members: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_name_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_port_name_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.mach_port_name_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_name_t /* = kotlin.UInt */> */> */> */>?, /*3*/ membersCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_get_srights(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ srights: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_rights_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_rights_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_guard(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ guard: platform.darwin.mach_port_context_t /* = kotlin.ULong */, /*3*/ strict: platform.posix.boolean_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_insert_member(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ pset: platform.darwin.mach_port_name_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_insert_right(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ poly: platform.darwin.mach_port_t /* = kotlin.UInt */, /*3*/ polyPoly: platform.darwin.mach_msg_type_name_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_kernel_object(/*0*/ task: platform.darwin.ipc_space_inspect_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ object_type: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVar /* = kotlinx.cinterop.UIntVarOf<kotlin.UInt> */>?, /*3*/ object_addr: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVar /* = kotlinx.cinterop.UIntVarOf<kotlin.UInt> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_kobject(/*0*/ task: platform.darwin.ipc_space_inspect_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ object_type: kotlinx.cinterop.CValuesRef<platform.darwin.natural_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */> */>?, /*3*/ object_addr: kotlinx.cinterop.CValuesRef<platform.darwin.mach_vm_address_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.mach_vm_address_t /* = kotlin.ULong */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_mod_refs(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ right: platform.darwin.mach_port_right_t /* = kotlin.UInt */, /*3*/ delta: platform.darwin.mach_port_delta_t /* = kotlin.Int */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_move_member(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ member: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ after: platform.darwin.mach_port_name_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_names(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ names: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_name_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_port_name_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.mach_port_name_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_name_t /* = kotlin.UInt */> */> */> */>?, /*2*/ namesCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?, /*3*/ types: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_type_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_port_type_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.mach_port_type_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_type_t /* = kotlin.UInt */> */> */> */>?, /*4*/ typesCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_peek(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ trailer_type: platform.darwin.mach_msg_trailer_type_t /* = kotlin.UInt */, /*3*/ request_seqnop: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_seqno_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_seqno_t /* = kotlin.UInt */> */>?, /*4*/ msg_sizep: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_size_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_size_t /* = kotlin.UInt */> */>?, /*5*/ msg_idp: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_id_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.mach_msg_id_t /* = kotlin.Int */> */>?, /*6*/ trailer_infop: platform.darwin.mach_msg_trailer_info_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? */, /*7*/ trailer_infopCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_rename(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ old_name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ new_name: platform.darwin.mach_port_name_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_request_notification(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ msgid: platform.darwin.mach_msg_id_t /* = kotlin.Int */, /*3*/ sync: platform.darwin.mach_port_mscount_t /* = kotlin.UInt */, /*4*/ notify: platform.darwin.mach_port_t /* = kotlin.UInt */, /*5*/ notifyPoly: platform.darwin.mach_msg_type_name_t /* = kotlin.UInt */, /*6*/ previous: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_set_attributes(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ flavor: platform.darwin.mach_port_flavor_t /* = kotlin.Int */, /*3*/ port_info: platform.darwin.mach_port_info_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*4*/ port_infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_set_context(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ context: platform.darwin.mach_port_context_t /* = kotlin.ULong */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_set_mscount(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ mscount: platform.darwin.mach_port_mscount_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_set_seqno(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ seqno: platform.darwin.mach_port_seqno_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_space_basic_info(/*0*/ task: platform.darwin.ipc_space_inspect_t /* = kotlin.UInt */, /*1*/ basic_info: kotlinx.cinterop.CValuesRef<platform.darwin.ipc_info_space_basic_t /* = platform.darwin.ipc_info_space_basic */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_space_info(/*0*/ task: platform.darwin.ipc_space_inspect_t /* = kotlin.UInt */, /*1*/ space_info: kotlinx.cinterop.CValuesRef<platform.darwin.ipc_info_space_t /* = platform.darwin.ipc_info_space */>?, /*2*/ table_info: kotlinx.cinterop.CValuesRef<platform.darwin.ipc_info_name_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.ipc_info_name_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.ipc_info_name_t /* = platform.darwin.ipc_info_name */> */> */>?, /*3*/ table_infoCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?, /*4*/ tree_info: kotlinx.cinterop.CValuesRef<platform.darwin.ipc_info_tree_name_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.ipc_info_tree_name_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.ipc_info_tree_name_t /* = platform.darwin.ipc_info_tree_name */> */> */>?, /*5*/ tree_infoCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_type(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ ptype: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_type_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_type_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_port_unguard(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*2*/ guard: platform.darwin.mach_port_context_t /* = kotlin.ULong */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_ports_lookup(/*0*/ target_task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ init_port_set: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_port_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.mach_port_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_t /* = kotlin.UInt */> */> */> */>?, /*2*/ init_port_setCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_ports_register(/*0*/ target_task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ init_port_set: platform.darwin.mach_port_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.mach_port_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_t /* = kotlin.UInt */> */>? */, /*2*/ init_port_setCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_thread_self(): platform.darwin.mach_port_t /* = kotlin.UInt */ { TODO() }

fun mach_vm_region_info(/*0*/ task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ address: platform.darwin.vm_address_t /* = kotlin.ULong */, /*2*/ region: kotlinx.cinterop.CValuesRef<platform.darwin.vm_info_region_t /* = platform.darwin.vm_info_region */>?, /*3*/ objects: kotlinx.cinterop.CValuesRef<platform.darwin.vm_info_object_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_info_object_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.vm_info_object_t /* = platform.darwin.vm_info_object */> */> */>?, /*4*/ objectsCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_vm_region_info_64(/*0*/ task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ address: platform.darwin.vm_address_t /* = kotlin.ULong */, /*2*/ region: kotlinx.cinterop.CValuesRef<platform.darwin.vm_info_region_64_t /* = platform.darwin.vm_info_region_64 */>?, /*3*/ objects: kotlinx.cinterop.CValuesRef<platform.darwin.vm_info_object_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.vm_info_object_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.vm_info_object_t /* = platform.darwin.vm_info_object */> */> */>?, /*4*/ objectsCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_vm_wire(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*2*/ address: platform.darwin.mach_vm_address_t /* = kotlin.ULong */, /*3*/ size: platform.darwin.mach_vm_size_t /* = kotlin.ULong */, /*4*/ desired_access: platform.darwin.vm_prot_t /* = kotlin.Int */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_voucher_deallocate(/*0*/ voucher: platform.darwin.mach_port_name_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_voucher_extract_attr_recipe_trap(/*0*/ voucher_name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ key: platform.darwin.mach_voucher_attr_key_t /* = kotlin.UInt */, /*2*/ recipe: platform.darwin.mach_voucher_attr_raw_recipe_t? /* = kotlinx.cinterop.CPointer<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>? */, /*3*/ recipe_size: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_zone_info(/*0*/ host: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ names: kotlinx.cinterop.CValuesRef<platform.darwin.mach_zone_name_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_zone_name_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.mach_zone_name_t /* = platform.darwin.mach_zone_name */> */> */>?, /*2*/ namesCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?, /*3*/ info: kotlinx.cinterop.CValuesRef<platform.darwin.mach_zone_info_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_zone_info_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.mach_zone_info_t /* = platform.darwin.mach_zone_info_data */> */> */>?, /*4*/ infoCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mach_zone_info_for_zone(/*0*/ host: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ name: kotlinx.cinterop.CValue<platform.darwin.mach_zone_name_t /* = platform.darwin.mach_zone_name */>, /*2*/ info: kotlinx.cinterop.CValuesRef<platform.darwin.mach_zone_info_t /* = platform.darwin.mach_zone_info_data */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun macx_backing_store_recovery(/*0*/ pid: kotlin.Int): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun macx_backing_store_suspend(/*0*/ suspend: platform.posix.boolean_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun macx_swapoff(/*0*/ filename: platform.posix.uint64_t /* = kotlin.ULong */, /*1*/ flags: kotlin.Int): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun macx_swapon(/*0*/ filename: platform.posix.uint64_t /* = kotlin.ULong */, /*1*/ flags: kotlin.Int, /*2*/ size: kotlin.Int, /*3*/ priority: kotlin.Int): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun macx_triggers(/*0*/ hi_water: kotlin.Int, /*1*/ low_water: kotlin.Int, /*2*/ flags: kotlin.Int, /*3*/ alert_port: platform.darwin.mach_port_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun mbr_check_membership(/*0*/ user: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */, /*1*/ group: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */, /*2*/ ismember: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Int { TODO() }

fun mbr_check_service_membership(/*0*/ user: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */, /*1*/ servicename: kotlin.String?, /*2*/ ismember: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Int { TODO() }

fun mbr_gid_to_uuid(/*0*/ gid: platform.posix.gid_t /* = kotlin.UInt */, /*1*/ uu: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */): kotlin.Int { TODO() }

fun mbr_identifier_to_uuid(/*0*/ id_type: kotlin.Int, /*1*/ identifier: kotlinx.cinterop.CValuesRef<*>?, /*2*/ identifier_size: platform.posix.size_t /* = kotlin.ULong */, /*3*/ uu: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */): kotlin.Int { TODO() }

fun mbr_sid_to_string(/*0*/ sid: kotlinx.cinterop.CValuesRef<platform.darwin.nt_sid_t>?, /*1*/ string: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?): kotlin.Int { TODO() }

fun mbr_sid_to_uuid(/*0*/ sid: kotlinx.cinterop.CValuesRef<platform.darwin.nt_sid_t>?, /*1*/ uu: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */): kotlin.Int { TODO() }

fun mbr_uid_to_uuid(/*0*/ uid: platform.posix.uid_t /* = kotlin.UInt */, /*1*/ uu: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */): kotlin.Int { TODO() }

fun mbr_uuid_to_id(/*0*/ uu: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */, /*1*/ uid_or_gid: kotlinx.cinterop.CValuesRef<platform.posix.id_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.id_t /* = kotlin.UInt */> */>?, /*2*/ id_type: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Int { TODO() }

fun mbr_uuid_to_sid(/*0*/ uu: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */, /*1*/ sid: kotlinx.cinterop.CValuesRef<platform.darwin.nt_sid_t>?): kotlin.Int { TODO() }

fun mig_allocate(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.vm_address_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_address_t /* = kotlin.ULong */> */>?, /*1*/ arg1: platform.darwin.vm_size_t /* = kotlin.ULong */) { TODO() }

fun mig_dealloc_reply_port(/*0*/ reply_port: platform.darwin.mach_port_t /* = kotlin.UInt */) { TODO() }

fun mig_deallocate(/*0*/ arg0: platform.darwin.vm_address_t /* = kotlin.ULong */, /*1*/ arg1: platform.darwin.vm_size_t /* = kotlin.ULong */) { TODO() }

fun mig_get_reply_port(): platform.darwin.mach_port_t /* = kotlin.UInt */ { TODO() }

fun mig_put_reply_port(/*0*/ reply_port: platform.darwin.mach_port_t /* = kotlin.UInt */) { TODO() }

fun mig_reply_setup(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_header_t>?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_header_t>?) { TODO() }

fun mig_strncpy(/*0*/ dest: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ src: kotlin.String?, /*2*/ len: kotlin.Int): kotlin.Int { TODO() }

fun mig_strncpy_zerofill(/*0*/ dest: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ src: kotlin.String?, /*2*/ len: kotlin.Int): kotlin.Int { TODO() }

fun mpool_filter(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.MPOOL>?, /*1*/ arg1: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.pgno_t /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>?, /*2*/ arg2: kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, platform.darwin.pgno_t /* = kotlin.UInt */, kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>?, /*3*/ arg3: kotlinx.cinterop.CValuesRef<*>?) { TODO() }

fun mpool_get(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.MPOOL>?, /*1*/ arg1: platform.darwin.pgno_t /* = kotlin.UInt */, /*2*/ arg2: kotlin.UInt): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun mpool_new(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.MPOOL>?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<platform.darwin.pgno_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.pgno_t /* = kotlin.UInt */> */>?): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun mpool_open(/*0*/ arg0: kotlinx.cinterop.CValuesRef<*>?, /*1*/ arg1: kotlin.Int, /*2*/ arg2: platform.darwin.pgno_t /* = kotlin.UInt */, /*3*/ arg3: platform.darwin.pgno_t /* = kotlin.UInt */): kotlinx.cinterop.CPointer<platform.darwin.MPOOL>? { TODO() }

fun new_printf_comp(/*0*/ __domain: platform.darwin.printf_domain_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_domain>? */, /*1*/ __loc: platform.posix.locale_t? /* = kotlinx.cinterop.CPointer<cnames.structs._xlocale>? */, /*2*/ __fmt: kotlin.String?): platform.darwin.printf_comp_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_compiled>? */ { TODO() }

fun new_printf_domain(): platform.darwin.printf_domain_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_domain>? */ { TODO() }

fun nl_langinfo(/*0*/ arg0: platform.darwin.nl_item /* = kotlin.Int */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun nl_langinfo_l(/*0*/ arg0: platform.darwin.nl_item /* = kotlin.Int */, /*1*/ arg1: platform.posix.locale_t? /* = kotlinx.cinterop.CPointer<cnames.structs._xlocale>? */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun notify_cancel(/*0*/ token: kotlin.Int): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun notify_check(/*0*/ token: kotlin.Int, /*1*/ check: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun notify_get_state(/*0*/ token: kotlin.Int, /*1*/ state64: kotlinx.cinterop.CValuesRef<platform.posix.uint64_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.uint64_t /* = kotlin.ULong */> */>?): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun notify_post(/*0*/ name: kotlin.String?): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun notify_register_check(/*0*/ name: kotlin.String?, /*1*/ out_token: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun notify_register_dispatch(/*0*/ name: kotlin.String?, /*1*/ out_token: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?, /*2*/ queue: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*3*/ handler: platform.darwin.notify_handler_t? /* = ((kotlin.Int) -> kotlin.Unit)? */): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun notify_register_file_descriptor(/*0*/ name: kotlin.String?, /*1*/ notify_fd: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?, /*2*/ flags: kotlin.Int, /*3*/ out_token: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun notify_register_mach_port(/*0*/ name: kotlin.String?, /*1*/ notify_port: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_t /* = kotlin.UInt */> */>?, /*2*/ flags: kotlin.Int, /*3*/ out_token: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun notify_register_signal(/*0*/ name: kotlin.String?, /*1*/ sig: kotlin.Int, /*2*/ out_token: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun notify_resume(/*0*/ token: kotlin.Int): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun notify_set_state(/*0*/ token: kotlin.Int, /*1*/ state64: platform.posix.uint64_t /* = kotlin.ULong */): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun notify_suspend(/*0*/ token: kotlin.Int): platform.posix.uint32_t /* = kotlin.UInt */ { TODO() }

fun nvis(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: platform.posix.size_t /* = kotlin.ULong */, /*2*/ arg2: kotlin.Int, /*3*/ arg3: kotlin.Int, /*4*/ arg4: kotlin.Int): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "performSelector:withObject:withObject:", encoding = "@40@0:8:16@24@32", imp = "knimi_platform_darwin9")internal fun objcKniBridge10(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*3*/ withObject: kotlin.Any?, /*4*/ _withObject: kotlin.Any?): kotlin.Any? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "performSelector:", encoding = "@24@0:8:16", imp = "knimi_platform_darwin100")internal fun objcKniBridge101(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): kotlin.Any? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "performSelector:withObject:", encoding = "@32@0:8:16@24", imp = "knimi_platform_darwin102")internal fun objcKniBridge103(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*3*/ withObject: kotlin.Any?): kotlin.Any? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "performSelector:withObject:withObject:", encoding = "@40@0:8:16@24@32", imp = "knimi_platform_darwin104")internal fun objcKniBridge105(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*3*/ withObject: kotlin.Any?, /*4*/ _withObject: kotlin.Any?): kotlin.Any? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "isProxy", encoding = "c16@0:8", imp = "knimi_platform_darwin106")internal fun objcKniBridge107(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Boolean { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "isKindOfClass:", encoding = "c24@0:8#16", imp = "knimi_platform_darwin108")internal fun objcKniBridge109(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aClass: kotlinx.cinterop.ObjCClass?): kotlin.Boolean { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "isMemberOfClass:", encoding = "c24@0:8#16", imp = "knimi_platform_darwin110")internal fun objcKniBridge111(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aClass: kotlinx.cinterop.ObjCClass?): kotlin.Boolean { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "conformsToProtocol:", encoding = "c24@0:8@16", imp = "knimi_platform_darwin112")internal fun objcKniBridge113(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aProtocol: objcnames.classes.Protocol?): kotlin.Boolean { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "respondsToSelector:", encoding = "c24@0:8:16", imp = "knimi_platform_darwin114")internal fun objcKniBridge115(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): kotlin.Boolean { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "hash", encoding = "Q16@0:8", imp = "knimi_platform_darwin116")internal fun objcKniBridge117(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): platform.darwin.NSUInteger /* = kotlin.ULong */ { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "superclass", encoding = "#16@0:8", imp = "knimi_platform_darwin118")internal fun objcKniBridge119(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.ObjCClass? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "isProxy", encoding = "c16@0:8", imp = "knimi_platform_darwin11")internal fun objcKniBridge12(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Boolean { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "description", encoding = "@16@0:8", imp = "knimi_platform_darwin120")internal fun objcKniBridge121(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.String? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "isKindOfClass:", encoding = "c24@0:8#16", imp = "knimi_platform_darwin13")internal fun objcKniBridge14(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aClass: kotlinx.cinterop.ObjCClass?): kotlin.Boolean { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "isMemberOfClass:", encoding = "c24@0:8#16", imp = "knimi_platform_darwin15")internal fun objcKniBridge16(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aClass: kotlinx.cinterop.ObjCClass?): kotlin.Boolean { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "conformsToProtocol:", encoding = "c24@0:8@16", imp = "knimi_platform_darwin17")internal fun objcKniBridge18(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aProtocol: objcnames.classes.Protocol?): kotlin.Boolean { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "isEqual:", encoding = "c24@0:8@16", imp = "knimi_platform_darwin1")internal fun objcKniBridge2(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ `object`: kotlin.Any?): kotlin.Boolean { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "respondsToSelector:", encoding = "c24@0:8:16", imp = "knimi_platform_darwin19")internal fun objcKniBridge20(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): kotlin.Boolean { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "hash", encoding = "Q16@0:8", imp = "knimi_platform_darwin21")internal fun objcKniBridge22(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): platform.darwin.NSUInteger /* = kotlin.ULong */ { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "superclass", encoding = "#16@0:8", imp = "knimi_platform_darwin23")internal fun objcKniBridge24(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.ObjCClass? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "description", encoding = "@16@0:8", imp = "knimi_platform_darwin25")internal fun objcKniBridge26(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.String? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "debugDescription", encoding = "@16@0:8", imp = "knimi_platform_darwin27")internal fun objcKniBridge28(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.String? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "class", encoding = "#16@0:8", imp = "knimi_platform_darwin3")internal fun objcKniBridge4(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.ObjCClass? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "load", encoding = "v16@0:8", imp = "knimi_platform_darwin44")internal fun objcKniBridge45(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "initialize", encoding = "v16@0:8", imp = "knimi_platform_darwin46")internal fun objcKniBridge47(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "new", encoding = "@16@0:8", imp = "knimi_platform_darwin48")internal fun objcKniBridge49(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): platform.darwin.NSObject? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "allocWithZone:", encoding = "@24@0:8^{_NSZone=}16", imp = "knimi_platform_darwin50")internal fun objcKniBridge51(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ zone: kotlinx.cinterop.CPointer<cnames.structs._NSZone>?): platform.darwin.NSObject? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "alloc", encoding = "@16@0:8", imp = "knimi_platform_darwin52")internal fun objcKniBridge53(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): platform.darwin.NSObject? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "instancesRespondToSelector:", encoding = "c24@0:8:16", imp = "knimi_platform_darwin54")internal fun objcKniBridge55(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): kotlin.Boolean { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "conformsToProtocol:", encoding = "c24@0:8@16", imp = "knimi_platform_darwin56")internal fun objcKniBridge57(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ protocol: objcnames.classes.Protocol?): kotlin.Boolean { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "instanceMethodForSelector:", encoding = "^?24@0:8:16", imp = "knimi_platform_darwin58")internal fun objcKniBridge59(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.darwin.IMP? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "performSelector:", encoding = "@24@0:8:16", imp = "knimi_platform_darwin5")internal fun objcKniBridge6(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): kotlin.Any? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "instanceMethodSignatureForSelector:", encoding = "@24@0:8:16", imp = "knimi_platform_darwin60")internal fun objcKniBridge61(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.Foundation.NSMethodSignature? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "isSubclassOfClass:", encoding = "c24@0:8#16", imp = "knimi_platform_darwin62")internal fun objcKniBridge63(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aClass: kotlinx.cinterop.ObjCClass?): kotlin.Boolean { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "resolveClassMethod:", encoding = "c24@0:8:16", imp = "knimi_platform_darwin64")internal fun objcKniBridge65(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ sel: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): kotlin.Boolean { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "resolveInstanceMethod:", encoding = "c24@0:8:16", imp = "knimi_platform_darwin66")internal fun objcKniBridge67(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ sel: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): kotlin.Boolean { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "hash", encoding = "Q16@0:8", imp = "knimi_platform_darwin68")internal fun objcKniBridge69(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): platform.darwin.NSUInteger /* = kotlin.ULong */ { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "superclass", encoding = "#16@0:8", imp = "knimi_platform_darwin70")internal fun objcKniBridge71(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.ObjCClass? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "class", encoding = "#16@0:8", imp = "knimi_platform_darwin72")internal fun objcKniBridge73(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.ObjCClass? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "description", encoding = "@16@0:8", imp = "knimi_platform_darwin74")internal fun objcKniBridge75(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.String? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "debugDescription", encoding = "@16@0:8", imp = "knimi_platform_darwin76")internal fun objcKniBridge77(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.String? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "init", encoding = "@16@0:8", imp = "knimi_platform_darwin78")internal fun objcKniBridge79(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): platform.darwin.NSObject? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "performSelector:withObject:", encoding = "@32@0:8:16@24", imp = "knimi_platform_darwin7")internal fun objcKniBridge8(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */, /*3*/ withObject: kotlin.Any?): kotlin.Any? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "finalize", encoding = "v16@0:8", imp = "knimi_platform_darwin80")internal fun objcKniBridge81(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */) { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "copy", encoding = "@16@0:8", imp = "knimi_platform_darwin82")internal fun objcKniBridge83(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Any? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "mutableCopy", encoding = "@16@0:8", imp = "knimi_platform_darwin84")internal fun objcKniBridge85(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlin.Any? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "methodForSelector:", encoding = "^?24@0:8:16", imp = "knimi_platform_darwin86")internal fun objcKniBridge87(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.darwin.IMP? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "doesNotRecognizeSelector:", encoding = "v24@0:8:16", imp = "knimi_platform_darwin88")internal fun objcKniBridge89(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "forwardingTargetForSelector:", encoding = "@24@0:8:16", imp = "knimi_platform_darwin90")internal fun objcKniBridge91(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): kotlin.Any? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "forwardInvocation:", encoding = "v24@0:8@16", imp = "knimi_platform_darwin92")internal fun objcKniBridge93(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ anInvocation: platform.Foundation.NSInvocation?) { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "methodSignatureForSelector:", encoding = "@24@0:8:16", imp = "knimi_platform_darwin94")internal fun objcKniBridge95(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ aSelector: kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */): platform.Foundation.NSMethodSignature? { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "isEqual:", encoding = "c24@0:8@16", imp = "knimi_platform_darwin96")internal fun objcKniBridge97(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*2*/ `object`: kotlin.Any?): kotlin.Boolean { TODO() }

@kotlin.native.internal.ExportForCompiler()@kotlinx.cinterop.ObjCBridge(selector = "class", encoding = "#16@0:8", imp = "knimi_platform_darwin98")internal fun objcKniBridge99(/*0*/ kniSC: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */, /*1*/ kniR: kotlinx.cinterop.NativePtr /* = kotlin.native.internal.NativePtr */): kotlinx.cinterop.ObjCClass? { TODO() }

fun object_getClassName(/*0*/ obj: kotlin.Any?): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun opendev(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: kotlin.Int, /*2*/ arg2: kotlin.Int, /*3*/ arg3: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?): kotlin.Int { TODO() }

fun openpty(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?, /*2*/ arg2: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*3*/ arg3: kotlinx.cinterop.CValuesRef<platform.posix.termios>?, /*4*/ arg4: kotlinx.cinterop.CValuesRef<platform.posix.winsize>?): kotlin.Int { TODO() }

fun os_activity_end(/*0*/ activity: platform.darwin.os_activity_t /* = kotlin.ULong */) { TODO() }

fun os_activity_get_active(/*0*/ entries: kotlinx.cinterop.CValuesRef<platform.darwin.os_activity_id_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.os_activity_id_t /* = kotlin.ULong */> */>?, /*1*/ count: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVar /* = kotlinx.cinterop.UIntVarOf<kotlin.UInt> */>?): kotlin.UInt { TODO() }

fun os_activity_get_identifier(/*0*/ activity: platform.darwin.os_activity_t /* = kotlin.ULong */, /*1*/ parent_id: kotlinx.cinterop.CValuesRef<platform.darwin.os_activity_id_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.os_activity_id_t /* = kotlin.ULong */> */>?): platform.darwin.os_activity_id_t /* = kotlin.ULong */ { TODO() }

fun os_log_type_enabled(/*0*/ oslog: platform.darwin.os_log_t? /* = platform.darwin.NSObject? */, /*1*/ type: platform.darwin.os_log_type_t /* = kotlin.UByte */): kotlin.Boolean { TODO() }

external fun os_retain(/*0*/ `object`: kotlinx.cinterop.CValuesRef<*>?): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */

fun os_trace_info_with_payload(/*0*/ format: kotlin.String?, /*1*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/) { TODO() }

fun os_trace_type_enabled(/*0*/ type: platform.posix.uint8_t /* = kotlin.UByte */): kotlin.Boolean { TODO() }

fun os_unfair_lock_assert_not_owner(/*0*/ lock: platform.darwin.os_unfair_lock_t? /* = kotlinx.cinterop.CPointer<platform.darwin.os_unfair_lock_s>? */) { TODO() }

fun os_unfair_lock_assert_owner(/*0*/ lock: platform.darwin.os_unfair_lock_t? /* = kotlinx.cinterop.CPointer<platform.darwin.os_unfair_lock_s>? */) { TODO() }

fun os_unfair_lock_lock(/*0*/ lock: platform.darwin.os_unfair_lock_t? /* = kotlinx.cinterop.CPointer<platform.darwin.os_unfair_lock_s>? */) { TODO() }

fun os_unfair_lock_trylock(/*0*/ lock: platform.darwin.os_unfair_lock_t? /* = kotlinx.cinterop.CPointer<platform.darwin.os_unfair_lock_s>? */): kotlin.Boolean { TODO() }

fun os_unfair_lock_unlock(/*0*/ lock: platform.darwin.os_unfair_lock_t? /* = kotlinx.cinterop.CPointer<platform.darwin.os_unfair_lock_s>? */) { TODO() }

fun panic(/*0*/ arg0: kotlin.String?, /*1*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/) { TODO() }

fun panic_init(/*0*/ arg0: platform.darwin.mach_port_t /* = kotlin.UInt */) { TODO() }

fun pid_for_task(/*0*/ t: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ x: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun pidlock(/*0*/ arg0: kotlin.String?, /*1*/ arg1: kotlin.Int, /*2*/ arg2: kotlinx.cinterop.CValuesRef<platform.posix.pid_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.pid_t /* = kotlin.Int */> */>?, /*3*/ arg3: kotlin.String?): kotlin.Int { TODO() }

fun posix_memalign(/*0*/ __memptr: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?, /*1*/ __alignment: platform.posix.size_t /* = kotlin.ULong */, /*2*/ __size: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun processor_assign(/*0*/ processor: platform.darwin.processor_t /* = kotlin.UInt */, /*1*/ new_set: platform.darwin.processor_set_t /* = kotlin.UInt */, /*2*/ wait: platform.posix.boolean_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun processor_control(/*0*/ processor: platform.darwin.processor_t /* = kotlin.UInt */, /*1*/ processor_cmd: platform.darwin.processor_info_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*2*/ processor_cmdCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun processor_exit(/*0*/ processor: platform.darwin.processor_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun processor_get_assignment(/*0*/ processor: platform.darwin.processor_t /* = kotlin.UInt */, /*1*/ assigned_set: kotlinx.cinterop.CValuesRef<platform.darwin.processor_set_name_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.processor_set_name_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun processor_info(/*0*/ processor: platform.darwin.processor_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.processor_flavor_t /* = kotlin.Int */, /*2*/ host: kotlinx.cinterop.CValuesRef<platform.darwin.host_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.host_t /* = kotlin.UInt */> */>?, /*3*/ processor_info_out: platform.darwin.processor_info_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*4*/ processor_info_outCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun processor_set_create(/*0*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ new_set: kotlinx.cinterop.CValuesRef<platform.darwin.processor_set_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.processor_set_t /* = kotlin.UInt */> */>?, /*2*/ new_name: kotlinx.cinterop.CValuesRef<platform.darwin.processor_set_name_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.processor_set_name_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun processor_set_default(/*0*/ host: platform.darwin.host_t /* = kotlin.UInt */, /*1*/ default_set: kotlinx.cinterop.CValuesRef<platform.darwin.processor_set_name_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.processor_set_name_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun processor_set_destroy(/*0*/ set: platform.darwin.processor_set_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun processor_set_info(/*0*/ set_name: platform.darwin.processor_set_name_t /* = kotlin.UInt */, /*1*/ flavor: kotlin.Int, /*2*/ host: kotlinx.cinterop.CValuesRef<platform.darwin.host_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.host_t /* = kotlin.UInt */> */>?, /*3*/ info_out: platform.darwin.processor_set_info_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*4*/ info_outCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun processor_set_max_priority(/*0*/ processor_set: platform.darwin.processor_set_t /* = kotlin.UInt */, /*1*/ max_priority: kotlin.Int, /*2*/ change_threads: platform.posix.boolean_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun processor_set_policy_control(/*0*/ pset: platform.darwin.processor_set_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.processor_set_flavor_t /* = kotlin.Int */, /*2*/ policy_info: platform.darwin.processor_set_info_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*3*/ policy_infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */, /*4*/ change: platform.posix.boolean_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun processor_set_policy_disable(/*0*/ processor_set: platform.darwin.processor_set_t /* = kotlin.UInt */, /*1*/ policy: kotlin.Int, /*2*/ change_threads: platform.posix.boolean_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun processor_set_policy_enable(/*0*/ processor_set: platform.darwin.processor_set_t /* = kotlin.UInt */, /*1*/ policy: kotlin.Int): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun processor_set_stack_usage(/*0*/ pset: platform.darwin.processor_set_t /* = kotlin.UInt */, /*1*/ ltotal: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UIntVar /* = kotlinx.cinterop.UIntVarOf<kotlin.UInt> */>?, /*2*/ space: kotlinx.cinterop.CValuesRef<platform.darwin.vm_size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_size_t /* = kotlin.ULong */> */>?, /*3*/ resident: kotlinx.cinterop.CValuesRef<platform.darwin.vm_size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_size_t /* = kotlin.ULong */> */>?, /*4*/ maxusage: kotlinx.cinterop.CValuesRef<platform.darwin.vm_size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_size_t /* = kotlin.ULong */> */>?, /*5*/ maxstack: kotlinx.cinterop.CValuesRef<platform.darwin.vm_offset_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_offset_t /* = kotlin.ULong */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun processor_set_statistics(/*0*/ pset: platform.darwin.processor_set_name_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.processor_set_flavor_t /* = kotlin.Int */, /*2*/ info_out: platform.darwin.processor_set_info_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*3*/ info_outCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun processor_set_tasks(/*0*/ processor_set: platform.darwin.processor_set_t /* = kotlin.UInt */, /*1*/ task_list: kotlinx.cinterop.CValuesRef<platform.darwin.task_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.task_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.task_t /* = kotlin.UInt */> */> */> */>?, /*2*/ task_listCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun processor_set_threads(/*0*/ processor_set: platform.darwin.processor_set_t /* = kotlin.UInt */, /*1*/ thread_list: kotlinx.cinterop.CValuesRef<platform.darwin.thread_act_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_act_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.thread_act_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.thread_act_t /* = kotlin.UInt */> */> */> */>?, /*2*/ thread_listCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun processor_start(/*0*/ processor: platform.darwin.processor_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun readpassphrase(/*0*/ arg0: kotlin.String?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*2*/ arg2: platform.posix.size_t /* = kotlin.ULong */, /*3*/ arg3: kotlin.Int): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun register_printf_domain_function(/*0*/ __domain: platform.darwin.printf_domain_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_domain>? */, /*1*/ __spec: kotlin.Int, /*2*/ __render: kotlinx.cinterop.CPointer<platform.darwin.printf_function /* = kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.posix.FILE /* = platform.posix.__sFILE */>?, kotlinx.cinterop.CPointer<platform.darwin.printf_info>?, kotlinx.cinterop.CPointer<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?) -> kotlin.Int> */>?, /*3*/ __arginfo: kotlinx.cinterop.CPointer<platform.darwin.printf_arginfo_function /* = kotlinx.cinterop.CFunction<(kotlinx.cinterop.CPointer<platform.darwin.printf_info>?, platform.posix.size_t /* = kotlin.ULong */, kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?) -> kotlin.Int> */>?, /*4*/ __context: kotlinx.cinterop.CValuesRef<*>?): kotlin.Int { TODO() }

fun register_printf_domain_render_std(/*0*/ __domain: platform.darwin.printf_domain_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_domain>? */, /*1*/ __specs: kotlin.String?): kotlin.Int { TODO() }

fun removefile(/*0*/ path: kotlin.String?, /*1*/ state: platform.darwin.removefile_state_t? /* = kotlinx.cinterop.CPointer<cnames.structs._removefile_state>? */, /*2*/ flags: platform.darwin.removefile_flags_t /* = kotlin.UInt */): kotlin.Int { TODO() }

fun removefile_cancel(/*0*/ state: platform.darwin.removefile_state_t? /* = kotlinx.cinterop.CPointer<cnames.structs._removefile_state>? */): kotlin.Int { TODO() }

fun removefile_state_alloc(): platform.darwin.removefile_state_t? /* = kotlinx.cinterop.CPointer<cnames.structs._removefile_state>? */ { TODO() }

fun removefile_state_free(/*0*/ arg0: platform.darwin.removefile_state_t? /* = kotlinx.cinterop.CPointer<cnames.structs._removefile_state>? */): kotlin.Int { TODO() }

fun removefile_state_get(/*0*/ state: platform.darwin.removefile_state_t? /* = kotlinx.cinterop.CPointer<cnames.structs._removefile_state>? */, /*1*/ key: platform.posix.uint32_t /* = kotlin.UInt */, /*2*/ dst: kotlinx.cinterop.CValuesRef<*>?): kotlin.Int { TODO() }

fun removefile_state_set(/*0*/ state: platform.darwin.removefile_state_t? /* = kotlinx.cinterop.CPointer<cnames.structs._removefile_state>? */, /*1*/ key: platform.posix.uint32_t /* = kotlin.UInt */, /*2*/ value: kotlinx.cinterop.CValuesRef<*>?): kotlin.Int { TODO() }

fun safe_gets(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*2*/ arg2: kotlin.Int) { TODO() }

fun sandbox_free_error(/*0*/ errorbuf: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?) { TODO() }

fun sandbox_init(/*0*/ profile: kotlin.String?, /*1*/ flags: platform.posix.uint64_t /* = kotlin.ULong */, /*2*/ errorbuf: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?): kotlin.Int { TODO() }

fun sel_getName(/*0*/ sel: kotlinx.cinterop.CValuesRef<*>?): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun sel_getUid(/*0*/ str: kotlin.String?): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun sel_registerName(/*0*/ str: kotlin.String?): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun semaphore_create(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ semaphore: kotlinx.cinterop.CValuesRef<platform.darwin.semaphore_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.semaphore_t /* = kotlin.UInt */> */>?, /*2*/ policy: kotlin.Int, /*3*/ value: kotlin.Int): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun semaphore_destroy(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ semaphore: platform.darwin.semaphore_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun semaphore_signal(/*0*/ semaphore: platform.darwin.semaphore_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun semaphore_signal_all(/*0*/ semaphore: platform.darwin.semaphore_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun semaphore_signal_thread(/*0*/ semaphore: platform.darwin.semaphore_t /* = kotlin.UInt */, /*1*/ thread: platform.darwin.thread_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun semaphore_timedwait(/*0*/ semaphore: platform.darwin.semaphore_t /* = kotlin.UInt */, /*1*/ wait_time: kotlinx.cinterop.CValue<platform.darwin.mach_timespec_t /* = platform.darwin.mach_timespec */>): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun semaphore_timedwait_signal(/*0*/ wait_semaphore: platform.darwin.semaphore_t /* = kotlin.UInt */, /*1*/ signal_semaphore: platform.darwin.semaphore_t /* = kotlin.UInt */, /*2*/ wait_time: kotlinx.cinterop.CValue<platform.darwin.mach_timespec_t /* = platform.darwin.mach_timespec */>): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun semaphore_wait(/*0*/ semaphore: platform.darwin.semaphore_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun semaphore_wait_signal(/*0*/ wait_semaphore: platform.darwin.semaphore_t /* = kotlin.UInt */, /*1*/ signal_semaphore: platform.darwin.semaphore_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun setac() { TODO() }

fun setauclass() { TODO() }

fun setauevent() { TODO() }

fun setauid(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.au_id_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.au_id_t /* = kotlin.UInt */> */>?): kotlin.Int { TODO() }

fun setauuser() { TODO() }

fun simd_almost_equal_elements(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>, /*2*/ __tol: kotlin.Double): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>, /*2*/ __tol: kotlin.Double): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>, /*2*/ __tol: kotlin.Double): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>, /*2*/ __tol: kotlin.Double): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>, /*2*/ __tol: kotlin.Double): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>, /*2*/ __tol: kotlin.Double): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>, /*2*/ __tol: kotlin.Double): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>, /*2*/ __tol: kotlin.Double): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>, /*2*/ __tol: kotlin.Double): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>, /*2*/ __tol: kotlin.Float): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>, /*2*/ __tol: kotlin.Float): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>, /*2*/ __tol: kotlin.Float): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>, /*2*/ __tol: kotlin.Float): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>, /*2*/ __tol: kotlin.Float): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>, /*2*/ __tol: kotlin.Float): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>, /*2*/ __tol: kotlin.Float): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>, /*2*/ __tol: kotlin.Float): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>, /*2*/ __tol: kotlin.Float): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements_relative(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>, /*2*/ __tol: kotlin.Double): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements_relative(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>, /*2*/ __tol: kotlin.Double): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements_relative(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>, /*2*/ __tol: kotlin.Double): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements_relative(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>, /*2*/ __tol: kotlin.Double): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements_relative(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>, /*2*/ __tol: kotlin.Double): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements_relative(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>, /*2*/ __tol: kotlin.Double): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements_relative(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>, /*2*/ __tol: kotlin.Double): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements_relative(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>, /*2*/ __tol: kotlin.Double): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements_relative(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>, /*2*/ __tol: kotlin.Double): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements_relative(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>, /*2*/ __tol: kotlin.Float): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements_relative(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>, /*2*/ __tol: kotlin.Float): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements_relative(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>, /*2*/ __tol: kotlin.Float): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements_relative(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>, /*2*/ __tol: kotlin.Float): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements_relative(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>, /*2*/ __tol: kotlin.Float): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements_relative(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>, /*2*/ __tol: kotlin.Float): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements_relative(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>, /*2*/ __tol: kotlin.Float): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements_relative(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>, /*2*/ __tol: kotlin.Float): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_almost_equal_elements_relative(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>, /*2*/ __tol: kotlin.Float): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_equal(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x2>): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_equal(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x3>): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_equal(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double2x4>): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_equal(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x2>): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_equal(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x3>): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_equal(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double3x4>): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_equal(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x2>): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_equal(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x3>): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_equal(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_double4x4>): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_equal(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x2>): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_equal(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x3>): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_equal(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float2x4>): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_equal(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x2>): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_equal(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x3>): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_equal(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float3x4>): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_equal(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x2>): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_equal(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x3>): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

fun simd_equal(/*0*/ __x: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>, /*1*/ __y: kotlinx.cinterop.CValue<platform.darwin.simd_float4x4>): platform.darwin.simd_bool /* = kotlin.Boolean */ { TODO() }

external fun simd_quaternion(/*0*/ xyzr: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.DoubleVar /* = kotlinx.cinterop.DoubleVarOf<kotlin.Double> */>?): kotlinx.cinterop.CValue<platform.darwin.simd_quatd>

external fun simd_quaternion(/*0*/ xyzr: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.FloatVar /* = kotlinx.cinterop.FloatVarOf<kotlin.Float> */>?): kotlinx.cinterop.CValue<platform.darwin.simd_quatf>

fun sl_add(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.StringList /* = platform.darwin._stringlist */>?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?): kotlin.Int { TODO() }

fun sl_find(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.StringList /* = platform.darwin._stringlist */>?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun slot_name(/*0*/ arg0: platform.darwin.cpu_type_t /* = kotlin.Int */, /*1*/ arg1: platform.darwin.cpu_subtype_t /* = kotlin.Int */, /*2*/ arg2: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?, /*3*/ arg3: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?) { TODO() }

fun snvis(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: platform.posix.size_t /* = kotlin.ULong */, /*2*/ arg2: kotlin.Int, /*3*/ arg3: kotlin.Int, /*4*/ arg4: kotlin.Int, /*5*/ arg5: kotlin.String?): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun strenvisx(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: platform.posix.size_t /* = kotlin.ULong */, /*2*/ arg2: kotlin.String?, /*3*/ arg3: platform.posix.size_t /* = kotlin.ULong */, /*4*/ arg4: kotlin.Int, /*5*/ arg5: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Int { TODO() }

fun strfmon(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: platform.posix.size_t /* = kotlin.ULong */, /*2*/ arg2: kotlin.String?, /*3*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): platform.posix.ssize_t /* = kotlin.Long */ { TODO() }

fun strfmon_l(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: platform.posix.size_t /* = kotlin.ULong */, /*2*/ arg2: platform.posix.locale_t? /* = kotlinx.cinterop.CPointer<cnames.structs._xlocale>? */, /*3*/ arg3: kotlin.String?, /*4*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): platform.posix.ssize_t /* = kotlin.Long */ { TODO() }

fun strnunvis(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: platform.posix.size_t /* = kotlin.ULong */, /*2*/ arg2: kotlin.String?): kotlin.Int { TODO() }

fun strnunvisx(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: platform.posix.size_t /* = kotlin.ULong */, /*2*/ arg2: kotlin.String?, /*3*/ arg3: kotlin.Int): kotlin.Int { TODO() }

fun strnvis(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: platform.posix.size_t /* = kotlin.ULong */, /*2*/ arg2: kotlin.String?, /*3*/ arg3: kotlin.Int): kotlin.Int { TODO() }

fun strnvisx(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: platform.posix.size_t /* = kotlin.ULong */, /*2*/ arg2: kotlin.String?, /*3*/ arg3: platform.posix.size_t /* = kotlin.ULong */, /*4*/ arg4: kotlin.Int): kotlin.Int { TODO() }

fun strsenvisx(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: platform.posix.size_t /* = kotlin.ULong */, /*2*/ arg2: kotlin.String?, /*3*/ arg3: platform.posix.size_t /* = kotlin.ULong */, /*4*/ arg4: kotlin.Int, /*5*/ arg5: kotlin.String?, /*6*/ arg6: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): kotlin.Int { TODO() }

fun strsnvis(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: platform.posix.size_t /* = kotlin.ULong */, /*2*/ arg2: kotlin.String?, /*3*/ arg3: kotlin.Int, /*4*/ arg4: kotlin.String?): kotlin.Int { TODO() }

fun strsnvisx(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: platform.posix.size_t /* = kotlin.ULong */, /*2*/ arg2: kotlin.String?, /*3*/ arg3: platform.posix.size_t /* = kotlin.ULong */, /*4*/ arg4: kotlin.Int, /*5*/ arg5: kotlin.String?): kotlin.Int { TODO() }

fun strsvis(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: kotlin.String?, /*2*/ arg2: kotlin.Int, /*3*/ arg3: kotlin.String?): kotlin.Int { TODO() }

fun strsvisx(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: kotlin.String?, /*2*/ arg2: platform.posix.size_t /* = kotlin.ULong */, /*3*/ arg3: kotlin.Int, /*4*/ arg4: kotlin.String?): kotlin.Int { TODO() }

fun strunvis(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: kotlin.String?): kotlin.Int { TODO() }

fun strunvisx(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: kotlin.String?, /*2*/ arg2: kotlin.Int): kotlin.Int { TODO() }

fun strvis(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: kotlin.String?, /*2*/ arg2: kotlin.Int): kotlin.Int { TODO() }

fun strvisx(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: kotlin.String?, /*2*/ arg2: platform.posix.size_t /* = kotlin.ULong */, /*3*/ arg3: kotlin.Int): kotlin.Int { TODO() }

fun svis(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: kotlin.Int, /*2*/ arg2: kotlin.Int, /*3*/ arg3: kotlin.Int, /*4*/ arg4: kotlin.String?): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun swtch(): platform.posix.boolean_t /* = kotlin.UInt */ { TODO() }

fun swtch_pri(/*0*/ pri: kotlin.Int): platform.posix.boolean_t /* = kotlin.UInt */ { TODO() }

fun sxprintf(/*0*/ __str: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ __size: platform.posix.size_t /* = kotlin.ULong */, /*2*/ __domain: platform.darwin.printf_domain_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_domain>? */, /*3*/ __loc: platform.posix.locale_t? /* = kotlinx.cinterop.CPointer<cnames.structs._xlocale>? */, /*4*/ __format: kotlin.String?, /*5*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): kotlin.Int { TODO() }

fun sxprintf_exec(/*0*/ __str: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ __size: platform.posix.size_t /* = kotlin.ULong */, /*2*/ __pc: platform.darwin.printf_comp_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_compiled>? */, /*3*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): kotlin.Int { TODO() }

fun sysdir_get_next_search_path_enumeration(/*0*/ state: platform.darwin.sysdir_search_path_enumeration_state /* = kotlin.UInt */, /*1*/ path: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?): platform.darwin.sysdir_search_path_enumeration_state /* = kotlin.UInt */ { TODO() }

fun sysdir_start_search_path_enumeration(/*0*/ dir: platform.darwin.sysdir_search_path_directory_t /* = kotlin.UInt */, /*1*/ domainMask: platform.darwin.sysdir_search_path_domain_mask_t /* = kotlin.UInt */): platform.darwin.sysdir_search_path_enumeration_state /* = kotlin.UInt */ { TODO() }

fun task_assign(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ new_set: platform.darwin.processor_set_t /* = kotlin.UInt */, /*2*/ assign_threads: platform.posix.boolean_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_assign_default(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ assign_threads: platform.posix.boolean_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_create(/*0*/ target_task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ ledgers: platform.darwin.ledger_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.ledger_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.ledger_t /* = kotlin.UInt */> */>? */, /*2*/ ledgersCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */, /*3*/ inherit_memory: platform.posix.boolean_t /* = kotlin.UInt */, /*4*/ child_task: kotlinx.cinterop.CValuesRef<platform.darwin.task_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.task_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_for_pid(/*0*/ target_tport: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ pid: kotlin.Int, /*2*/ t: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_name_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_name_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_generate_corpse(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ corpse_task_port: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_get_assignment(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ assigned_set: kotlinx.cinterop.CValuesRef<platform.darwin.processor_set_name_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.processor_set_name_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_get_dyld_image_infos(/*0*/ task: platform.darwin.task_inspect_t /* = kotlin.UInt */, /*1*/ dyld_images: kotlinx.cinterop.CValuesRef<platform.darwin.dyld_kernel_image_info_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.dyld_kernel_image_info_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.dyld_kernel_image_info_t /* = platform.darwin.dyld_kernel_image_info */> */> */>?, /*2*/ dyld_imagesCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_get_emulation_vector(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ vector_start: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?, /*2*/ emulation_vector: kotlinx.cinterop.CValuesRef<platform.darwin.emulation_vector_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.emulation_vector_t /* = kotlinx.cinterop.CPointer<platform.darwin.mach_vm_offset_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.mach_vm_offset_t /* = kotlin.ULong */> */> */> */>?, /*3*/ emulation_vectorCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_get_exception_ports(/*0*/ task: platform.darwin.task_inspect_t /* = kotlin.UInt */, /*1*/ exception_mask: platform.darwin.exception_mask_t /* = kotlin.UInt */, /*2*/ masks: platform.darwin.exception_mask_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.exception_mask_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_mask_t /* = kotlin.UInt */> */>? */, /*3*/ masksCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?, /*4*/ old_handlers: platform.darwin.exception_handler_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.exception_handler_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_handler_t /* = kotlin.UInt */> */>? */, /*5*/ old_behaviors: platform.darwin.exception_behavior_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.exception_behavior_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.exception_behavior_t /* = kotlin.Int */> */>? */, /*6*/ old_flavors: platform.darwin.exception_flavor_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.thread_state_flavor_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.thread_state_flavor_t /* = kotlin.Int */> */>? */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_get_mach_voucher(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ which: platform.darwin.mach_voucher_selector_t /* = kotlin.UInt */, /*2*/ voucher: kotlinx.cinterop.CValuesRef<platform.darwin.ipc_voucher_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.ipc_voucher_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_get_special_port(/*0*/ task: platform.darwin.task_inspect_t /* = kotlin.UInt */, /*1*/ which_port: kotlin.Int, /*2*/ special_port: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_get_state(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */, /*2*/ old_state: platform.darwin.thread_state_t? /* = kotlinx.cinterop.CPointer<platform.darwin.natural_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */> */>? */, /*3*/ old_stateCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_info(/*0*/ target_task: platform.darwin.task_name_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.task_flavor_t /* = kotlin.UInt */, /*2*/ task_info_out: platform.darwin.task_info_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*3*/ task_info_outCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_inspect(/*0*/ task: platform.darwin.task_inspect_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.task_inspect_flavor_t /* = kotlin.UInt */, /*2*/ info_out: platform.darwin.task_inspect_info_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*3*/ info_outCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_map_corpse_info(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ corspe_task: platform.darwin.task_t /* = kotlin.UInt */, /*2*/ kcd_addr_begin: kotlinx.cinterop.CValuesRef<platform.darwin.vm_address_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_address_t /* = kotlin.ULong */> */>?, /*3*/ kcd_size: kotlinx.cinterop.CValuesRef<platform.posix.uint32_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.uint32_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_map_corpse_info_64(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ corspe_task: platform.darwin.task_t /* = kotlin.UInt */, /*2*/ kcd_addr_begin: kotlinx.cinterop.CValuesRef<platform.darwin.mach_vm_address_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.mach_vm_address_t /* = kotlin.ULong */> */>?, /*3*/ kcd_size: kotlinx.cinterop.CValuesRef<platform.darwin.mach_vm_size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.mach_vm_size_t /* = kotlin.ULong */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_name_for_pid(/*0*/ target_tport: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ pid: kotlin.Int, /*2*/ tn: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_name_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_name_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_policy(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ policy: platform.darwin.policy_t /* = kotlin.Int */, /*2*/ base: platform.darwin.policy_base_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*3*/ baseCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */, /*4*/ set_limit: platform.posix.boolean_t /* = kotlin.UInt */, /*5*/ change: platform.posix.boolean_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_policy_get(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.task_policy_flavor_t /* = kotlin.UInt */, /*2*/ policy_info: platform.darwin.task_policy_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*3*/ policy_infoCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?, /*4*/ get_default: kotlinx.cinterop.CValuesRef<platform.posix.boolean_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.boolean_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_policy_set(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.task_policy_flavor_t /* = kotlin.UInt */, /*2*/ policy_info: platform.darwin.task_policy_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*3*/ policy_infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_purgable_info(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ stats: kotlinx.cinterop.CValuesRef<platform.darwin.task_purgable_info_t /* = platform.darwin.vm_purgeable_info */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_register_dyld_get_process_state(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ dyld_process_state: kotlinx.cinterop.CValuesRef<platform.darwin.dyld_kernel_process_info_t /* = platform.darwin.dyld_kernel_process_info */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_register_dyld_image_infos(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ dyld_images: platform.darwin.dyld_kernel_image_info_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.dyld_kernel_image_info_t /* = platform.darwin.dyld_kernel_image_info */>? */, /*2*/ dyld_imagesCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_register_dyld_set_dyld_state(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ dyld_state: platform.posix.uint8_t /* = kotlin.UByte */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_register_dyld_shared_cache_image_info(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ dyld_cache_image: kotlinx.cinterop.CValue<platform.darwin.dyld_kernel_image_info_t /* = platform.darwin.dyld_kernel_image_info */>, /*2*/ no_cache: platform.posix.boolean_t /* = kotlin.UInt */, /*3*/ private_cache: platform.posix.boolean_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_resume(/*0*/ target_task: platform.darwin.task_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_resume2(/*0*/ suspend_token: platform.darwin.task_suspension_token_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_sample(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ reply: platform.darwin.mach_port_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_self_trap(): platform.darwin.mach_port_name_t /* = kotlin.UInt */ { TODO() }

fun task_set_emulation(/*0*/ target_port: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ routine_entry_pt: platform.darwin.vm_address_t /* = kotlin.ULong */, /*2*/ routine_number: kotlin.Int): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_set_emulation_vector(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ vector_start: kotlin.Int, /*2*/ emulation_vector: platform.darwin.emulation_vector_t? /* = kotlinx.cinterop.CPointer<platform.darwin.mach_vm_offset_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.mach_vm_offset_t /* = kotlin.ULong */> */>? */, /*3*/ emulation_vectorCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_set_exception_ports(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ exception_mask: platform.darwin.exception_mask_t /* = kotlin.UInt */, /*2*/ new_port: platform.darwin.mach_port_t /* = kotlin.UInt */, /*3*/ behavior: platform.darwin.exception_behavior_t /* = kotlin.Int */, /*4*/ new_flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_set_info(/*0*/ target_task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.task_flavor_t /* = kotlin.UInt */, /*2*/ task_info_in: platform.darwin.task_info_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*3*/ task_info_inCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_set_mach_voucher(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ voucher: platform.darwin.ipc_voucher_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_set_phys_footprint_limit(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ new_limit: kotlin.Int, /*2*/ old_limit: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_set_policy(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ pset: platform.darwin.processor_set_t /* = kotlin.UInt */, /*2*/ policy: platform.darwin.policy_t /* = kotlin.Int */, /*3*/ base: platform.darwin.policy_base_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*4*/ baseCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */, /*5*/ limit: platform.darwin.policy_limit_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*6*/ limitCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */, /*7*/ change: platform.posix.boolean_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_set_port_space(/*0*/ task: platform.darwin.ipc_space_t /* = kotlin.UInt */, /*1*/ table_entries: kotlin.Int): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_set_ras_pc(/*0*/ target_task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ basepc: platform.darwin.vm_address_t /* = kotlin.ULong */, /*2*/ boundspc: platform.darwin.vm_address_t /* = kotlin.ULong */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_set_special_port(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ which_port: kotlin.Int, /*2*/ special_port: platform.darwin.mach_port_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_set_state(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */, /*2*/ new_state: platform.darwin.thread_state_t? /* = kotlinx.cinterop.CPointer<platform.darwin.natural_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */> */>? */, /*3*/ new_stateCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_suspend(/*0*/ target_task: platform.darwin.task_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_suspend2(/*0*/ target_task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ suspend_token: kotlinx.cinterop.CValuesRef<platform.darwin.task_suspension_token_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.task_suspension_token_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_swap_exception_ports(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ exception_mask: platform.darwin.exception_mask_t /* = kotlin.UInt */, /*2*/ new_port: platform.darwin.mach_port_t /* = kotlin.UInt */, /*3*/ behavior: platform.darwin.exception_behavior_t /* = kotlin.Int */, /*4*/ new_flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */, /*5*/ masks: platform.darwin.exception_mask_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.exception_mask_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_mask_t /* = kotlin.UInt */> */>? */, /*6*/ masksCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?, /*7*/ old_handlerss: platform.darwin.exception_handler_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.exception_handler_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_handler_t /* = kotlin.UInt */> */>? */, /*8*/ old_behaviors: platform.darwin.exception_behavior_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.exception_behavior_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.exception_behavior_t /* = kotlin.Int */> */>? */, /*9*/ old_flavors: platform.darwin.exception_flavor_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.thread_state_flavor_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.thread_state_flavor_t /* = kotlin.Int */> */>? */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_swap_mach_voucher(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ new_voucher: platform.darwin.ipc_voucher_t /* = kotlin.UInt */, /*2*/ old_voucher: kotlinx.cinterop.CValuesRef<platform.darwin.ipc_voucher_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.ipc_voucher_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_terminate(/*0*/ target_task: platform.darwin.task_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_threads(/*0*/ target_task: platform.darwin.task_inspect_t /* = kotlin.UInt */, /*1*/ act_list: kotlinx.cinterop.CValuesRef<platform.darwin.thread_act_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.thread_act_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.thread_act_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.thread_act_t /* = kotlin.UInt */> */> */> */>?, /*2*/ act_listCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_unregister_dyld_image_infos(/*0*/ task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ dyld_images: platform.darwin.dyld_kernel_image_info_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.dyld_kernel_image_info_t /* = platform.darwin.dyld_kernel_image_info */>? */, /*2*/ dyld_imagesCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_wire(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ must_wire: platform.posix.boolean_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun task_zone_info(/*0*/ target_task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ names: kotlinx.cinterop.CValuesRef<platform.darwin.mach_zone_name_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.mach_zone_name_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.mach_zone_name_t /* = platform.darwin.mach_zone_name */> */> */>?, /*2*/ namesCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?, /*3*/ info: kotlinx.cinterop.CValuesRef<platform.darwin.task_zone_info_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.task_zone_info_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.task_zone_info_t /* = platform.darwin.task_zone_info_data */> */> */>?, /*4*/ infoCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_abort(/*0*/ target_act: platform.darwin.thread_act_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_abort_safely(/*0*/ target_act: platform.darwin.thread_act_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_assign(/*0*/ thread: platform.darwin.thread_act_t /* = kotlin.UInt */, /*1*/ new_set: platform.darwin.processor_set_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_assign_default(/*0*/ thread: platform.darwin.thread_act_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_create(/*0*/ parent_task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ child_act: kotlinx.cinterop.CValuesRef<platform.darwin.thread_act_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.thread_act_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_create_running(/*0*/ parent_task: platform.darwin.task_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */, /*2*/ new_state: platform.darwin.thread_state_t? /* = kotlinx.cinterop.CPointer<platform.darwin.natural_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */> */>? */, /*3*/ new_stateCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */, /*4*/ child_act: kotlinx.cinterop.CValuesRef<platform.darwin.thread_act_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.thread_act_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_depress_abort(/*0*/ thread: platform.darwin.thread_act_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_get_assignment(/*0*/ thread: platform.darwin.thread_act_t /* = kotlin.UInt */, /*1*/ assigned_set: kotlinx.cinterop.CValuesRef<platform.darwin.processor_set_name_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.processor_set_name_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_get_exception_ports(/*0*/ thread: platform.darwin.thread_inspect_t /* = kotlin.UInt */, /*1*/ exception_mask: platform.darwin.exception_mask_t /* = kotlin.UInt */, /*2*/ masks: platform.darwin.exception_mask_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.exception_mask_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_mask_t /* = kotlin.UInt */> */>? */, /*3*/ masksCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?, /*4*/ old_handlers: platform.darwin.exception_handler_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.exception_handler_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_handler_t /* = kotlin.UInt */> */>? */, /*5*/ old_behaviors: platform.darwin.exception_behavior_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.exception_behavior_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.exception_behavior_t /* = kotlin.Int */> */>? */, /*6*/ old_flavors: platform.darwin.exception_flavor_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.thread_state_flavor_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.thread_state_flavor_t /* = kotlin.Int */> */>? */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_get_mach_voucher(/*0*/ thr_act: platform.darwin.thread_act_t /* = kotlin.UInt */, /*1*/ which: platform.darwin.mach_voucher_selector_t /* = kotlin.UInt */, /*2*/ voucher: kotlinx.cinterop.CValuesRef<platform.darwin.ipc_voucher_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.ipc_voucher_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_get_special_port(/*0*/ thr_act: platform.darwin.thread_act_t /* = kotlin.UInt */, /*1*/ which_port: kotlin.Int, /*2*/ special_port: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_get_state(/*0*/ target_act: platform.darwin.thread_act_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */, /*2*/ old_state: platform.darwin.thread_state_t? /* = kotlinx.cinterop.CPointer<platform.darwin.natural_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */> */>? */, /*3*/ old_stateCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_info(/*0*/ target_act: platform.darwin.thread_inspect_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.thread_flavor_t /* = kotlin.UInt */, /*2*/ thread_info_out: platform.darwin.thread_info_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*3*/ thread_info_outCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_policy(/*0*/ thr_act: platform.darwin.thread_act_t /* = kotlin.UInt */, /*1*/ policy: platform.darwin.policy_t /* = kotlin.Int */, /*2*/ base: platform.darwin.policy_base_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*3*/ baseCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */, /*4*/ set_limit: platform.posix.boolean_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_policy_get(/*0*/ thread: platform.darwin.thread_inspect_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.thread_policy_flavor_t /* = kotlin.UInt */, /*2*/ policy_info: platform.darwin.thread_policy_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*3*/ policy_infoCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?, /*4*/ get_default: kotlinx.cinterop.CValuesRef<platform.posix.boolean_tVar /* = kotlinx.cinterop.UIntVarOf<platform.posix.boolean_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_policy_set(/*0*/ thread: platform.darwin.thread_act_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.thread_policy_flavor_t /* = kotlin.UInt */, /*2*/ policy_info: platform.darwin.thread_policy_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*3*/ policy_infoCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_resume(/*0*/ target_act: platform.darwin.thread_act_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_sample(/*0*/ thread: platform.darwin.thread_act_t /* = kotlin.UInt */, /*1*/ reply: platform.darwin.mach_port_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_set_exception_ports(/*0*/ thread: platform.darwin.thread_act_t /* = kotlin.UInt */, /*1*/ exception_mask: platform.darwin.exception_mask_t /* = kotlin.UInt */, /*2*/ new_port: platform.darwin.mach_port_t /* = kotlin.UInt */, /*3*/ behavior: platform.darwin.exception_behavior_t /* = kotlin.Int */, /*4*/ new_flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_set_mach_voucher(/*0*/ thr_act: platform.darwin.thread_act_t /* = kotlin.UInt */, /*1*/ voucher: platform.darwin.ipc_voucher_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_set_policy(/*0*/ thr_act: platform.darwin.thread_act_t /* = kotlin.UInt */, /*1*/ pset: platform.darwin.processor_set_t /* = kotlin.UInt */, /*2*/ policy: platform.darwin.policy_t /* = kotlin.Int */, /*3*/ base: platform.darwin.policy_base_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*4*/ baseCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */, /*5*/ limit: platform.darwin.policy_limit_t? /* = kotlinx.cinterop.CPointer<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>? */, /*6*/ limitCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_set_special_port(/*0*/ thr_act: platform.darwin.thread_act_t /* = kotlin.UInt */, /*1*/ which_port: kotlin.Int, /*2*/ special_port: platform.darwin.mach_port_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_set_state(/*0*/ target_act: platform.darwin.thread_act_t /* = kotlin.UInt */, /*1*/ flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */, /*2*/ new_state: platform.darwin.thread_state_t? /* = kotlinx.cinterop.CPointer<platform.darwin.natural_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */> */>? */, /*3*/ new_stateCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_suspend(/*0*/ target_act: platform.darwin.thread_act_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_swap_exception_ports(/*0*/ thread: platform.darwin.thread_act_t /* = kotlin.UInt */, /*1*/ exception_mask: platform.darwin.exception_mask_t /* = kotlin.UInt */, /*2*/ new_port: platform.darwin.mach_port_t /* = kotlin.UInt */, /*3*/ behavior: platform.darwin.exception_behavior_t /* = kotlin.Int */, /*4*/ new_flavor: platform.darwin.thread_state_flavor_t /* = kotlin.Int */, /*5*/ masks: platform.darwin.exception_mask_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.exception_mask_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_mask_t /* = kotlin.UInt */> */>? */, /*6*/ masksCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?, /*7*/ old_handlers: platform.darwin.exception_handler_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.exception_handler_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.exception_handler_t /* = kotlin.UInt */> */>? */, /*8*/ old_behaviors: platform.darwin.exception_behavior_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.exception_behavior_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.exception_behavior_t /* = kotlin.Int */> */>? */, /*9*/ old_flavors: platform.darwin.exception_flavor_array_t? /* = kotlinx.cinterop.CPointer<platform.darwin.thread_state_flavor_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.thread_state_flavor_t /* = kotlin.Int */> */>? */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_swap_mach_voucher(/*0*/ thr_act: platform.darwin.thread_act_t /* = kotlin.UInt */, /*1*/ new_voucher: platform.darwin.ipc_voucher_t /* = kotlin.UInt */, /*2*/ old_voucher: kotlinx.cinterop.CValuesRef<platform.darwin.ipc_voucher_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.ipc_voucher_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_switch(/*0*/ thread_name: platform.darwin.mach_port_name_t /* = kotlin.UInt */, /*1*/ option: kotlin.Int, /*2*/ option_time: platform.darwin.mach_msg_timeout_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_terminate(/*0*/ target_act: platform.darwin.thread_act_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun thread_wire(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ thread: platform.darwin.thread_act_t /* = kotlin.UInt */, /*2*/ wired: platform.posix.boolean_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun ttyaction(/*0*/ tty: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ act: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*2*/ user: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?): kotlin.Int { TODO() }

fun ttylock(/*0*/ arg0: kotlin.String?, /*1*/ arg1: kotlin.Int, /*2*/ arg2: kotlinx.cinterop.CValuesRef<platform.posix.pid_tVar /* = kotlinx.cinterop.IntVarOf<platform.posix.pid_t /* = kotlin.Int */> */>?): kotlin.Int { TODO() }

fun ttymsg(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.iovec>?, /*1*/ arg1: kotlin.Int, /*2*/ arg2: kotlin.String?, /*3*/ arg3: kotlin.Int): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun unvis(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: kotlin.Int, /*2*/ arg2: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?, /*3*/ arg3: kotlin.Int): kotlin.Int { TODO() }

fun unw_get_fpreg(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.unw_cursor_t>?, /*1*/ arg1: platform.darwin.unw_regnum_t /* = kotlin.Int */, /*2*/ arg2: kotlinx.cinterop.CValuesRef<platform.darwin.unw_fpreg_tVar /* = kotlinx.cinterop.DoubleVarOf<platform.darwin.unw_fpreg_t /* = kotlin.Double */> */>?): kotlin.Int { TODO() }

fun unw_get_proc_name(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.unw_cursor_t>?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*2*/ arg2: platform.posix.size_t /* = kotlin.ULong */, /*3*/ arg3: kotlinx.cinterop.CValuesRef<platform.darwin.unw_word_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.unw_word_t /* = kotlin.ULong */> */>?): kotlin.Int { TODO() }

fun unw_get_reg(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.unw_cursor_t>?, /*1*/ arg1: platform.darwin.unw_regnum_t /* = kotlin.Int */, /*2*/ arg2: kotlinx.cinterop.CValuesRef<platform.darwin.unw_word_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.unw_word_t /* = kotlin.ULong */> */>?): kotlin.Int { TODO() }

fun unw_is_fpreg(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.unw_cursor_t>?, /*1*/ arg1: platform.darwin.unw_regnum_t /* = kotlin.Int */): kotlin.Int { TODO() }

fun unw_regname(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.unw_cursor_t>?, /*1*/ arg1: platform.darwin.unw_regnum_t /* = kotlin.Int */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun unw_set_fpreg(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.unw_cursor_t>?, /*1*/ arg1: platform.darwin.unw_regnum_t /* = kotlin.Int */, /*2*/ arg2: platform.darwin.unw_fpreg_t /* = kotlin.Double */): kotlin.Int { TODO() }

fun unw_set_reg(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.unw_cursor_t>?, /*1*/ arg1: platform.darwin.unw_regnum_t /* = kotlin.Int */, /*2*/ arg2: platform.darwin.unw_word_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun uuid_clear(/*0*/ uu: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */) { TODO() }

fun uuid_compare(/*0*/ uu1: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */, /*1*/ uu2: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */): kotlin.Int { TODO() }

fun uuid_copy(/*0*/ dst: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */, /*1*/ src: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */) { TODO() }

fun uuid_generate(/*0*/ out: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */) { TODO() }

fun uuid_generate_early_random(/*0*/ out: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */) { TODO() }

fun uuid_generate_random(/*0*/ out: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */) { TODO() }

fun uuid_generate_time(/*0*/ out: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */) { TODO() }

fun uuid_is_null(/*0*/ uu: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */): kotlin.Int { TODO() }

fun uuid_parse(/*0*/ `in`: platform.darwin.uuid_string_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>? */, /*1*/ uu: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */): kotlin.Int { TODO() }

fun uuid_unparse(/*0*/ uu: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */, /*1*/ out: platform.darwin.uuid_string_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>? */) { TODO() }

fun uuid_unparse_lower(/*0*/ uu: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */, /*1*/ out: platform.darwin.uuid_string_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>? */) { TODO() }

fun uuid_unparse_upper(/*0*/ uu: platform.posix.uuid_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.UByteVarOf<kotlin.UByte>>? */, /*1*/ out: platform.darwin.uuid_string_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>? */) { TODO() }

fun vasxprintf(/*0*/ __ret: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?, /*1*/ __domain: platform.darwin.printf_domain_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_domain>? */, /*2*/ __loc: platform.posix.locale_t? /* = kotlinx.cinterop.CPointer<cnames.structs._xlocale>? */, /*3*/ __format: kotlin.String?, /*4*/ __ap: platform.posix.va_list? /* = kotlinx.cinterop.CPointer<platform.posix.__va_list_tag>? */): kotlin.Int { TODO() }

fun vasxprintf_exec(/*0*/ __ret: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?, /*1*/ __pc: platform.darwin.printf_comp_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_compiled>? */, /*2*/ __ap: platform.posix.va_list? /* = kotlinx.cinterop.CPointer<platform.posix.__va_list_tag>? */): kotlin.Int { TODO() }

fun vdxprintf(/*0*/ __fd: kotlin.Int, /*1*/ __domain: platform.darwin.printf_domain_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_domain>? */, /*2*/ __loc: platform.posix.locale_t? /* = kotlinx.cinterop.CPointer<cnames.structs._xlocale>? */, /*3*/ __format: kotlin.String?, /*4*/ __ap: platform.posix.va_list? /* = kotlinx.cinterop.CPointer<platform.posix.__va_list_tag>? */): kotlin.Int { TODO() }

fun vdxprintf_exec(/*0*/ __fd: kotlin.Int, /*1*/ __pc: platform.darwin.printf_comp_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_compiled>? */, /*2*/ __ap: platform.posix.va_list? /* = kotlinx.cinterop.CPointer<platform.posix.__va_list_tag>? */): kotlin.Int { TODO() }

fun vfxprintf(/*0*/ __stream: kotlinx.cinterop.CValuesRef<platform.posix.FILE /* = platform.posix.__sFILE */>?, /*1*/ __domain: platform.darwin.printf_domain_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_domain>? */, /*2*/ __loc: platform.posix.locale_t? /* = kotlinx.cinterop.CPointer<cnames.structs._xlocale>? */, /*3*/ __format: kotlin.String?, /*4*/ __ap: platform.posix.va_list? /* = kotlinx.cinterop.CPointer<platform.posix.__va_list_tag>? */): kotlin.Int { TODO() }

fun vfxprintf_exec(/*0*/ __stream: kotlinx.cinterop.CValuesRef<platform.posix.FILE /* = platform.posix.__sFILE */>?, /*1*/ __pc: platform.darwin.printf_comp_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_compiled>? */, /*2*/ __ap: platform.posix.va_list? /* = kotlinx.cinterop.CPointer<platform.posix.__va_list_tag>? */): kotlin.Int { TODO() }

fun vis(/*0*/ arg0: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ arg1: kotlin.Int, /*2*/ arg2: kotlin.Int, /*3*/ arg3: kotlin.Int): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun vm_allocate(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.vm_address_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_address_t /* = kotlin.ULong */> */>?, /*2*/ size: platform.darwin.vm_size_t /* = kotlin.ULong */, /*3*/ flags: kotlin.Int): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_allocate_cpm(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*2*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.vm_address_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_address_t /* = kotlin.ULong */> */>?, /*3*/ size: platform.darwin.vm_size_t /* = kotlin.ULong */, /*4*/ flags: kotlin.Int): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_behavior_set(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ address: platform.darwin.vm_address_t /* = kotlin.ULong */, /*2*/ size: platform.darwin.vm_size_t /* = kotlin.ULong */, /*3*/ new_behavior: platform.darwin.vm_behavior_t /* = kotlin.Int */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_copy(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ source_address: platform.darwin.vm_address_t /* = kotlin.ULong */, /*2*/ size: platform.darwin.vm_size_t /* = kotlin.ULong */, /*3*/ dest_address: platform.darwin.vm_address_t /* = kotlin.ULong */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_deallocate(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ address: platform.darwin.vm_address_t /* = kotlin.ULong */, /*2*/ size: platform.darwin.vm_size_t /* = kotlin.ULong */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_inherit(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ address: platform.darwin.vm_address_t /* = kotlin.ULong */, /*2*/ size: platform.darwin.vm_size_t /* = kotlin.ULong */, /*3*/ new_inheritance: platform.darwin.vm_inherit_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_machine_attribute(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ address: platform.darwin.vm_address_t /* = kotlin.ULong */, /*2*/ size: platform.darwin.vm_size_t /* = kotlin.ULong */, /*3*/ attribute: platform.darwin.vm_machine_attribute_t /* = kotlin.UInt */, /*4*/ value: kotlinx.cinterop.CValuesRef<platform.darwin.vm_machine_attribute_val_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.vm_machine_attribute_val_t /* = kotlin.Int */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_map(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.vm_address_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_address_t /* = kotlin.ULong */> */>?, /*2*/ size: platform.darwin.vm_size_t /* = kotlin.ULong */, /*3*/ mask: platform.darwin.vm_address_t /* = kotlin.ULong */, /*4*/ flags: kotlin.Int, /*5*/ `object`: platform.darwin.mem_entry_name_port_t /* = kotlin.UInt */, /*6*/ offset: platform.darwin.vm_offset_t /* = kotlin.ULong */, /*7*/ copy: platform.posix.boolean_t /* = kotlin.UInt */, /*8*/ cur_protection: platform.darwin.vm_prot_t /* = kotlin.Int */, /*9*/ max_protection: platform.darwin.vm_prot_t /* = kotlin.Int */, /*10*/ inheritance: platform.darwin.vm_inherit_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_map_64(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.vm_address_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_address_t /* = kotlin.ULong */> */>?, /*2*/ size: platform.darwin.vm_size_t /* = kotlin.ULong */, /*3*/ mask: platform.darwin.vm_address_t /* = kotlin.ULong */, /*4*/ flags: kotlin.Int, /*5*/ `object`: platform.darwin.mem_entry_name_port_t /* = kotlin.UInt */, /*6*/ offset: platform.darwin.memory_object_offset_t /* = kotlin.ULong */, /*7*/ copy: platform.posix.boolean_t /* = kotlin.UInt */, /*8*/ cur_protection: platform.darwin.vm_prot_t /* = kotlin.Int */, /*9*/ max_protection: platform.darwin.vm_prot_t /* = kotlin.Int */, /*10*/ inheritance: platform.darwin.vm_inherit_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_map_exec_lockdown(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_map_page_query(/*0*/ target_map: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ offset: platform.darwin.vm_offset_t /* = kotlin.ULong */, /*2*/ disposition: kotlinx.cinterop.CValuesRef<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>?, /*3*/ ref_count: kotlinx.cinterop.CValuesRef<platform.darwin.integer_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.integer_t /* = kotlin.Int */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_mapped_pages_info(/*0*/ task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ pages: kotlinx.cinterop.CValuesRef<platform.darwin.page_address_array_tVar /* = kotlinx.cinterop.CPointerVarOf<platform.darwin.page_address_array_t /* = kotlinx.cinterop.CPointer<platform.darwin.vm_offset_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_offset_t /* = kotlin.ULong */> */> */> */>?, /*2*/ pagesCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_msync(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ address: platform.darwin.vm_address_t /* = kotlin.ULong */, /*2*/ size: platform.darwin.vm_size_t /* = kotlin.ULong */, /*3*/ sync_flags: platform.darwin.vm_sync_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_protect(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ address: platform.darwin.vm_address_t /* = kotlin.ULong */, /*2*/ size: platform.darwin.vm_size_t /* = kotlin.ULong */, /*3*/ set_maximum: platform.posix.boolean_t /* = kotlin.UInt */, /*4*/ new_protection: platform.darwin.vm_prot_t /* = kotlin.Int */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_purgable_control(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ address: platform.darwin.vm_address_t /* = kotlin.ULong */, /*2*/ control: platform.darwin.vm_purgable_t /* = kotlin.Int */, /*3*/ state: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_read(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ address: platform.darwin.vm_address_t /* = kotlin.ULong */, /*2*/ size: platform.darwin.vm_size_t /* = kotlin.ULong */, /*3*/ data: kotlinx.cinterop.CValuesRef<platform.darwin.vm_offset_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_offset_t /* = kotlin.ULong */> */>?, /*4*/ dataCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_read_list(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ data_list: platform.darwin.vm_read_entry_t? /* = kotlinx.cinterop.CPointer<platform.darwin.vm_read_entry>? */, /*2*/ count: platform.darwin.natural_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_read_overwrite(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ address: platform.darwin.vm_address_t /* = kotlin.ULong */, /*2*/ size: platform.darwin.vm_size_t /* = kotlin.ULong */, /*3*/ data: platform.darwin.vm_address_t /* = kotlin.ULong */, /*4*/ outsize: kotlinx.cinterop.CValuesRef<platform.darwin.vm_size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_size_t /* = kotlin.ULong */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_region(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.vm_address_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_address_t /* = kotlin.ULong */> */>?, /*2*/ size: kotlinx.cinterop.CValuesRef<platform.darwin.vm_size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_size_t /* = kotlin.ULong */> */>?, /*3*/ flavor: platform.darwin.vm_region_flavor_t /* = kotlin.Int */, /*4*/ info: platform.darwin.vm_region_info_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>? */, /*5*/ infoCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?, /*6*/ object_name: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_region_64(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.vm_address_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_address_t /* = kotlin.ULong */> */>?, /*2*/ size: kotlinx.cinterop.CValuesRef<platform.darwin.vm_size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_size_t /* = kotlin.ULong */> */>?, /*3*/ flavor: platform.darwin.vm_region_flavor_t /* = kotlin.Int */, /*4*/ info: platform.darwin.vm_region_info_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>? */, /*5*/ infoCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?, /*6*/ object_name: kotlinx.cinterop.CValuesRef<platform.darwin.mach_port_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_port_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_region_recurse(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.vm_address_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_address_t /* = kotlin.ULong */> */>?, /*2*/ size: kotlinx.cinterop.CValuesRef<platform.darwin.vm_size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_size_t /* = kotlin.ULong */> */>?, /*3*/ nesting_depth: kotlinx.cinterop.CValuesRef<platform.darwin.natural_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */> */>?, /*4*/ info: platform.darwin.vm_region_recurse_info_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>? */, /*5*/ infoCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_region_recurse_64(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ address: kotlinx.cinterop.CValuesRef<platform.darwin.vm_address_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_address_t /* = kotlin.ULong */> */>?, /*2*/ size: kotlinx.cinterop.CValuesRef<platform.darwin.vm_size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_size_t /* = kotlin.ULong */> */>?, /*3*/ nesting_depth: kotlinx.cinterop.CValuesRef<platform.darwin.natural_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.natural_t /* = kotlin.UInt */> */>?, /*4*/ info: platform.darwin.vm_region_recurse_info_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.IntVar /* = kotlinx.cinterop.IntVarOf<kotlin.Int> */>? */, /*5*/ infoCnt: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_type_number_tVar /* = kotlinx.cinterop.UIntVarOf<platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */> */>?): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_remap(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ target_address: kotlinx.cinterop.CValuesRef<platform.darwin.vm_address_tVar /* = kotlinx.cinterop.ULongVarOf<platform.darwin.vm_address_t /* = kotlin.ULong */> */>?, /*2*/ size: platform.darwin.vm_size_t /* = kotlin.ULong */, /*3*/ mask: platform.darwin.vm_address_t /* = kotlin.ULong */, /*4*/ flags: kotlin.Int, /*5*/ src_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*6*/ src_address: platform.darwin.vm_address_t /* = kotlin.ULong */, /*7*/ copy: platform.posix.boolean_t /* = kotlin.UInt */, /*8*/ cur_protection: kotlinx.cinterop.CValuesRef<platform.darwin.vm_prot_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.vm_prot_t /* = kotlin.Int */> */>?, /*9*/ max_protection: kotlinx.cinterop.CValuesRef<platform.darwin.vm_prot_tVar /* = kotlinx.cinterop.IntVarOf<platform.darwin.vm_prot_t /* = kotlin.Int */> */>?, /*10*/ inheritance: platform.darwin.vm_inherit_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_wire(/*0*/ host_priv: platform.darwin.host_priv_t /* = kotlin.UInt */, /*1*/ task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*2*/ address: platform.darwin.vm_address_t /* = kotlin.ULong */, /*3*/ size: platform.darwin.vm_size_t /* = kotlin.ULong */, /*4*/ desired_access: platform.darwin.vm_prot_t /* = kotlin.Int */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun vm_write(/*0*/ target_task: platform.darwin.vm_map_t /* = kotlin.UInt */, /*1*/ address: platform.darwin.vm_address_t /* = kotlin.ULong */, /*2*/ data: platform.darwin.vm_offset_t /* = kotlin.ULong */, /*3*/ dataCnt: platform.darwin.mach_msg_type_number_t /* = kotlin.UInt */): platform.darwin.kern_return_t /* = kotlin.Int */ { TODO() }

fun voucher_mach_msg_adopt(/*0*/ msg: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_header_t>?): platform.darwin.voucher_mach_msg_state_t? /* = kotlinx.cinterop.CPointer<cnames.structs.voucher_mach_msg_state_s>? */ { TODO() }

fun voucher_mach_msg_clear(/*0*/ msg: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_header_t>?) { TODO() }

fun voucher_mach_msg_revert(/*0*/ state: platform.darwin.voucher_mach_msg_state_t? /* = kotlinx.cinterop.CPointer<cnames.structs.voucher_mach_msg_state_s>? */) { TODO() }

fun voucher_mach_msg_set(/*0*/ msg: kotlinx.cinterop.CValuesRef<platform.darwin.mach_msg_header_t>?): platform.posix.boolean_t /* = kotlin.UInt */ { TODO() }

fun vsxprintf(/*0*/ __str: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ __size: platform.posix.size_t /* = kotlin.ULong */, /*2*/ __domain: platform.darwin.printf_domain_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_domain>? */, /*3*/ __loc: platform.posix.locale_t? /* = kotlinx.cinterop.CPointer<cnames.structs._xlocale>? */, /*4*/ __format: kotlin.String?, /*5*/ __ap: platform.posix.va_list? /* = kotlinx.cinterop.CPointer<platform.posix.__va_list_tag>? */): kotlin.Int { TODO() }

fun vsxprintf_exec(/*0*/ __str: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, /*1*/ __size: platform.posix.size_t /* = kotlin.ULong */, /*2*/ __pc: platform.darwin.printf_comp_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_compiled>? */, /*3*/ __ap: platform.posix.va_list? /* = kotlinx.cinterop.CPointer<platform.posix.__va_list_tag>? */): kotlin.Int { TODO() }

fun vxprintf(/*0*/ __domain: platform.darwin.printf_domain_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_domain>? */, /*1*/ __loc: platform.posix.locale_t? /* = kotlinx.cinterop.CPointer<cnames.structs._xlocale>? */, /*2*/ __format: kotlin.String?, /*3*/ __ap: platform.posix.va_list? /* = kotlinx.cinterop.CPointer<platform.posix.__va_list_tag>? */): kotlin.Int { TODO() }

fun vxprintf_exec(/*0*/ __pc: platform.darwin.printf_comp_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_compiled>? */, /*1*/ __ap: platform.posix.va_list? /* = kotlinx.cinterop.CPointer<platform.posix.__va_list_tag>? */): kotlin.Int { TODO() }

fun wordexp(/*0*/ arg0: kotlin.String?, /*1*/ arg1: kotlinx.cinterop.CValuesRef<platform.darwin.wordexp_t>?, /*2*/ arg2: kotlin.Int): kotlin.Int { TODO() }

fun wordfree(/*0*/ arg0: kotlinx.cinterop.CValuesRef<platform.darwin.wordexp_t>?) { TODO() }

fun xattr_flags_from_name(/*0*/ arg0: kotlin.String?): platform.darwin.xattr_flags_t /* = kotlin.ULong */ { TODO() }

fun xattr_intent_with_flags(/*0*/ arg0: platform.darwin.xattr_operation_intent_t /* = kotlin.UInt */, /*1*/ arg1: platform.darwin.xattr_flags_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun xattr_name_with_flags(/*0*/ arg0: kotlin.String?, /*1*/ arg1: platform.darwin.xattr_flags_t /* = kotlin.ULong */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun xattr_name_without_flags(/*0*/ arg0: kotlin.String?): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun xattr_preserve_for_intent(/*0*/ arg0: kotlin.String?, /*1*/ arg1: platform.darwin.xattr_operation_intent_t /* = kotlin.UInt */): kotlin.Int { TODO() }

fun xpc_activity_copy_criteria(/*0*/ activity: platform.darwin.xpc_activity_t? /* = platform.darwin.NSObject? */): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_activity_get_state(/*0*/ activity: platform.darwin.xpc_activity_t? /* = platform.darwin.NSObject? */): platform.darwin.xpc_activity_state_t /* = kotlin.Long */ { TODO() }

fun xpc_activity_register(/*0*/ identifier: kotlin.String?, /*1*/ criteria: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*2*/ handler: platform.darwin.xpc_activity_handler_t? /* = ((platform.darwin.xpc_activity_t? /* = platform.darwin.NSObject? */) -> kotlin.Unit)? */) { TODO() }

fun xpc_activity_set_criteria(/*0*/ activity: platform.darwin.xpc_activity_t? /* = platform.darwin.NSObject? */, /*1*/ criteria: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */) { TODO() }

fun xpc_activity_set_state(/*0*/ activity: platform.darwin.xpc_activity_t? /* = platform.darwin.NSObject? */, /*1*/ state: platform.darwin.xpc_activity_state_t /* = kotlin.Long */): kotlin.Boolean { TODO() }

fun xpc_activity_should_defer(/*0*/ activity: platform.darwin.xpc_activity_t? /* = platform.darwin.NSObject? */): kotlin.Boolean { TODO() }

fun xpc_activity_unregister(/*0*/ identifier: kotlin.String?) { TODO() }

fun xpc_array_append_value(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ value: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */) { TODO() }

fun xpc_array_apply(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ applier: platform.darwin.xpc_array_applier_t? /* = ((platform.posix.size_t /* = kotlin.ULong */, platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */) -> kotlin.Boolean)? */): kotlin.Boolean { TODO() }

external fun xpc_array_create(/*0*/ objects: kotlinx.cinterop.CValuesRef<platform.darwin.xpc_object_tVar /* = kotlinx.cinterop.ObjCObjectVar<platform.darwin.xpc_object_t /* = platform.darwin.NSObject? */> */>?, /*1*/ count: platform.posix.size_t /* = kotlin.ULong */): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */

fun xpc_array_create_connection(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */): platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_array_dup_fd(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */): kotlin.Int { TODO() }

fun xpc_array_get_array(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_array_get_bool(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */): kotlin.Boolean { TODO() }

fun xpc_array_get_count(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): platform.posix.size_t /* = kotlin.ULong */ { TODO() }

fun xpc_array_get_data(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */, /*2*/ length: kotlinx.cinterop.CValuesRef<platform.posix.size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.size_t /* = kotlin.ULong */> */>?): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun xpc_array_get_date(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun xpc_array_get_dictionary(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_array_get_double(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */): kotlin.Double { TODO() }

fun xpc_array_get_int64(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun xpc_array_get_string(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun xpc_array_get_uint64(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun xpc_array_get_uuid(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */): kotlinx.cinterop.CPointer<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>? { TODO() }

fun xpc_array_get_value(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_array_set_bool(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */, /*2*/ value: kotlin.Boolean) { TODO() }

fun xpc_array_set_connection(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */, /*2*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */) { TODO() }

fun xpc_array_set_data(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */, /*2*/ bytes: kotlinx.cinterop.CValuesRef<*>?, /*3*/ length: platform.posix.size_t /* = kotlin.ULong */) { TODO() }

fun xpc_array_set_date(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */, /*2*/ value: platform.posix.int64_t /* = kotlin.Long */) { TODO() }

fun xpc_array_set_double(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */, /*2*/ value: kotlin.Double) { TODO() }

fun xpc_array_set_fd(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */, /*2*/ fd: kotlin.Int) { TODO() }

fun xpc_array_set_int64(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */, /*2*/ value: platform.posix.int64_t /* = kotlin.Long */) { TODO() }

fun xpc_array_set_string(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */, /*2*/ string: kotlin.String?) { TODO() }

fun xpc_array_set_uint64(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */, /*2*/ value: platform.posix.uint64_t /* = kotlin.ULong */) { TODO() }

fun xpc_array_set_uuid(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */, /*2*/ uuid: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>?) { TODO() }

fun xpc_array_set_value(/*0*/ xarray: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ index: platform.posix.size_t /* = kotlin.ULong */, /*2*/ value: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */) { TODO() }

fun xpc_bool_create(/*0*/ value: kotlin.Boolean): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_bool_get_value(/*0*/ xbool: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): kotlin.Boolean { TODO() }

fun xpc_connection_activate(/*0*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */) { TODO() }

fun xpc_connection_cancel(/*0*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */) { TODO() }

fun xpc_connection_create(/*0*/ name: kotlin.String?, /*1*/ targetq: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */): platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_connection_create_from_endpoint(/*0*/ endpoint: platform.darwin.xpc_endpoint_t? /* = platform.darwin.NSObject? */): platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_connection_create_mach_service(/*0*/ name: kotlin.String?, /*1*/ targetq: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*2*/ flags: platform.posix.uint64_t /* = kotlin.ULong */): platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_connection_get_asid(/*0*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */): platform.darwin.au_asid_t /* = kotlin.Int */ { TODO() }

fun xpc_connection_get_context(/*0*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun xpc_connection_get_egid(/*0*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */): platform.posix.gid_t /* = kotlin.UInt */ { TODO() }

fun xpc_connection_get_euid(/*0*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */): platform.posix.uid_t /* = kotlin.UInt */ { TODO() }

fun xpc_connection_get_name(/*0*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun xpc_connection_get_pid(/*0*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */): platform.posix.pid_t /* = kotlin.Int */ { TODO() }

fun xpc_connection_resume(/*0*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */) { TODO() }

fun xpc_connection_send_barrier(/*0*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */, /*1*/ barrier: platform.darwin.dispatch_block_t? /* = (() -> kotlin.Unit)? */) { TODO() }

fun xpc_connection_send_message(/*0*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */, /*1*/ message: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */) { TODO() }

fun xpc_connection_send_message_with_reply(/*0*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */, /*1*/ message: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*2*/ replyq: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*3*/ handler: platform.darwin.xpc_handler_t? /* = ((platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */) -> kotlin.Unit)? */) { TODO() }

fun xpc_connection_send_message_with_reply_sync(/*0*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */, /*1*/ message: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_connection_set_context(/*0*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */, /*1*/ context: kotlinx.cinterop.CValuesRef<*>?) { TODO() }

fun xpc_connection_set_event_handler(/*0*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */, /*1*/ handler: platform.darwin.xpc_handler_t? /* = ((platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */) -> kotlin.Unit)? */) { TODO() }

fun xpc_connection_set_finalizer_f(/*0*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */, /*1*/ finalizer: platform.darwin.xpc_finalizer_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */) -> kotlin.Unit>>? */) { TODO() }

fun xpc_connection_set_target_queue(/*0*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */, /*1*/ targetq: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */) { TODO() }

fun xpc_connection_suspend(/*0*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */) { TODO() }

fun xpc_copy(/*0*/ `object`: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_copy_description(/*0*/ `object`: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun xpc_data_create(/*0*/ bytes: kotlinx.cinterop.CValuesRef<*>?, /*1*/ length: platform.posix.size_t /* = kotlin.ULong */): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_data_create_with_dispatch_data(/*0*/ ddata: platform.darwin.dispatch_data_t? /* = platform.darwin.NSObject? */): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_data_get_bytes(/*0*/ xdata: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ buffer: kotlinx.cinterop.CValuesRef<*>?, /*2*/ off: platform.posix.size_t /* = kotlin.ULong */, /*3*/ length: platform.posix.size_t /* = kotlin.ULong */): platform.posix.size_t /* = kotlin.ULong */ { TODO() }

fun xpc_data_get_bytes_ptr(/*0*/ xdata: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun xpc_data_get_length(/*0*/ xdata: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): platform.posix.size_t /* = kotlin.ULong */ { TODO() }

fun xpc_date_create(/*0*/ interval: platform.posix.int64_t /* = kotlin.Long */): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_date_create_from_current(): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_date_get_value(/*0*/ xdate: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun xpc_debugger_api_misuse_info(): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun xpc_dictionary_apply(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ applier: platform.darwin.xpc_dictionary_applier_t? /* = ((kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>?, platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */) -> kotlin.Boolean)? */): kotlin.Boolean { TODO() }

external fun xpc_dictionary_create(/*0*/ keys: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.CPointerVar<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */> /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVarOf<kotlin.Byte>>> */>?, /*1*/ values: kotlinx.cinterop.CValuesRef<platform.darwin.xpc_object_tVar /* = kotlinx.cinterop.ObjCObjectVar<platform.darwin.xpc_object_t /* = platform.darwin.NSObject? */> */>?, /*2*/ count: platform.posix.size_t /* = kotlin.ULong */): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */

fun xpc_dictionary_create_connection(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?): platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_dictionary_create_reply(/*0*/ original: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_dictionary_dup_fd(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?): kotlin.Int { TODO() }

fun xpc_dictionary_get_array(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_dictionary_get_bool(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?): kotlin.Boolean { TODO() }

fun xpc_dictionary_get_count(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): platform.posix.size_t /* = kotlin.ULong */ { TODO() }

fun xpc_dictionary_get_data(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?, /*2*/ length: kotlinx.cinterop.CValuesRef<platform.posix.size_tVar /* = kotlinx.cinterop.ULongVarOf<platform.posix.size_t /* = kotlin.ULong */> */>?): kotlinx.cinterop.COpaquePointer? /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed>? */ { TODO() }

fun xpc_dictionary_get_date(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun xpc_dictionary_get_dictionary(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_dictionary_get_double(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?): kotlin.Double { TODO() }

fun xpc_dictionary_get_int64(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun xpc_dictionary_get_remote_connection(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_dictionary_get_string(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun xpc_dictionary_get_uint64(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun xpc_dictionary_get_uuid(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?): kotlinx.cinterop.CPointer<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>? { TODO() }

fun xpc_dictionary_get_value(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_dictionary_set_bool(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?, /*2*/ value: kotlin.Boolean) { TODO() }

fun xpc_dictionary_set_connection(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?, /*2*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */) { TODO() }

fun xpc_dictionary_set_data(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?, /*2*/ bytes: kotlinx.cinterop.CValuesRef<*>?, /*3*/ length: platform.posix.size_t /* = kotlin.ULong */) { TODO() }

fun xpc_dictionary_set_date(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?, /*2*/ value: platform.posix.int64_t /* = kotlin.Long */) { TODO() }

fun xpc_dictionary_set_double(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?, /*2*/ value: kotlin.Double) { TODO() }

fun xpc_dictionary_set_fd(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?, /*2*/ fd: kotlin.Int) { TODO() }

fun xpc_dictionary_set_int64(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?, /*2*/ value: platform.posix.int64_t /* = kotlin.Long */) { TODO() }

fun xpc_dictionary_set_string(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?, /*2*/ string: kotlin.String?) { TODO() }

fun xpc_dictionary_set_uint64(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?, /*2*/ value: platform.posix.uint64_t /* = kotlin.ULong */) { TODO() }

fun xpc_dictionary_set_uuid(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?, /*2*/ uuid: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>?) { TODO() }

fun xpc_dictionary_set_value(/*0*/ xdict: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ key: kotlin.String?, /*2*/ value: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */) { TODO() }

fun xpc_double_create(/*0*/ value: kotlin.Double): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_double_get_value(/*0*/ xdouble: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): kotlin.Double { TODO() }

fun xpc_endpoint_create(/*0*/ connection: platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */): platform.darwin.xpc_endpoint_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_equal(/*0*/ object1: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ object2: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): kotlin.Boolean { TODO() }

fun xpc_fd_create(/*0*/ fd: kotlin.Int): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_fd_dup(/*0*/ xfd: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): kotlin.Int { TODO() }

fun xpc_get_type(/*0*/ `object`: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): platform.darwin.xpc_type_t? /* = kotlinx.cinterop.CPointer<cnames.structs._xpc_type_s>? */ { TODO() }

fun xpc_hash(/*0*/ `object`: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): platform.posix.size_t /* = kotlin.ULong */ { TODO() }

fun xpc_int64_create(/*0*/ value: platform.posix.int64_t /* = kotlin.Long */): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_int64_get_value(/*0*/ xint: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): platform.posix.int64_t /* = kotlin.Long */ { TODO() }

fun xpc_main(/*0*/ handler: platform.darwin.xpc_connection_handler_t? /* = kotlinx.cinterop.CPointer<kotlinx.cinterop.CFunction<(platform.darwin.xpc_connection_t? /* = platform.darwin.NSObject? */) -> kotlin.Unit>>? */) { TODO() }

fun xpc_null_create(): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

external fun xpc_release(/*0*/ `object`: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */)

external fun xpc_retain(/*0*/ `object`: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */

fun xpc_set_event_stream_handler(/*0*/ stream: kotlin.String?, /*1*/ targetq: platform.darwin.dispatch_queue_t? /* = platform.darwin.NSObject? */, /*2*/ handler: platform.darwin.xpc_handler_t? /* = ((platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */) -> kotlin.Unit)? */) { TODO() }

fun xpc_shmem_create(/*0*/ region: kotlinx.cinterop.CValuesRef<*>?, /*1*/ length: platform.posix.size_t /* = kotlin.ULong */): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_shmem_map(/*0*/ xshmem: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */, /*1*/ region: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.COpaquePointerVar /* = kotlinx.cinterop.CPointerVarOf<kotlinx.cinterop.COpaquePointer /* = kotlinx.cinterop.CPointer<out kotlinx.cinterop.CPointed> */> */>?): platform.posix.size_t /* = kotlin.ULong */ { TODO() }

fun xpc_string_create(/*0*/ string: kotlin.String?): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_string_create_with_format_and_arguments(/*0*/ fmt: kotlin.String?, /*1*/ ap: platform.posix.va_list? /* = kotlinx.cinterop.CPointer<platform.posix.__va_list_tag>? */): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_string_get_length(/*0*/ xstring: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): platform.posix.size_t /* = kotlin.ULong */ { TODO() }

fun xpc_string_get_string_ptr(/*0*/ xstring: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): kotlinx.cinterop.CPointer<kotlinx.cinterop.ByteVar /* = kotlinx.cinterop.ByteVarOf<kotlin.Byte> */>? { TODO() }

fun xpc_transaction_begin() { TODO() }

fun xpc_transaction_end() { TODO() }

fun xpc_uint64_create(/*0*/ value: platform.posix.uint64_t /* = kotlin.ULong */): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_uint64_get_value(/*0*/ xuint: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): platform.posix.uint64_t /* = kotlin.ULong */ { TODO() }

fun xpc_uuid_create(/*0*/ uuid: kotlinx.cinterop.CValuesRef<kotlinx.cinterop.UByteVar /* = kotlinx.cinterop.UByteVarOf<kotlin.UByte> */>?): platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */ { TODO() }

fun xpc_uuid_get_bytes(/*0*/ xuuid: platform.darwin.xpc_object_t? /* = platform.darwin.NSObject? */): kotlinx.cinterop.CPointer<platform.posix.uint8_tVar /* = kotlinx.cinterop.UByteVarOf<platform.posix.uint8_t /* = kotlin.UByte */> */>? { TODO() }

fun xprintf(/*0*/ __domain: platform.darwin.printf_domain_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_domain>? */, /*1*/ __loc: platform.posix.locale_t? /* = kotlinx.cinterop.CPointer<cnames.structs._xlocale>? */, /*2*/ __format: kotlin.String?, /*3*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): kotlin.Int { TODO() }

fun xprintf_exec(/*0*/ __pc: platform.darwin.printf_comp_t? /* = kotlinx.cinterop.CPointer<cnames.structs._printf_compiled>? */, /*1*/ vararg variadicArguments: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): kotlin.Int { TODO() }


